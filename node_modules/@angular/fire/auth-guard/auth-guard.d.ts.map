{"version":3,"file":"auth-guard.d.ts","sources":["auth-guard.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable, UnaryFunction } from 'rxjs';\nimport { User, auth } from 'firebase/app';\nimport { AngularFireAuth } from '@angular/fire/auth';\nexport declare type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport declare type AuthPipe = UnaryFunction<Observable<User | null>, Observable<boolean | any[]>>;\nexport declare class AngularFireAuthGuard implements CanActivate {\n    private afAuth;\n    private router;\n    constructor(afAuth: AngularFireAuth, router: Router);\n    canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;\n}\nexport declare const canActivate: (pipe: UnaryFunction<Observable<User | null>, Observable<boolean | any[]>> | AuthPipeGenerator) => {\n    canActivate: (typeof AngularFireAuthGuard)[];\n    data: {\n        authGuardPipe: UnaryFunction<Observable<User | null>, Observable<boolean | any[]>> | AuthPipeGenerator | (() => UnaryFunction<Observable<User | null>, Observable<boolean | any[]>> | AuthPipeGenerator);\n    };\n};\nexport declare const loggedIn: AuthPipe;\nexport declare const isNotAnonymous: AuthPipe;\nexport declare const idTokenResult: import(\"rxjs\").OperatorFunction<User | null, auth.IdTokenResult | null>;\nexport declare const emailVerified: AuthPipe;\nexport declare const customClaims: UnaryFunction<Observable<User | null>, Observable<{\n    [key: string]: any;\n}>>;\nexport declare const hasCustomClaim: (claim: string) => UnaryFunction<Observable<User | null>, Observable<boolean>>;\nexport declare const redirectUnauthorizedTo: (redirect: any[]) => UnaryFunction<Observable<User | null>, Observable<true | any[]>>;\nexport declare const redirectLoggedInTo: (redirect: any[]) => UnaryFunction<Observable<User | null>, Observable<true | any[]>>;\n"]}