{"version":3,"file":"remote-config.d.ts","sources":["remote-config.d.ts"],"names":[],"mappingssourcesContent":["import { NgZone, InjectionToken } from '@angular/core';\nimport { Observable, OperatorFunction, MonoTypeOperatorFunction } from 'rxjs';\nimport { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';\nimport { remoteConfig } from 'firebase/app';\nexport interface ConfigTemplate {\n    [key: string]: string | number | boolean;\n}\nexport declare const SETTINGS: InjectionToken<remoteConfig.Settings>;\nexport declare const DEFAULTS: InjectionToken<ConfigTemplate>;\ndeclare type RemoteConfigProxy = {\n    activate: () => Promise<boolean>;\n    ensureInitialized: () => Promise<void>;\n    fetch: () => Promise<void>;\n    fetchAndActivate: () => Promise<boolean>;\n    getAll: () => Promise<{\n        [key: string]: remoteConfig.Value;\n    }>;\n    getBoolean: (key: string) => Promise<boolean>;\n    getNumber: (key: string) => Promise<number>;\n    getString: (key: string) => Promise<string>;\n    getValue: (key: string) => Promise<remoteConfig.Value>;\n    setLogLevel: (logLevel: remoteConfig.LogLevel) => Promise<void>;\n    settings: Promise<remoteConfig.Settings>;\n    defaultConfig: Promise<{\n        [key: string]: string | number | boolean;\n    }>;\n    fetchTimeMillis: Promise<number>;\n    lastFetchStatus: Promise<remoteConfig.FetchStatus>;\n};\nexport interface AngularFireRemoteConfig extends RemoteConfigProxy {\n}\nexport declare class Value implements Partial<remoteConfig.Value> {\n    _source: remoteConfig.ValueSource;\n    _value: string;\n    asBoolean(): boolean;\n    asString(): string;\n    asNumber(): number;\n    getSource(): remoteConfig.ValueSource;\n    constructor(_source: remoteConfig.ValueSource, _value: string);\n}\nexport declare class Parameter extends Value {\n    key: string;\n    fetchTimeMillis: number;\n    constructor(key: string, fetchTimeMillis: number, source: remoteConfig.ValueSource, value: string);\n}\nexport declare const filterRemote: () => MonoTypeOperatorFunction<Parameter | Parameter[]>;\nexport declare const filterFresh: (howRecentInMillis: number) => MonoTypeOperatorFunction<Parameter | Parameter[]>;\nexport declare class AngularFireRemoteConfig {\n    private zone;\n    readonly changes: Observable<Parameter>;\n    readonly parameters: Observable<Parameter[]>;\n    readonly numbers: Observable<{\n        [key: string]: number | undefined;\n    }> & {\n        [key: string]: Observable<number>;\n    };\n    readonly booleans: Observable<{\n        [key: string]: boolean | undefined;\n    }> & {\n        [key: string]: Observable<boolean>;\n    };\n    readonly strings: Observable<{\n        [key: string]: string | undefined;\n    }> & {\n        [key: string]: Observable<string | undefined>;\n    };\n    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, settings: remoteConfig.Settings | null, defaultConfig: ConfigTemplate | null, zone: NgZone);\n}\nexport declare const budget: <T>(interval: number) => MonoTypeOperatorFunction<T>;\nexport declare function scanToObject(): OperatorFunction<Parameter, {\n    [key: string]: string | undefined;\n}>;\nexport declare function scanToObject(to: 'numbers'): OperatorFunction<Parameter, {\n    [key: string]: number | undefined;\n}>;\nexport declare function scanToObject(to: 'booleans'): OperatorFunction<Parameter, {\n    [key: string]: boolean | undefined;\n}>;\nexport declare function scanToObject(to: 'strings'): OperatorFunction<Parameter, {\n    [key: string]: string | undefined;\n}>;\nexport declare function scanToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter, T & {\n    [key: string]: string | undefined;\n}>;\nexport declare function mapToObject(): OperatorFunction<Parameter[], {\n    [key: string]: string | undefined;\n}>;\nexport declare function mapToObject(to: 'numbers'): OperatorFunction<Parameter[], {\n    [key: string]: number | undefined;\n}>;\nexport declare function mapToObject(to: 'booleans'): OperatorFunction<Parameter[], {\n    [key: string]: boolean | undefined;\n}>;\nexport declare function mapToObject(to: 'strings'): OperatorFunction<Parameter[], {\n    [key: string]: string | undefined;\n}>;\nexport declare function mapToObject<T extends ConfigTemplate>(template: T): OperatorFunction<Parameter[], T & {\n    [key: string]: string | undefined;\n}>;\nexport {};\n"]}