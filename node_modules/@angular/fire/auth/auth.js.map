{"version":3,"file":"auth.js","sources":["../../../src/auth/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAoD,mBAAmB,EAAE,sBAAsB,EAAE,8BAA8B,EAAE,MAAM,eAAe,CAAC;AAInM;AAEK,IA2BH,yBAC4B,OAAuB,EACV,YAAoD,EACtE,UAAkB,EACvC,IAAY;AACb,QALD,iBA4BC;AACH,QAvBI,IAAM,sBAAsB,GAAG,8BAA8B,CAAC,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;AAChH,QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC;AACjC,YAAA,IAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AACnE,YAAM,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AACxB,QAAI,CAAC,CAAC,CAAC;AACP,QACI,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,CAAc,UAAA,UAAU;AAAI,YACzD,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAxC,CAAwC,CAAC,CAAC;AACpF,QAAI,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAAC,QAAD,CAAC;AACrC,QACI,IAAI,CAAC,IAAI,GAAG,IAAI,UAAU,CAAc,UAAA,UAAU;AAAI,YACpD,OAAO,IAAI,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAtC,CAAsC,CAAC,CAAC;AAClF,QAAI,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AACpC,QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAA,IAAI;AAAI,YAC9C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AACtD,QAAI,CAAC,CAAC,CAAC,CAAC;AACR,QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAA,IAAI;AAAI,YACpD,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AAC5D,QAAI,CAAC,CAAC,CAAC,CAAC;AACR,IAAE,CAAC;AACH,IA1Da,eAAe,wBAD3B,UAAU,EAAE,rBACL,CA8BH,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;AAAE,QAC1B,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAAE,QACvC,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;AAAE,yDAAW,MAAM;AAC3C,YAAU,MAAM;AACd,OAlCW,eAAe,CA2D3B;;;;;;;;;;;;;;;;2DACD;AAAC,IADD,sBAAC;AACA,CADA,AA3DD,IA2DC;AACD,SA5Da,eAAe;AAE5B","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { FIREBASE_OPTIONS, FIREBASE_APP_NAME, FirebaseOptions, FirebaseAppConfig, FirebaseAuth, _firebaseAppFactory, ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory } from '@angular/fire';\nimport { User, auth } from 'firebase/app';\n\n@Injectable()\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: FirebaseAuth;\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(new ɵAngularFireSchedulers(zone), platformId);\n\n    this.auth = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(options, zone, nameOrConfig);\n      return app.auth();\n    });\n\n    this.authState = new Observable<User | null>(subscriber => {\n      return zone.runOutsideAngular(() => this.auth.onAuthStateChanged(subscriber));\n    }).pipe(keepUnstableUntilFirst);;\n\n    this.user = new Observable<User | null>(subscriber => {\n      return zone.runOutsideAngular(() => this.auth.onIdTokenChanged(subscriber));\n    }).pipe(keepUnstableUntilFirst);\n\n    this.idToken = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdToken()) : of(null)\n    }));\n\n    this.idTokenResult = this.user.pipe(switchMap(user => {\n      return user ? from(user.getIdTokenResult()) : of(null)\n    }));\n  }\n\n}\n"]}