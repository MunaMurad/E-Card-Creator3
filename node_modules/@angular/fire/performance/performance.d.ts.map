{"version":3,"file":"performance.d.ts","sources":["performance.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone, ApplicationRef, InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { performance } from 'firebase/app';\nimport { FirebaseApp } from '@angular/fire';\nexport declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;\nexport declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;\nexport declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;\nexport declare type TraceOptions = {\n    metrics?: {\n        [key: string]: number;\n    };\n    attributes?: {\n        [key: string]: string;\n    };\n    attribute$?: {\n        [key: string]: Observable<string>;\n    };\n    incrementMetric$?: {\n        [key: string]: Observable<number | void | null | undefined>;\n    };\n    metric$?: {\n        [key: string]: Observable<number>;\n    };\n};\nexport declare class AngularFirePerformance {\n    private zone;\n    performance: Observable<performance.Performance>;\n    constructor(app: FirebaseApp, automaticallyTraceCoreNgMetrics: boolean | null, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, appRef: ApplicationRef, zone: NgZone);\n    trace$: (name: string, options?: TraceOptions | undefined) => Observable<void>;\n    traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: (TraceOptions & {\n        orComplete?: boolean | undefined;\n    }) | undefined) => (source$: Observable<T>) => Observable<T>;\n    traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: (TraceOptions & {\n        orComplete?: boolean | undefined;\n    }) | undefined) => (source$: Observable<T>) => Observable<T>;\n    traceUntilComplete: <T = any>(name: string, options?: TraceOptions | undefined) => (source$: Observable<T>) => Observable<T>;\n    traceUntilFirst: <T = any>(name: string, options?: TraceOptions | undefined) => (source$: Observable<T>) => Observable<T>;\n    trace: <T = any>(name: string, options?: TraceOptions | undefined) => (source$: Observable<T>) => Observable<T>;\n}\n"]}