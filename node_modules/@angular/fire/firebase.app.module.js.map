{"version":3,"file":"firebase.app.module.js","sources":["../../src/core/firebase.app.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken, NgModule, Optional, NgZone, VERSION as NG_VERSION, Version, Inject, PLATFORM_ID } from '@angular/core';\nimport { auth, database, messaging, storage, firestore, functions } from 'firebase/app';\n// @ts-ignore (https://github.com/firebase/firebase-js-sdk/pull/1206)\nimport firebase from 'firebase/app'; // once fixed can pull in as \"default as firebase\" above\n\n// Public types don't expose FirebaseOptions or FirebaseAppConfig\nexport type FirebaseOptions = {[key:string]: any};\nexport type FirebaseAppConfig = {[key:string]: any};\n\n// SEMVER drop FirebaseOptionsToken and FirebaseNameOrConfigToken in favor of FIREBASE_OPTIONS and FIREBASE_APP_NAME in next major\nexport const FirebaseOptionsToken = new InjectionToken<FirebaseOptions>('angularfire2.app.options');\nexport const FirebaseNameOrConfigToken = new InjectionToken<string|FirebaseAppConfig|undefined>('angularfire2.app.nameOrConfig');\n\nexport const FIREBASE_OPTIONS = FirebaseOptionsToken;\nexport const FIREBASE_APP_NAME = FirebaseNameOrConfigToken;\n\nexport type FirebaseDatabase = database.Database;\nexport type FirebaseAuth = auth.Auth;\n// SEMVER analytics.Analytics;\nexport type FirebaseAnalytics = any;\nexport type FirebaseMessaging = messaging.Messaging;\n// SEMVER performance.Performance\nexport type FirebasePerformance = any;\nexport type FirebaseStorage = storage.Storage;\nexport type FirebaseFirestore = firestore.Firestore;\nexport type FirebaseFunctions = functions.Functions;\n// SEMVER remoteConfig.RemoteConfig;\nexport type FirebaseRemoteConfig = any;\n\n// Have to implement as we need to return a class from the provider, we should consider exporting\n// this in the firebase/app types as this is our highest risk of breaks\nexport class FirebaseApp {\n    name: string;\n    options: {};\n    analytics: () => FirebaseAnalytics;\n    auth: () => FirebaseAuth;\n    database: (databaseURL?: string) => FirebaseDatabase;\n    messaging: () => FirebaseMessaging;\n    performance: () => FirebasePerformance;\n    storage: (storageBucket?: string) => FirebaseStorage;\n    delete: () => Promise<void>;\n    firestore: () => FirebaseFirestore;\n    functions: (region?: string) => FirebaseFunctions;\n    remoteConfig: () => FirebaseRemoteConfig;\n}\n\nexport const VERSION = new Version('ANGULARFIRE2_VERSION');\n\nexport function _firebaseAppFactory(options: FirebaseOptions, zone: NgZone, nameOrConfig?: string|FirebaseAppConfig|null) {\n    const name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n    const config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n    config.name = config.name || name;\n    // Added any due to some inconsistency between @firebase/app and firebase types\n    const existingApp = firebase.apps.filter(app => app && app.name === config.name)[0] as any;\n    // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n    // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n    return (existingApp || zone.runOutsideAngular(() => firebase.initializeApp(options, config as any))) as FirebaseApp;\n}\n\nconst FirebaseAppProvider = {\n    provide: FirebaseApp,\n    useFactory: _firebaseAppFactory,\n    deps: [\n        FIREBASE_OPTIONS,\n        NgZone,\n        [new Optional(), FIREBASE_APP_NAME]\n    ]\n};\n \n@NgModule({\n    providers: [ FirebaseAppProvider ],\n})\nexport class AngularFireModule {\n    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig) {\n        return {\n            ngModule: AngularFireModule,\n            providers: [\n                { provide: FIREBASE_OPTIONS, useValue: options },\n                { provide: FIREBASE_APP_NAME, useValue: nameOrConfig }\n            ]\n        }\n    }\n    constructor(@Inject(PLATFORM_ID) platformId:Object ) {\n        if (firebase.registerVersion) {\n            firebase.registerVersion('angularfire', VERSION.full, platformId.toString());\n            firebase.registerVersion('angular', NG_VERSION.full);\n        }\n    }\n}"]}