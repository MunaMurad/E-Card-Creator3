{"version":3,"file":"analytics.d.ts","sources":["analytics.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { NgZone, InjectionToken } from '@angular/core';\nimport { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';\nimport { analytics, app } from 'firebase';\nexport interface Config {\n    [key: string]: any;\n}\nexport declare const COLLECTION_ENABLED: InjectionToken<boolean>;\nexport declare const APP_VERSION: InjectionToken<string>;\nexport declare const APP_NAME: InjectionToken<string>;\nexport declare const DEBUG_MODE: InjectionToken<boolean>;\nexport declare const CONFIG: InjectionToken<Config>;\ndeclare type AnalyticsProxy = {\n    logEvent(eventName: string, eventParams?: {\n        [key: string]: any;\n    }, options?: analytics.AnalyticsCallOptions): Promise<void>;\n    setCurrentScreen(screenName: string, options?: analytics.AnalyticsCallOptions): Promise<void>;\n    setUserId(id: string, options?: analytics.AnalyticsCallOptions): Promise<void>;\n    setUserProperties(properties: analytics.CustomParams, options?: analytics.AnalyticsCallOptions): Promise<void>;\n    setAnalyticsCollectionEnabled(enabled: boolean): Promise<void>;\n    app: Promise<app.App>;\n};\nexport interface AngularFireAnalytics extends AnalyticsProxy {\n}\nexport declare class AngularFireAnalytics {\n    private options;\n    private gtag;\n    private analyticsInitialized;\n    updateConfig(config: Config): Promise<void>;\n    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, analyticsCollectionEnabled: boolean | null, providedAppVersion: string | null, providedAppName: string | null, debugModeEnabled: boolean | null, providedConfig: Config | null, platformId: Object, zone: NgZone);\n}\nexport {};\n"]}