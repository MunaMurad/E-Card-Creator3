{"version":3,"file":"analytics.js","sources":["../../../src/analytics/analytics.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAClG,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAC1B,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC7E,OAAO,EAAsC,aAAa,EAAqB,gBAAgB,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAC;AAG5I,CAAC;AAE5C,MAAM,CAAC,IAAM,kBAAkB,GAAG,IAAI,cAAc,CAAU,mDAAmD,CAAC,CAAC;AACnH,MAAM,CAAC,IAAM,WAAW,GAAG,IAAI,cAAc,CAAS,mCAAmC,CAAC,CAAC;AAC3F,MAAM,CAAC,IAAM,QAAQ,GAAG,IAAI,cAAc,CAAS,gCAAgC,CAAC,CAAC;AACrF,MAAM,CAAC,IAAM,UAAU,GAAG,IAAI,cAAc,CAAU,kCAAkC,CAAC,CAAC;AAC1F,MAAM,CAAC,IAAM,MAAM,GAAG,IAAI,cAAc,CAAS,+BAA+B,CAAC,CAAC;AAElF,IAAM,YAAY,GAAG,UAAU,CAAC;AAChC,IAAM,eAAe,GAAG,aAAa,CAAC;AACtC,IAAM,cAAc,GAAG,YAAY,CAAC;AACpC,IAAM,kBAAkB,GAAG,eAAe,CAAC;AAC3C,IAAM,mBAAmB,GAAG,QAAQ,CAAC;AACrC,IAAM,kBAAkB,GAAG,MAAM,CAAC;AAClC,IAAM,eAAe,GAAG,WAAW,CAAC;AAc2B,CAAC;AAGhE;AAEK,IAQH,8BACoC,OAAuB,EAClB,YAAoD,EACnD,0BAAuC,EAC9C,kBAA8B,EACjC,eAA2B,EACzB,gBAA6B,EACjC,cAA0B,EACjC,UAAiB,EACtC,IAAY;AACb,QAVD,iBAsDC;AACH;AACuB,QAvDe,YAAO,GAAP,OAAO,CAAgB;AAAC,QAW1D,IAAM,UAAU,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACxD,QACI,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;AACvC,YACM,MAAM,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;AAC9D,YAAM,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,cAAa,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC,CAAC,CAAA;AACtG,YAAM,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,iBAAiB,CAAC;AACjD,gBAAA,OAAA,IAAI,OAAO,CAAC,UAAA,OAAO;AAAI,oBACrB,MAAM,CAAC,kBAAkB,CAAC,GAAG;AAAc,wBAAb,cAAc;AAAC,6BAAf,UAAc,EAAd,qBAAc,EAAd,IAAc;AAAI,4BAAlB,yBAAc;AAAC;AACnC,wBAAR,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;AAAE,4BAAA,OAAO,EAAE,CAAA;AAAC,yBAAC;AAC9C,wBAAY,KAAI,CAAC,IAAI,OAAT,KAAI,EAAS,IAAI,EAAE;AAC/B,oBAAU,CAAC,CAAA;AACX,gBAAQ,CAAC,CAAC;AACT,YANO,CAKE,CACH,CAAC;AACR,SACK;AAAC,aAAK;AACX,YACM,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AACpD,YAAM,IAAI,CAAC,IAAI,GAAG,cAAO,CAAC,CAAA;AAC1B,SACK;AACL,QACI,IAAI,cAAc,EAAM;AAAE,YAAA,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAA;AAAC,SAAC;AACjE,QAAI,IAAI,eAAe,EAAK;AAAE,YAAA,IAAI,CAAC,YAAY,WAAG,GAAC,YAAY,IAAM,eAAe,MAAG,CAAA;AAAC,SAAC;AACzF,QAAI,IAAI,kBAAkB,EAAE;AAAE,YAAA,IAAI,CAAC,YAAY,WAAG,GAAC,eAAe,IAAG,kBAAkB,MAAG,CAAA;AAAC,SAAC;AAC5F,QAAI,IAAI,gBAAgB,EAAI;AAAE,YAAA,IAAI,CAAC,YAAY,WAAG,GAAC,cAAc,IAAI,CAAC,MAAG,CAAA;AAAC,SAAC;AAC3E,QACI,IAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAClC,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,EAEpC,SAAS,CAAC,cAAM,OAAA,MAAM,CAAC,oBAAoB,CAAC,EAA5B,CAA4B,CAAC,EAC7C,GAAG,CAAC,cAAM,OAAA,mBAAmB,CAAC,OAAO,EAAE,IAAI,EAAE,YAAY,CAAC,EAAhD,CAAgD,CAAC,EAE3D,GAAG,CAAC,UAAA,GAAG,IAAI,OAAqB,GAAG,CAAC,SAAS,EAAE,EAApC,CAAoC,CAAC,EAChD,GAAG,CAAC,UAAA,SAAS;AAAI,YACf,IAAI,0BAA0B,KAAK,KAAK,EAAE;AAAE,gBAAA,SAAS,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAA;AAAC,aAAC;AACpG,QAAM,CAAC,CAAC,EACF,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAChD,CAAC;AACN,QACI,OAAO,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AAChD,IACE,CAAC;AACH,IA5DQ,2CAAY,GAAlB,UAAmB,MAAc;AACnC;AACwB;AAAqD;AAGrE,4BAJJ,WAAM,IAAI,CAAC,oBAAoB,EAAA;AAAC;AACT,wBADvB,SAA+B,CAAC;AACpC,wBAAI,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,eAAO,MAAM,IAAE,MAAM,EAAE,IAAI,IAAG,CAAC;AAClG;AAGe;AAAkB;AAAgB;AAAY,KAH1D;AACH,IADG,CAAC;AACJ,IATa,oBAAoB,wBADhC,UAAU,EAAE,rBACL,CAWH,WAAA,MAAM,CAAC,gBAAgB,CAAC,CAAA;AAAE,QAC1B,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,iBAAiB,CAAC,CAAA;AAAE,QACvC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,kBAAkB,CAAC,CAAA;AAAE,QACxC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;AAAE,QACjC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;AAAE,QAC9B,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;AAAE,QAChC,WAAA,QAAQ,EAAE,CAAA,EAAE,WAAA,MAAM,CAAC,MAAM,CAAC,CAAA;AAAE,QAC5B,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;AAAE,iGAAU,MAAM;AAC1C,YAAU,MAAM;AACd,OApBW,oBAAoB,CAkEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAAC;AAAC,IAAH,2BAAC;AAAE,CAAF,AAlED,IAkEC;AAAC,SAlEW,oBAAoB;AAEjC","sourcesContent":["import { Injectable, Inject, Optional, NgZone, InjectionToken, PLATFORM_ID } from '@angular/core';\nimport { of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport { map, tap, shareReplay, switchMap, observeOn } from 'rxjs/operators';\nimport { FirebaseAppConfig, FirebaseOptions, ɵlazySDKProxy, FirebaseAnalytics, FIREBASE_OPTIONS, FIREBASE_APP_NAME, _firebaseAppFactory, ɵAngularFireSchedulers } from '@angular/fire';\nimport { analytics, app } from 'firebase';\n\nexport interface Config {[key:string]: any};\n\nexport const COLLECTION_ENABLED = new InjectionToken<boolean>('angularfire2.analytics.analyticsCollectionEnabled');\nexport const APP_VERSION = new InjectionToken<string>('angularfire2.analytics.appVersion');\nexport const APP_NAME = new InjectionToken<string>('angularfire2.analytics.appName');\nexport const DEBUG_MODE = new InjectionToken<boolean>('angularfire2.analytics.debugMode');\nexport const CONFIG = new InjectionToken<Config>('angularfire2.analytics.config');\n\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst ANALYTICS_ID_FIELD = 'measurementId';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag';\nconst DATA_LAYER_NAME = 'dataLayer';\n\n// SEMVER: once we move to Typescript 3.6 use `PromiseProxy<analytics.Analytics>`\ntype AnalyticsProxy = {\n  // TODO can we pull the richer types from the Firebase SDK .d.ts? ReturnType<T[K]> is infering\n  //      I could even do this in a manual build-step\n  logEvent(eventName: string, eventParams?: {[key: string]: any}, options?: analytics.AnalyticsCallOptions): Promise<void>,\n  setCurrentScreen(screenName: string, options?: analytics.AnalyticsCallOptions): Promise<void>,\n  setUserId(id: string, options?: analytics.AnalyticsCallOptions): Promise<void>,\n  setUserProperties(properties: analytics.CustomParams, options?: analytics.AnalyticsCallOptions): Promise<void>,\n  setAnalyticsCollectionEnabled(enabled: boolean): Promise<void>,\n  app: Promise<app.App>\n};\n\nexport interface AngularFireAnalytics extends AnalyticsProxy {};\n\n@Injectable()\nexport class AngularFireAnalytics {\n\n  private gtag: (...args: any[]) => void;\n  private analyticsInitialized: Promise<void>;\n\n  async updateConfig(config: Config) {\n    await this.analyticsInitialized;\n    this.gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], { ...config, update: true });\n  };\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) private options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(COLLECTION_ENABLED) analyticsCollectionEnabled:boolean|null,\n    @Optional() @Inject(APP_VERSION) providedAppVersion:string|null,\n    @Optional() @Inject(APP_NAME) providedAppName:string|null,\n    @Optional() @Inject(DEBUG_MODE) debugModeEnabled:boolean|null,\n    @Optional() @Inject(CONFIG) providedConfig:Config|null,\n    @Inject(PLATFORM_ID) platformId:Object,\n    zone: NgZone\n  ) {\n\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    if (isPlatformBrowser(platformId)) {\n\n      window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n      this.gtag = window[GTAG_FUNCTION_NAME] || function() { window[DATA_LAYER_NAME].push(arguments) }\n      this.analyticsInitialized = zone.runOutsideAngular(() =>\n        new Promise(resolve => {\n          window[GTAG_FUNCTION_NAME] = (...args: any[]) => {\n            if (args[0] == 'js') { resolve() }\n            this.gtag(...args);\n          }\n        })\n      );\n\n    } else {\n\n      this.analyticsInitialized = Promise.resolve();\n      this.gtag = () => {}\n\n    }\n\n    if (providedConfig)     { this.updateConfig(providedConfig) }\n    if (providedAppName)    { this.updateConfig({ [APP_NAME_KEY]:    providedAppName }) }\n    if (providedAppVersion) { this.updateConfig({ [APP_VERSION_KEY]: providedAppVersion }) }\n    if (debugModeEnabled)   { this.updateConfig({ [DEBUG_MODE_KEY]:  1 }) }\n\n    const analytics = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      // @ts-ignore zapping in the UMD in the build script\n      switchMap(() => import('firebase/analytics')),\n      map(() => _firebaseAppFactory(options, zone, nameOrConfig)),\n      // SEMVER no need to cast once we drop older Firebase\n      map(app => <analytics.Analytics>app.analytics()),\n      tap(analytics => {\n        if (analyticsCollectionEnabled === false) { analytics.setAnalyticsCollectionEnabled(false) }\n      }),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    return ɵlazySDKProxy(this, analytics, zone);\n    \n  }\n\n}"]}