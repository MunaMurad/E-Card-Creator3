{"version":3,"file":"rating.js","sources":["../../src/components/rating.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,YAAY,EACZ,UAAU,EACX,MAAM,eAAe,CAAC;AACvB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAwCzE;AAAoD,IAtCpD;AACgB,QA2Cd,SAAI,GAAW,SAAS,CAAC;AAC3B,QACE,eAAU,GAAyB,IAAI,YAAY,EAAE,CAAC;AACxD,IAwBA,CAAC;AACD,wBAlCa,eAAe;AAAG,IAY7B,iCAAO,GAAP,UAAQ,IAAI;AACd,QAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,QAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,IAAE,CAAC;AACF,IACC,oCAAU,GAAV,UAAW,KAAU;AAAK,QACxB,IAAI,KAAK,KAAK,SAAS,EAAE;AAC7B,YAAM,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACxB,SAAK;AACL,IAAE,CAAC;AACF,IACC,0CAAgB,GAAhB,UAAiB,EAAoB;AAAK,QACxC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,IAAE,CAAC;AACF,IACC,2CAAiB,GAAjB,UAAkB,EAAO,IAAS,CAAC;AACpC,IACC,0CAAgB,GAAhB,UAAkB,UAAmB;AAAK,QACxC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC/B,IAAE,CAAC;AACF;AACyB,IAhCxB;AAAc,QADb,KAAK,EAAE;AACT;AAEc,iDAFA;AACd,IACC;AAAc,QADb,KAAK,EAAE;AACT;AAEU,qDAFS;AACnB,IACC;AAAc,QADb,KAAK,EAAE;AACT;AAEC,iDAFyB;AAC1B,IACC;AAAc,QADb,MAAM,EAAE;AACV,kCAAa,YAAY;AAAG,uDAA2B;KAR3C,eAAe,6CAtC3B,SAAS,CAAC,eACT,QAAQ,EAAE;OAAQ,eAClB,QAAQ,EAAE;;;;;;gCAOT,eACD,MAAM,EAAE,mBACN;gBAiBC,eACF,eACD;MAAS,EAAE,mBACT,uBACE,OAAO,EAAE,iBAAiB;OAC1B,WAAW,EAAE,UAAU;AAAC,cAAM;CAAA,iBAAe,EAAf,CAAe,CAAC;gBAC9C,KAAK,EAAE,IAAI,mBACZ,eACF;EACF,CAAC,SACW,eAAe,CAiC3B;;;;;;;;;;;;;;;;;;;;;;;;;oBAAC;AACD,IADD,sBAAC;AACA,CADA,AAjCD,IAiCC;AACD,SAlCa,eAAe;AAAK","sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  forwardRef\r\n} from \"@angular/core\";\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: \"rating\",\r\n  template: `\r\n    <ion-buttons>\r\n      <ion-button [disabled]=\"readonly\" fill=\"clear\" [size]=\"size\" *ngFor=\"let current of [1, 2, 3, 4, 5]; let i = index\"\r\n        (click)=\"onClick(i + 1)\" (mouseover)=\"hoverRate = i + 1\" (mouseleave)=\"hoverRate = 0\">\r\n        <ion-icon slot=\"icon-only\" name=\"star\" [class.filled]=\"(i + 1 <= hoverRate || (!hoverRate && i + 1 <= rate))\"></ion-icon>\r\n      </ion-button>\r\n    </ion-buttons>\r\n  `,\r\n  styles: [\r\n    `\r\n      ion-buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n      }\r\n\r\n      [ion-button][disabled] {\r\n        opacity: 1;\r\n      }\r\n\r\n      ion-icon {\r\n        color: gray;\r\n      }\r\n\r\n      ion-icon.filled {\r\n        color: orange;\r\n      }\r\n    `\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => RatingComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class RatingComponent implements ControlValueAccessor {\r\n  @Input()\r\n  rate: number;\r\n  @Input()\r\n  readonly: boolean;\r\n  @Input()\r\n  size: string = 'default';\r\n  @Output()\r\n  rateChange: EventEmitter<number> = new EventEmitter();\r\n  hoverRate: number;\r\n  _onChange: Function;\r\n\r\n  onClick(rate) {\r\n    this.rate = rate;\r\n    this.rateChange.emit(this.rate);\r\n    this._onChange(this.rate);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    if (value !== undefined) {\r\n      this.rate = value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {}\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    this.readonly = isDisabled;\r\n  }\r\n}\r\n"]}