import { Component, Renderer2, ElementRef, Input, NgModule } from '@angular/core';
import QRCode from 'qrcode';

import * as ɵngcc0 from '@angular/core';
class QRCodeSVGComponent {
    constructor(renderer, element) {
        this.renderer = renderer;
        this.element = element;
        this.default = {
            errorCorrectionLevel: 'Q',
            margin: 4,
            color: 'currentcolor',
            backgroundColor: 'transparent',
        };
    }
    ngOnChanges() {
        this.createQRCode();
    }
    createQRCode() {
        this.element.nativeElement.childNodes.forEach((node) => this.renderer.removeChild(this.element.nativeElement, node));
        if (!this.value) {
            return;
        }
        const { errorCorrectionLevel, margin, color, backgroundColor } = this.sanitizeInputs();
        const raw = QRCode.create(`${this.value}`, {
            errorCorrectionLevel,
            margin,
        });
        this.renderSVG(raw, margin, color, backgroundColor);
    }
    renderSVG(raw, margin, color, backgroundColor) {
        const elementSize = raw.modules.size + margin * 2;
        const svgElement = this.renderer.createElement('svg', 'svg');
        this.renderer.setAttribute(svgElement, 'xmlns', 'http://www.w3.org/2000/svg');
        this.renderer.setAttribute(svgElement, 'viewBox', `0 0 ${elementSize} ${elementSize}`);
        const backGroundElement = this.renderer.createElement('path', 'svg');
        this.renderer.setAttribute(backGroundElement, 'd', `M0 0h${elementSize}v${elementSize}H0z`);
        this.renderer.setStyle(backGroundElement, 'fill', backgroundColor);
        this.renderer.appendChild(svgElement, backGroundElement);
        const codeElement = this.renderer.createElement('path', 'svg');
        this.renderer.setAttribute(codeElement, 'd', this.createPath(raw, margin));
        this.renderer.setStyle(codeElement, 'stroke', color);
        this.renderer.appendChild(svgElement, codeElement);
        this.renderer.appendChild(this.element.nativeElement, svgElement);
    }
    createPath(raw, margin) {
        const { data, size } = raw.modules;
        let path = '';
        let moveBy = 0;
        let newRow = false;
        let lineLength = 0;
        data.forEach((bit, index) => {
            const col = Math.floor(index % size);
            const row = Math.floor(index / size);
            if (!col && !newRow) {
                newRow = true;
            }
            if (bit) {
                lineLength++;
                if (!(index > 0 && col > 0 && (data === null || data === void 0 ? void 0 : data[index - 1]))) {
                    path += newRow ? `M${col + margin} ${0.5 + row + margin}` : `m${moveBy} 0`;
                    moveBy = 0;
                    newRow = false;
                }
                if (!(col + 1 < size && (data === null || data === void 0 ? void 0 : data[index + 1]))) {
                    path += `h${lineLength}`;
                    lineLength = 0;
                }
            }
            else {
                moveBy++;
            }
        });
        return path;
    }
    sanitizeInputs() {
        var _a, _b;
        const errorCorrectionLevel = ['L', 'M', 'Q', 'H'].includes(this.errorCorrectionLevel)
            ? this.errorCorrectionLevel
            : this.default.errorCorrectionLevel;
        const margin = !isNaN(parseFloat(this.margin)) && !isNaN(Number(this.margin))
            ? Math.max(Number(this.margin), 0)
            : this.default.margin;
        const color = (_a = this.color) !== null && _a !== void 0 ? _a : this.default.color;
        const backgroundColor = (_b = this.backgroundColor) !== null && _b !== void 0 ? _b : this.default.backgroundColor;
        return { errorCorrectionLevel, margin, color, backgroundColor };
    }
}
QRCodeSVGComponent.ɵfac = function QRCodeSVGComponent_Factory(t) { return new (t || QRCodeSVGComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
QRCodeSVGComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: QRCodeSVGComponent, selectors: [["qrcode-svg"]], inputs: { value: "value", errorCorrectionLevel: "errorCorrectionLevel", margin: "margin", color: "color", backgroundColor: "backgroundColor" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function QRCodeSVGComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n      }\n      svg[_ngcontent-%COMP%] {\n        display: block;\n        shape-rendering: crispEdges;\n      }"] });
QRCodeSVGComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
QRCodeSVGComponent.propDecorators = {
    value: [{ type: Input }],
    errorCorrectionLevel: [{ type: Input }],
    margin: [{ type: Input }],
    color: [{ type: Input }],
    backgroundColor: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeSVGComponent, [{
        type: Component,
        args: [{
                selector: 'qrcode-svg',
                template: '',
                styles: [`
      :host {
        display: inline-block;
        width: 100%;
        height: 100%;
      }
      svg {
        display: block;
        shape-rendering: crispEdges;
      }
    `]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { value: [{
            type: Input
        }], errorCorrectionLevel: [{
            type: Input
        }], margin: [{
            type: Input
        }], color: [{
            type: Input
        }], backgroundColor: [{
            type: Input
        }] }); })();

class QRCodeSVGModule {
}
QRCodeSVGModule.ɵfac = function QRCodeSVGModule_Factory(t) { return new (t || QRCodeSVGModule)(); };
QRCodeSVGModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: QRCodeSVGModule });
QRCodeSVGModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QRCodeSVGModule, [{
        type: NgModule,
        args: [{
                declarations: [QRCodeSVGComponent],
                imports: [],
                exports: [QRCodeSVGComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QRCodeSVGModule, { declarations: [QRCodeSVGComponent], exports: [QRCodeSVGComponent] }); })();

/*
 * Public API Surface of ngx-qrcode-svg
 */

/**
 * Generated bundle index. Do not edit.
 */

export { QRCodeSVGComponent, QRCodeSVGModule };

//# sourceMappingURL=ngx-qrcode-svg.js.map