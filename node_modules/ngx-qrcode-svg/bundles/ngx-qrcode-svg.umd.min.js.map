{"version":3,"sources":["../../../projects/ngx-qrcode-svg/src/lib/ngx-qrcode-svg.component.ts","../../../projects/ngx-qrcode-svg/src/lib/ngx-qrcode-svg.module.ts"],"names":["QRCodeSVGComponent","renderer","element","this","default","errorCorrectionLevel","margin","color","backgroundColor","prototype","ngOnChanges","createQRCode","_this","nativeElement","childNodes","forEach","node","removeChild","value","_c","sanitizeInputs","raw","QRCode","create","renderSVG","elementSize","modules","size","svgElement","createElement","setAttribute","backGroundElement","setStyle","appendChild","codeElement","createPath","data","path","moveBy","newRow","lineLength","bit","index","col","Math","floor","row","includes","isNaN","parseFloat","Number","max","_a","_b","Component","args","selector","template","Renderer2","ElementRef","Input","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { Component, Input, ElementRef, OnChanges, Renderer2 } from '@angular/core';\nimport QRCode from 'qrcode';\nimport { ErrorCorrectionLevel, QRCodeData, Options } from './ngx-qrcode-svg.types';\n\n@Component({\n  selector: 'qrcode-svg',\n  template: '',\n  styles: [\n    `\n      :host {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        display: block;\n        shape-rendering: crispEdges;\n      }\n    `,\n  ],\n})\nexport class QRCodeSVGComponent implements OnChanges {\n  @Input() value: string;\n  @Input() errorCorrectionLevel?: ErrorCorrectionLevel;\n  @Input() margin?: number | string;\n  @Input() color?: string;\n  @Input() backgroundColor?: string;\n\n  readonly default: Options = {\n    errorCorrectionLevel: 'Q',\n    margin: 4,\n    color: 'currentcolor',\n    backgroundColor: 'transparent',\n  };\n\n  constructor(private renderer: Renderer2, private element: ElementRef) {}\n\n  ngOnChanges() {\n    this.createQRCode();\n  }\n\n  private createQRCode(): void {\n    this.element.nativeElement.childNodes.forEach((node) =>\n      this.renderer.removeChild(this.element.nativeElement, node)\n    );\n\n    if (!this.value) {\n      return;\n    }\n\n    const { errorCorrectionLevel, margin, color, backgroundColor } = this.sanitizeInputs();\n\n    const raw = QRCode.create(`${this.value}`, {\n      errorCorrectionLevel,\n      margin,\n    });\n    this.renderSVG(raw, margin, color, backgroundColor);\n  }\n\n  private renderSVG(raw: QRCodeData, margin: number, color: string, backgroundColor: string): void {\n    const elementSize = raw.modules.size + margin * 2;\n\n    const svgElement = this.renderer.createElement('svg', 'svg');\n    this.renderer.setAttribute(svgElement, 'xmlns', 'http://www.w3.org/2000/svg');\n    this.renderer.setAttribute(svgElement, 'viewBox', `0 0 ${elementSize} ${elementSize}`);\n\n    const backGroundElement = this.renderer.createElement('path', 'svg');\n    this.renderer.setAttribute(backGroundElement, 'd', `M0 0h${elementSize}v${elementSize}H0z`);\n    this.renderer.setStyle(backGroundElement, 'fill', backgroundColor);\n    this.renderer.appendChild(svgElement, backGroundElement);\n\n    const codeElement = this.renderer.createElement('path', 'svg');\n    this.renderer.setAttribute(codeElement, 'd', this.createPath(raw, margin));\n    this.renderer.setStyle(codeElement, 'stroke', color);\n    this.renderer.appendChild(svgElement, codeElement);\n\n    this.renderer.appendChild(this.element.nativeElement, svgElement);\n  }\n\n  private createPath(raw: QRCodeData, margin: number): string {\n    const { data, size } = raw.modules;\n\n    let path = '';\n    let moveBy = 0;\n    let newRow = false;\n    let lineLength = 0;\n\n    data.forEach((bit, index) => {\n      const col = Math.floor(index % size);\n      const row = Math.floor(index / size);\n\n      if (!col && !newRow) {\n        newRow = true;\n      }\n\n      if (bit) {\n        lineLength++;\n\n        if (!(index > 0 && col > 0 && data?.[index - 1])) {\n          path += newRow ? `M${col + margin} ${0.5 + row + margin}` : `m${moveBy} 0`;\n          moveBy = 0;\n          newRow = false;\n        }\n\n        if (!(col + 1 < size && data?.[index + 1])) {\n          path += `h${lineLength}`;\n          lineLength = 0;\n        }\n      } else {\n        moveBy++;\n      }\n    });\n\n    return path;\n  }\n\n  private sanitizeInputs(): Options {\n    const errorCorrectionLevel = ['L', 'M', 'Q', 'H'].includes(this.errorCorrectionLevel)\n      ? this.errorCorrectionLevel\n      : this.default.errorCorrectionLevel;\n\n    const margin =\n      !isNaN(parseFloat(this.margin as any)) && !isNaN(Number(this.margin))\n        ? Math.max(Number(this.margin), 0)\n        : this.default.margin;\n\n    const color = this.color ?? this.default.color;\n    const backgroundColor = this.backgroundColor ?? this.default.backgroundColor;\n\n    return { errorCorrectionLevel, margin, color, backgroundColor };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { QRCodeSVGComponent } from './ngx-qrcode-svg.component';\n\n@NgModule({\n  declarations: [QRCodeSVGComponent],\n  imports: [],\n  exports: [QRCodeSVGComponent],\n})\nexport class QRCodeSVGModule {}\n"]}