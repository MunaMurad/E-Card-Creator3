(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('qrcode')) :
    typeof define === 'function' && define.amd ? define('ngx-qrcode-svg', ['exports', '@angular/core', 'qrcode'], factory) :
    (global = global || self, factory(global['ngx-qrcode-svg'] = {}, global.ng.core, global.QRCode));
}(this, (function (exports, core, QRCode) { 'use strict';

    QRCode = QRCode && Object.prototype.hasOwnProperty.call(QRCode, 'default') ? QRCode['default'] : QRCode;

    var QRCodeSVGComponent = /** @class */ (function () {
        function QRCodeSVGComponent(renderer, element) {
            this.renderer = renderer;
            this.element = element;
            this.default = {
                errorCorrectionLevel: 'Q',
                margin: 4,
                color: 'currentcolor',
                backgroundColor: 'transparent',
            };
        }
        QRCodeSVGComponent.prototype.ngOnChanges = function () {
            this.createQRCode();
        };
        QRCodeSVGComponent.prototype.createQRCode = function () {
            var _this = this;
            this.element.nativeElement.childNodes.forEach(function (node) { return _this.renderer.removeChild(_this.element.nativeElement, node); });
            if (!this.value) {
                return;
            }
            var _c = this.sanitizeInputs(), errorCorrectionLevel = _c.errorCorrectionLevel, margin = _c.margin, color = _c.color, backgroundColor = _c.backgroundColor;
            var raw = QRCode.create("" + this.value, {
                errorCorrectionLevel: errorCorrectionLevel,
                margin: margin,
            });
            this.renderSVG(raw, margin, color, backgroundColor);
        };
        QRCodeSVGComponent.prototype.renderSVG = function (raw, margin, color, backgroundColor) {
            var elementSize = raw.modules.size + margin * 2;
            var svgElement = this.renderer.createElement('svg', 'svg');
            this.renderer.setAttribute(svgElement, 'xmlns', 'http://www.w3.org/2000/svg');
            this.renderer.setAttribute(svgElement, 'viewBox', "0 0 " + elementSize + " " + elementSize);
            var backGroundElement = this.renderer.createElement('path', 'svg');
            this.renderer.setAttribute(backGroundElement, 'd', "M0 0h" + elementSize + "v" + elementSize + "H0z");
            this.renderer.setStyle(backGroundElement, 'fill', backgroundColor);
            this.renderer.appendChild(svgElement, backGroundElement);
            var codeElement = this.renderer.createElement('path', 'svg');
            this.renderer.setAttribute(codeElement, 'd', this.createPath(raw, margin));
            this.renderer.setStyle(codeElement, 'stroke', color);
            this.renderer.appendChild(svgElement, codeElement);
            this.renderer.appendChild(this.element.nativeElement, svgElement);
        };
        QRCodeSVGComponent.prototype.createPath = function (raw, margin) {
            var _c = raw.modules, data = _c.data, size = _c.size;
            var path = '';
            var moveBy = 0;
            var newRow = false;
            var lineLength = 0;
            data.forEach(function (bit, index) {
                var col = Math.floor(index % size);
                var row = Math.floor(index / size);
                if (!col && !newRow) {
                    newRow = true;
                }
                if (bit) {
                    lineLength++;
                    if (!(index > 0 && col > 0 && (data === null || data === void 0 ? void 0 : data[index - 1]))) {
                        path += newRow ? "M" + (col + margin) + " " + (0.5 + row + margin) : "m" + moveBy + " 0";
                        moveBy = 0;
                        newRow = false;
                    }
                    if (!(col + 1 < size && (data === null || data === void 0 ? void 0 : data[index + 1]))) {
                        path += "h" + lineLength;
                        lineLength = 0;
                    }
                }
                else {
                    moveBy++;
                }
            });
            return path;
        };
        QRCodeSVGComponent.prototype.sanitizeInputs = function () {
            var _a, _b;
            var errorCorrectionLevel = ['L', 'M', 'Q', 'H'].includes(this.errorCorrectionLevel)
                ? this.errorCorrectionLevel
                : this.default.errorCorrectionLevel;
            var margin = !isNaN(parseFloat(this.margin)) && !isNaN(Number(this.margin))
                ? Math.max(Number(this.margin), 0)
                : this.default.margin;
            var color = (_a = this.color) !== null && _a !== void 0 ? _a : this.default.color;
            var backgroundColor = (_b = this.backgroundColor) !== null && _b !== void 0 ? _b : this.default.backgroundColor;
            return { errorCorrectionLevel: errorCorrectionLevel, margin: margin, color: color, backgroundColor: backgroundColor };
        };
        return QRCodeSVGComponent;
    }());
    QRCodeSVGComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'qrcode-svg',
                    template: '',
                    styles: ["\n      :host {\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        display: block;\n        shape-rendering: crispEdges;\n      }\n    "]
                },] }
    ];
    QRCodeSVGComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    QRCodeSVGComponent.propDecorators = {
        value: [{ type: core.Input }],
        errorCorrectionLevel: [{ type: core.Input }],
        margin: [{ type: core.Input }],
        color: [{ type: core.Input }],
        backgroundColor: [{ type: core.Input }]
    };

    var QRCodeSVGModule = /** @class */ (function () {
        function QRCodeSVGModule() {
        }
        return QRCodeSVGModule;
    }());
    QRCodeSVGModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [QRCodeSVGComponent],
                    imports: [],
                    exports: [QRCodeSVGComponent],
                },] }
    ];

    /*
     * Public API Surface of ngx-qrcode-svg
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.QRCodeSVGComponent = QRCodeSVGComponent;
    exports.QRCodeSVGModule = QRCodeSVGModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-qrcode-svg.umd.js.map
