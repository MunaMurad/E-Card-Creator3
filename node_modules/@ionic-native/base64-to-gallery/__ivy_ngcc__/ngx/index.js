import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Base64ToGallery = /** @class */ (function (_super) {
    __extends(Base64ToGallery, _super);
    function Base64ToGallery() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Base64ToGallery.prototype.base64ToGallery = function (data, options) { return cordova(this, "base64ToGallery", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Base64ToGallery.pluginName = "Base64ToGallery";
    Base64ToGallery.plugin = "cordova-base64-to-gallery";
    Base64ToGallery.pluginRef = "cordova";
    Base64ToGallery.repo = "https://github.com/Nexxa/cordova-base64-to-gallery";
    Base64ToGallery.platforms = ["Android", "iOS", "Windows Phone 8"];
Base64ToGallery.ɵfac = /*@__PURE__*/ function () { var ɵBase64ToGallery_BaseFactory; return function Base64ToGallery_Factory(t) { return (ɵBase64ToGallery_BaseFactory || (ɵBase64ToGallery_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Base64ToGallery)))(t || Base64ToGallery); }; }();
Base64ToGallery.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Base64ToGallery, factory: function (t) { return Base64ToGallery.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Base64ToGallery, [{
        type: Injectable
    }], null, null); })();
    return Base64ToGallery;
}(IonicNativePlugin));
export { Base64ToGallery };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYmFzZTY0LXRvLWdhbGxlcnkvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBRWMsSUFzQ3VCLG1DQUFpQjtBQUFDO0FBRTlCO0FBQ0k7QUFBTSxJQVFqQyx5Q0FBZSxhQUFDLElBQVksRUFBRSxPQUFnQztBQUlEO0FBQW9EO0FBQTBEO0FBQTJDO0FBQWlGO21EQWhCeFMsVUFBVTs7OzswQkFDTDtBQUFDLDBCQTFDUDtBQUFFLEVBMENtQyxpQkFBaUI7QUFDckQsU0FEWSxlQUFlO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlNjRUb0dhbGxlcnlPcHRpb25zIHtcbiAgLyoqIFNhdmVkIGZpbGUgbmFtZSBwcmVmaXggKi9cbiAgcHJlZml4OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPbiBBbmRyb2lkIHJ1bnMgTWVkaWEgU2Nhbm5lciBhZnRlciBmaWxlIGNyZWF0aW9uLlxuICAgKiBPbiBpT1MgaWYgdHJ1ZSB0aGUgZmlsZSB3aWxsIGJlIGFkZGVkIHRvIGNhbWVyYSByb2xsLCBvdGhlcndpc2Ugd2lsbCBiZSBzYXZlZCB0byBhIGxpYnJhcnkgZm9sZGVyLlxuICAgKi9cbiAgbWVkaWFTY2FubmVyOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIEJhc2U2NCBUbyBHYWxsZXJ5XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzYXZlIGJhc2U2NCBkYXRhIGFzIGEgcG5nIGltYWdlIGludG8gdGhlIGRldmljZVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlNjRUb0dhbGxlcnkgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Jhc2U2NC10by1nYWxsZXJ5L25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYXNlNjRUb0dhbGxlcnk6IEJhc2U2NFRvR2FsbGVyeSkgeyB9XG4gKlxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmJhc2U2NFRvR2FsbGVyeS5iYXNlNjRUb0dhbGxlcnkoYmFzZTY0RGF0YSwgeyBwcmVmaXg6ICdfaW1nJyB9KS50aGVuKFxuICogICByZXMgPT4gY29uc29sZS5sb2coJ1NhdmVkIGltYWdlIHRvIGdhbGxlcnkgJywgcmVzKSxcbiAqICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciBzYXZpbmcgaW1hZ2UgdG8gZ2FsbGVyeSAnLCBlcnIpXG4gKiApO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQmFzZTY0VG9HYWxsZXJ5T3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0Jhc2U2NFRvR2FsbGVyeScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtYmFzZTY0LXRvLWdhbGxlcnknLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9OZXh4YS9jb3Jkb3ZhLWJhc2U2NC10by1nYWxsZXJ5JyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgUGhvbmUgOCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXNlNjRUb0dhbGxlcnkgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIGJhc2U2NCBzdHJpbmcgdG8gYW4gaW1hZ2UgZmlsZSBpbiB0aGUgZGV2aWNlIGdhbGxlcnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgVGhlIGFjdHVhbCBiYXNlNjQgc3RyaW5nIHRoYXQgeW91IHdhbnQgdG8gc2F2ZVxuICAgKiBAcGFyYW0ge2FueX0gW29wdGlvbnNdIEFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBpbWFnZSBpcyBzYXZlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDIsXG4gICAgZXJyb3JJbmRleDogMyxcbiAgfSlcbiAgYmFzZTY0VG9HYWxsZXJ5KGRhdGE6IHN0cmluZywgb3B0aW9ucz86IEJhc2U2NFRvR2FsbGVyeU9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19