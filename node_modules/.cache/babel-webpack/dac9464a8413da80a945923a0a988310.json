{"ast":null,"code":"import { fromRef } from '../observable/fromRef';\nimport { of, merge } from 'rxjs';\nimport { isNil } from '../utils';\nimport { switchMap, distinctUntilChanged, scan } from 'rxjs/operators';\nexport function listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(snapshotAction => {\n    const childEvent$ = [of(snapshotAction)];\n    events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n    return merge(...childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n\nfunction positionFor(changes, key) {\n  const len = changes.length;\n\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  const {\n    payload,\n    type,\n    prevKey,\n    key\n  } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {\n            payload,\n            type: 'value',\n            prevKey,\n            key: payload.key\n          };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n\n      return current;\n\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        const previous = current[currentKeyPosition - 1];\n\n        if ((previous && previous.key || null) != prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n\n      return current;\n\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n\n      return current;\n\n    default:\n      return current;\n  }\n} //# sourceMappingURL=changes.js.map","map":null,"metadata":{},"sourceType":"module"}