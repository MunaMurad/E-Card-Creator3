{"ast":null,"code":"import { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { map } from 'rxjs/operators';\nexport function createListReference(query, afDatabase) {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  return {\n    query,\n    update: createDataOperationMethod(query.ref, 'update'),\n    set: createDataOperationMethod(query.ref, 'set'),\n    push: data => query.ref.push(data),\n    remove: createRemoveMethod(query.ref),\n\n    snapshotChanges(events) {\n      return snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    stateChanges(events) {\n      return stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    auditTrail(events) {\n      return auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    valueChanges(events) {\n      const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(afDatabase.keepUnstableUntilFirst, map(actions => actions.map(a => a.payload.val())));\n    }\n\n  };\n} //# sourceMappingURL=create-reference.js.map","map":null,"metadata":{},"sourceType":"module"}