{"ast":null,"code":"import constant from './constant.js';\nimport createInverter from './_createInverter.js';\nimport identity from './identity.js';\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\n\nvar nativeObjectToString = objectProto.toString;\n/**\r\n * Creates an object composed of the inverted keys and values of `object`.\r\n * If `object` contains duplicate values, subsequent values overwrite\r\n * property assignments of previous values.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.7.0\r\n * @category Object\r\n * @param {Object} object The object to invert.\r\n * @returns {Object} Returns the new inverted object.\r\n * @example\r\n *\r\n * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n *\r\n * _.invert(object);\r\n * // => { '1': 'c', '2': 'b' }\r\n */\n\nvar invert = createInverter(function (result, value, key) {\n  if (value != null && typeof value.toString != 'function') {\n    value = nativeObjectToString.call(value);\n  }\n\n  result[value] = key;\n}, constant(identity));\nexport default invert;","map":null,"metadata":{},"sourceType":"module"}