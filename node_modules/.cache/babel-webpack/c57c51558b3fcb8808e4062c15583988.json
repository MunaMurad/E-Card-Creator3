{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { QrService } from './../../services/qr.service';\nimport { InvitationDetails } from './InvitationDetails';\nimport { Meta } from '@angular/platform-browser';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport ImageEditor from 'tui-image-editor';\nimport { en } from '../image-editor/en'; // Receive Parameter\n\nimport { ActivatedRoute } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/platform-browser\";\nimport * as i5 from \"./../../services/qr.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"ngx-qrcode-svg\";\nexport let ImageEditorPage = /*#__PURE__*/(() => {\n  class ImageEditorPage {\n    constructor(firestore, fireAuth, modalCtrl, alertCtrl, meta, qrServices, route) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.modalCtrl = modalCtrl;\n      this.alertCtrl = alertCtrl;\n      this.meta = meta;\n      this.qrServices = qrServices;\n      this.route = route;\n      this.locale_ar = en;\n      this.showModal = false;\n      this.qrDetails = new InvitationDetails();\n      this.iconColor = 'rgba(255, 187, 59, 1)';\n      this.meta.addTag({\n        name: 'viewport',\n        content: 'width=device-width, user-scalable=no'\n      });\n      this.route.params.subscribe(params => {\n        this.imgSrc = params['imageSrc'];\n      });\n    }\n\n    ngOnInit() {\n      var locale_ar = en;\n      this.imageEditor = new ImageEditor(document.querySelector('.tui-image-editor'), {\n        usageStatistics: false,\n        includeUI: {\n          loadImage: {\n            // path: this.image,\n            path: '../../../' + this.imgSrc,\n            name: 'SampleImage'\n          },\n          // menu: ['crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],\n          menu: ['resize', 'crop', 'flip', 'rotate', 'text', 'filter', 'shape', 'icon'],\n          initMenu: '',\n          menuBarPosition: 'right' //locale : en\n\n        },\n        //  selectionStyle: {\n        //      cornerSize: 20,\n        //      rotatingPointOffset: 70\n        //  },\n        cssMaxWidth: document.documentElement.clientWidth,\n        cssMaxHeight: document.documentElement.clientHeight,\n        selectionStyle: {\n          cornerSize: 10,\n          rotatingPointOffset: 40\n        }\n      }); // Load sample image\n\n      this.imageEditor.loadImageFromURL('img/sampleImage.jpg', 'SampleImage').then(() => {\n        this.imageEditor.clearUndoStack();\n      }); //Font select list\n      //--------------------------------------\n      //Any installed web font from Google will work: https://fonts.google.com/\n\n      let fontArray = [\"Sakkal Majalla\", \"Akhbar MT\", \"Aldhabi\", \"Simple Indust Outline\", \"Cairo\", \"Dubai\", \"DecoType Naskh\", \"Arial\", \"Arial Black\", \"Caveat\", \"Comic Sans MS\", \"Courier New\", \"Georgia1\", \"Impact\", \"Lobster Two\", \"Lucida Console\", \"Luckiest Guy\", \"Open Sans\", \"Pacifico\", \"Palatino Linotype\", \"Press Start 2P\", \"Roboto\", \"Tahoma\", \"Tangerine\", \"Times New Roman\", \"Tourney\", \"Ultra\", \"Verdana\", \"Symbol\", \"Webdings\", \"Wingdings\"];\n      let fontSelectHTML = '<div class=\"center\">\\n <select #fontselect class=\"center form-select font-selector\">';\n\n      for (let i = 0; i < fontArray.length; i++) {\n        let selected = '';\n\n        if (i == 0) {\n          selected = 'selected';\n        }\n\n        fontSelectHTML += '<option style=\"font-family:' + fontArray[i] + ';\" value=\"' + fontArray[i] + '\" ' + selected + '>' + fontArray[i] + '</option>';\n      }\n\n      fontSelectHTML += '</select></div>\\n \\n <div></div>  <div></div>';\n      let textMenuAlign = document.querySelector('.tui-image-editor-menu-text .tie-text-align-button');\n      textMenuAlign.insertAdjacentHTML('afterbegin', fontSelectHTML);\n      document.querySelector('.font-selector').addEventListener('change', () => this.TUI_updateFontOnText(document.querySelector('.font-selector').value)); //-------------------------------------\n      //ON TUI objectActivated\n      //   Keep track of active/selected item\n\n      this.imageEditor.on('objectActivated', props => {\n        this.TUI_selectedItem = props;\n        this.TUI_updateFontSelected(props);\n      });\n      var saveBtn = '<button class=\"tui-image-editor-save-btn\" >Add QR</button>'; //document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').displa.visibility = \"visible\";\n\n      document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', saveBtn); //replaceWith('')\n\n      document.querySelector('.tui-image-editor-container .tui-image-editor-save-btn').addEventListener('click', e => {\n        this.presentAlertConfirm();\n      }); // document.querySelector('#qrcode').addEventListener('load',(e)=>{\n      //     console.log('eventlistener');\n      //     if(document.querySelector('#qrcode > svg') !=null){\n      //         document.querySelector('#qrcode  > svg').addEventListener('change',(e)=>{\n      //             this.addQRIcon();\n      //         });\n      //     }\n      // });\n      // document.querySelector(\"#qrcode > svg > path:nth-child(1)\").addEventListener('load', function(element) {\n      //     console.log('ELEMENT SUCESSFULLY LOADED');\n      //     this.addQRIcon();\n      // });\n      // document.querySelector(\"#qrcode\").addEventListener('change', function(element) {\n      //     console.log('ELEMENT SUCESSFULLY LOADED');\n      //     this.addQRIcon();\n      // });\n    } // ngAfterViewInit(){\n    //      document.querySelector(\"#qrcode  > svg\").addEventListener('change', function(element) {\n    //         console.log('ELEMENT SUCESSFULLY LOADED');\n    //         this.addQRIcon();\n    //     });\n    // }\n\n    /********************************\r\n     * Update font familty on text layer\r\n    *******************************/\n\n\n    TUI_updateFontOnText(font) {\n      console.log(\"TUI_updateFontOnText\", font, this.TUI_selectedItem.id);\n\n      if (font) {\n        this.TUI_selectedFont = font;\n      }\n\n      if (font && this.TUI_selectedItem) {\n        this.imageEditor.changeTextStyle(this.TUI_selectedItem.id, {\n          fontFamily: font\n        });\n      }\n    }\n    /********************************\r\n     * Update font selected with the fontfamily of the selected layer\r\n    *******************************/\n\n\n    TUI_updateFontSelected(layer) {\n      console.log(\"TUI_updateFontSelected\", layer);\n\n      if (layer.fontFamily) {\n        document.querySelector('.font-selector').value = layer.fontFamily;\n        this.TUI_selectedFont = layer.fontFamily;\n      }\n    }\n\n    presentAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let alert = yield this.alertCtrl.create({\n          header: 'تفاصيل رمز QR',\n          message: 'الرجاء ادخال تفاصيل الدعوة المطلوبة',\n          inputs: [{\n            name: 'EventName',\n            type: 'text',\n            placeholder: 'عنوان الدعوة'\n          }, {\n            name: 'AttendeesAllowed',\n            type: 'number',\n            placeholder: 'العدد المسموح'\n          }],\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            handler: data => {\n              console.log('Cancel clicked');\n            }\n          }, {\n            text: 'Register QR',\n            handler: data => {\n              if (data) {\n                this.qrDetails.EventName = data.EventName;\n                this.qrDetails.AttendeesAllowed = Number(data.AttendeesAllowed);\n                this.CreateCode(this.qrDetails).then(this.addQRIcon()); //this.addQRIcon();\n                //this.addQRIcon()\n                // logged in!\n              } else {\n                // invalid login\n                return false;\n              }\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    CreateCode(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n          let details = this.qrServices.InsertInvitationQRCodeInDb(data);\n          console.log('CreateCode after encryption');\n          this.qrvalue = details;\n          resolve();\n        }));\n      });\n    } // console.log(\"details of vsvg\",details);\n    // document.querySelector(\"#qrcode > svg > path:nth-child(1)\").addEventListener('load',function(){\n    //     this.addQRIcon();\n    // }) \n    //var result = this.addQRIcon();\n    // // let imageData= qrcode.children[1].getAttribute('d');;\n    // // console.log('imageData',imageData);document.querySelector(\"#qrcode > svg > path:nth-child(1)\")\n    // var element = await document.querySelector(\"#qrcode > svg > path:nth-child(2)\");\n    // console.log('imageData',element);\n    // this.imageEditor.on(function setDrawingIcon(type, iconColor) {\n    //     this._graphics.setIconStyle(type, iconColor);\n    //   } )\n    // var imagetracer = new _imagetracer2.default();\n    // imagetracer.imageToSVG(imgUrl, function (svgstr) {\n    //     var _svgstr$match = svgstr.match(/path[^>]*d=\"([^\"]*)\"/),\n    //         svgPath = _svgstr$match[1];\n    //     var iconObj = {};\n    //     iconObj[file.name] = svgPath;\n    //     _this2.registerIcons(iconObj);\n    //     _this2.addIcon(file.name, {\n    //     left: 100,\n    //     top: 100\n    //     });\n    // }, _imagetracer2.default.tracerDefaultOption());\n\n\n    addQRIcon() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('addQrIcon');\n\n        if (document.querySelector(\"#qrcode > svg > path:nth-child(1)\") == null) {\n          console.log(\"countDown done\");\n          return setTimeout(this.addQRIcon(), 10000);\n        } // do work here\n\n\n        var icon = document.querySelector(\"#qrcode > svg > path:nth-child(1)\").getAttribute('d');\n        var result = this.registerIcon(icon);\n        const iconObj = {};\n        iconObj['qr'] = icon; // this.imageEditor.registerIcons({\n        //     customIcon: icon,\n        // });\n        // this.imageEditor.addIcon('icon', options).then(objectProps => {\n        //     //Assign all other saved values to the newly created layer\n        //     _.assign(objectProps, layer);\n        //     console.log(\"addLayer [ICON completed]\", objectProps.id, objectProps);\n        //   });\n        // const iconObj = {};\n        // iconObj['qr'] = icon;\n        // this.imageEditor.registerCustomIcon(iconObj);\n        // this.imageEditor.addIcon('qr', {\n        //     fill: this.iconColor,\n        //     left: 100,\n        //     top: 100,\n        // });\n      });\n    }\n\n    registerIcon(icon) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"start registerIcon\");\n\n        if (this.imageEditor == null) {\n          console.log(\"registerIcon done\");\n          return setTimeout(yield this.registerIcon(icon), 1000);\n        }\n\n        const iconObj = {};\n        iconObj['qr'] = icon;\n        this.imageEditor.registerIcon({\n          customIcon: icon\n        });\n        this.imageEditor.addIcon('customIcon', {\n          fill: this.iconColor,\n          left: 100,\n          top: 100\n        });\n      });\n    }\n\n  }\n\n  ImageEditorPage.ɵfac = function ImageEditorPage_Factory(t) {\n    return new (t || ImageEditorPage)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.AngularFireAuth), i0.ɵɵdirectiveInject(i3.ModalController), i0.ɵɵdirectiveInject(i3.AlertController), i0.ɵɵdirectiveInject(i4.Meta), i0.ɵɵdirectiveInject(i5.QrService), i0.ɵɵdirectiveInject(i6.ActivatedRoute));\n  };\n\n  ImageEditorPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImageEditorPage,\n    selectors: [[\"app-image-editor\"]],\n    decls: 12,\n    vars: 4,\n    consts: [[\"color\", \"medium\"], [\"slot\", \"end\"], [\"auto-hide\", \"false\"], [1, \"main-header4\"], [\"slot\", \"start\"], [\"color\", \"black\"], [\"id\", \"qrcode\", 3, \"margin\", \"value\", \"color\", \"backgroundColor\", \"ionLoad\"], [1, \"tui-image-editor\"]],\n    template: function ImageEditorPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-menu-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 3);\n        i0.ɵɵtext(5, \"\\u062A\\u0639\\u062F\\u064A\\u0644 \\u0627\\u0644\\u0635\\u0648\\u0631\\u0629\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-buttons\", 4);\n        i0.ɵɵelement(7, \"ion-back-button\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ion-content\");\n        i0.ɵɵelementStart(9, \"qrcode-svg\", 6);\n        i0.ɵɵlistener(\"ionLoad\", function ImageEditorPage_Template_qrcode_svg_ionLoad_9_listener() {\n          return ctx.addQRIcon();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelement(11, \"canvas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"margin\", 4)(\"value\", ctx.qrvalue)(\"color\", \"black\")(\"backgroundColor\", \"white\");\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonMenuButton, i3.IonTitle, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonContent, i7.QRCodeSVGComponent],\n    styles: [\"\"]\n  });\n  return ImageEditorPage;\n})();","map":null,"metadata":{},"sourceType":"module"}