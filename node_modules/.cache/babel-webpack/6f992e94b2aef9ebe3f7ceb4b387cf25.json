{"ast":null,"code":"import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport baseIteratee from './_baseIteratee.js';\n/**\r\n * This method is like `_.max` except that it accepts `iteratee` which is\r\n * invoked for each element in `array` to generate the criterion by which\r\n * the value is ranked. The iteratee is invoked with one argument: (value).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Math\r\n * @param {Array} array The array to iterate over.\r\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n * @returns {*} Returns the maximum value.\r\n * @example\r\n *\r\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\r\n *\r\n * _.maxBy(objects, function(o) { return o.n; });\r\n * // => { 'n': 2 }\r\n *\r\n * // The `_.property` iteratee shorthand.\r\n * _.maxBy(objects, 'n');\r\n * // => { 'n': 2 }\r\n */\n\nfunction maxBy(array, iteratee) {\n  return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;\n}\n\nexport default maxBy;","map":null,"metadata":{},"sourceType":"module"}