{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\", \"./evpkdf\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  /**\r\n   * Cipher core components.\r\n   */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n    /**\r\n     * Abstract base cipher template.\r\n     *\r\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n     */\n\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {WordArray} iv The IV to use for this operation.\r\n       */\n      cfg: Base.extend(),\n\n      /**\r\n       * Creates this cipher in encryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createEncryptor: function (key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\r\n       * Creates this cipher in decryption mode.\r\n       *\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {Cipher} A cipher instance.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n       */\n      createDecryptor: function (key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\r\n       * Initializes a newly created cipher.\r\n       *\r\n       * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n       */\n      init: function (xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg); // Store transform mode and key\n\n        this._xformMode = xformMode;\n        this._key = key; // Set initial values\n\n        this.reset();\n      },\n\n      /**\r\n       * Resets this cipher to its initial state.\r\n       *\r\n       * @example\r\n       *\r\n       *     cipher.reset();\r\n       */\n      reset: function () {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic\n\n        this._doReset();\n      },\n\n      /**\r\n       * Adds data to be encrypted or decrypted.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.process('data');\r\n       *     var encrypted = cipher.process(wordArray);\r\n       */\n      process: function (dataUpdate) {\n        // Append\n        this._append(dataUpdate); // Process available blocks\n\n\n        return this._process();\n      },\n\n      /**\r\n       * Finalizes the encryption or decryption process.\r\n       * Note that the finalize operation is effectively a destructive, read-once operation.\r\n       *\r\n       * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n       *\r\n       * @return {WordArray} The data after final processing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var encrypted = cipher.finalize();\r\n       *     var encrypted = cipher.finalize('data');\r\n       *     var encrypted = cipher.finalize(wordArray);\r\n       */\n      finalize: function (dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        } // Perform concrete-cipher logic\n\n\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n      keySize: 128 / 32,\n      ivSize: 128 / 32,\n      _ENC_XFORM_MODE: 1,\n      _DEC_XFORM_MODE: 2,\n\n      /**\r\n       * Creates shortcut functions to a cipher's object interface.\r\n       *\r\n       * @param {Cipher} cipher The cipher to create a helper for.\r\n       *\r\n       * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n       */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function (message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n            decrypt: function (ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            }\n          };\n        };\n      }()\n    });\n    /**\r\n     * Abstract base stream cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n     */\n\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function () {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n      blockSize: 1\n    });\n    /**\r\n     * Mode namespace.\r\n     */\n\n    var C_mode = C.mode = {};\n    /**\r\n     * Abstract base block cipher mode template.\r\n     */\n\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\r\n       * Creates this mode for encryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n       */\n      createEncryptor: function (cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\r\n       * Creates this mode for decryption.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n       */\n      createDecryptor: function (cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\r\n       * Initializes a newly created mode.\r\n       *\r\n       * @param {Cipher} cipher A block cipher instance.\r\n       * @param {Array} iv The IV words.\r\n       *\r\n       * @example\r\n       *\r\n       *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n       */\n      init: function (cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      }\n    });\n    /**\r\n     * Cipher Block Chaining mode.\r\n     */\n\n    var CBC = C_mode.CBC = function () {\n      /**\r\n       * Abstract base CBC mode.\r\n       */\n      var CBC = BlockCipherMode.extend();\n      /**\r\n       * CBC encryptor.\r\n       */\n\n      CBC.Encryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize; // XOR and encrypt\n\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset); // Remember this block to use with next block\n\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        }\n      });\n      /**\r\n       * CBC decryptor.\r\n       */\n\n      CBC.Decryptor = CBC.extend({\n        /**\r\n         * Processes the data block at offset.\r\n         *\r\n         * @param {Array} words The data words to operate on.\r\n         * @param {number} offset The offset where the block starts.\r\n         *\r\n         * @example\r\n         *\r\n         *     mode.processBlock(data.words, offset);\r\n         */\n        processBlock: function (words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize; // Remember this block to use with next block\n\n          var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR\n\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block\n\n          this._prevBlock = thisBlock;\n        }\n      });\n\n      function xorBlock(words, offset, blockSize) {\n        var block; // Shortcut\n\n        var iv = this._iv; // Choose mixing block\n\n        if (iv) {\n          block = iv; // Remove IV for subsequent blocks\n\n          this._iv = undefined;\n        } else {\n          block = this._prevBlock;\n        } // XOR blocks\n\n\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n    /**\r\n     * Padding namespace.\r\n     */\n\n\n    var C_pad = C.pad = {};\n    /**\r\n     * PKCS #5/7 padding strategy.\r\n     */\n\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\r\n       * Pads data using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to pad.\r\n       * @param {number} blockSize The multiple that the data should be padded to.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n       */\n      pad: function (data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4; // Count padding bytes\n\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word\n\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding\n\n        var paddingWords = [];\n\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n\n        var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding\n\n        data.concat(padding);\n      },\n\n      /**\r\n       * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n       *\r\n       * @param {WordArray} data The data to unpad.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n       */\n      unpad: function (data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n        data.sigBytes -= nPaddingBytes;\n      }\n    };\n    /**\r\n     * Abstract base block cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n     */\n\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Mode} mode The block mode to use. Default: CBC\r\n       * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n       */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7\n      }),\n      reset: function () {\n        var modeCreator; // Reset cipher\n\n        Cipher.reset.call(this); // Shortcuts\n\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode; // Reset block mode\n\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          modeCreator = mode.createEncryptor;\n        } else\n          /* if (this._xformMode == this._DEC_XFORM_MODE) */\n          {\n            modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding\n\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n      _doProcessBlock: function (words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n      _doFinalize: function () {\n        var finalProcessedBlocks; // Shortcut\n\n        var padding = this.cfg.padding; // Finalize\n\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize); // Process final blocks\n\n          finalProcessedBlocks = this._process(!!'flush');\n        } else\n          /* if (this._xformMode == this._DEC_XFORM_MODE) */\n          {\n            // Process final blocks\n            finalProcessedBlocks = this._process(!!'flush'); // Unpad data\n\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n      blockSize: 128 / 32\n    });\n    /**\r\n     * A collection of cipher parameters.\r\n     *\r\n     * @property {WordArray} ciphertext The raw ciphertext.\r\n     * @property {WordArray} key The key to this ciphertext.\r\n     * @property {WordArray} iv The IV used in the ciphering operation.\r\n     * @property {WordArray} salt The salt used with a key derivation function.\r\n     * @property {Cipher} algorithm The cipher algorithm.\r\n     * @property {Mode} mode The block mode used in the ciphering operation.\r\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n     * @property {number} blockSize The block size of the cipher.\r\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n     */\n\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\r\n       * Initializes a newly created cipher params object.\r\n       *\r\n       * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n       *         ciphertext: ciphertextWordArray,\r\n       *         key: keyWordArray,\r\n       *         iv: ivWordArray,\r\n       *         salt: saltWordArray,\r\n       *         algorithm: CryptoJS.algo.AES,\r\n       *         mode: CryptoJS.mode.CBC,\r\n       *         padding: CryptoJS.pad.PKCS7,\r\n       *         blockSize: 4,\r\n       *         formatter: CryptoJS.format.OpenSSL\r\n       *     });\r\n       */\n      init: function (cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\r\n       * Converts this cipher params object to a string.\r\n       *\r\n       * @param {Format} formatter (Optional) The formatting strategy to use.\r\n       *\r\n       * @return {string} The stringified cipher params.\r\n       *\r\n       * @throws Error If neither the formatter nor the default formatter is set.\r\n       *\r\n       * @example\r\n       *\r\n       *     var string = cipherParams + '';\r\n       *     var string = cipherParams.toString();\r\n       *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n       */\n      toString: function (formatter) {\n        return (formatter || this.formatter).stringify(this);\n      }\n    });\n    /**\r\n     * Format namespace.\r\n     */\n\n    var C_format = C.format = {};\n    /**\r\n     * OpenSSL formatting strategy.\r\n     */\n\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\r\n       * Converts a cipher params object to an OpenSSL-compatible string.\r\n       *\r\n       * @param {CipherParams} cipherParams The cipher params object.\r\n       *\r\n       * @return {string} The OpenSSL-compatible string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n       */\n      stringify: function (cipherParams) {\n        var wordArray; // Shortcuts\n\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt; // Format\n\n        if (salt) {\n          wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\r\n       * Converts an OpenSSL-compatible string to a cipher params object.\r\n       *\r\n       * @param {string} openSSLStr The OpenSSL-compatible string.\r\n       *\r\n       * @return {CipherParams} The cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n       */\n      parse: function (openSSLStr) {\n        var salt; // Parse base64\n\n        var ciphertext = Base64.parse(openSSLStr); // Shortcut\n\n        var ciphertextWords = ciphertext.words; // Test for salt\n\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext\n\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          salt: salt\n        });\n      }\n    };\n    /**\r\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n     */\n\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter\n      }),\n\n      /**\r\n       * Encrypts a message.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Encrypt\n\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message); // Shortcut\n\n        var cipherCfg = encryptor.cfg; // Create and return serializable cipher params\n\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format\n        });\n      },\n\n      /**\r\n       * Decrypts serialized ciphertext.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {WordArray} key The key.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n        ciphertext = this._parse(ciphertext, cfg.format); // Decrypt\n\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n        return plaintext;\n      },\n\n      /**\r\n       * Converts serialized ciphertext to CipherParams,\r\n       * else assumed CipherParams already and returns ciphertext unchanged.\r\n       *\r\n       * @param {CipherParams|string} ciphertext The ciphertext.\r\n       * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n       *\r\n       * @return {CipherParams} The unserialized ciphertext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n       */\n      _parse: function (ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      }\n    });\n    /**\r\n     * Key derivation function namespace.\r\n     */\n\n    var C_kdf = C.kdf = {};\n    /**\r\n     * OpenSSL key derivation function.\r\n     */\n\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\r\n       * Derives a key and IV from a password.\r\n       *\r\n       * @param {string} password The password to derive from.\r\n       * @param {number} keySize The size in words of the key to generate.\r\n       * @param {number} ivSize The size in words of the IV to generate.\r\n       * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n       *\r\n       * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n       *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n       */\n      execute: function (password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        } // Derive key and IV\n\n\n        var key = EvpKDF.create({\n          keySize: keySize + ivSize\n        }).compute(password, salt); // Separate key and IV\n\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4; // Return params\n\n        return CipherParams.create({\n          key: key,\n          iv: iv,\n          salt: salt\n        });\n      }\n    };\n    /**\r\n     * A serializable cipher wrapper that derives the key from a password,\r\n     * and returns ciphertext as a serializable cipher params object.\r\n     */\n\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\r\n       * Configuration options.\r\n       *\r\n       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf\n      }),\n\n      /**\r\n       * Encrypts a message using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {WordArray|string} message The message to encrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {CipherParams} A cipher params object.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n       *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      encrypt: function (cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Derive key and other params\n\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config\n\n        cfg.iv = derivedParams.iv; // Encrypt\n\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params\n\n        ciphertext.mixIn(derivedParams);\n        return ciphertext;\n      },\n\n      /**\r\n       * Decrypts serialized ciphertext using a password.\r\n       *\r\n       * @param {Cipher} cipher The cipher algorithm to use.\r\n       * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n       * @param {string} password The password.\r\n       * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n       *\r\n       * @return {WordArray} The plaintext.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n       *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n       */\n      decrypt: function (cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n        ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params\n\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config\n\n        cfg.iv = derivedParams.iv; // Decrypt\n\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n        return plaintext;\n      }\n    });\n  }();\n});","map":null,"metadata":{},"sourceType":"script"}