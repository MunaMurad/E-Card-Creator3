{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { InvitationService } from './../../services/InvitationService';\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { ToastController, ModalController } from '@ionic/angular';\nimport { LoadingController } from '@ionic/angular';\nimport jsQR from \"jsqr\";\nimport { InvitationDetails } from 'src/app/congratspages/image-editor/InvitationDetails';\nimport { ModalContentPage } from 'src/app/ui-components/modal-content/modal-content.page';\nimport { EncryptionService } from 'src/app/services/encryption.service'; //import for counter function:\n\nlet QRScannerPage = class QRScannerPage {\n  //private encryptionService: EncryptionService\n  constructor(toastCtrl, loadingCtrl, modalCtrl, encryptionService, invitationService) {\n    this.toastCtrl = toastCtrl;\n    this.loadingCtrl = loadingCtrl;\n    this.modalCtrl = modalCtrl;\n    this.encryptionService = encryptionService;\n    this.invitationService = invitationService;\n    this.scanResult = null;\n    this.scanActive = false;\n    this.CurrentCount = null;\n  }\n\n  ngAfterViewInit() {\n    this.videoElement = this.video.nativeElement;\n    this.canvasElement = this.canvas.nativeElement;\n    this.canvasContext = this.canvasElement.getContext('2d');\n  }\n\n  captureImage() {\n    this.fileinput.nativeElement.click();\n  }\n\n  handleFile(event) {\n    console.log('handleFile started');\n\n    try {\n      const target = event.target;\n      const file = target.files[0];\n      var img = new Image();\n\n      img.onload = () => __awaiter(this, void 0, void 0, function* () {\n        this.canvasContext.drawImage(img, 0, 0, this.canvasElement.width, this.canvasElement.height);\n        const imageData = this.canvasContext.getImageData(0, 0, this.canvasElement.width, this.canvasElement.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: 'dontInvert'\n        });\n\n        if (code) {\n          this.qrData = code.data;\n          console.log('started 1');\n          yield this.CountScanner(); // this.showQrToast();\n        }\n      });\n\n      img.src = URL.createObjectURL(file);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  startScan() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const stream = yield navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: 'environment'\n        }\n      });\n      this.videoElement.srcObject = stream;\n      this.videoElement.setAttribute('playsinline', true);\n      this.videoElement.play();\n      this.loading = yield this.loadingCtrl.create({});\n      yield this.loading.present();\n      requestAnimationFrame(this.scan.bind(this));\n    });\n  }\n\n  scan() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log('SCAN');\n\n      if (this.videoElement.readyState === this.videoElement.HAVE_ENOUGH_DATA) {\n        if (this.loading) {\n          yield this.loading.dismiss();\n          this.loading = null;\n          this.scanActive = true;\n        }\n\n        this.canvasElement.height = this.videoElement.videoHeight;\n        this.canvasElement.width = this.videoElement.videoWidth;\n        this.canvasContext.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);\n        const imageData = this.canvasContext.getImageData(0, 0, this.canvasElement.width, this.canvasElement.height);\n        const code = jsQR(imageData.data, imageData.width, imageData.height, {\n          inversionAttempts: 'dontInvert'\n        });\n\n        if (code) {\n          this.scanActive = false;\n          this.qrData = code.data;\n          yield this.CountScanner(); //  this.showQrToast();\n        } else {\n          if (this.scanActive) {\n            requestAnimationFrame(this.scan.bind(this));\n          }\n        }\n      } else {\n        requestAnimationFrame(this.scan.bind(this));\n      }\n    });\n  }\n\n  reset() {\n    this.scanResult = null;\n  }\n\n  stopScan() {\n    this.scanActive = false;\n  } // async showQrToast(){\n  //   const toast=await this.toastCtrl.create({\n  //     //message:'Open the QR code',\n  //     position:'top',\n  //     buttons:[\n  //       {\n  //         side: 'start',\n  //         icon:'open-outline',\n  //         text:'Open the QR code and count',\n  //         handler:()=>{\n  //           window.open(this.scanResult,'_system','location=yes'),\n  //           this.CountScanner();\n  //         }\n  //       }\n  //     ]\n  //   });\n  //   toast.present();\n  // }\n  //tryin to make counter code:\n\n\n  CountScanner() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        var details = new InvitationDetails();\n        var decryptedText;\n        yield this.encryptionService.Decrypt('' + this.qrData).then(result => __awaiter(this, void 0, void 0, function* () {\n          decryptedText = result;\n          yield this.invitationService.getInvitationQRCode(result).then(result => {\n            details = result;\n            this.codeDetails = result;\n          });\n        }));\n\n        if (details == null) {\n          this.presentToast(\"Event Not Found. Please make sure you're scanning the correct code\", 'danger');\n        } else if (details.AttendeesCount < details.AttendeesAllowed) {\n          yield this.invitationService.IncrementAttendeesCount(decryptedText).then(result => {\n            this.openMiddleModal(); // this.presentToast(\"Updated Attendees\",'success')\n          });\n        } else {\n          this.presentToast(\"Sorry you have reached the maximum capacity of attendees\", 'danger');\n        }\n      } catch (error) {\n        this.presentToast(\"Error Occured. Please check your internet connection\", \"danger\");\n      }\n    });\n  }\n\n  presentToast(message, type) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const toast = yield this.toastCtrl.create({\n        message: message,\n        duration: 3000,\n        color: type\n      });\n      toast.present();\n    });\n  } // //******** Middle ***********//\n\n\n  openMiddleModal() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.modalCtrl.create({\n        component: ModalContentPage,\n        cssClass: 'from-middle-modal',\n        swipeToClose: true,\n        backdropDismiss: true,\n        componentProps: {\n          AttendeesAllowed: this.codeDetails.AttendeesAllowed,\n          AttendeesCount: this.codeDetails.AttendeesCount\n        }\n      }).then(modal => {\n        modal.present();\n        setTimeout(() => {\n          modal.dismiss();\n        }, 2000);\n      });\n    });\n  }\n\n  ngOnInit() {}\n\n};\n\n__decorate([ViewChild(\"video\", {\n  static: false\n}), __metadata(\"design:type\", ElementRef)], QRScannerPage.prototype, \"video\", void 0);\n\n__decorate([ViewChild(\"canvas\", {\n  static: false\n}), __metadata(\"design:type\", ElementRef)], QRScannerPage.prototype, \"canvas\", void 0);\n\n__decorate([ViewChild(\"fileinput\", {\n  static: false\n}), __metadata(\"design:type\", ElementRef)], QRScannerPage.prototype, \"fileinput\", void 0);\n\nQRScannerPage = __decorate([Component({\n  selector: 'app-qr-scanner',\n  templateUrl: './qr-scanner.page.html'\n}), __metadata(\"design:paramtypes\", [ToastController, LoadingController, ModalController, EncryptionService, InvitationService])], QRScannerPage);\nexport { QRScannerPage };","map":null,"metadata":{},"sourceType":"module"}