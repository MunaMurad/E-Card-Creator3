{"ast":null,"code":"import { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nexport let UserGuard = /*#__PURE__*/(() => {\n  class UserGuard {\n    constructor(afAuth, router) {\n      this.afAuth = afAuth;\n      this.router = router;\n    }\n\n    canActivate(next, state) {\n      return new Promise(resolve => {\n        this.afAuth.user.subscribe(user => {\n          if (user) {\n            console.log(\"##### User Guard: auth = true\");\n            resolve(true);\n          } else {\n            console.log(\"##### User Guard: auth = false\");\n            console.log('User is not logged in'); //this.router.navigate(['/login']);\n\n            this.router.navigate(['fire-signin'], {\n              queryParams: {\n                redirectUrl: state.url\n              }\n            }); // route with redirect http://gnomeontherun.com/2017/03/02/guards-and-login-redirects-in-angular/\n            //this.router.navigate(['/product-list'], { queryParams: { redirect: 3 }});\n\n            resolve(false);\n          }\n        });\n      });\n    }\n\n  }\n\n  UserGuard.ɵfac = function UserGuard_Factory(t) {\n    return new (t || UserGuard)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.Router));\n  };\n\n  UserGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserGuard,\n    factory: UserGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return UserGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}