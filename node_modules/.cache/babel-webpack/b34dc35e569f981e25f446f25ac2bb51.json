{"ast":null,"code":"import { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { firestore } from 'firebase/app'; // new version : ex arrayContanin, arrayUnion\n\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let RealestateService = /*#__PURE__*/(() => {\n  class RealestateService {\n    constructor(firestore, fireAuth) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.userId = \"\";\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          console.log(\"realestate Service ...  auth = true\");\n          this.userId = user.uid;\n          this.userAuth = true;\n        } else {\n          console.log(\"trealestate Service ...  auth = false\");\n          this.userId = \"\";\n          this.userAuth = false;\n        }\n      });\n    } //****************************************//\n    //****** Get by agentId    ******//\n    //****************************************//\n\n\n    getHouseByAgent(agentId) {\n      return this.firestore.collection('/realestate_item', ref => ref.where('agentId', '==', agentId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get house items by type    ******//\n    //****************************************//\n\n\n    getHouseByType(HouseType) {\n      return this.firestore.collection('/realestate_item', ref => ref.where('type', '==', HouseType)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"-----> getHouseByType=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get house  by recommended    ******//\n    //****************************************//\n\n\n    getHouseByRecom() {\n      return this.firestore.collection('/realestate_item', ref => ref.where('recommended', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"-----> getHouseByRecom=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //******** Get all houses *********//\n    //************************//\n\n\n    getAllHouse() {\n      console.log(\"start getAllHouse\"); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('realestate_item').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####place data=\" + data);\n          console.log(\"####place Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Get house detail ******//\n    //******************************//\n\n\n    getHouseDetail(itemId) {\n      console.log(\"---> call getHouseDetail()\");\n      return this.firestore.doc('realestate_item/' + itemId).valueChanges();\n    } //****************************************//\n    //****** Get all agents    ******//\n    //****************************************//\n\n\n    getAgent() {\n      return this.firestore.collection('realestate_agent').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####place data=\" + data);\n          console.log(\"####place Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n    getTopAgent(limit) {\n      return this.firestore.collection('realestate_agent', ref => ref.where('rating', '>', 4).limit(limit)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id; //console.log(\"----->getPopularItem=\"+data);\n\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Get agent detail ******//\n    //******************************//\n\n\n    getAgentDetail(agentId) {\n      console.log(\"---> call getAgentDetail()\");\n      return this.firestore.doc('realestate_agent/' + agentId).valueChanges();\n    } //************************//\n    //****** Favorite ******//\n    //************************//\n\n\n    addFavorite(itemId, title, image) {\n      console.log(\"__addFavorite\");\n      console.log(\"userId= \" + this.userId); //###### Add userId to travel_place > favorite array  #####//\n\n      this.firestore.doc('realestate_item/' + itemId).update({\n        favorite: firestore.FieldValue.arrayUnion(this.userId)\n      }); //#### then add placeId to travel_favorite_user collection  ######//\n\n      return this.firestore.doc('realestate_favorite_user/' + itemId).set({\n        itemId: itemId,\n        userId: this.userId,\n        name: title,\n        image_header: image\n      }); // this.postReference.update({\n      // \tfavorite: firestore.FieldValue.arrayUnion(userId)\n      // })\n    }\n\n    removeFavorite(itemId) {\n      console.log(\"removeFavorite\"); //####### Remove userId in traval_place > favorite array  ######//\n\n      this.firestore.doc('realestate_item/' + itemId).update({\n        favorite: firestore.FieldValue.arrayRemove(this.userId)\n      }); //###### remove placeId from travel_favorite_user collection  #####//\n\n      return this.firestore.doc('realestate_favorite_user/' + itemId).delete();\n    } //*****************************************************//\n    //******** User's fovorite places by userId  *********//\n    //*****************************************************//\n\n\n    getFavHouse() {\n      console.log(\"_____START USERID()=\" + this.userId);\n      return this.firestore.collection('/realestate_favorite_user', ref => ref.where('userId', '==', this.userId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####get a group of countries=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //******** Search Place *********//\n    //************************//\n\n\n    searchHouses() {\n      console.log(\"start searchPlaces\"); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('realestate_item').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####place data=\" + data);\n          console.log(\"####place Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n  }\n\n  RealestateService.ɵfac = function RealestateService_Factory(t) {\n    return new (t || RealestateService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  RealestateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RealestateService,\n    factory: RealestateService.ɵfac,\n    providedIn: 'root'\n  });\n  return RealestateService;\n})();","map":null,"metadata":{},"sourceType":"module"}