{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { Inject, PLATFORM_ID, InjectionToken, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { defineDriver, createInstance, LOCALSTORAGE, WEBSQL, INDEXEDDB } from 'localforage';\nimport * as CordovaSQLiteDriver from 'localforage-cordovasqlitedriver';\nimport { _driver } from 'localforage-cordovasqlitedriver';\n/**\r\n * Storage is an easy way to store key/value pairs and JSON objects.\r\n * Storage uses a variety of storage engines underneath, picking the best one available\r\n * depending on the platform.\r\n *\r\n * When running in a native app context, Storage will prioritize using SQLite, as it's one of\r\n * the most stable and widely used file-based databases, and avoids some of the\r\n * pitfalls of things like localstorage and IndexedDB, such as the OS deciding to clear out such\r\n * data in low disk-space situations.\r\n *\r\n * When running in the web or as a Progressive Web App, Storage will attempt to use\r\n * IndexedDB, WebSQL, and localstorage, in that order.\r\n *\r\n * @usage\r\n * First, if you'd like to use SQLite, install the cordova-sqlite-storage plugin:\r\n * ```bash\r\n * ionic cordova plugin add cordova-sqlite-storage\r\n * ```\r\n *\r\n * Next, install the package (comes by default for Ionic apps > Ionic V1):\r\n * ```bash\r\n * npm install --save @ionic/storage\r\n * ```\r\n *\r\n * Next, add it to the imports list in your `NgModule` declaration (for example, in `src/app/app.module.ts`):\r\n *\r\n * ```typescript\r\n * import { IonicStorageModule } from '@ionic/storage';\r\n *\r\n * @NgModule({\r\n *   declarations: [\r\n *     // ...\r\n *   ],\r\n *   imports: [\r\n *     BrowserModule,\r\n *     IonicModule.forRoot(MyApp),\r\n *     IonicStorageModule.forRoot()\r\n *   ],\r\n *   bootstrap: [IonicApp],\r\n *   entryComponents: [\r\n *     // ...\r\n *   ],\r\n *   providers: [\r\n *     // ...\r\n *   ]\r\n * })\r\n * export class AppModule {}\r\n *```\r\n *\r\n * Finally, inject it into any of your components or pages:\r\n * ```typescript\r\n * import { Storage } from '@ionic/storage';\r\n\r\n * export class MyApp {\r\n *   constructor(private storage: Storage) { }\r\n *\r\n *   ...\r\n *\r\n *   // set a key/value\r\n *   storage.set('name', 'Max');\r\n *\r\n *   // Or to get a key/value pair\r\n *   storage.get('age').then((val) => {\r\n *     console.log('Your age is', val);\r\n *   });\r\n * }\r\n * ```\r\n *\r\n *\r\n * ### Configuring Storage\r\n *\r\n * The Storage engine can be configured both with specific storage engine priorities, or custom configuration\r\n * options to pass to localForage. See the localForage config docs for possible options: https://github.com/localForage/localForage#configuration\r\n *\r\n * Note: Any custom configurations will be merged with the default configuration\r\n *\r\n * ```typescript\r\n * import { IonicStorageModule } from '@ionic/storage';\r\n *\r\n * @NgModule({\r\n *   declarations: [...],\r\n *   imports: [\r\n *     IonicStorageModule.forRoot({\r\n *       name: '__mydb',\r\n         driverOrder: ['indexeddb', 'sqlite', 'websql']\r\n *     })\r\n *   ],\r\n *   bootstrap: [...],\r\n *   entryComponents: [...],\r\n *    providers: [...]\r\n * })\r\n * export class AppModule { }\r\n * ```\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet Storage = /*#__PURE__*/(() => {\n  let Storage = class Storage {\n    /**\r\n     * Create a new Storage instance using the order of drivers and any additional config\r\n     * options to pass to LocalForage.\r\n     *\r\n     * Possible driver options are: ['sqlite', 'indexeddb', 'websql', 'localstorage'] and the\r\n     * default is that exact ordering.\r\n     */\n    constructor(config, platformId) {\n      this.platformId = platformId;\n      this._driver = null;\n      this._dbPromise = new Promise((resolve, reject) => {\n        if (isPlatformServer(this.platformId)) {\n          const noopDriver = getNoopDriver();\n          resolve(noopDriver);\n          return;\n        }\n\n        let db;\n        const defaultConfig = getDefaultConfig();\n        const actualConfig = Object.assign(defaultConfig, config || {});\n        defineDriver(CordovaSQLiteDriver).then(() => {\n          db = createInstance(actualConfig);\n        }).then(() => db.setDriver(this._getDriverOrder(actualConfig.driverOrder))).then(() => {\n          this._driver = db.driver();\n          resolve(db);\n        }).catch(reason => reject(reason));\n      });\n    }\n    /**\r\n     * Get the name of the driver being used.\r\n     * @returns Name of the driver\r\n     */\n\n\n    get driver() {\n      return this._driver;\n    }\n    /**\r\n     * Reflect the readiness of the store.\r\n     * @returns Returns a promise that resolves when the store is ready\r\n     */\n\n\n    ready() {\n      return this._dbPromise;\n    }\n    /** @hidden */\n\n\n    _getDriverOrder(driverOrder) {\n      return driverOrder.map(driver => {\n        switch (driver) {\n          case 'sqlite':\n            return _driver;\n\n          case 'indexeddb':\n            return INDEXEDDB;\n\n          case 'websql':\n            return WEBSQL;\n\n          case 'localstorage':\n            return LOCALSTORAGE;\n        }\n      });\n    }\n    /**\r\n     * Get the value associated with the given key.\r\n     * @param key the key to identify this value\r\n     * @returns Returns a promise with the value of the given key\r\n     */\n\n\n    get(key) {\n      return this._dbPromise.then(db => db.getItem(key));\n    }\n    /**\r\n     * Set the value for the given key.\r\n     * @param key the key to identify this value\r\n     * @param value the value for this key\r\n     * @returns Returns a promise that resolves when the key and value are set\r\n     */\n\n\n    set(key, value) {\n      return this._dbPromise.then(db => db.setItem(key, value));\n    }\n    /**\r\n     * Remove any value associated with this key.\r\n     * @param key the key to identify this value\r\n     * @returns Returns a promise that resolves when the value is removed\r\n     */\n\n\n    remove(key) {\n      return this._dbPromise.then(db => db.removeItem(key));\n    }\n    /**\r\n     * Clear the entire key value store. WARNING: HOT!\r\n     * @returns Returns a promise that resolves when the store is cleared\r\n     */\n\n\n    clear() {\n      return this._dbPromise.then(db => db.clear());\n    }\n    /**\r\n     * @returns Returns a promise that resolves with the number of keys stored.\r\n     */\n\n\n    length() {\n      return this._dbPromise.then(db => db.length());\n    }\n    /**\r\n     * @returns Returns a promise that resolves with the keys in the store.\r\n     */\n\n\n    keys() {\n      return this._dbPromise.then(db => db.keys());\n    }\n    /**\r\n     * Iterate through each key,value pair.\r\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\r\n     * @returns Returns a promise that resolves when the iteration has finished.\r\n     */\n\n\n    forEach(iteratorCallback) {\n      return this._dbPromise.then(db => db.iterate(iteratorCallback));\n    }\n\n  };\n  Storage = __decorate([__param(1, Inject(PLATFORM_ID))], Storage);\n  /** @hidden */\n\n  return Storage;\n})();\n\nfunction getDefaultConfig() {\n  return {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: ['sqlite', 'indexeddb', 'websql', 'localstorage']\n  };\n}\n/** @hidden */\n\n\nconst StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\n/** @hidden */\n\nfunction provideStorage(storageConfig, platformID) {\n  const config = !!storageConfig ? storageConfig : getDefaultConfig();\n  return new Storage(config, platformID);\n}\n\nfunction getNoopDriver() {\n  // noop driver for ssr environment\n  const noop = () => {};\n\n  const driver = {\n    getItem: noop,\n    setItem: noop,\n    removeItem: noop,\n    clear: noop,\n    length: () => 0,\n    keys: () => [],\n    iterate: noop\n  };\n  return driver;\n}\n\nvar IonicStorageModule_1;\nlet IonicStorageModule = IonicStorageModule_1 = class IonicStorageModule {\n  static forRoot(storageConfig = null) {\n    return {\n      ngModule: IonicStorageModule_1,\n      providers: [{\n        provide: StorageConfigToken,\n        useValue: storageConfig\n      }, {\n        provide: Storage,\n        useFactory: provideStorage,\n        deps: [StorageConfigToken, PLATFORM_ID]\n      }]\n    };\n  }\n\n};\n\nIonicStorageModule.ɵfac = function IonicStorageModule_Factory(t) {\n  return new (t || IonicStorageModule)();\n};\n\nIonicStorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: IonicStorageModule\n});\nIonicStorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { IonicStorageModule, Storage, StorageConfigToken, provideStorage as ɵa }; //# sourceMappingURL=ionic-storage.js.map","map":null,"metadata":{},"sourceType":"module"}