{"ast":null,"code":"/**\r\n * @license Angular v12.2.7\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nvar TagContentType = /*#__PURE__*/(() => {\n  TagContentType = TagContentType || {};\n  TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n  TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n  TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n  return TagContentType;\n})();\n\nfunction splitNsName(elementName) {\n  if (elementName[0] != ':') {\n    return [null, elementName];\n  }\n\n  const colonIndex = elementName.indexOf(':', 1);\n\n  if (colonIndex === -1) {\n    throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n  }\n\n  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n} // `<ng-container>` tags work the same regardless the namespace\n\n\nfunction isNgContainer(tagName) {\n  return splitNsName(tagName)[1] === 'ng-container';\n} // `<ng-content>` tags work the same regardless the namespace\n\n\nfunction isNgContent(tagName) {\n  return splitNsName(tagName)[1] === 'ng-content';\n} // `<ng-template>` tags work the same regardless the namespace\n\n\nfunction isNgTemplate(tagName) {\n  return splitNsName(tagName)[1] === 'ng-template';\n}\n\nfunction getNsPrefix(fullName) {\n  return fullName === null ? null : splitNsName(fullName)[0];\n}\n\nfunction mergeNsAndName(prefix, localName) {\n  return prefix ? `:${prefix}:${localName}` : localName;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass HtmlTagDefinition {\n  constructor({\n    closedByChildren,\n    implicitNamespacePrefix,\n    contentType = TagContentType.PARSABLE_DATA,\n    closedByParent = false,\n    isVoid = false,\n    ignoreFirstLf = false,\n    preventNamespaceInheritance = false\n  } = {}) {\n    this.closedByChildren = {};\n    this.closedByParent = false;\n    this.canSelfClose = false;\n\n    if (closedByChildren && closedByChildren.length > 0) {\n      closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n    }\n\n    this.isVoid = isVoid;\n    this.closedByParent = closedByParent || isVoid;\n    this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n    this.contentType = contentType;\n    this.ignoreFirstLf = ignoreFirstLf;\n    this.preventNamespaceInheritance = preventNamespaceInheritance;\n  }\n\n  isClosedByChild(name) {\n    return this.isVoid || name.toLowerCase() in this.closedByChildren;\n  }\n\n  getContentType(prefix) {\n    if (typeof this.contentType === 'object') {\n      const overrideType = prefix === undefined ? undefined : this.contentType[prefix];\n      return overrideType !== null && overrideType !== void 0 ? overrideType : this.contentType.default;\n    }\n\n    return this.contentType;\n  }\n\n}\n\nlet _DEFAULT_TAG_DEFINITION; // see https://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\n\n\nlet TAG_DEFINITIONS;\n\nfunction getHtmlTagDefinition(tagName) {\n  var _a, _b;\n\n  if (!TAG_DEFINITIONS) {\n    _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n    TAG_DEFINITIONS = {\n      'base': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'meta': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'area': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'embed': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'link': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'img': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'input': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'param': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'hr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'br': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'source': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'track': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'wbr': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'p': new HtmlTagDefinition({\n        closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],\n        closedByParent: true\n      }),\n      'thead': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot']\n      }),\n      'tbody': new HtmlTagDefinition({\n        closedByChildren: ['tbody', 'tfoot'],\n        closedByParent: true\n      }),\n      'tfoot': new HtmlTagDefinition({\n        closedByChildren: ['tbody'],\n        closedByParent: true\n      }),\n      'tr': new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        closedByParent: true\n      }),\n      'td': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'th': new HtmlTagDefinition({\n        closedByChildren: ['td', 'th'],\n        closedByParent: true\n      }),\n      'col': new HtmlTagDefinition({\n        isVoid: true\n      }),\n      'svg': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'svg'\n      }),\n      'foreignObject': new HtmlTagDefinition({\n        // Usually the implicit namespace here would be redundant since it will be inherited from\n        // the parent `svg`, but we have to do it for `foreignObject`, because the way the parser\n        // works is that the parent node of an end tag is its own start tag which means that\n        // the `preventNamespaceInheritance` on `foreignObject` would have it default to the\n        // implicit namespace which is `html`, unless specified otherwise.\n        implicitNamespacePrefix: 'svg',\n        // We want to prevent children of foreignObject from inheriting its namespace, because\n        // the point of the element is to allow nodes from other namespaces to be inserted.\n        preventNamespaceInheritance: true\n      }),\n      'math': new HtmlTagDefinition({\n        implicitNamespacePrefix: 'math'\n      }),\n      'li': new HtmlTagDefinition({\n        closedByChildren: ['li'],\n        closedByParent: true\n      }),\n      'dt': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd']\n      }),\n      'dd': new HtmlTagDefinition({\n        closedByChildren: ['dt', 'dd'],\n        closedByParent: true\n      }),\n      'rb': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rt': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rtc': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'rp': new HtmlTagDefinition({\n        closedByChildren: ['rb', 'rt', 'rtc', 'rp'],\n        closedByParent: true\n      }),\n      'optgroup': new HtmlTagDefinition({\n        closedByChildren: ['optgroup'],\n        closedByParent: true\n      }),\n      'option': new HtmlTagDefinition({\n        closedByChildren: ['option', 'optgroup'],\n        closedByParent: true\n      }),\n      'pre': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'listing': new HtmlTagDefinition({\n        ignoreFirstLf: true\n      }),\n      'style': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'script': new HtmlTagDefinition({\n        contentType: TagContentType.RAW_TEXT\n      }),\n      'title': new HtmlTagDefinition({\n        // The browser supports two separate `title` tags which have to use\n        // a different content type: `HTMLTitleElement` and `SVGTitleElement`\n        contentType: {\n          default: TagContentType.ESCAPABLE_RAW_TEXT,\n          svg: TagContentType.PARSABLE_DATA\n        }\n      }),\n      'textarea': new HtmlTagDefinition({\n        contentType: TagContentType.ESCAPABLE_RAW_TEXT,\n        ignoreFirstLf: true\n      })\n    };\n  } // We have to make both a case-sensitive and a case-insesitive lookup, because\n  // HTML tag names are case insensitive, whereas some SVG tags are case sensitive.\n\n\n  return (_b = (_a = TAG_DEFINITIONS[tagName]) !== null && _a !== void 0 ? _a : TAG_DEFINITIONS[tagName.toLowerCase()]) !== null && _b !== void 0 ? _b : _DEFAULT_TAG_DEFINITION;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _SELECTOR_REGEXP = /*#__PURE__*/new RegExp('(\\\\:not\\\\()|' + // 1: \":not(\"\n'(([\\\\.\\\\#]?)[-\\\\w]+)|' + // 2: \"tag\"; 3: \".\"/\"#\";\n// \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n// 4: attribute; 5: attribute_string; 6: attribute_value\n'(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n// \"[name=\"value\"]\",\n// \"[name='value']\"\n'(\\\\))|' + // 7: \")\"\n'(\\\\s*,\\\\s*)', // 8: \",\"\n'g');\n/**\r\n * A css selector contains an element name,\r\n * css classes and attribute/value pairs with the purpose\r\n * of selecting subsets out of them.\r\n */\n\n\nclass CssSelector {\n  constructor() {\n    this.element = null;\n    this.classNames = [];\n    /**\r\n     * The selectors are encoded in pairs where:\r\n     * - even locations are attribute names\r\n     * - odd locations are attribute values.\r\n     *\r\n     * Example:\r\n     * Selector: `[key1=value1][key2]` would parse to:\r\n     * ```\r\n     * ['key1', 'value1', 'key2', '']\r\n     * ```\r\n     */\n\n    this.attrs = [];\n    this.notSelectors = [];\n  }\n\n  static parse(selector) {\n    const results = [];\n\n    const _addResult = (res, cssSel) => {\n      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {\n        cssSel.element = '*';\n      }\n\n      res.push(cssSel);\n    };\n\n    let cssSelector = new CssSelector();\n    let match;\n    let current = cssSelector;\n    let inNot = false;\n    _SELECTOR_REGEXP.lastIndex = 0;\n\n    while (match = _SELECTOR_REGEXP.exec(selector)) {\n      if (match[1\n      /* NOT */\n      ]) {\n        if (inNot) {\n          throw new Error('Nesting :not in a selector is not allowed');\n        }\n\n        inNot = true;\n        current = new CssSelector();\n        cssSelector.notSelectors.push(current);\n      }\n\n      const tag = match[2\n      /* TAG */\n      ];\n\n      if (tag) {\n        const prefix = match[3\n        /* PREFIX */\n        ];\n\n        if (prefix === '#') {\n          // #hash\n          current.addAttribute('id', tag.substr(1));\n        } else if (prefix === '.') {\n          // Class\n          current.addClassName(tag.substr(1));\n        } else {\n          // Element\n          current.setElement(tag);\n        }\n      }\n\n      const attribute = match[4\n      /* ATTRIBUTE */\n      ];\n\n      if (attribute) {\n        current.addAttribute(current.unescapeAttribute(attribute), match[6\n        /* ATTRIBUTE_VALUE */\n        ]);\n      }\n\n      if (match[7\n      /* NOT_END */\n      ]) {\n        inNot = false;\n        current = cssSelector;\n      }\n\n      if (match[8\n      /* SEPARATOR */\n      ]) {\n        if (inNot) {\n          throw new Error('Multiple selectors in :not are not supported');\n        }\n\n        _addResult(results, cssSelector);\n\n        cssSelector = current = new CssSelector();\n      }\n    }\n\n    _addResult(results, cssSelector);\n\n    return results;\n  }\n  /**\r\n   * Unescape `\\$` sequences from the CSS attribute selector.\r\n   *\r\n   * This is needed because `$` can have a special meaning in CSS selectors,\r\n   * but we might want to match an attribute that contains `$`.\r\n   * [MDN web link for more\r\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\r\n   * @param attr the attribute to unescape.\r\n   * @returns the unescaped string.\r\n   */\n\n\n  unescapeAttribute(attr) {\n    let result = '';\n    let escaping = false;\n\n    for (let i = 0; i < attr.length; i++) {\n      const char = attr.charAt(i);\n\n      if (char === '\\\\') {\n        escaping = true;\n        continue;\n      }\n\n      if (char === '$' && !escaping) {\n        throw new Error(`Error in attribute selector \"${attr}\". ` + `Unescaped \"$\" is not supported. Please escape with \"\\\\$\".`);\n      }\n\n      escaping = false;\n      result += char;\n    }\n\n    return result;\n  }\n  /**\r\n   * Escape `$` sequences from the CSS attribute selector.\r\n   *\r\n   * This is needed because `$` can have a special meaning in CSS selectors,\r\n   * with this method we are escaping `$` with `\\$'.\r\n   * [MDN web link for more\r\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\r\n   * @param attr the attribute to escape.\r\n   * @returns the escaped string.\r\n   */\n\n\n  escapeAttribute(attr) {\n    return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n  }\n\n  isElementSelector() {\n    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;\n  }\n\n  hasElementSelector() {\n    return !!this.element;\n  }\n\n  setElement(element = null) {\n    this.element = element;\n  }\n  /** Gets a template string for an element that matches the selector. */\n\n\n  getMatchingElementTemplate() {\n    const tagName = this.element || 'div';\n    const classAttr = this.classNames.length > 0 ? ` class=\"${this.classNames.join(' ')}\"` : '';\n    let attrs = '';\n\n    for (let i = 0; i < this.attrs.length; i += 2) {\n      const attrName = this.attrs[i];\n      const attrValue = this.attrs[i + 1] !== '' ? `=\"${this.attrs[i + 1]}\"` : '';\n      attrs += ` ${attrName}${attrValue}`;\n    }\n\n    return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` : `<${tagName}${classAttr}${attrs}></${tagName}>`;\n  }\n\n  getAttrs() {\n    const result = [];\n\n    if (this.classNames.length > 0) {\n      result.push('class', this.classNames.join(' '));\n    }\n\n    return result.concat(this.attrs);\n  }\n\n  addAttribute(name, value = '') {\n    this.attrs.push(name, value && value.toLowerCase() || '');\n  }\n\n  addClassName(name) {\n    this.classNames.push(name.toLowerCase());\n  }\n\n  toString() {\n    let res = this.element || '';\n\n    if (this.classNames) {\n      this.classNames.forEach(klass => res += `.${klass}`);\n    }\n\n    if (this.attrs) {\n      for (let i = 0; i < this.attrs.length; i += 2) {\n        const name = this.escapeAttribute(this.attrs[i]);\n        const value = this.attrs[i + 1];\n        res += `[${name}${value ? '=' + value : ''}]`;\n      }\n    }\n\n    this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n    return res;\n  }\n\n}\n/**\r\n * Reads a list of CssSelectors and allows to calculate which ones\r\n * are contained in a given CssSelector.\r\n */\n\n\nclass SelectorMatcher {\n  constructor() {\n    this._elementMap = new Map();\n    this._elementPartialMap = new Map();\n    this._classMap = new Map();\n    this._classPartialMap = new Map();\n    this._attrValueMap = new Map();\n    this._attrValuePartialMap = new Map();\n    this._listContexts = [];\n  }\n\n  static createNotMatcher(notSelectors) {\n    const notMatcher = new SelectorMatcher();\n    notMatcher.addSelectables(notSelectors, null);\n    return notMatcher;\n  }\n\n  addSelectables(cssSelectors, callbackCtxt) {\n    let listContext = null;\n\n    if (cssSelectors.length > 1) {\n      listContext = new SelectorListContext(cssSelectors);\n\n      this._listContexts.push(listContext);\n    }\n\n    for (let i = 0; i < cssSelectors.length; i++) {\n      this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n    }\n  }\n  /**\r\n   * Add an object that can be found later on by calling `match`.\r\n   * @param cssSelector A css selector\r\n   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\r\n   */\n\n\n  _addSelectable(cssSelector, callbackCtxt, listContext) {\n    let matcher = this;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n\n    if (element) {\n      const isTerminal = attrs.length === 0 && classNames.length === 0;\n\n      if (isTerminal) {\n        this._addTerminal(matcher._elementMap, element, selectable);\n      } else {\n        matcher = this._addPartial(matcher._elementPartialMap, element);\n      }\n    }\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n        const className = classNames[i];\n\n        if (isTerminal) {\n          this._addTerminal(matcher._classMap, className, selectable);\n        } else {\n          matcher = this._addPartial(matcher._classPartialMap, className);\n        }\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const isTerminal = i === attrs.length - 2;\n        const name = attrs[i];\n        const value = attrs[i + 1];\n\n        if (isTerminal) {\n          const terminalMap = matcher._attrValueMap;\n          let terminalValuesMap = terminalMap.get(name);\n\n          if (!terminalValuesMap) {\n            terminalValuesMap = new Map();\n            terminalMap.set(name, terminalValuesMap);\n          }\n\n          this._addTerminal(terminalValuesMap, value, selectable);\n        } else {\n          const partialMap = matcher._attrValuePartialMap;\n          let partialValuesMap = partialMap.get(name);\n\n          if (!partialValuesMap) {\n            partialValuesMap = new Map();\n            partialMap.set(name, partialValuesMap);\n          }\n\n          matcher = this._addPartial(partialValuesMap, value);\n        }\n      }\n    }\n  }\n\n  _addTerminal(map, name, selectable) {\n    let terminalList = map.get(name);\n\n    if (!terminalList) {\n      terminalList = [];\n      map.set(name, terminalList);\n    }\n\n    terminalList.push(selectable);\n  }\n\n  _addPartial(map, name) {\n    let matcher = map.get(name);\n\n    if (!matcher) {\n      matcher = new SelectorMatcher();\n      map.set(name, matcher);\n    }\n\n    return matcher;\n  }\n  /**\r\n   * Find the objects that have been added via `addSelectable`\r\n   * whose css selector is contained in the given css selector.\r\n   * @param cssSelector A css selector\r\n   * @param matchedCallback This callback will be called with the object handed into `addSelectable`\r\n   * @return boolean true if a match was found\r\n   */\n\n\n  match(cssSelector, matchedCallback) {\n    let result = false;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n\n    for (let i = 0; i < this._listContexts.length; i++) {\n      this._listContexts[i].alreadyMatched = false;\n    }\n\n    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const className = classNames[i];\n        result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const name = attrs[i];\n        const value = attrs[i + 1];\n\n        const terminalValuesMap = this._attrValueMap.get(name);\n\n        if (value) {\n          result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n\n        result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n\n        const partialValuesMap = this._attrValuePartialMap.get(name);\n\n        if (value) {\n          result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n\n        result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n      }\n    }\n\n    return result;\n  }\n  /** @internal */\n\n\n  _matchTerminal(map, name, cssSelector, matchedCallback) {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    let selectables = map.get(name) || [];\n    const starSelectables = map.get('*');\n\n    if (starSelectables) {\n      selectables = selectables.concat(starSelectables);\n    }\n\n    if (selectables.length === 0) {\n      return false;\n    }\n\n    let selectable;\n    let result = false;\n\n    for (let i = 0; i < selectables.length; i++) {\n      selectable = selectables[i];\n      result = selectable.finalize(cssSelector, matchedCallback) || result;\n    }\n\n    return result;\n  }\n  /** @internal */\n\n\n  _matchPartial(map, name, cssSelector, matchedCallback) {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    const nestedSelector = map.get(name);\n\n    if (!nestedSelector) {\n      return false;\n    } // TODO(perf): get rid of recursion and measure again\n    // TODO(perf): don't pass the whole selector into the recursion,\n    // but only the not processed parts\n\n\n    return nestedSelector.match(cssSelector, matchedCallback);\n  }\n\n}\n\nclass SelectorListContext {\n  constructor(selectors) {\n    this.selectors = selectors;\n    this.alreadyMatched = false;\n  }\n\n} // Store context to pass back selector and context when a selector is matched\n\n\nclass SelectorContext {\n  constructor(selector, cbContext, listContext) {\n    this.selector = selector;\n    this.cbContext = cbContext;\n    this.listContext = listContext;\n    this.notSelectors = selector.notSelectors;\n  }\n\n  finalize(cssSelector, callback) {\n    let result = true;\n\n    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n      result = !notMatcher.match(cssSelector, null);\n    }\n\n    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n      if (this.listContext) {\n        this.listContext.alreadyMatched = true;\n      }\n\n      callback(this.selector, this.cbContext);\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst createInject = /*#__PURE__*/makeMetadataFactory('Inject', token => ({\n  token\n}));\nconst createInjectionToken = /*#__PURE__*/makeMetadataFactory('InjectionToken', desc => ({\n  _desc: desc,\n  ɵprov: undefined\n}));\nconst createAttribute = /*#__PURE__*/makeMetadataFactory('Attribute', attributeName => ({\n  attributeName\n})); // Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\n\nconst emitDistinctChangesOnlyDefaultValue = true;\nconst createContentChildren = /*#__PURE__*/makeMetadataFactory('ContentChildren', (selector, data = {}) => Object.assign({\n  selector,\n  first: false,\n  isViewQuery: false,\n  descendants: false,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue\n}, data));\nconst createContentChild = /*#__PURE__*/makeMetadataFactory('ContentChild', (selector, data = {}) => Object.assign({\n  selector,\n  first: true,\n  isViewQuery: false,\n  descendants: true\n}, data));\nconst createViewChildren = /*#__PURE__*/makeMetadataFactory('ViewChildren', (selector, data = {}) => Object.assign({\n  selector,\n  first: false,\n  isViewQuery: true,\n  descendants: true,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue\n}, data));\nconst createViewChild = /*#__PURE__*/makeMetadataFactory('ViewChild', (selector, data) => Object.assign({\n  selector,\n  first: true,\n  isViewQuery: true,\n  descendants: true\n}, data));\nconst createDirective = /*#__PURE__*/makeMetadataFactory('Directive', (dir = {}) => dir);\nvar ViewEncapsulation = /*#__PURE__*/(() => {\n  ViewEncapsulation = ViewEncapsulation || {};\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\"; // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n  return ViewEncapsulation;\n})();\nvar ChangeDetectionStrategy = /*#__PURE__*/(() => {\n  ChangeDetectionStrategy = ChangeDetectionStrategy || {};\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n  return ChangeDetectionStrategy;\n})();\nconst createComponent = /*#__PURE__*/makeMetadataFactory('Component', (c = {}) => Object.assign({\n  changeDetection: ChangeDetectionStrategy.Default\n}, c));\nconst createPipe = /*#__PURE__*/makeMetadataFactory('Pipe', p => Object.assign({\n  pure: true\n}, p));\nconst createInput = /*#__PURE__*/makeMetadataFactory('Input', bindingPropertyName => ({\n  bindingPropertyName\n}));\nconst createOutput = /*#__PURE__*/makeMetadataFactory('Output', bindingPropertyName => ({\n  bindingPropertyName\n}));\nconst createHostBinding = /*#__PURE__*/makeMetadataFactory('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\nconst createHostListener = /*#__PURE__*/makeMetadataFactory('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\nconst createNgModule = /*#__PURE__*/makeMetadataFactory('NgModule', ngModule => ngModule);\nconst createInjectable = /*#__PURE__*/makeMetadataFactory('Injectable', (injectable = {}) => injectable);\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nconst createOptional = /*#__PURE__*/makeMetadataFactory('Optional');\nconst createSelf = /*#__PURE__*/makeMetadataFactory('Self');\nconst createSkipSelf = /*#__PURE__*/makeMetadataFactory('SkipSelf');\nconst createHost = /*#__PURE__*/makeMetadataFactory('Host');\nconst Type = Function;\nvar SecurityContext = /*#__PURE__*/(() => {\n  SecurityContext = SecurityContext || {};\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n  return SecurityContext;\n})();\nvar MissingTranslationStrategy = /*#__PURE__*/(() => {\n  MissingTranslationStrategy = MissingTranslationStrategy || {};\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n  return MissingTranslationStrategy;\n})();\n\nfunction makeMetadataFactory(name, props) {\n  // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n  // that works with the static_reflector.ts in the ViewEngine compiler.\n  // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n  // new'ed.\n  function factory(...args) {\n    const values = props ? props(...args) : {};\n    return Object.assign({\n      ngMetadataName: name\n    }, values);\n  }\n\n  factory.isTypeOf = obj => obj && obj.ngMetadataName === name;\n\n  factory.ngMetadataName = name;\n  return factory;\n}\n\nfunction parserSelectorToSimpleSelector(selector) {\n  const classes = selector.classNames && selector.classNames.length ? [8\n  /* CLASS */\n  , ...selector.classNames] : [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\n\nfunction parserSelectorToNegativeSelector(selector) {\n  const classes = selector.classNames && selector.classNames.length ? [8\n  /* CLASS */\n  , ...selector.classNames] : [];\n\n  if (selector.element) {\n    return [1\n    /* NOT */\n    | 4\n    /* ELEMENT */\n    , selector.element, ...selector.attrs, ...classes];\n  } else if (selector.attrs.length) {\n    return [1\n    /* NOT */\n    | 2\n    /* ATTRIBUTE */\n    , ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ? [1\n    /* NOT */\n    | 8\n    /* CLASS */\n    , ...selector.classNames] : [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector) {\n  const positive = parserSelectorToSimpleSelector(selector);\n  const negative = selector.notSelectors && selector.notSelectors.length ? selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) : [];\n  return positive.concat(...negative);\n}\n\nfunction parseSelectorToR3Selector(selector) {\n  return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\nvar core = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createInject: createInject,\n  createInjectionToken: createInjectionToken,\n  createAttribute: createAttribute,\n  emitDistinctChangesOnlyDefaultValue: emitDistinctChangesOnlyDefaultValue,\n  createContentChildren: createContentChildren,\n  createContentChild: createContentChild,\n  createViewChildren: createViewChildren,\n  createViewChild: createViewChild,\n  createDirective: createDirective,\n\n  get ViewEncapsulation() {\n    return ViewEncapsulation;\n  },\n\n  get ChangeDetectionStrategy() {\n    return ChangeDetectionStrategy;\n  },\n\n  createComponent: createComponent,\n  createPipe: createPipe,\n  createInput: createInput,\n  createOutput: createOutput,\n  createHostBinding: createHostBinding,\n  createHostListener: createHostListener,\n  createNgModule: createNgModule,\n  createInjectable: createInjectable,\n  CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n  NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n  createOptional: createOptional,\n  createSelf: createSelf,\n  createSkipSelf: createSkipSelf,\n  createHost: createHost,\n  Type: Type,\n\n  get SecurityContext() {\n    return SecurityContext;\n  },\n\n  get MissingTranslationStrategy() {\n    return MissingTranslationStrategy;\n  },\n\n  parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n//// Types\n\nvar TypeModifier = /*#__PURE__*/(() => {\n  TypeModifier = TypeModifier || {};\n  TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n  return TypeModifier;\n})();\n\nclass Type$1 {\n  constructor(modifiers = []) {\n    this.modifiers = modifiers;\n  }\n\n  hasModifier(modifier) {\n    return this.modifiers.indexOf(modifier) !== -1;\n  }\n\n}\n\nvar BuiltinTypeName = /*#__PURE__*/(() => {\n  BuiltinTypeName = BuiltinTypeName || {};\n  BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n  BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n  BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n  BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n  BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n  BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n  BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n  BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n  return BuiltinTypeName;\n})();\n\nclass BuiltinType extends Type$1 {\n  constructor(name, modifiers) {\n    super(modifiers);\n    this.name = name;\n  }\n\n  visitType(visitor, context) {\n    return visitor.visitBuiltinType(this, context);\n  }\n\n}\n\nclass ExpressionType extends Type$1 {\n  constructor(value, modifiers, typeParams = null) {\n    super(modifiers);\n    this.value = value;\n    this.typeParams = typeParams;\n  }\n\n  visitType(visitor, context) {\n    return visitor.visitExpressionType(this, context);\n  }\n\n}\n\nclass ArrayType extends Type$1 {\n  constructor(of, modifiers) {\n    super(modifiers);\n    this.of = of;\n  }\n\n  visitType(visitor, context) {\n    return visitor.visitArrayType(this, context);\n  }\n\n}\n\nclass MapType extends Type$1 {\n  constructor(valueType, modifiers) {\n    super(modifiers);\n    this.valueType = valueType || null;\n  }\n\n  visitType(visitor, context) {\n    return visitor.visitMapType(this, context);\n  }\n\n}\n\nconst DYNAMIC_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Dynamic);\nconst INFERRED_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Inferred);\nconst BOOL_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Bool);\nconst INT_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Int);\nconst NUMBER_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Number);\nconst STRING_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.String);\nconst FUNCTION_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.Function);\nconst NONE_TYPE = /*#__PURE__*/new BuiltinType(BuiltinTypeName.None); ///// Expressions\n\nvar UnaryOperator = /*#__PURE__*/(() => {\n  UnaryOperator = UnaryOperator || {};\n  UnaryOperator[UnaryOperator[\"Minus\"] = 0] = \"Minus\";\n  UnaryOperator[UnaryOperator[\"Plus\"] = 1] = \"Plus\";\n  return UnaryOperator;\n})();\nvar BinaryOperator = /*#__PURE__*/(() => {\n  BinaryOperator = BinaryOperator || {};\n  BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n  BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n  BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n  BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n  BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n  BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n  BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n  BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n  BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n  BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n  BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n  BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 11] = \"BitwiseAnd\";\n  BinaryOperator[BinaryOperator[\"Lower\"] = 12] = \"Lower\";\n  BinaryOperator[BinaryOperator[\"LowerEquals\"] = 13] = \"LowerEquals\";\n  BinaryOperator[BinaryOperator[\"Bigger\"] = 14] = \"Bigger\";\n  BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 15] = \"BiggerEquals\";\n  BinaryOperator[BinaryOperator[\"NullishCoalesce\"] = 16] = \"NullishCoalesce\";\n  return BinaryOperator;\n})();\n\nfunction nullSafeIsEquivalent(base, other) {\n  if (base == null || other == null) {\n    return base == other;\n  }\n\n  return base.isEquivalent(other);\n}\n\nfunction areAllEquivalentPredicate(base, other, equivalentPredicate) {\n  const len = base.length;\n\n  if (len !== other.length) {\n    return false;\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (!equivalentPredicate(base[i], other[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction areAllEquivalent(base, other) {\n  return areAllEquivalentPredicate(base, other, (baseElement, otherElement) => baseElement.isEquivalent(otherElement));\n}\n\nclass Expression {\n  constructor(type, sourceSpan) {\n    this.type = type || null;\n    this.sourceSpan = sourceSpan || null;\n  }\n\n  prop(name, sourceSpan) {\n    return new ReadPropExpr(this, name, null, sourceSpan);\n  }\n\n  key(index, type, sourceSpan) {\n    return new ReadKeyExpr(this, index, type, sourceSpan);\n  }\n\n  callMethod(name, params, sourceSpan) {\n    return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n  }\n\n  callFn(params, sourceSpan, pure) {\n    return new InvokeFunctionExpr(this, params, null, sourceSpan, pure);\n  }\n\n  instantiate(params, type, sourceSpan) {\n    return new InstantiateExpr(this, params, type, sourceSpan);\n  }\n\n  conditional(trueCase, falseCase = null, sourceSpan) {\n    return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n  }\n\n  equals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n  }\n\n  notEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n  }\n\n  identical(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n  }\n\n  notIdentical(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n  }\n\n  minus(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n  }\n\n  plus(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n  }\n\n  divide(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n  }\n\n  multiply(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n  }\n\n  modulo(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n  }\n\n  and(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n  }\n\n  bitwiseAnd(rhs, sourceSpan, parens = true) {\n    return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n  }\n\n  or(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n  }\n\n  lower(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n  }\n\n  lowerEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n  }\n\n  bigger(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n  }\n\n  biggerEquals(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n  }\n\n  isBlank(sourceSpan) {\n    // Note: We use equals by purpose here to compare to null and undefined in JS.\n    // We use the typed null to allow strictNullChecks to narrow types.\n    return this.equals(TYPED_NULL_EXPR, sourceSpan);\n  }\n\n  cast(type, sourceSpan) {\n    return new CastExpr(this, type, sourceSpan);\n  }\n\n  nullishCoalesce(rhs, sourceSpan) {\n    return new BinaryOperatorExpr(BinaryOperator.NullishCoalesce, this, rhs, null, sourceSpan);\n  }\n\n  toStmt() {\n    return new ExpressionStatement(this, null);\n  }\n\n}\n\nvar BuiltinVar = /*#__PURE__*/(() => {\n  BuiltinVar = BuiltinVar || {};\n  BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n  BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n  BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n  BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n  return BuiltinVar;\n})();\n\nclass ReadVarExpr extends Expression {\n  constructor(name, type, sourceSpan) {\n    super(type, sourceSpan);\n\n    if (typeof name === 'string') {\n      this.name = name;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = name;\n    }\n  }\n\n  isEquivalent(e) {\n    return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitReadVarExpr(this, context);\n  }\n\n  set(value) {\n    if (!this.name) {\n      throw new Error(`Built in variable ${this.builtin} can not be assigned to.`);\n    }\n\n    return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n  }\n\n}\n\nclass TypeofExpr extends Expression {\n  constructor(expr, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.expr = expr;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitTypeofExpr(this, context);\n  }\n\n  isEquivalent(e) {\n    return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n  }\n\n  isConstant() {\n    return this.expr.isConstant();\n  }\n\n}\n\nclass WrappedNodeExpr extends Expression {\n  constructor(node, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.node = node;\n  }\n\n  isEquivalent(e) {\n    return e instanceof WrappedNodeExpr && this.node === e.node;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitWrappedNodeExpr(this, context);\n  }\n\n}\n\nclass WriteVarExpr extends Expression {\n  constructor(name, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.name = name;\n    this.value = value;\n  }\n\n  isEquivalent(e) {\n    return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitWriteVarExpr(this, context);\n  }\n\n  toDeclStmt(type, modifiers) {\n    return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n  }\n\n  toConstDecl() {\n    return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]);\n  }\n\n}\n\nclass WriteKeyExpr extends Expression {\n  constructor(receiver, index, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.receiver = receiver;\n    this.index = index;\n    this.value = value;\n  }\n\n  isEquivalent(e) {\n    return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitWriteKeyExpr(this, context);\n  }\n\n}\n\nclass WritePropExpr extends Expression {\n  constructor(receiver, name, value, type, sourceSpan) {\n    super(type || value.type, sourceSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.value = value;\n  }\n\n  isEquivalent(e) {\n    return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitWritePropExpr(this, context);\n  }\n\n}\n\nvar BuiltinMethod = /*#__PURE__*/(() => {\n  BuiltinMethod = BuiltinMethod || {};\n  BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n  BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n  BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n  return BuiltinMethod;\n})();\n\nclass InvokeMethodExpr extends Expression {\n  constructor(receiver, method, args, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.receiver = receiver;\n    this.args = args;\n\n    if (typeof method === 'string') {\n      this.name = method;\n      this.builtin = null;\n    } else {\n      this.name = null;\n      this.builtin = method;\n    }\n  }\n\n  isEquivalent(e) {\n    return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitInvokeMethodExpr(this, context);\n  }\n\n}\n\nclass InvokeFunctionExpr extends Expression {\n  constructor(fn, args, type, sourceSpan, pure = false) {\n    super(type, sourceSpan);\n    this.fn = fn;\n    this.args = args;\n    this.pure = pure;\n  }\n\n  isEquivalent(e) {\n    return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) && areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitInvokeFunctionExpr(this, context);\n  }\n\n}\n\nclass TaggedTemplateExpr extends Expression {\n  constructor(tag, template, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.tag = tag;\n    this.template = template;\n  }\n\n  isEquivalent(e) {\n    return e instanceof TaggedTemplateExpr && this.tag.isEquivalent(e.tag) && areAllEquivalentPredicate(this.template.elements, e.template.elements, (a, b) => a.text === b.text) && areAllEquivalent(this.template.expressions, e.template.expressions);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitTaggedTemplateExpr(this, context);\n  }\n\n}\n\nclass InstantiateExpr extends Expression {\n  constructor(classExpr, args, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.classExpr = classExpr;\n    this.args = args;\n  }\n\n  isEquivalent(e) {\n    return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) && areAllEquivalent(this.args, e.args);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitInstantiateExpr(this, context);\n  }\n\n}\n\nclass LiteralExpr extends Expression {\n  constructor(value, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.value = value;\n  }\n\n  isEquivalent(e) {\n    return e instanceof LiteralExpr && this.value === e.value;\n  }\n\n  isConstant() {\n    return true;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralExpr(this, context);\n  }\n\n}\n\nclass TemplateLiteral {\n  constructor(elements, expressions) {\n    this.elements = elements;\n    this.expressions = expressions;\n  }\n\n}\n\nclass TemplateLiteralElement {\n  constructor(text, sourceSpan, rawText) {\n    var _a;\n\n    this.text = text;\n    this.sourceSpan = sourceSpan; // If `rawText` is not provided, try to extract the raw string from its\n    // associated `sourceSpan`. If that is also not available, \"fake\" the raw\n    // string instead by escaping the following control sequences:\n    // - \"\\\" would otherwise indicate that the next character is a control character.\n    // - \"`\" and \"${\" are template string control sequences that would otherwise prematurely\n    // indicate the end of the template literal element.\n\n    this.rawText = (_a = rawText !== null && rawText !== void 0 ? rawText : sourceSpan === null || sourceSpan === void 0 ? void 0 : sourceSpan.toString()) !== null && _a !== void 0 ? _a : escapeForTemplateLiteral(escapeSlashes(text));\n  }\n\n}\n\nclass MessagePiece {\n  constructor(text, sourceSpan) {\n    this.text = text;\n    this.sourceSpan = sourceSpan;\n  }\n\n}\n\nclass LiteralPiece extends MessagePiece {}\n\nclass PlaceholderPiece extends MessagePiece {}\n\nclass LocalizedString extends Expression {\n  constructor(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {\n    super(STRING_TYPE, sourceSpan);\n    this.metaBlock = metaBlock;\n    this.messageParts = messageParts;\n    this.placeHolderNames = placeHolderNames;\n    this.expressions = expressions;\n  }\n\n  isEquivalent(e) {\n    // return e instanceof LocalizedString && this.message === e.message;\n    return false;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitLocalizedString(this, context);\n  }\n  /**\r\n   * Serialize the given `meta` and `messagePart` into \"cooked\" and \"raw\" strings that can be used\r\n   * in a `$localize` tagged string. The format of the metadata is the same as that parsed by\r\n   * `parseI18nMeta()`.\r\n   *\r\n   * @param meta The metadata to serialize\r\n   * @param messagePart The first part of the tagged string\r\n   */\n\n\n  serializeI18nHead() {\n    const MEANING_SEPARATOR = '|';\n    const ID_SEPARATOR = '@@';\n    const LEGACY_ID_INDICATOR = '␟';\n    let metaBlock = this.metaBlock.description || '';\n\n    if (this.metaBlock.meaning) {\n      metaBlock = `${this.metaBlock.meaning}${MEANING_SEPARATOR}${metaBlock}`;\n    }\n\n    if (this.metaBlock.customId) {\n      metaBlock = `${metaBlock}${ID_SEPARATOR}${this.metaBlock.customId}`;\n    }\n\n    if (this.metaBlock.legacyIds) {\n      this.metaBlock.legacyIds.forEach(legacyId => {\n        metaBlock = `${metaBlock}${LEGACY_ID_INDICATOR}${legacyId}`;\n      });\n    }\n\n    return createCookedRawString(metaBlock, this.messageParts[0].text, this.getMessagePartSourceSpan(0));\n  }\n\n  getMessagePartSourceSpan(i) {\n    var _a, _b;\n\n    return (_b = (_a = this.messageParts[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : this.sourceSpan;\n  }\n\n  getPlaceholderSourceSpan(i) {\n    var _a, _b, _c, _d;\n\n    return (_d = (_b = (_a = this.placeHolderNames[i]) === null || _a === void 0 ? void 0 : _a.sourceSpan) !== null && _b !== void 0 ? _b : (_c = this.expressions[i]) === null || _c === void 0 ? void 0 : _c.sourceSpan) !== null && _d !== void 0 ? _d : this.sourceSpan;\n  }\n  /**\r\n   * Serialize the given `placeholderName` and `messagePart` into \"cooked\" and \"raw\" strings that\r\n   * can be used in a `$localize` tagged string.\r\n   *\r\n   * @param placeholderName The placeholder name to serialize\r\n   * @param messagePart The following message string after this placeholder\r\n   */\n\n\n  serializeI18nTemplatePart(partIndex) {\n    const placeholderName = this.placeHolderNames[partIndex - 1].text;\n    const messagePart = this.messageParts[partIndex];\n    return createCookedRawString(placeholderName, messagePart.text, this.getMessagePartSourceSpan(partIndex));\n  }\n\n}\n\nconst escapeSlashes = str => str.replace(/\\\\/g, '\\\\\\\\');\n\nconst escapeStartingColon = str => str.replace(/^:/, '\\\\:');\n\nconst escapeColons = str => str.replace(/:/g, '\\\\:');\n\nconst escapeForTemplateLiteral = str => str.replace(/`/g, '\\\\`').replace(/\\${/g, '$\\\\{');\n/**\r\n * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.\r\n *\r\n * The `raw` text must have various character sequences escaped:\r\n * * \"\\\" would otherwise indicate that the next character is a control character.\r\n * * \"`\" and \"${\" are template string control sequences that would otherwise prematurely indicate\r\n *   the end of a message part.\r\n * * \":\" inside a metablock would prematurely indicate the end of the metablock.\r\n * * \":\" at the start of a messagePart with no metablock would erroneously indicate the start of a\r\n *   metablock.\r\n *\r\n * @param metaBlock Any metadata that should be prepended to the string\r\n * @param messagePart The message part of the string\r\n */\n\n\nfunction createCookedRawString(metaBlock, messagePart, range) {\n  if (metaBlock === '') {\n    return {\n      cooked: messagePart,\n      raw: escapeForTemplateLiteral(escapeStartingColon(escapeSlashes(messagePart))),\n      range\n    };\n  } else {\n    return {\n      cooked: `:${metaBlock}:${messagePart}`,\n      raw: escapeForTemplateLiteral(`:${escapeColons(escapeSlashes(metaBlock))}:${escapeSlashes(messagePart)}`),\n      range\n    };\n  }\n}\n\nclass ExternalExpr extends Expression {\n  constructor(value, type, typeParams = null, sourceSpan) {\n    super(type, sourceSpan);\n    this.value = value;\n    this.typeParams = typeParams;\n  }\n\n  isEquivalent(e) {\n    return e instanceof ExternalExpr && this.value.name === e.value.name && this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitExternalExpr(this, context);\n  }\n\n}\n\nclass ExternalReference {\n  constructor(moduleName, name, runtime) {\n    this.moduleName = moduleName;\n    this.name = name;\n    this.runtime = runtime;\n  }\n\n}\n\nclass ConditionalExpr extends Expression {\n  constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\n    super(type || trueCase.type, sourceSpan);\n    this.condition = condition;\n    this.falseCase = falseCase;\n    this.trueCase = trueCase;\n  }\n\n  isEquivalent(e) {\n    return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) && this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitConditionalExpr(this, context);\n  }\n\n}\n\nclass NotExpr extends Expression {\n  constructor(condition, sourceSpan) {\n    super(BOOL_TYPE, sourceSpan);\n    this.condition = condition;\n  }\n\n  isEquivalent(e) {\n    return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitNotExpr(this, context);\n  }\n\n}\n\nclass AssertNotNull extends Expression {\n  constructor(condition, sourceSpan) {\n    super(condition.type, sourceSpan);\n    this.condition = condition;\n  }\n\n  isEquivalent(e) {\n    return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitAssertNotNullExpr(this, context);\n  }\n\n}\n\nclass CastExpr extends Expression {\n  constructor(value, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.value = value;\n  }\n\n  isEquivalent(e) {\n    return e instanceof CastExpr && this.value.isEquivalent(e.value);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitCastExpr(this, context);\n  }\n\n}\n\nclass FnParam {\n  constructor(name, type = null) {\n    this.name = name;\n    this.type = type;\n  }\n\n  isEquivalent(param) {\n    return this.name === param.name;\n  }\n\n}\n\nclass FunctionExpr extends Expression {\n  constructor(params, statements, type, sourceSpan, name) {\n    super(type, sourceSpan);\n    this.params = params;\n    this.statements = statements;\n    this.name = name;\n  }\n\n  isEquivalent(e) {\n    return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) && areAllEquivalent(this.statements, e.statements);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitFunctionExpr(this, context);\n  }\n\n  toDeclStmt(name, modifiers) {\n    return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n  }\n\n}\n\nclass UnaryOperatorExpr extends Expression {\n  constructor(operator, expr, type, sourceSpan, parens = true) {\n    super(type || NUMBER_TYPE, sourceSpan);\n    this.operator = operator;\n    this.expr = expr;\n    this.parens = parens;\n  }\n\n  isEquivalent(e) {\n    return e instanceof UnaryOperatorExpr && this.operator === e.operator && this.expr.isEquivalent(e.expr);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitUnaryOperatorExpr(this, context);\n  }\n\n}\n\nclass BinaryOperatorExpr extends Expression {\n  constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {\n    super(type || lhs.type, sourceSpan);\n    this.operator = operator;\n    this.rhs = rhs;\n    this.parens = parens;\n    this.lhs = lhs;\n  }\n\n  isEquivalent(e) {\n    return e instanceof BinaryOperatorExpr && this.operator === e.operator && this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitBinaryOperatorExpr(this, context);\n  }\n\n}\n\nclass ReadPropExpr extends Expression {\n  constructor(receiver, name, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n\n  isEquivalent(e) {\n    return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) && this.name === e.name;\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitReadPropExpr(this, context);\n  }\n\n  set(value) {\n    return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n  }\n\n}\n\nclass ReadKeyExpr extends Expression {\n  constructor(receiver, index, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.receiver = receiver;\n    this.index = index;\n  }\n\n  isEquivalent(e) {\n    return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) && this.index.isEquivalent(e.index);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitReadKeyExpr(this, context);\n  }\n\n  set(value) {\n    return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n  }\n\n}\n\nclass LiteralArrayExpr extends Expression {\n  constructor(entries, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.entries = entries;\n  }\n\n  isConstant() {\n    return this.entries.every(e => e.isConstant());\n  }\n\n  isEquivalent(e) {\n    return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralArrayExpr(this, context);\n  }\n\n}\n\nclass LiteralMapEntry {\n  constructor(key, value, quoted) {\n    this.key = key;\n    this.value = value;\n    this.quoted = quoted;\n  }\n\n  isEquivalent(e) {\n    return this.key === e.key && this.value.isEquivalent(e.value);\n  }\n\n}\n\nclass LiteralMapExpr extends Expression {\n  constructor(entries, type, sourceSpan) {\n    super(type, sourceSpan);\n    this.entries = entries;\n    this.valueType = null;\n\n    if (type) {\n      this.valueType = type.valueType;\n    }\n  }\n\n  isEquivalent(e) {\n    return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n  }\n\n  isConstant() {\n    return this.entries.every(e => e.value.isConstant());\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitLiteralMapExpr(this, context);\n  }\n\n}\n\nclass CommaExpr extends Expression {\n  constructor(parts, sourceSpan) {\n    super(parts[parts.length - 1].type, sourceSpan);\n    this.parts = parts;\n  }\n\n  isEquivalent(e) {\n    return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n  }\n\n  isConstant() {\n    return false;\n  }\n\n  visitExpression(visitor, context) {\n    return visitor.visitCommaExpr(this, context);\n  }\n\n}\n\nconst THIS_EXPR = /*#__PURE__*/new ReadVarExpr(BuiltinVar.This, null, null);\nconst SUPER_EXPR = /*#__PURE__*/new ReadVarExpr(BuiltinVar.Super, null, null);\nconst CATCH_ERROR_VAR = /*#__PURE__*/new ReadVarExpr(BuiltinVar.CatchError, null, null);\nconst CATCH_STACK_VAR = /*#__PURE__*/new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nconst NULL_EXPR = /*#__PURE__*/new LiteralExpr(null, null, null);\nconst TYPED_NULL_EXPR = /*#__PURE__*/new LiteralExpr(null, INFERRED_TYPE, null); //// Statements\n\nvar StmtModifier = /*#__PURE__*/(() => {\n  StmtModifier = StmtModifier || {};\n  StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n  StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n  StmtModifier[StmtModifier[\"Exported\"] = 2] = \"Exported\";\n  StmtModifier[StmtModifier[\"Static\"] = 3] = \"Static\";\n  return StmtModifier;\n})();\n\nclass LeadingComment {\n  constructor(text, multiline, trailingNewline) {\n    this.text = text;\n    this.multiline = multiline;\n    this.trailingNewline = trailingNewline;\n  }\n\n  toString() {\n    return this.multiline ? ` ${this.text} ` : this.text;\n  }\n\n}\n\nclass JSDocComment extends LeadingComment {\n  constructor(tags) {\n    super('',\n    /* multiline */\n    true,\n    /* trailingNewline */\n    true);\n    this.tags = tags;\n  }\n\n  toString() {\n    return serializeTags(this.tags);\n  }\n\n}\n\nclass Statement {\n  constructor(modifiers = [], sourceSpan = null, leadingComments) {\n    this.modifiers = modifiers;\n    this.sourceSpan = sourceSpan;\n    this.leadingComments = leadingComments;\n  }\n\n  hasModifier(modifier) {\n    return this.modifiers.indexOf(modifier) !== -1;\n  }\n\n  addLeadingComment(leadingComment) {\n    var _a;\n\n    this.leadingComments = (_a = this.leadingComments) !== null && _a !== void 0 ? _a : [];\n    this.leadingComments.push(leadingComment);\n  }\n\n}\n\nclass DeclareVarStmt extends Statement {\n  constructor(name, value, type, modifiers, sourceSpan, leadingComments) {\n    super(modifiers, sourceSpan, leadingComments);\n    this.name = name;\n    this.value = value;\n    this.type = type || value && value.type || null;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof DeclareVarStmt && this.name === stmt.name && (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitDeclareVarStmt(this, context);\n  }\n\n}\n\nclass DeclareFunctionStmt extends Statement {\n  constructor(name, params, statements, type, modifiers, sourceSpan, leadingComments) {\n    super(modifiers, sourceSpan, leadingComments);\n    this.name = name;\n    this.params = params;\n    this.statements = statements;\n    this.type = type || null;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) && areAllEquivalent(this.statements, stmt.statements);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitDeclareFunctionStmt(this, context);\n  }\n\n}\n\nclass ExpressionStatement extends Statement {\n  constructor(expr, sourceSpan, leadingComments) {\n    super([], sourceSpan, leadingComments);\n    this.expr = expr;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitExpressionStmt(this, context);\n  }\n\n}\n\nclass ReturnStatement extends Statement {\n  constructor(value, sourceSpan = null, leadingComments) {\n    super([], sourceSpan, leadingComments);\n    this.value = value;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitReturnStmt(this, context);\n  }\n\n}\n\nclass AbstractClassPart {\n  constructor(type = null, modifiers = []) {\n    this.type = type;\n    this.modifiers = modifiers;\n  }\n\n  hasModifier(modifier) {\n    return this.modifiers.indexOf(modifier) !== -1;\n  }\n\n}\n\nclass ClassField extends AbstractClassPart {\n  constructor(name, type, modifiers, initializer) {\n    super(type, modifiers);\n    this.name = name;\n    this.initializer = initializer;\n  }\n\n  isEquivalent(f) {\n    return this.name === f.name;\n  }\n\n}\n\nclass ClassMethod extends AbstractClassPart {\n  constructor(name, params, body, type, modifiers) {\n    super(type, modifiers);\n    this.name = name;\n    this.params = params;\n    this.body = body;\n  }\n\n  isEquivalent(m) {\n    return this.name === m.name && areAllEquivalent(this.body, m.body);\n  }\n\n}\n\nclass ClassGetter extends AbstractClassPart {\n  constructor(name, body, type, modifiers) {\n    super(type, modifiers);\n    this.name = name;\n    this.body = body;\n  }\n\n  isEquivalent(m) {\n    return this.name === m.name && areAllEquivalent(this.body, m.body);\n  }\n\n}\n\nclass ClassStmt extends Statement {\n  constructor(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan, leadingComments) {\n    super(modifiers, sourceSpan, leadingComments);\n    this.name = name;\n    this.parent = parent;\n    this.fields = fields;\n    this.getters = getters;\n    this.constructorMethod = constructorMethod;\n    this.methods = methods;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof ClassStmt && this.name === stmt.name && nullSafeIsEquivalent(this.parent, stmt.parent) && areAllEquivalent(this.fields, stmt.fields) && areAllEquivalent(this.getters, stmt.getters) && this.constructorMethod.isEquivalent(stmt.constructorMethod) && areAllEquivalent(this.methods, stmt.methods);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitDeclareClassStmt(this, context);\n  }\n\n}\n\nclass IfStmt extends Statement {\n  constructor(condition, trueCase, falseCase = [], sourceSpan, leadingComments) {\n    super([], sourceSpan, leadingComments);\n    this.condition = condition;\n    this.trueCase = trueCase;\n    this.falseCase = falseCase;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) && areAllEquivalent(this.trueCase, stmt.trueCase) && areAllEquivalent(this.falseCase, stmt.falseCase);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitIfStmt(this, context);\n  }\n\n}\n\nclass TryCatchStmt extends Statement {\n  constructor(bodyStmts, catchStmts, sourceSpan = null, leadingComments) {\n    super([], sourceSpan, leadingComments);\n    this.bodyStmts = bodyStmts;\n    this.catchStmts = catchStmts;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) && areAllEquivalent(this.catchStmts, stmt.catchStmts);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitTryCatchStmt(this, context);\n  }\n\n}\n\nclass ThrowStmt extends Statement {\n  constructor(error, sourceSpan = null, leadingComments) {\n    super([], sourceSpan, leadingComments);\n    this.error = error;\n  }\n\n  isEquivalent(stmt) {\n    return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n  }\n\n  visitStatement(visitor, context) {\n    return visitor.visitThrowStmt(this, context);\n  }\n\n}\n\nclass AstTransformer {\n  transformExpr(expr, context) {\n    return expr;\n  }\n\n  transformStmt(stmt, context) {\n    return stmt;\n  }\n\n  visitReadVarExpr(ast, context) {\n    return this.transformExpr(ast, context);\n  }\n\n  visitWrappedNodeExpr(ast, context) {\n    return this.transformExpr(ast, context);\n  }\n\n  visitTypeofExpr(expr, context) {\n    return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n  }\n\n  visitWriteVarExpr(expr, context) {\n    return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n  }\n\n  visitWriteKeyExpr(expr, context) {\n    return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n  }\n\n  visitWritePropExpr(expr, context) {\n    return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n  }\n\n  visitInvokeMethodExpr(ast, context) {\n    const method = ast.builtin || ast.name;\n    return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitInvokeFunctionExpr(ast, context) {\n    return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitTaggedTemplateExpr(ast, context) {\n    return this.transformExpr(new TaggedTemplateExpr(ast.tag.visitExpression(this, context), new TemplateLiteral(ast.template.elements, ast.template.expressions.map(e => e.visitExpression(this, context))), ast.type, ast.sourceSpan), context);\n  }\n\n  visitInstantiateExpr(ast, context) {\n    return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitLiteralExpr(ast, context) {\n    return this.transformExpr(ast, context);\n  }\n\n  visitLocalizedString(ast, context) {\n    return this.transformExpr(new LocalizedString(ast.metaBlock, ast.messageParts, ast.placeHolderNames, this.visitAllExpressions(ast.expressions, context), ast.sourceSpan), context);\n  }\n\n  visitExternalExpr(ast, context) {\n    return this.transformExpr(ast, context);\n  }\n\n  visitConditionalExpr(ast, context) {\n    return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitNotExpr(ast, context) {\n    return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n  }\n\n  visitAssertNotNullExpr(ast, context) {\n    return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n  }\n\n  visitCastExpr(ast, context) {\n    return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitFunctionExpr(ast, context) {\n    return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitUnaryOperatorExpr(ast, context) {\n    return this.transformExpr(new UnaryOperatorExpr(ast.operator, ast.expr.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitBinaryOperatorExpr(ast, context) {\n    return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitReadPropExpr(ast, context) {\n    return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n  }\n\n  visitReadKeyExpr(ast, context) {\n    return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitLiteralArrayExpr(ast, context) {\n    return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n  }\n\n  visitLiteralMapExpr(ast, context) {\n    const entries = ast.entries.map(entry => new LiteralMapEntry(entry.key, entry.value.visitExpression(this, context), entry.quoted));\n    const mapType = new MapType(ast.valueType);\n    return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n  }\n\n  visitCommaExpr(ast, context) {\n    return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n  }\n\n  visitAllExpressions(exprs, context) {\n    return exprs.map(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt, context) {\n    const value = stmt.value && stmt.value.visitExpression(this, context);\n    return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitDeclareFunctionStmt(stmt, context) {\n    return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitExpressionStmt(stmt, context) {\n    return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitReturnStmt(stmt, context) {\n    return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitDeclareClassStmt(stmt, context) {\n    const parent = stmt.parent.visitExpression(this, context);\n    const getters = stmt.getters.map(getter => new ClassGetter(getter.name, this.visitAllStatements(getter.body, context), getter.type, getter.modifiers));\n    const ctorMethod = stmt.constructorMethod && new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n    const methods = stmt.methods.map(method => new ClassMethod(method.name, method.params, this.visitAllStatements(method.body, context), method.type, method.modifiers));\n    return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n  }\n\n  visitIfStmt(stmt, context) {\n    return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitTryCatchStmt(stmt, context) {\n    return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitThrowStmt(stmt, context) {\n    return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan, stmt.leadingComments), context);\n  }\n\n  visitAllStatements(stmts, context) {\n    return stmts.map(stmt => stmt.visitStatement(this, context));\n  }\n\n}\n\nclass RecursiveAstVisitor {\n  visitType(ast, context) {\n    return ast;\n  }\n\n  visitExpression(ast, context) {\n    if (ast.type) {\n      ast.type.visitType(this, context);\n    }\n\n    return ast;\n  }\n\n  visitBuiltinType(type, context) {\n    return this.visitType(type, context);\n  }\n\n  visitExpressionType(type, context) {\n    type.value.visitExpression(this, context);\n\n    if (type.typeParams !== null) {\n      type.typeParams.forEach(param => this.visitType(param, context));\n    }\n\n    return this.visitType(type, context);\n  }\n\n  visitArrayType(type, context) {\n    return this.visitType(type, context);\n  }\n\n  visitMapType(type, context) {\n    return this.visitType(type, context);\n  }\n\n  visitWrappedNodeExpr(ast, context) {\n    return ast;\n  }\n\n  visitTypeofExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n\n  visitReadVarExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n\n  visitWriteVarExpr(ast, context) {\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitWriteKeyExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitWritePropExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitInvokeMethodExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitInvokeFunctionExpr(ast, context) {\n    ast.fn.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitTaggedTemplateExpr(ast, context) {\n    ast.tag.visitExpression(this, context);\n    this.visitAllExpressions(ast.template.expressions, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitInstantiateExpr(ast, context) {\n    ast.classExpr.visitExpression(this, context);\n    this.visitAllExpressions(ast.args, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitLiteralExpr(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n\n  visitLocalizedString(ast, context) {\n    return this.visitExpression(ast, context);\n  }\n\n  visitExternalExpr(ast, context) {\n    if (ast.typeParams) {\n      ast.typeParams.forEach(type => type.visitType(this, context));\n    }\n\n    return this.visitExpression(ast, context);\n  }\n\n  visitConditionalExpr(ast, context) {\n    ast.condition.visitExpression(this, context);\n    ast.trueCase.visitExpression(this, context);\n    ast.falseCase.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitNotExpr(ast, context) {\n    ast.condition.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitAssertNotNullExpr(ast, context) {\n    ast.condition.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitCastExpr(ast, context) {\n    ast.value.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitFunctionExpr(ast, context) {\n    this.visitAllStatements(ast.statements, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitUnaryOperatorExpr(ast, context) {\n    ast.expr.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitBinaryOperatorExpr(ast, context) {\n    ast.lhs.visitExpression(this, context);\n    ast.rhs.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitReadPropExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitReadKeyExpr(ast, context) {\n    ast.receiver.visitExpression(this, context);\n    ast.index.visitExpression(this, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitLiteralArrayExpr(ast, context) {\n    this.visitAllExpressions(ast.entries, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitLiteralMapExpr(ast, context) {\n    ast.entries.forEach(entry => entry.value.visitExpression(this, context));\n    return this.visitExpression(ast, context);\n  }\n\n  visitCommaExpr(ast, context) {\n    this.visitAllExpressions(ast.parts, context);\n    return this.visitExpression(ast, context);\n  }\n\n  visitAllExpressions(exprs, context) {\n    exprs.forEach(expr => expr.visitExpression(this, context));\n  }\n\n  visitDeclareVarStmt(stmt, context) {\n    if (stmt.value) {\n      stmt.value.visitExpression(this, context);\n    }\n\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n\n    return stmt;\n  }\n\n  visitDeclareFunctionStmt(stmt, context) {\n    this.visitAllStatements(stmt.statements, context);\n\n    if (stmt.type) {\n      stmt.type.visitType(this, context);\n    }\n\n    return stmt;\n  }\n\n  visitExpressionStmt(stmt, context) {\n    stmt.expr.visitExpression(this, context);\n    return stmt;\n  }\n\n  visitReturnStmt(stmt, context) {\n    stmt.value.visitExpression(this, context);\n    return stmt;\n  }\n\n  visitDeclareClassStmt(stmt, context) {\n    stmt.parent.visitExpression(this, context);\n    stmt.getters.forEach(getter => this.visitAllStatements(getter.body, context));\n\n    if (stmt.constructorMethod) {\n      this.visitAllStatements(stmt.constructorMethod.body, context);\n    }\n\n    stmt.methods.forEach(method => this.visitAllStatements(method.body, context));\n    return stmt;\n  }\n\n  visitIfStmt(stmt, context) {\n    stmt.condition.visitExpression(this, context);\n    this.visitAllStatements(stmt.trueCase, context);\n    this.visitAllStatements(stmt.falseCase, context);\n    return stmt;\n  }\n\n  visitTryCatchStmt(stmt, context) {\n    this.visitAllStatements(stmt.bodyStmts, context);\n    this.visitAllStatements(stmt.catchStmts, context);\n    return stmt;\n  }\n\n  visitThrowStmt(stmt, context) {\n    stmt.error.visitExpression(this, context);\n    return stmt;\n  }\n\n  visitAllStatements(stmts, context) {\n    stmts.forEach(stmt => stmt.visitStatement(this, context));\n  }\n\n}\n\nfunction findReadVarNames(stmts) {\n  const visitor = new _ReadVarVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.varNames;\n}\n\nclass _ReadVarVisitor extends RecursiveAstVisitor {\n  constructor() {\n    super(...arguments);\n    this.varNames = new Set();\n  }\n\n  visitDeclareFunctionStmt(stmt, context) {\n    // Don't descend into nested functions\n    return stmt;\n  }\n\n  visitDeclareClassStmt(stmt, context) {\n    // Don't descend into nested classes\n    return stmt;\n  }\n\n  visitReadVarExpr(ast, context) {\n    if (ast.name) {\n      this.varNames.add(ast.name);\n    }\n\n    return null;\n  }\n\n}\n\nfunction collectExternalReferences(stmts) {\n  const visitor = new _FindExternalReferencesVisitor();\n  visitor.visitAllStatements(stmts, null);\n  return visitor.externalReferences;\n}\n\nclass _FindExternalReferencesVisitor extends RecursiveAstVisitor {\n  constructor() {\n    super(...arguments);\n    this.externalReferences = [];\n  }\n\n  visitExternalExpr(e, context) {\n    this.externalReferences.push(e.value);\n    return super.visitExternalExpr(e, context);\n  }\n\n}\n\nfunction applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n  if (!sourceSpan) {\n    return stmt;\n  }\n\n  const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return stmt.visitStatement(transformer, null);\n}\n\nfunction applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n  if (!sourceSpan) {\n    return expr;\n  }\n\n  const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n  return expr.visitExpression(transformer, null);\n}\n\nclass _ApplySourceSpanTransformer extends AstTransformer {\n  constructor(sourceSpan) {\n    super();\n    this.sourceSpan = sourceSpan;\n  }\n\n  _clone(obj) {\n    const clone = Object.create(obj.constructor.prototype);\n\n    for (let prop of Object.keys(obj)) {\n      clone[prop] = obj[prop];\n    }\n\n    return clone;\n  }\n\n  transformExpr(expr, context) {\n    if (!expr.sourceSpan) {\n      expr = this._clone(expr);\n      expr.sourceSpan = this.sourceSpan;\n    }\n\n    return expr;\n  }\n\n  transformStmt(stmt, context) {\n    if (!stmt.sourceSpan) {\n      stmt = this._clone(stmt);\n      stmt.sourceSpan = this.sourceSpan;\n    }\n\n    return stmt;\n  }\n\n}\n\nfunction leadingComment(text, multiline = false, trailingNewline = true) {\n  return new LeadingComment(text, multiline, trailingNewline);\n}\n\nfunction jsDocComment(tags = []) {\n  return new JSDocComment(tags);\n}\n\nfunction variable(name, type, sourceSpan) {\n  return new ReadVarExpr(name, type, sourceSpan);\n}\n\nfunction importExpr(id, typeParams = null, sourceSpan) {\n  return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\n\nfunction importType(id, typeParams, typeModifiers) {\n  return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\n\nfunction expressionType(expr, typeModifiers, typeParams) {\n  return new ExpressionType(expr, typeModifiers, typeParams);\n}\n\nfunction typeofExpr(expr) {\n  return new TypeofExpr(expr);\n}\n\nfunction literalArr(values, type, sourceSpan) {\n  return new LiteralArrayExpr(values, type, sourceSpan);\n}\n\nfunction literalMap(values, type = null) {\n  return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\n\nfunction unary(operator, expr, type, sourceSpan) {\n  return new UnaryOperatorExpr(operator, expr, type, sourceSpan);\n}\n\nfunction not(expr, sourceSpan) {\n  return new NotExpr(expr, sourceSpan);\n}\n\nfunction assertNotNull(expr, sourceSpan) {\n  return new AssertNotNull(expr, sourceSpan);\n}\n\nfunction fn(params, body, type, sourceSpan, name) {\n  return new FunctionExpr(params, body, type, sourceSpan, name);\n}\n\nfunction ifStmt(condition, thenClause, elseClause, sourceSpan, leadingComments) {\n  return new IfStmt(condition, thenClause, elseClause, sourceSpan, leadingComments);\n}\n\nfunction taggedTemplate(tag, template, type, sourceSpan) {\n  return new TaggedTemplateExpr(tag, template, type, sourceSpan);\n}\n\nfunction literal(value, type, sourceSpan) {\n  return new LiteralExpr(value, type, sourceSpan);\n}\n\nfunction localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {\n  return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);\n}\n\nfunction isNull(exp) {\n  return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\r\n * Serializes a `Tag` into a string.\r\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\r\n */\n\n\nfunction tagToString(tag) {\n  let out = '';\n\n  if (tag.tagName) {\n    out += ` @${tag.tagName}`;\n  }\n\n  if (tag.text) {\n    if (tag.text.match(/\\/\\*|\\*\\//)) {\n      throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n    }\n\n    out += ' ' + tag.text.replace(/@/g, '\\\\@');\n  }\n\n  return out;\n}\n\nfunction serializeTags(tags) {\n  if (tags.length === 0) return '';\n\n  if (tags.length === 1 && tags[0].tagName && !tags[0].text) {\n    // The JSDOC comment is a single simple tag: e.g `/** @tagname */`.\n    return `*${tagToString(tags[0])} `;\n  }\n\n  let out = '*\\n';\n\n  for (const tag of tags) {\n    out += ' *'; // If the tagToString is multi-line, insert \" * \" prefixes on lines.\n\n    out += tagToString(tag).replace(/\\n/g, '\\n * ');\n    out += '\\n';\n  }\n\n  out += ' ';\n  return out;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst CONSTANT_PREFIX = '_c';\n/**\r\n * `ConstantPool` tries to reuse literal factories when two or more literals are identical.\r\n * We determine whether literals are identical by creating a key out of their AST using the\r\n * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely\r\n * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what\r\n * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note\r\n * that we use a variable, rather than something like `null` in order to avoid collisions.\r\n */\n\nconst UNKNOWN_VALUE_KEY = /*#__PURE__*/variable('<unknown>');\n/**\r\n * Context to use when producing a key.\r\n *\r\n * This ensures we see the constant not the reference variable when producing\r\n * a key.\r\n */\n\nconst KEY_CONTEXT = {};\n/**\r\n * Generally all primitive values are excluded from the `ConstantPool`, but there is an exclusion\r\n * for strings that reach a certain length threshold. This constant defines the length threshold for\r\n * strings.\r\n */\n\nconst POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS = 50;\n/**\r\n * A node that is a place-holder that allows the node to be replaced when the actual\r\n * node is known.\r\n *\r\n * This allows the constant pool to change an expression from a direct reference to\r\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\r\n * change the referenced expression.\r\n */\n\nclass FixupExpression extends Expression {\n  constructor(resolved) {\n    super(resolved.type);\n    this.resolved = resolved;\n    this.original = resolved;\n  }\n\n  visitExpression(visitor, context) {\n    if (context === KEY_CONTEXT) {\n      // When producing a key we want to traverse the constant not the\n      // variable used to refer to it.\n      return this.original.visitExpression(visitor, context);\n    } else {\n      return this.resolved.visitExpression(visitor, context);\n    }\n  }\n\n  isEquivalent(e) {\n    return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n  }\n\n  isConstant() {\n    return true;\n  }\n\n  fixup(expression) {\n    this.resolved = expression;\n    this.shared = true;\n  }\n\n}\n/**\r\n * A constant pool allows a code emitter to share constant in an output context.\r\n *\r\n * The constant pool also supports sharing access to ivy definitions references.\r\n */\n\n\nclass ConstantPool {\n  constructor(isClosureCompilerEnabled = false) {\n    this.isClosureCompilerEnabled = isClosureCompilerEnabled;\n    this.statements = [];\n    this.literals = new Map();\n    this.literalFactories = new Map();\n    this.injectorDefinitions = new Map();\n    this.directiveDefinitions = new Map();\n    this.componentDefinitions = new Map();\n    this.pipeDefinitions = new Map();\n    this.nextNameIndex = 0;\n  }\n\n  getConstLiteral(literal, forceShared) {\n    if (literal instanceof LiteralExpr && !isLongStringLiteral(literal) || literal instanceof FixupExpression) {\n      // Do no put simple literals into the constant pool or try to produce a constant for a\n      // reference to a constant.\n      return literal;\n    }\n\n    const key = this.keyOf(literal);\n    let fixup = this.literals.get(key);\n    let newValue = false;\n\n    if (!fixup) {\n      fixup = new FixupExpression(literal);\n      this.literals.set(key, fixup);\n      newValue = true;\n    }\n\n    if (!newValue && !fixup.shared || newValue && forceShared) {\n      // Replace the expression with a variable\n      const name = this.freshName();\n      let definition;\n      let usage;\n\n      if (this.isClosureCompilerEnabled && isLongStringLiteral(literal)) {\n        // For string literals, Closure will **always** inline the string at\n        // **all** usages, duplicating it each time. For large strings, this\n        // unnecessarily bloats bundle size. To work around this restriction, we\n        // wrap the string in a function, and call that function for each usage.\n        // This tricks Closure into using inline logic for functions instead of\n        // string literals. Function calls are only inlined if the body is small\n        // enough to be worth it. By doing this, very large strings will be\n        // shared across multiple usages, rather than duplicating the string at\n        // each usage site.\n        //\n        // const myStr = function() { return \"very very very long string\"; };\n        // const usage1 = myStr();\n        // const usage2 = myStr();\n        definition = variable(name).set(new FunctionExpr([], // Params.\n        [// Statements.\n        new ReturnStatement(literal)]));\n        usage = variable(name).callFn([]);\n      } else {\n        // Just declare and use the variable directly, without a function call\n        // indirection. This saves a few bytes and avoids an unncessary call.\n        definition = variable(name).set(literal);\n        usage = variable(name);\n      }\n\n      this.statements.push(definition.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n      fixup.fixup(usage);\n    }\n\n    return fixup;\n  }\n\n  getDefinition(type, kind, ctx, forceShared = false) {\n    const definitions = this.definitionsOf(kind);\n    let fixup = definitions.get(type);\n    let newValue = false;\n\n    if (!fixup) {\n      const property = this.propertyNameOf(kind);\n      fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n      definitions.set(type, fixup);\n      newValue = true;\n    }\n\n    if (!newValue && !fixup.shared || newValue && forceShared) {\n      const name = this.freshName();\n      this.statements.push(variable(name).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n      fixup.fixup(variable(name));\n    }\n\n    return fixup;\n  }\n\n  getLiteralFactory(literal) {\n    // Create a pure function that builds an array of a mix of constant and variable expressions\n    if (literal instanceof LiteralArrayExpr) {\n      const argumentsForKey = literal.entries.map(e => e.isConstant() ? e : UNKNOWN_VALUE_KEY);\n      const key = this.keyOf(literalArr(argumentsForKey));\n      return this._getLiteralFactory(key, literal.entries, entries => literalArr(entries));\n    } else {\n      const expressionForKey = literalMap(literal.entries.map(e => ({\n        key: e.key,\n        value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,\n        quoted: e.quoted\n      })));\n      const key = this.keyOf(expressionForKey);\n      return this._getLiteralFactory(key, literal.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({\n        key: literal.entries[index].key,\n        value,\n        quoted: literal.entries[index].quoted\n      }))));\n    }\n  }\n\n  _getLiteralFactory(key, values, resultMap) {\n    let literalFactory = this.literalFactories.get(key);\n    const literalFactoryArguments = values.filter(e => !e.isConstant());\n\n    if (!literalFactory) {\n      const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));\n      const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));\n      const pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);\n      const name = this.freshName();\n      this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n      literalFactory = variable(name);\n      this.literalFactories.set(key, literalFactory);\n    }\n\n    return {\n      literalFactory,\n      literalFactoryArguments\n    };\n  }\n  /**\r\n   * Produce a unique name.\r\n   *\r\n   * The name might be unique among different prefixes if any of the prefixes end in\r\n   * a digit so the prefix should be a constant string (not based on user input) and\r\n   * must not end in a digit.\r\n   */\n\n\n  uniqueName(prefix) {\n    return `${prefix}${this.nextNameIndex++}`;\n  }\n\n  definitionsOf(kind) {\n    switch (kind) {\n      case 2\n      /* Component */\n      :\n        return this.componentDefinitions;\n\n      case 1\n      /* Directive */\n      :\n        return this.directiveDefinitions;\n\n      case 0\n      /* Injector */\n      :\n        return this.injectorDefinitions;\n\n      case 3\n      /* Pipe */\n      :\n        return this.pipeDefinitions;\n    }\n  }\n\n  propertyNameOf(kind) {\n    switch (kind) {\n      case 2\n      /* Component */\n      :\n        return 'ɵcmp';\n\n      case 1\n      /* Directive */\n      :\n        return 'ɵdir';\n\n      case 0\n      /* Injector */\n      :\n        return 'ɵinj';\n\n      case 3\n      /* Pipe */\n      :\n        return 'ɵpipe';\n    }\n  }\n\n  freshName() {\n    return this.uniqueName(CONSTANT_PREFIX);\n  }\n\n  keyOf(expression) {\n    return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n  }\n\n}\n/**\r\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\r\n * `ConstantPool`.\r\n *\r\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\r\n */\n\n\nclass KeyVisitor {\n  constructor() {\n    this.visitWrappedNodeExpr = invalid;\n    this.visitWriteVarExpr = invalid;\n    this.visitWriteKeyExpr = invalid;\n    this.visitWritePropExpr = invalid;\n    this.visitInvokeMethodExpr = invalid;\n    this.visitInvokeFunctionExpr = invalid;\n    this.visitTaggedTemplateExpr = invalid;\n    this.visitInstantiateExpr = invalid;\n    this.visitConditionalExpr = invalid;\n    this.visitNotExpr = invalid;\n    this.visitAssertNotNullExpr = invalid;\n    this.visitCastExpr = invalid;\n    this.visitFunctionExpr = invalid;\n    this.visitUnaryOperatorExpr = invalid;\n    this.visitBinaryOperatorExpr = invalid;\n    this.visitReadPropExpr = invalid;\n    this.visitReadKeyExpr = invalid;\n    this.visitCommaExpr = invalid;\n    this.visitLocalizedString = invalid;\n  }\n\n  visitLiteralExpr(ast) {\n    return `${typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value}`;\n  }\n\n  visitLiteralArrayExpr(ast, context) {\n    return `[${ast.entries.map(entry => entry.visitExpression(this, context)).join(',')}]`;\n  }\n\n  visitLiteralMapExpr(ast, context) {\n    const mapKey = entry => {\n      const quote = entry.quoted ? '\"' : '';\n      return `${quote}${entry.key}${quote}`;\n    };\n\n    const mapEntry = entry => `${mapKey(entry)}:${entry.value.visitExpression(this, context)}`;\n\n    return `{${ast.entries.map(mapEntry).join(',')}`;\n  }\n\n  visitExternalExpr(ast) {\n    return ast.value.moduleName ? `EX:${ast.value.moduleName}:${ast.value.name}` : `EX:${ast.value.runtime.name}`;\n  }\n\n  visitReadVarExpr(node) {\n    return `VAR:${node.name}`;\n  }\n\n  visitTypeofExpr(node, context) {\n    return `TYPEOF:${node.expr.visitExpression(this, context)}`;\n  }\n\n}\n\nfunction invalid(arg) {\n  throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\n\nfunction isVariable(e) {\n  return e instanceof ReadVarExpr;\n}\n\nfunction isLongStringLiteral(expr) {\n  return expr instanceof LiteralExpr && typeof expr.value === 'string' && expr.value.length >= POOL_INCLUSION_LENGTH_THRESHOLD_FOR_STRINGS;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst CORE = '@angular/core';\nlet Identifiers = /*#__PURE__*/(() => {\n  class Identifiers {}\n\n  /* Methods */\n  Identifiers.NEW_METHOD = 'factory';\n  Identifiers.TRANSFORM_METHOD = 'transform';\n  Identifiers.PATCH_DEPS = 'patchedDeps';\n  Identifiers.core = {\n    name: null,\n    moduleName: CORE\n  };\n  /* Instructions */\n\n  Identifiers.namespaceHTML = {\n    name: 'ɵɵnamespaceHTML',\n    moduleName: CORE\n  };\n  Identifiers.namespaceMathML = {\n    name: 'ɵɵnamespaceMathML',\n    moduleName: CORE\n  };\n  Identifiers.namespaceSVG = {\n    name: 'ɵɵnamespaceSVG',\n    moduleName: CORE\n  };\n  Identifiers.element = {\n    name: 'ɵɵelement',\n    moduleName: CORE\n  };\n  Identifiers.elementStart = {\n    name: 'ɵɵelementStart',\n    moduleName: CORE\n  };\n  Identifiers.elementEnd = {\n    name: 'ɵɵelementEnd',\n    moduleName: CORE\n  };\n  Identifiers.advance = {\n    name: 'ɵɵadvance',\n    moduleName: CORE\n  };\n  Identifiers.syntheticHostProperty = {\n    name: 'ɵɵsyntheticHostProperty',\n    moduleName: CORE\n  };\n  Identifiers.syntheticHostListener = {\n    name: 'ɵɵsyntheticHostListener',\n    moduleName: CORE\n  };\n  Identifiers.attribute = {\n    name: 'ɵɵattribute',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate1 = {\n    name: 'ɵɵattributeInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate2 = {\n    name: 'ɵɵattributeInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate3 = {\n    name: 'ɵɵattributeInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate4 = {\n    name: 'ɵɵattributeInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate5 = {\n    name: 'ɵɵattributeInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate6 = {\n    name: 'ɵɵattributeInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate7 = {\n    name: 'ɵɵattributeInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolate8 = {\n    name: 'ɵɵattributeInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.attributeInterpolateV = {\n    name: 'ɵɵattributeInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.classProp = {\n    name: 'ɵɵclassProp',\n    moduleName: CORE\n  };\n  Identifiers.elementContainerStart = {\n    name: 'ɵɵelementContainerStart',\n    moduleName: CORE\n  };\n  Identifiers.elementContainerEnd = {\n    name: 'ɵɵelementContainerEnd',\n    moduleName: CORE\n  };\n  Identifiers.elementContainer = {\n    name: 'ɵɵelementContainer',\n    moduleName: CORE\n  };\n  Identifiers.styleMap = {\n    name: 'ɵɵstyleMap',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate1 = {\n    name: 'ɵɵstyleMapInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate2 = {\n    name: 'ɵɵstyleMapInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate3 = {\n    name: 'ɵɵstyleMapInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate4 = {\n    name: 'ɵɵstyleMapInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate5 = {\n    name: 'ɵɵstyleMapInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate6 = {\n    name: 'ɵɵstyleMapInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate7 = {\n    name: 'ɵɵstyleMapInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolate8 = {\n    name: 'ɵɵstyleMapInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.styleMapInterpolateV = {\n    name: 'ɵɵstyleMapInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.classMap = {\n    name: 'ɵɵclassMap',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate1 = {\n    name: 'ɵɵclassMapInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate2 = {\n    name: 'ɵɵclassMapInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate3 = {\n    name: 'ɵɵclassMapInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate4 = {\n    name: 'ɵɵclassMapInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate5 = {\n    name: 'ɵɵclassMapInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate6 = {\n    name: 'ɵɵclassMapInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate7 = {\n    name: 'ɵɵclassMapInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolate8 = {\n    name: 'ɵɵclassMapInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.classMapInterpolateV = {\n    name: 'ɵɵclassMapInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.styleProp = {\n    name: 'ɵɵstyleProp',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate1 = {\n    name: 'ɵɵstylePropInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate2 = {\n    name: 'ɵɵstylePropInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate3 = {\n    name: 'ɵɵstylePropInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate4 = {\n    name: 'ɵɵstylePropInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate5 = {\n    name: 'ɵɵstylePropInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate6 = {\n    name: 'ɵɵstylePropInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate7 = {\n    name: 'ɵɵstylePropInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolate8 = {\n    name: 'ɵɵstylePropInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.stylePropInterpolateV = {\n    name: 'ɵɵstylePropInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.nextContext = {\n    name: 'ɵɵnextContext',\n    moduleName: CORE\n  };\n  Identifiers.templateCreate = {\n    name: 'ɵɵtemplate',\n    moduleName: CORE\n  };\n  Identifiers.text = {\n    name: 'ɵɵtext',\n    moduleName: CORE\n  };\n  Identifiers.enableBindings = {\n    name: 'ɵɵenableBindings',\n    moduleName: CORE\n  };\n  Identifiers.disableBindings = {\n    name: 'ɵɵdisableBindings',\n    moduleName: CORE\n  };\n  Identifiers.getCurrentView = {\n    name: 'ɵɵgetCurrentView',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate = {\n    name: 'ɵɵtextInterpolate',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate1 = {\n    name: 'ɵɵtextInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate2 = {\n    name: 'ɵɵtextInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate3 = {\n    name: 'ɵɵtextInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate4 = {\n    name: 'ɵɵtextInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate5 = {\n    name: 'ɵɵtextInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate6 = {\n    name: 'ɵɵtextInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate7 = {\n    name: 'ɵɵtextInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolate8 = {\n    name: 'ɵɵtextInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.textInterpolateV = {\n    name: 'ɵɵtextInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.restoreView = {\n    name: 'ɵɵrestoreView',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction0 = {\n    name: 'ɵɵpureFunction0',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction1 = {\n    name: 'ɵɵpureFunction1',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction2 = {\n    name: 'ɵɵpureFunction2',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction3 = {\n    name: 'ɵɵpureFunction3',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction4 = {\n    name: 'ɵɵpureFunction4',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction5 = {\n    name: 'ɵɵpureFunction5',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction6 = {\n    name: 'ɵɵpureFunction6',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction7 = {\n    name: 'ɵɵpureFunction7',\n    moduleName: CORE\n  };\n  Identifiers.pureFunction8 = {\n    name: 'ɵɵpureFunction8',\n    moduleName: CORE\n  };\n  Identifiers.pureFunctionV = {\n    name: 'ɵɵpureFunctionV',\n    moduleName: CORE\n  };\n  Identifiers.pipeBind1 = {\n    name: 'ɵɵpipeBind1',\n    moduleName: CORE\n  };\n  Identifiers.pipeBind2 = {\n    name: 'ɵɵpipeBind2',\n    moduleName: CORE\n  };\n  Identifiers.pipeBind3 = {\n    name: 'ɵɵpipeBind3',\n    moduleName: CORE\n  };\n  Identifiers.pipeBind4 = {\n    name: 'ɵɵpipeBind4',\n    moduleName: CORE\n  };\n  Identifiers.pipeBindV = {\n    name: 'ɵɵpipeBindV',\n    moduleName: CORE\n  };\n  Identifiers.hostProperty = {\n    name: 'ɵɵhostProperty',\n    moduleName: CORE\n  };\n  Identifiers.property = {\n    name: 'ɵɵproperty',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate = {\n    name: 'ɵɵpropertyInterpolate',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate1 = {\n    name: 'ɵɵpropertyInterpolate1',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate2 = {\n    name: 'ɵɵpropertyInterpolate2',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate3 = {\n    name: 'ɵɵpropertyInterpolate3',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate4 = {\n    name: 'ɵɵpropertyInterpolate4',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate5 = {\n    name: 'ɵɵpropertyInterpolate5',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate6 = {\n    name: 'ɵɵpropertyInterpolate6',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate7 = {\n    name: 'ɵɵpropertyInterpolate7',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolate8 = {\n    name: 'ɵɵpropertyInterpolate8',\n    moduleName: CORE\n  };\n  Identifiers.propertyInterpolateV = {\n    name: 'ɵɵpropertyInterpolateV',\n    moduleName: CORE\n  };\n  Identifiers.i18n = {\n    name: 'ɵɵi18n',\n    moduleName: CORE\n  };\n  Identifiers.i18nAttributes = {\n    name: 'ɵɵi18nAttributes',\n    moduleName: CORE\n  };\n  Identifiers.i18nExp = {\n    name: 'ɵɵi18nExp',\n    moduleName: CORE\n  };\n  Identifiers.i18nStart = {\n    name: 'ɵɵi18nStart',\n    moduleName: CORE\n  };\n  Identifiers.i18nEnd = {\n    name: 'ɵɵi18nEnd',\n    moduleName: CORE\n  };\n  Identifiers.i18nApply = {\n    name: 'ɵɵi18nApply',\n    moduleName: CORE\n  };\n  Identifiers.i18nPostprocess = {\n    name: 'ɵɵi18nPostprocess',\n    moduleName: CORE\n  };\n  Identifiers.pipe = {\n    name: 'ɵɵpipe',\n    moduleName: CORE\n  };\n  Identifiers.projection = {\n    name: 'ɵɵprojection',\n    moduleName: CORE\n  };\n  Identifiers.projectionDef = {\n    name: 'ɵɵprojectionDef',\n    moduleName: CORE\n  };\n  Identifiers.reference = {\n    name: 'ɵɵreference',\n    moduleName: CORE\n  };\n  Identifiers.inject = {\n    name: 'ɵɵinject',\n    moduleName: CORE\n  };\n  Identifiers.injectAttribute = {\n    name: 'ɵɵinjectAttribute',\n    moduleName: CORE\n  };\n  Identifiers.directiveInject = {\n    name: 'ɵɵdirectiveInject',\n    moduleName: CORE\n  };\n  Identifiers.invalidFactory = {\n    name: 'ɵɵinvalidFactory',\n    moduleName: CORE\n  };\n  Identifiers.invalidFactoryDep = {\n    name: 'ɵɵinvalidFactoryDep',\n    moduleName: CORE\n  };\n  Identifiers.templateRefExtractor = {\n    name: 'ɵɵtemplateRefExtractor',\n    moduleName: CORE\n  };\n  Identifiers.forwardRef = {\n    name: 'forwardRef',\n    moduleName: CORE\n  };\n  Identifiers.resolveForwardRef = {\n    name: 'resolveForwardRef',\n    moduleName: CORE\n  };\n  Identifiers.ɵɵdefineInjectable = {\n    name: 'ɵɵdefineInjectable',\n    moduleName: CORE\n  };\n  Identifiers.declareInjectable = {\n    name: 'ɵɵngDeclareInjectable',\n    moduleName: CORE\n  };\n  Identifiers.InjectableDeclaration = {\n    name: 'ɵɵInjectableDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.resolveWindow = {\n    name: 'ɵɵresolveWindow',\n    moduleName: CORE\n  };\n  Identifiers.resolveDocument = {\n    name: 'ɵɵresolveDocument',\n    moduleName: CORE\n  };\n  Identifiers.resolveBody = {\n    name: 'ɵɵresolveBody',\n    moduleName: CORE\n  };\n  Identifiers.defineComponent = {\n    name: 'ɵɵdefineComponent',\n    moduleName: CORE\n  };\n  Identifiers.declareComponent = {\n    name: 'ɵɵngDeclareComponent',\n    moduleName: CORE\n  };\n  Identifiers.setComponentScope = {\n    name: 'ɵɵsetComponentScope',\n    moduleName: CORE\n  };\n  Identifiers.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE\n  };\n  Identifiers.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE\n  };\n  Identifiers.ComponentDeclaration = {\n    name: 'ɵɵComponentDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.FactoryDeclaration = {\n    name: 'ɵɵFactoryDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.declareFactory = {\n    name: 'ɵɵngDeclareFactory',\n    moduleName: CORE\n  };\n  Identifiers.FactoryTarget = {\n    name: 'ɵɵFactoryTarget',\n    moduleName: CORE\n  };\n  Identifiers.defineDirective = {\n    name: 'ɵɵdefineDirective',\n    moduleName: CORE\n  };\n  Identifiers.declareDirective = {\n    name: 'ɵɵngDeclareDirective',\n    moduleName: CORE\n  };\n  Identifiers.DirectiveDeclaration = {\n    name: 'ɵɵDirectiveDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.InjectorDef = {\n    name: 'ɵɵInjectorDef',\n    moduleName: CORE\n  };\n  Identifiers.InjectorDeclaration = {\n    name: 'ɵɵInjectorDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.defineInjector = {\n    name: 'ɵɵdefineInjector',\n    moduleName: CORE\n  };\n  Identifiers.declareInjector = {\n    name: 'ɵɵngDeclareInjector',\n    moduleName: CORE\n  };\n  Identifiers.NgModuleDeclaration = {\n    name: 'ɵɵNgModuleDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.ModuleWithProviders = {\n    name: 'ModuleWithProviders',\n    moduleName: CORE\n  };\n  Identifiers.defineNgModule = {\n    name: 'ɵɵdefineNgModule',\n    moduleName: CORE\n  };\n  Identifiers.declareNgModule = {\n    name: 'ɵɵngDeclareNgModule',\n    moduleName: CORE\n  };\n  Identifiers.setNgModuleScope = {\n    name: 'ɵɵsetNgModuleScope',\n    moduleName: CORE\n  };\n  Identifiers.PipeDeclaration = {\n    name: 'ɵɵPipeDeclaration',\n    moduleName: CORE\n  };\n  Identifiers.definePipe = {\n    name: 'ɵɵdefinePipe',\n    moduleName: CORE\n  };\n  Identifiers.declarePipe = {\n    name: 'ɵɵngDeclarePipe',\n    moduleName: CORE\n  };\n  Identifiers.declareClassMetadata = {\n    name: 'ɵɵngDeclareClassMetadata',\n    moduleName: CORE\n  };\n  Identifiers.setClassMetadata = {\n    name: 'ɵsetClassMetadata',\n    moduleName: CORE\n  };\n  Identifiers.queryRefresh = {\n    name: 'ɵɵqueryRefresh',\n    moduleName: CORE\n  };\n  Identifiers.viewQuery = {\n    name: 'ɵɵviewQuery',\n    moduleName: CORE\n  };\n  Identifiers.loadQuery = {\n    name: 'ɵɵloadQuery',\n    moduleName: CORE\n  };\n  Identifiers.contentQuery = {\n    name: 'ɵɵcontentQuery',\n    moduleName: CORE\n  };\n  Identifiers.NgOnChangesFeature = {\n    name: 'ɵɵNgOnChangesFeature',\n    moduleName: CORE\n  };\n  Identifiers.InheritDefinitionFeature = {\n    name: 'ɵɵInheritDefinitionFeature',\n    moduleName: CORE\n  };\n  Identifiers.CopyDefinitionFeature = {\n    name: 'ɵɵCopyDefinitionFeature',\n    moduleName: CORE\n  };\n  Identifiers.ProvidersFeature = {\n    name: 'ɵɵProvidersFeature',\n    moduleName: CORE\n  };\n  Identifiers.listener = {\n    name: 'ɵɵlistener',\n    moduleName: CORE\n  };\n  Identifiers.getInheritedFactory = {\n    name: 'ɵɵgetInheritedFactory',\n    moduleName: CORE\n  }; // sanitization-related functions\n\n  Identifiers.sanitizeHtml = {\n    name: 'ɵɵsanitizeHtml',\n    moduleName: CORE\n  };\n  Identifiers.sanitizeStyle = {\n    name: 'ɵɵsanitizeStyle',\n    moduleName: CORE\n  };\n  Identifiers.sanitizeResourceUrl = {\n    name: 'ɵɵsanitizeResourceUrl',\n    moduleName: CORE\n  };\n  Identifiers.sanitizeScript = {\n    name: 'ɵɵsanitizeScript',\n    moduleName: CORE\n  };\n  Identifiers.sanitizeUrl = {\n    name: 'ɵɵsanitizeUrl',\n    moduleName: CORE\n  };\n  Identifiers.sanitizeUrlOrResourceUrl = {\n    name: 'ɵɵsanitizeUrlOrResourceUrl',\n    moduleName: CORE\n  };\n  Identifiers.trustConstantHtml = {\n    name: 'ɵɵtrustConstantHtml',\n    moduleName: CORE\n  };\n  Identifiers.trustConstantResourceUrl = {\n    name: 'ɵɵtrustConstantResourceUrl',\n    moduleName: CORE\n  };\n  /**\r\n   * @license\r\n   * Copyright Google LLC All Rights Reserved.\r\n   *\r\n   * Use of this source code is governed by an MIT-style license that can be\r\n   * found in the LICENSE file at https://angular.io/license\r\n   */\n\n  return Identifiers;\n})();\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n\nfunction dashCaseToCamelCase(input) {\n  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\n\nfunction splitAtColon(input, defaultValues) {\n  return _splitAt(input, ':', defaultValues);\n}\n\nfunction splitAtPeriod(input, defaultValues) {\n  return _splitAt(input, '.', defaultValues);\n}\n\nfunction _splitAt(input, character, defaultValues) {\n  const characterIndex = input.indexOf(character);\n  if (characterIndex == -1) return defaultValues;\n  return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\n\nfunction visitValue(value, visitor, context) {\n  if (Array.isArray(value)) {\n    return visitor.visitArray(value, context);\n  }\n\n  if (isStrictStringMap(value)) {\n    return visitor.visitStringMap(value, context);\n  }\n\n  if (value == null || typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {\n    return visitor.visitPrimitive(value, context);\n  }\n\n  return visitor.visitOther(value, context);\n}\n\nfunction isDefined(val) {\n  return val !== null && val !== undefined;\n}\n\nfunction noUndefined(val) {\n  return val === undefined ? null : val;\n}\n\nclass ValueTransformer {\n  visitArray(arr, context) {\n    return arr.map(value => visitValue(value, this, context));\n  }\n\n  visitStringMap(map, context) {\n    const result = {};\n    Object.keys(map).forEach(key => {\n      result[key] = visitValue(map[key], this, context);\n    });\n    return result;\n  }\n\n  visitPrimitive(value, context) {\n    return value;\n  }\n\n  visitOther(value, context) {\n    return value;\n  }\n\n}\n\nconst SyncAsync = {\n  assertSync: value => {\n    if (isPromise(value)) {\n      throw new Error(`Illegal state: value cannot be a promise`);\n    }\n\n    return value;\n  },\n  then: (value, cb) => {\n    return isPromise(value) ? value.then(cb) : cb(value);\n  },\n  all: syncAsyncValues => {\n    return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;\n  }\n};\n\nfunction error(msg) {\n  throw new Error(`Internal Error: ${msg}`);\n} // Escape characters that have a special meaning in Regular Expressions\n\n\nfunction escapeRegExp(s) {\n  return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\n\nconst STRING_MAP_PROTO = /*#__PURE__*/Object.getPrototypeOf({});\n\nfunction isStrictStringMap(obj) {\n  return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n\nfunction utf8Encode(str) {\n  let encoded = [];\n\n  for (let index = 0; index < str.length; index++) {\n    let codePoint = str.charCodeAt(index); // decode surrogate\n    // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\n    if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {\n      const low = str.charCodeAt(index + 1);\n\n      if (low >= 0xdc00 && low <= 0xdfff) {\n        index++;\n        codePoint = (codePoint - 0xd800 << 10) + low - 0xdc00 + 0x10000;\n      }\n    }\n\n    if (codePoint <= 0x7f) {\n      encoded.push(codePoint);\n    } else if (codePoint <= 0x7ff) {\n      encoded.push(codePoint >> 6 & 0x1F | 0xc0, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0xffff) {\n      encoded.push(codePoint >> 12 | 0xe0, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    } else if (codePoint <= 0x1fffff) {\n      encoded.push(codePoint >> 18 & 0x07 | 0xf0, codePoint >> 12 & 0x3f | 0x80, codePoint >> 6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    }\n  }\n\n  return encoded;\n}\n\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  if (!token.toString) {\n    return 'object';\n  } // WARNING: do not try to `JSON.stringify(token)` here\n  // see https://github.com/angular/angular/issues/23440\n\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n */\n\n\nfunction resolveForwardRef(type) {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n    return type();\n  } else {\n    return type;\n  }\n}\n/**\r\n * Determine if the argument is shaped like a Promise\r\n */\n\n\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\nclass Version {\n  constructor(full) {\n    this.full = full;\n    const splits = full.split('.');\n    this.major = splits[0];\n    this.minor = splits[1];\n    this.patch = splits.slice(2).join('.');\n  }\n\n}\n\nconst __window = typeof window !== 'undefined' && window;\n\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\n\nconst __global = typeof global !== 'undefined' && global; // Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\n\n\nconst _global = __global || __window || __self;\n\nfunction newArray(size, value) {\n  const list = [];\n\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n\n  return list;\n}\n/**\r\n * Partitions a given array into 2 arrays, based on a boolean value returned by the condition\r\n * function.\r\n *\r\n * @param arr Input array that should be partitioned\r\n * @param conditionFn Condition function that is called for each item in a given array and returns a\r\n * boolean value.\r\n */\n\n\nfunction partitionArray(arr, conditionFn) {\n  const truthy = [];\n  const falsy = [];\n\n  for (const item of arr) {\n    (conditionFn(item) ? truthy : falsy).push(item);\n  }\n\n  return [truthy, falsy];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * This is an R3 `Node`-like wrapper for a raw `html.Comment` node. We do not currently\r\n * require the implementation of a visitor for Comments as they are only collected at\r\n * the top-level of the R3 AST, and only if `Render3ParseOptions['collectCommentNodes']`\r\n * is true.\r\n */\n\n\nclass Comment {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(_visitor) {\n    throw new Error('visit() not implemented for Comment');\n  }\n\n}\n\nclass Text {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor) {\n    return visitor.visitText(this);\n  }\n\n}\n\nclass BoundText {\n  constructor(value, sourceSpan, i18n) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n\n  visit(visitor) {\n    return visitor.visitBoundText(this);\n  }\n\n}\n/**\r\n * Represents a text attribute in the template.\r\n *\r\n * `valueSpan` may not be present in cases where there is no value `<div a></div>`.\r\n * `keySpan` may also not be present for synthetic attributes from ICU expansions.\r\n */\n\n\nclass TextAttribute {\n  constructor(name, value, sourceSpan, keySpan, valueSpan, i18n) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n\n  visit(visitor) {\n    return visitor.visitTextAttribute(this);\n  }\n\n}\n\nclass BoundAttribute {\n  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan, i18n) {\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.i18n = i18n;\n  }\n\n  static fromBoundElementProperty(prop, i18n) {\n    if (prop.keySpan === undefined) {\n      throw new Error(`Unexpected state: keySpan must be defined for bound attributes but was not for ${prop.name}: ${prop.sourceSpan}`);\n    }\n\n    return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n);\n  }\n\n  visit(visitor) {\n    return visitor.visitBoundAttribute(this);\n  }\n\n}\n\nclass BoundEvent {\n  constructor(name, type, handler, target, phase, sourceSpan, handlerSpan, keySpan) {\n    this.name = name;\n    this.type = type;\n    this.handler = handler;\n    this.target = target;\n    this.phase = phase;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.keySpan = keySpan;\n  }\n\n  static fromParsedEvent(event) {\n    const target = event.type === 0\n    /* Regular */\n    ? event.targetOrPhase : null;\n    const phase = event.type === 1\n    /* Animation */\n    ? event.targetOrPhase : null;\n\n    if (event.keySpan === undefined) {\n      throw new Error(`Unexpected state: keySpan must be defined for bound event but was not for ${event.name}: ${event.sourceSpan}`);\n    }\n\n    return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan, event.keySpan);\n  }\n\n  visit(visitor) {\n    return visitor.visitBoundEvent(this);\n  }\n\n}\n\nclass Element {\n  constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    this.name = name;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.children = children;\n    this.references = references;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n\n  visit(visitor) {\n    return visitor.visitElement(this);\n  }\n\n}\n\nclass Template {\n  constructor(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n    this.tagName = tagName;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.templateAttrs = templateAttrs;\n    this.children = children;\n    this.references = references;\n    this.variables = variables;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n    this.i18n = i18n;\n  }\n\n  visit(visitor) {\n    return visitor.visitTemplate(this);\n  }\n\n}\n\nclass Content {\n  constructor(selector, attributes, sourceSpan, i18n) {\n    this.selector = selector;\n    this.attributes = attributes;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n    this.name = 'ng-content';\n  }\n\n  visit(visitor) {\n    return visitor.visitContent(this);\n  }\n\n}\n\nclass Variable {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n  visit(visitor) {\n    return visitor.visitVariable(this);\n  }\n\n}\n\nclass Reference {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n  visit(visitor) {\n    return visitor.visitReference(this);\n  }\n\n}\n\nclass Icu {\n  constructor(vars, placeholders, sourceSpan, i18n) {\n    this.vars = vars;\n    this.placeholders = placeholders;\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n\n  visit(visitor) {\n    return visitor.visitIcu(this);\n  }\n\n}\n\nclass NullVisitor {\n  visitElement(element) {}\n\n  visitTemplate(template) {}\n\n  visitContent(content) {}\n\n  visitVariable(variable) {}\n\n  visitReference(reference) {}\n\n  visitTextAttribute(attribute) {}\n\n  visitBoundAttribute(attribute) {}\n\n  visitBoundEvent(attribute) {}\n\n  visitText(text) {}\n\n  visitBoundText(text) {}\n\n  visitIcu(icu) {}\n\n}\n\nclass RecursiveVisitor {\n  visitElement(element) {\n    visitAll(this, element.attributes);\n    visitAll(this, element.inputs);\n    visitAll(this, element.outputs);\n    visitAll(this, element.children);\n    visitAll(this, element.references);\n  }\n\n  visitTemplate(template) {\n    visitAll(this, template.attributes);\n    visitAll(this, template.inputs);\n    visitAll(this, template.outputs);\n    visitAll(this, template.children);\n    visitAll(this, template.references);\n    visitAll(this, template.variables);\n  }\n\n  visitContent(content) {}\n\n  visitVariable(variable) {}\n\n  visitReference(reference) {}\n\n  visitTextAttribute(attribute) {}\n\n  visitBoundAttribute(attribute) {}\n\n  visitBoundEvent(attribute) {}\n\n  visitText(text) {}\n\n  visitBoundText(text) {}\n\n  visitIcu(icu) {}\n\n}\n\nclass TransformVisitor {\n  visitElement(element) {\n    const newAttributes = transformAll(this, element.attributes);\n    const newInputs = transformAll(this, element.inputs);\n    const newOutputs = transformAll(this, element.outputs);\n    const newChildren = transformAll(this, element.children);\n    const newReferences = transformAll(this, element.references);\n\n    if (newAttributes != element.attributes || newInputs != element.inputs || newOutputs != element.outputs || newChildren != element.children || newReferences != element.references) {\n      return new Element(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    }\n\n    return element;\n  }\n\n  visitTemplate(template) {\n    const newAttributes = transformAll(this, template.attributes);\n    const newInputs = transformAll(this, template.inputs);\n    const newOutputs = transformAll(this, template.outputs);\n    const newTemplateAttrs = transformAll(this, template.templateAttrs);\n    const newChildren = transformAll(this, template.children);\n    const newReferences = transformAll(this, template.references);\n    const newVariables = transformAll(this, template.variables);\n\n    if (newAttributes != template.attributes || newInputs != template.inputs || newOutputs != template.outputs || newTemplateAttrs != template.templateAttrs || newChildren != template.children || newReferences != template.references || newVariables != template.variables) {\n      return new Template(template.tagName, newAttributes, newInputs, newOutputs, newTemplateAttrs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);\n    }\n\n    return template;\n  }\n\n  visitContent(content) {\n    return content;\n  }\n\n  visitVariable(variable) {\n    return variable;\n  }\n\n  visitReference(reference) {\n    return reference;\n  }\n\n  visitTextAttribute(attribute) {\n    return attribute;\n  }\n\n  visitBoundAttribute(attribute) {\n    return attribute;\n  }\n\n  visitBoundEvent(attribute) {\n    return attribute;\n  }\n\n  visitText(text) {\n    return text;\n  }\n\n  visitBoundText(text) {\n    return text;\n  }\n\n  visitIcu(icu) {\n    return icu;\n  }\n\n}\n\nfunction visitAll(visitor, nodes) {\n  const result = [];\n\n  if (visitor.visit) {\n    for (const node of nodes) {\n      const newNode = visitor.visit(node) || node.visit(visitor);\n    }\n  } else {\n    for (const node of nodes) {\n      const newNode = node.visit(visitor);\n\n      if (newNode) {\n        result.push(newNode);\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction transformAll(visitor, nodes) {\n  const result = [];\n  let changed = false;\n\n  for (const node of nodes) {\n    const newNode = node.visit(visitor);\n\n    if (newNode) {\n      result.push(newNode);\n    }\n\n    changed = changed || newNode != node;\n  }\n\n  return changed ? result : nodes;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass Message {\n  /**\r\n   * @param nodes message AST\r\n   * @param placeholders maps placeholder names to static content and their source spans\r\n   * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\r\n   * @param meaning\r\n   * @param description\r\n   * @param customId\r\n   */\n  constructor(nodes, placeholders, placeholderToMessage, meaning, description, customId) {\n    this.nodes = nodes;\n    this.placeholders = placeholders;\n    this.placeholderToMessage = placeholderToMessage;\n    this.meaning = meaning;\n    this.description = description;\n    this.customId = customId;\n    this.id = this.customId;\n    /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */\n\n    this.legacyIds = [];\n\n    if (nodes.length) {\n      this.sources = [{\n        filePath: nodes[0].sourceSpan.start.file.url,\n        startLine: nodes[0].sourceSpan.start.line + 1,\n        startCol: nodes[0].sourceSpan.start.col + 1,\n        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n        endCol: nodes[0].sourceSpan.start.col + 1\n      }];\n    } else {\n      this.sources = [];\n    }\n  }\n\n}\n\nclass Text$1 {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitText(this, context);\n  }\n\n} // TODO(vicb): do we really need this node (vs an array) ?\n\n\nclass Container {\n  constructor(children, sourceSpan) {\n    this.children = children;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitContainer(this, context);\n  }\n\n}\n\nclass Icu$1 {\n  constructor(expression, type, cases, sourceSpan) {\n    this.expression = expression;\n    this.type = type;\n    this.cases = cases;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitIcu(this, context);\n  }\n\n}\n\nclass TagPlaceholder {\n  constructor(tag, attrs, startName, closeName, children, isVoid, // TODO sourceSpan should cover all (we need a startSourceSpan and endSourceSpan)\n  sourceSpan, startSourceSpan, endSourceSpan) {\n    this.tag = tag;\n    this.attrs = attrs;\n    this.startName = startName;\n    this.closeName = closeName;\n    this.children = children;\n    this.isVoid = isVoid;\n    this.sourceSpan = sourceSpan;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitTagPlaceholder(this, context);\n  }\n\n}\n\nclass Placeholder {\n  constructor(value, name, sourceSpan) {\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitPlaceholder(this, context);\n  }\n\n}\n\nclass IcuPlaceholder {\n  constructor(value, name, sourceSpan) {\n    this.value = value;\n    this.name = name;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitIcuPlaceholder(this, context);\n  }\n\n} // Clone the AST\n\n\nclass CloneVisitor {\n  visitText(text, context) {\n    return new Text$1(text.value, text.sourceSpan);\n  }\n\n  visitContainer(container, context) {\n    const children = container.children.map(n => n.visit(this, context));\n    return new Container(children, container.sourceSpan);\n  }\n\n  visitIcu(icu, context) {\n    const cases = {};\n    Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n    const msg = new Icu$1(icu.expression, icu.type, cases, icu.sourceSpan);\n    msg.expressionPlaceholder = icu.expressionPlaceholder;\n    return msg;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    const children = ph.children.map(n => n.visit(this, context));\n    return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n\n  visitPlaceholder(ph, context) {\n    return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n  }\n\n} // Visit all the nodes recursively\n\n\nclass RecurseVisitor {\n  visitText(text, context) {}\n\n  visitContainer(container, context) {\n    container.children.forEach(child => child.visit(this));\n  }\n\n  visitIcu(icu, context) {\n    Object.keys(icu.cases).forEach(k => {\n      icu.cases[k].visit(this);\n    });\n  }\n\n  visitTagPlaceholder(ph, context) {\n    ph.children.forEach(child => child.visit(this));\n  }\n\n  visitPlaceholder(ph, context) {}\n\n  visitIcuPlaceholder(ph, context) {}\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Represents a big integer using a buffer of its individual digits, with the least significant\r\n * digit stored at the beginning of the array (little endian).\r\n *\r\n * For performance reasons, each instance is mutable. The addition operation can be done in-place\r\n * to reduce memory pressure of allocation for the digits array.\r\n */\n\n\nclass BigInteger {\n  /**\r\n   * Creates a big integer using its individual digits in little endian storage.\r\n   */\n  constructor(digits) {\n    this.digits = digits;\n  }\n\n  static zero() {\n    return new BigInteger([0]);\n  }\n\n  static one() {\n    return new BigInteger([1]);\n  }\n  /**\r\n   * Creates a clone of this instance.\r\n   */\n\n\n  clone() {\n    return new BigInteger(this.digits.slice());\n  }\n  /**\r\n   * Returns a new big integer with the sum of `this` and `other` as its value. This does not mutate\r\n   * `this` but instead returns a new instance, unlike `addToSelf`.\r\n   */\n\n\n  add(other) {\n    const result = this.clone();\n    result.addToSelf(other);\n    return result;\n  }\n  /**\r\n   * Adds `other` to the instance itself, thereby mutating its value.\r\n   */\n\n\n  addToSelf(other) {\n    const maxNrOfDigits = Math.max(this.digits.length, other.digits.length);\n    let carry = 0;\n\n    for (let i = 0; i < maxNrOfDigits; i++) {\n      let digitSum = carry;\n\n      if (i < this.digits.length) {\n        digitSum += this.digits[i];\n      }\n\n      if (i < other.digits.length) {\n        digitSum += other.digits[i];\n      }\n\n      if (digitSum >= 10) {\n        this.digits[i] = digitSum - 10;\n        carry = 1;\n      } else {\n        this.digits[i] = digitSum;\n        carry = 0;\n      }\n    } // Apply a remaining carry if needed.\n\n\n    if (carry > 0) {\n      this.digits[maxNrOfDigits] = 1;\n    }\n  }\n  /**\r\n   * Builds the decimal string representation of the big integer. As this is stored in\r\n   * little endian, the digits are concatenated in reverse order.\r\n   */\n\n\n  toString() {\n    let res = '';\n\n    for (let i = this.digits.length - 1; i >= 0; i--) {\n      res += this.digits[i];\n    }\n\n    return res;\n  }\n\n}\n/**\r\n * Represents a big integer which is optimized for multiplication operations, as its power-of-twos\r\n * are memoized. See `multiplyBy()` for details on the multiplication algorithm.\r\n */\n\n\nclass BigIntForMultiplication {\n  constructor(value) {\n    this.powerOfTwos = [value];\n  }\n  /**\r\n   * Returns the big integer itself.\r\n   */\n\n\n  getValue() {\n    return this.powerOfTwos[0];\n  }\n  /**\r\n   * Computes the value for `num * b`, where `num` is a JS number and `b` is a big integer. The\r\n   * value for `b` is represented by a storage model that is optimized for this computation.\r\n   *\r\n   * This operation is implemented in N(log2(num)) by continuous halving of the number, where the\r\n   * least-significant bit (LSB) is tested in each iteration. If the bit is set, the bit's index is\r\n   * used as exponent into the power-of-two multiplication of `b`.\r\n   *\r\n   * As an example, consider the multiplication num=42, b=1337. In binary 42 is 0b00101010 and the\r\n   * algorithm unrolls into the following iterations:\r\n   *\r\n   *  Iteration | num        | LSB  | b * 2^iter | Add? | product\r\n   * -----------|------------|------|------------|------|--------\r\n   *  0         | 0b00101010 | 0    | 1337       | No   | 0\r\n   *  1         | 0b00010101 | 1    | 2674       | Yes  | 2674\r\n   *  2         | 0b00001010 | 0    | 5348       | No   | 2674\r\n   *  3         | 0b00000101 | 1    | 10696      | Yes  | 13370\r\n   *  4         | 0b00000010 | 0    | 21392      | No   | 13370\r\n   *  5         | 0b00000001 | 1    | 42784      | Yes  | 56154\r\n   *  6         | 0b00000000 | 0    | 85568      | No   | 56154\r\n   *\r\n   * The computed product of 56154 is indeed the correct result.\r\n   *\r\n   * The `BigIntForMultiplication` representation for a big integer provides memoized access to the\r\n   * power-of-two values to reduce the workload in computing those values.\r\n   */\n\n\n  multiplyBy(num) {\n    const product = BigInteger.zero();\n    this.multiplyByAndAddTo(num, product);\n    return product;\n  }\n  /**\r\n   * See `multiplyBy()` for details. This function allows for the computed product to be added\r\n   * directly to the provided result big integer.\r\n   */\n\n\n  multiplyByAndAddTo(num, result) {\n    for (let exponent = 0; num !== 0; num = num >>> 1, exponent++) {\n      if (num & 1) {\n        const value = this.getMultipliedByPowerOfTwo(exponent);\n        result.addToSelf(value);\n      }\n    }\n  }\n  /**\r\n   * Computes and memoizes the big integer value for `this.number * 2^exponent`.\r\n   */\n\n\n  getMultipliedByPowerOfTwo(exponent) {\n    // Compute the powers up until the requested exponent, where each value is computed from its\n    // predecessor. This is simple as `this.number * 2^(exponent - 1)` only has to be doubled (i.e.\n    // added to itself) to reach `this.number * 2^exponent`.\n    for (let i = this.powerOfTwos.length; i <= exponent; i++) {\n      const previousPower = this.powerOfTwos[i - 1];\n      this.powerOfTwos[i] = previousPower.add(previousPower);\n    }\n\n    return this.powerOfTwos[exponent];\n  }\n\n}\n/**\r\n * Represents an exponentiation operation for the provided base, of which exponents are computed and\r\n * memoized. The results are represented by a `BigIntForMultiplication` which is tailored for\r\n * multiplication operations by memoizing the power-of-twos. This effectively results in a matrix\r\n * representation that is lazily computed upon request.\r\n */\n\n\nclass BigIntExponentiation {\n  constructor(base) {\n    this.base = base;\n    this.exponents = [new BigIntForMultiplication(BigInteger.one())];\n  }\n  /**\r\n   * Compute the value for `this.base^exponent`, resulting in a big integer that is optimized for\r\n   * further multiplication operations.\r\n   */\n\n\n  toThePowerOf(exponent) {\n    // Compute the results up until the requested exponent, where every value is computed from its\n    // predecessor. This is because `this.base^(exponent - 1)` only has to be multiplied by `base`\n    // to reach `this.base^exponent`.\n    for (let i = this.exponents.length; i <= exponent; i++) {\n      const value = this.exponents[i - 1].multiplyBy(this.base);\n      this.exponents[i] = new BigIntForMultiplication(value);\n    }\n\n    return this.exponents[exponent];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Return the message id or compute it using the XLIFF1 digest.\r\n */\n\n\nfunction digest(message) {\n  return message.id || computeDigest(message);\n}\n/**\r\n * Compute the message id using the XLIFF1 digest.\r\n */\n\n\nfunction computeDigest(message) {\n  return sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n/**\r\n * Return the message id or compute it using the XLIFF2/XMB/$localize digest.\r\n */\n\n\nfunction decimalDigest(message) {\n  return message.id || computeDecimalDigest(message);\n}\n/**\r\n * Compute the message id using the XLIFF2/XMB/$localize digest.\r\n */\n\n\nfunction computeDecimalDigest(message) {\n  const visitor = new _SerializerIgnoreIcuExpVisitor();\n  const parts = message.nodes.map(a => a.visit(visitor, null));\n  return computeMsgId(parts.join(''), message.meaning);\n}\n/**\r\n * Serialize the i18n ast to something xml-like in order to generate an UID.\r\n *\r\n * The visitor is also used in the i18n parser tests\r\n *\r\n * @internal\r\n */\n\n\nclass _SerializerVisitor {\n  visitText(text, context) {\n    return text.value;\n  }\n\n  visitContainer(container, context) {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n\n  visitIcu(icu, context) {\n    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    return ph.isVoid ? `<ph tag name=\"${ph.startName}\"/>` : `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n\n  visitPlaceholder(ph, context) {\n    return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n\n}\n\nconst serializerVisitor = /*#__PURE__*/new _SerializerVisitor();\n\nfunction serializeNodes(nodes) {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n/**\r\n * Serialize the i18n ast to something xml-like in order to generate an UID.\r\n *\r\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\r\n *\r\n * @internal\r\n */\n\n\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n  visitIcu(icu, context) {\n    let strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`); // Do not take the expression into account\n\n    return `{${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n}\n/**\r\n * Compute the SHA1 of the given string\r\n *\r\n * see https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\r\n *\r\n * WARNING: this function has not been designed not tested with security in mind.\r\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\r\n */\n\n\nfunction sha1(str) {\n  const utf8 = utf8Encode(str);\n  const words32 = bytesToWords32(utf8, Endian.Big);\n  const len = utf8.length * 8;\n  const w = newArray(80);\n  let a = 0x67452301,\n      b = 0xefcdab89,\n      c = 0x98badcfe,\n      d = 0x10325476,\n      e = 0xc3d2e1f0;\n  words32[len >> 5] |= 0x80 << 24 - len % 32;\n  words32[(len + 64 >> 9 << 4) + 15] = len;\n\n  for (let i = 0; i < words32.length; i += 16) {\n    const h0 = a,\n          h1 = b,\n          h2 = c,\n          h3 = d,\n          h4 = e;\n\n    for (let j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = words32[i + j];\n      } else {\n        w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      const fkVal = fk(j, b, c, d);\n      const f = fkVal[0];\n      const k = fkVal[1];\n      const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n      e = d;\n      d = c;\n      c = rol32(b, 30);\n      b = a;\n      a = temp;\n    }\n\n    a = add32(a, h0);\n    b = add32(b, h1);\n    c = add32(c, h2);\n    d = add32(d, h3);\n    e = add32(e, h4);\n  }\n\n  return bytesToHexString(words32ToByteString([a, b, c, d, e]));\n}\n\nfunction fk(index, b, c, d) {\n  if (index < 20) {\n    return [b & c | ~b & d, 0x5a827999];\n  }\n\n  if (index < 40) {\n    return [b ^ c ^ d, 0x6ed9eba1];\n  }\n\n  if (index < 60) {\n    return [b & c | b & d | c & d, 0x8f1bbcdc];\n  }\n\n  return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\r\n * Compute the fingerprint of the given string\r\n *\r\n * The output is 64 bit number encoded as a decimal string\r\n *\r\n * based on:\r\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\r\n */\n\n\nfunction fingerprint(str) {\n  const utf8 = utf8Encode(str);\n  let hi = hash32(utf8, 0);\n  let lo = hash32(utf8, 102072);\n\n  if (hi == 0 && (lo == 0 || lo == 1)) {\n    hi = hi ^ 0x130f9bef;\n    lo = lo ^ -0x6b5f56d8;\n  }\n\n  return [hi, lo];\n}\n\nfunction computeMsgId(msg, meaning = '') {\n  let msgFingerprint = fingerprint(msg);\n\n  if (meaning) {\n    const meaningFingerprint = fingerprint(meaning);\n    msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);\n  }\n\n  const hi = msgFingerprint[0];\n  const lo = msgFingerprint[1];\n  return wordsToDecimalString(hi & 0x7fffffff, lo);\n}\n\nfunction hash32(bytes, c) {\n  let a = 0x9e3779b9,\n      b = 0x9e3779b9;\n  let i;\n  const len = bytes.length;\n\n  for (i = 0; i + 12 <= len; i += 12) {\n    a = add32(a, wordAt(bytes, i, Endian.Little));\n    b = add32(b, wordAt(bytes, i + 4, Endian.Little));\n    c = add32(c, wordAt(bytes, i + 8, Endian.Little));\n    const res = mix(a, b, c);\n    a = res[0], b = res[1], c = res[2];\n  }\n\n  a = add32(a, wordAt(bytes, i, Endian.Little));\n  b = add32(b, wordAt(bytes, i + 4, Endian.Little)); // the first byte of c is reserved for the length\n\n  c = add32(c, len);\n  c = add32(c, wordAt(bytes, i + 8, Endian.Little) << 8);\n  return mix(a, b, c)[2];\n} // clang-format off\n\n\nfunction mix(a, b, c) {\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 13;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 8;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 13;\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 12;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 16;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 5;\n  a = sub32(a, b);\n  a = sub32(a, c);\n  a ^= c >>> 3;\n  b = sub32(b, c);\n  b = sub32(b, a);\n  b ^= a << 10;\n  c = sub32(c, a);\n  c = sub32(c, b);\n  c ^= b >>> 15;\n  return [a, b, c];\n} // clang-format on\n// Utils\n\n\nvar Endian = /*#__PURE__*/(() => {\n  Endian = Endian || {};\n  Endian[Endian[\"Little\"] = 0] = \"Little\";\n  Endian[Endian[\"Big\"] = 1] = \"Big\";\n  return Endian;\n})();\n\nfunction add32(a, b) {\n  return add32to64(a, b)[1];\n}\n\nfunction add32to64(a, b) {\n  const low = (a & 0xffff) + (b & 0xffff);\n  const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n  return [high >>> 16, high << 16 | low & 0xffff];\n}\n\nfunction add64(a, b) {\n  const ah = a[0],\n        al = a[1];\n  const bh = b[0],\n        bl = b[1];\n  const result = add32to64(al, bl);\n  const carry = result[0];\n  const l = result[1];\n  const h = add32(add32(ah, bh), carry);\n  return [h, l];\n}\n\nfunction sub32(a, b) {\n  const low = (a & 0xffff) - (b & 0xffff);\n  const high = (a >> 16) - (b >> 16) + (low >> 16);\n  return high << 16 | low & 0xffff;\n} // Rotate a 32b number left `count` position\n\n\nfunction rol32(a, count) {\n  return a << count | a >>> 32 - count;\n} // Rotate a 64b number left `count` position\n\n\nfunction rol64(num, count) {\n  const hi = num[0],\n        lo = num[1];\n  const h = hi << count | lo >>> 32 - count;\n  const l = lo << count | hi >>> 32 - count;\n  return [h, l];\n}\n\nfunction bytesToWords32(bytes, endian) {\n  const size = bytes.length + 3 >>> 2;\n  const words32 = [];\n\n  for (let i = 0; i < size; i++) {\n    words32[i] = wordAt(bytes, i * 4, endian);\n  }\n\n  return words32;\n}\n\nfunction byteAt(bytes, index) {\n  return index >= bytes.length ? 0 : bytes[index];\n}\n\nfunction wordAt(bytes, index, endian) {\n  let word = 0;\n\n  if (endian === Endian.Big) {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 24 - 8 * i;\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      word += byteAt(bytes, index + i) << 8 * i;\n    }\n  }\n\n  return word;\n}\n\nfunction words32ToByteString(words32) {\n  return words32.reduce((bytes, word) => bytes.concat(word32ToByteString(word)), []);\n}\n\nfunction word32ToByteString(word) {\n  let bytes = [];\n\n  for (let i = 0; i < 4; i++) {\n    bytes.push(word >>> 8 * (3 - i) & 0xff);\n  }\n\n  return bytes;\n}\n\nfunction bytesToHexString(bytes) {\n  let hex = '';\n\n  for (let i = 0; i < bytes.length; i++) {\n    const b = byteAt(bytes, i);\n    hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n  }\n\n  return hex.toLowerCase();\n}\n/**\r\n * Create a shared exponentiation pool for base-256 computations. This shared pool provides memoized\r\n * power-of-256 results with memoized power-of-two computations for efficient multiplication.\r\n *\r\n * For our purposes, this can be safely stored as a global without memory concerns. The reason is\r\n * that we encode two words, so only need the 0th (for the low word) and 4th (for the high word)\r\n * exponent.\r\n */\n\n\nconst base256 = /*#__PURE__*/new BigIntExponentiation(256);\n/**\r\n * Represents two 32-bit words as a single decimal number. This requires a big integer storage\r\n * model as JS numbers are not accurate enough to represent the 64-bit number.\r\n *\r\n * Based on https://www.danvk.org/hex2dec.html\r\n */\n\nfunction wordsToDecimalString(hi, lo) {\n  // Encode the four bytes in lo in the lower digits of the decimal number.\n  // Note: the multiplication results in lo itself but represented by a big integer using its\n  // decimal digits.\n  const decimal = base256.toThePowerOf(0).multiplyBy(lo); // Encode the four bytes in hi above the four lo bytes. lo is a maximum of (2^8)^4, which is why\n  // this multiplication factor is applied.\n\n  base256.toThePowerOf(4).multiplyByAndAddTo(hi, decimal);\n  return decimal.toString();\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass Serializer {\n  // Creates a name mapper, see `PlaceholderMapper`\n  // Returning `null` means that no name mapping is used.\n  createNameMapper(message) {\n    return null;\n  }\n\n}\n/**\r\n * A simple mapper that take a function to transform an internal name to a public name\r\n */\n\n\nclass SimplePlaceholderMapper extends RecurseVisitor {\n  // create a mapping from the message\n  constructor(message, mapName) {\n    super();\n    this.mapName = mapName;\n    this.internalToPublic = {};\n    this.publicToNextId = {};\n    this.publicToInternal = {};\n    message.nodes.forEach(node => node.visit(this));\n  }\n\n  toPublicName(internalName) {\n    return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;\n  }\n\n  toInternalName(publicName) {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;\n  }\n\n  visitText(text, context) {\n    return null;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n\n  visitPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.name);\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    this.visitPlaceholderName(ph.name);\n  } // XMB placeholders could only contains A-Z, 0-9 and _\n\n\n  visitPlaceholderName(internalName) {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass _Visitor {\n  visitTag(tag) {\n    const strAttrs = this._serializeAttributes(tag.attrs);\n\n    if (tag.children.length == 0) {\n      return `<${tag.name}${strAttrs}/>`;\n    }\n\n    const strChildren = tag.children.map(node => node.visit(this));\n    return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n  }\n\n  visitText(text) {\n    return text.value;\n  }\n\n  visitDeclaration(decl) {\n    return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n  }\n\n  _serializeAttributes(attrs) {\n    const strAttrs = Object.keys(attrs).map(name => `${name}=\"${attrs[name]}\"`).join(' ');\n    return strAttrs.length > 0 ? ' ' + strAttrs : '';\n  }\n\n  visitDoctype(doctype) {\n    return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n  }\n\n}\n\nconst _visitor = /*#__PURE__*/new _Visitor();\n\nfunction serialize(nodes) {\n  return nodes.map(node => node.visit(_visitor)).join('');\n}\n\nclass Declaration {\n  constructor(unescapedAttrs) {\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(k => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor) {\n    return visitor.visitDeclaration(this);\n  }\n\n}\n\nclass Doctype {\n  constructor(rootTag, dtd) {\n    this.rootTag = rootTag;\n    this.dtd = dtd;\n  }\n\n  visit(visitor) {\n    return visitor.visitDoctype(this);\n  }\n\n}\n\nclass Tag {\n  constructor(name, unescapedAttrs = {}, children = []) {\n    this.name = name;\n    this.children = children;\n    this.attrs = {};\n    Object.keys(unescapedAttrs).forEach(k => {\n      this.attrs[k] = escapeXml(unescapedAttrs[k]);\n    });\n  }\n\n  visit(visitor) {\n    return visitor.visitTag(this);\n  }\n\n}\n\nclass Text$2 {\n  constructor(unescapedValue) {\n    this.value = escapeXml(unescapedValue);\n  }\n\n  visit(visitor) {\n    return visitor.visitText(this);\n  }\n\n}\n\nclass CR extends Text$2 {\n  constructor(ws = 0) {\n    super(`\\n${new Array(ws + 1).join(' ')}`);\n  }\n\n}\n\nconst _ESCAPED_CHARS = [[/&/g, '&amp;'], [/\"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']]; // Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\n\nfunction escapeXml(text) {\n  return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG = 'source';\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\n\nclass Xmb extends Serializer {\n  write(messages, locale) {\n    const exampleVisitor = new ExampleVisitor();\n    const visitor = new _Visitor$1();\n    let rootNode = new Tag(_MESSAGES_TAG);\n    messages.forEach(message => {\n      const attrs = {\n        id: message.id\n      };\n\n      if (message.description) {\n        attrs['desc'] = message.description;\n      }\n\n      if (message.meaning) {\n        attrs['meaning'] = message.meaning;\n      }\n\n      let sourceTags = [];\n      message.sources.forEach(source => {\n        sourceTags.push(new Tag(_SOURCE_TAG, {}, [new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n      });\n      rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n    });\n    rootNode.children.push(new CR());\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);\n  }\n\n  load(content, url) {\n    throw new Error('Unsupported');\n  }\n\n  digest(message) {\n    return digest$1(message);\n  }\n\n  createNameMapper(message) {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n\n}\n\nclass _Visitor$1 {\n  visitText(text, context) {\n    return [new Text$2(text.value)];\n  }\n\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu, context) {\n    const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n    });\n    nodes.push(new Text$2(`}`));\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    const startTagAsText = new Text$2(`<${ph.tag}>`);\n    const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n    const startTagPh = new Tag(_PLACEHOLDER_TAG, {\n      name: ph.startName\n    }, [startEx, startTagAsText]);\n\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n\n    const closeTagAsText = new Text$2(`</${ph.tag}>`);\n    const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]); // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG, {\n      name: ph.closeName\n    }, [closeEx, closeTagAsText]);\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph, context) {\n    const interpolationAsText = new Text$2(`{{${ph.value}}}`); // Example tag needs to be not-empty for TC.\n\n    const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n    return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    new Tag(_PLACEHOLDER_TAG, {\n      name: ph.name\n    }, [exTag, interpolationAsText])];\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    const icuExpression = ph.value.expression;\n    const icuType = ph.value.type;\n    const icuCases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');\n    const icuAsText = new Text$2(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n    const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n    return [// TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n    new Tag(_PLACEHOLDER_TAG, {\n      name: ph.name\n    }, [exTag, icuAsText])];\n  }\n\n  serialize(nodes) {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n\n}\n\nfunction digest$1(message) {\n  return decimalDigest(message);\n} // TC requires at least one non-empty example on placeholders\n\n\nclass ExampleVisitor {\n  addDefaultExamples(node) {\n    node.visit(this);\n    return node;\n  }\n\n  visitTag(tag) {\n    if (tag.name === _PLACEHOLDER_TAG) {\n      if (!tag.children || tag.children.length == 0) {\n        const exText = new Text$2(tag.attrs['name'] || '...');\n        tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n\n  visitText(text) {}\n\n  visitDeclaration(decl) {}\n\n  visitDoctype(doctype) {}\n\n} // XMB/XTB placeholders can only contain A-Z, 0-9 and _\n\n\nfunction toPublicName(internalName) {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\n\n\nconst CLOSURE_TRANSLATION_VAR_PREFIX = 'MSG_';\n/**\r\n * Prefix for non-`goog.getMsg` i18n-related vars.\r\n * Note: the prefix uses lowercase characters intentionally due to a Closure behavior that\r\n * considers variables like `I18N_0` as constants and throws an error when their value changes.\r\n */\n\nconst TRANSLATION_VAR_PREFIX = 'i18n_';\n/** Name of the i18n attributes **/\n\nconst I18N_ATTR = 'i18n';\nconst I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\n\nconst I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\n\nconst I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\n\nconst I18N_PLACEHOLDER_SYMBOL = '�';\n\nfunction isI18nAttribute(name) {\n  return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\n\nfunction isI18nRootNode(meta) {\n  return meta instanceof Message;\n}\n\nfunction isSingleI18nIcu(meta) {\n  return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu$1;\n}\n\nfunction hasI18nMeta(node) {\n  return !!node.i18n;\n}\n\nfunction hasI18nAttrs(element) {\n  return element.attrs.some(attr => isI18nAttribute(attr.name));\n}\n\nfunction icuFromI18nMessage(message) {\n  return message.nodes[0];\n}\n\nfunction wrapI18nPlaceholder(content, contextId = 0) {\n  const blockId = contextId > 0 ? `:${contextId}` : '';\n  return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;\n}\n\nfunction assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {\n  if (!strings.length) return '';\n  let acc = '';\n  const lastIdx = strings.length - 1;\n\n  for (let i = 0; i < lastIdx; i++) {\n    acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;\n  }\n\n  acc += strings[lastIdx];\n  return acc;\n}\n\nfunction getSeqNumberGenerator(startsAt = 0) {\n  let current = startsAt;\n  return () => current++;\n}\n\nfunction placeholdersToParams(placeholders) {\n  const params = {};\n  placeholders.forEach((values, key) => {\n    params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);\n  });\n  return params;\n}\n\nfunction updatePlaceholderMap(map, name, ...values) {\n  const current = map.get(name) || [];\n  current.push(...values);\n  map.set(name, current);\n}\n\nfunction assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {\n  const startIdx = bindingStartIndex;\n  const placeholders = new Map();\n  const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;\n\n  if (node) {\n    node.children.filter(child => child instanceof Placeholder).forEach((child, idx) => {\n      const content = wrapI18nPlaceholder(startIdx + idx, contextId);\n      updatePlaceholderMap(placeholders, child.name, content);\n    });\n  }\n\n  return placeholders;\n}\n/**\r\n * Format the placeholder names in a map of placeholders to expressions.\r\n *\r\n * The placeholder names are converted from \"internal\" format (e.g. `START_TAG_DIV_1`) to \"external\"\r\n * format (e.g. `startTagDiv_1`).\r\n *\r\n * @param params A map of placeholder names to expressions.\r\n * @param useCamelCase whether to camelCase the placeholder name when formatting.\r\n * @returns A new map of formatted placeholder names to expressions.\r\n */\n\n\nfunction i18nFormatPlaceholderNames(params = {}, useCamelCase) {\n  const _params = {};\n\n  if (params && Object.keys(params).length) {\n    Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]);\n  }\n\n  return _params;\n}\n/**\r\n * Converts internal placeholder names to public-facing format\r\n * (for example to use in goog.getMsg call).\r\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\r\n *\r\n * @param name The placeholder name that should be formatted\r\n * @returns Formatted placeholder name\r\n */\n\n\nfunction formatI18nPlaceholderName(name, useCamelCase = true) {\n  const publicName = toPublicName(name);\n\n  if (!useCamelCase) {\n    return publicName;\n  }\n\n  const chunks = publicName.split('_');\n\n  if (chunks.length === 1) {\n    // if no \"_\" found - just lowercase the value\n    return name.toLowerCase();\n  }\n\n  let postfix; // eject last element if it's a number\n\n  if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n    postfix = chunks.pop();\n  }\n\n  let raw = chunks.shift().toLowerCase();\n\n  if (chunks.length) {\n    raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');\n  }\n\n  return postfix ? `${raw}_${postfix}` : raw;\n}\n/**\r\n * Generates a prefix for translation const name.\r\n *\r\n * @param extra Additional local prefix that should be injected into translation var name\r\n * @returns Complete translation const prefix\r\n */\n\n\nfunction getTranslationConstPrefix(extra) {\n  return `${CLOSURE_TRANSLATION_VAR_PREFIX}${extra}`.toUpperCase();\n}\n/**\r\n * Generate AST to declare a variable. E.g. `var I18N_1;`.\r\n * @param variable the name of the variable to declare.\r\n */\n\n\nfunction declareI18nVariable(variable) {\n  return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, undefined, variable.sourceSpan);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\r\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\r\n * bot work in some cases when object keys are mangled by minifier.\r\n *\r\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\r\n * inputs that contain potentially unsafe chars.\r\n */\n\n\nconst UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;\n/** Name of the temporary to use during data binding */\n\nconst TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\n\nconst CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\n\nconst RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\n\nconst REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\n\nconst IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\n\nconst NON_BINDABLE_ATTR = 'ngNonBindable';\n/** Name for the variable keeping track of the context returned by `ɵɵrestoreView`. */\n\nconst RESTORED_VIEW_CONTEXT_NAME = 'restoredCtx';\n/**\r\n * Creates an allocator for a temporary variable.\r\n *\r\n * A variable declaration is added to the statements the first time the allocator is invoked.\r\n */\n\nfunction temporaryAllocator(statements, name) {\n  let temp = null;\n  return () => {\n    if (!temp) {\n      statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n      temp = variable(name);\n    }\n\n    return temp;\n  };\n}\n\nfunction unsupported(feature) {\n  if (this) {\n    throw new Error(`Builder ${this.constructor.name} doesn't support ${feature} yet`);\n  }\n\n  throw new Error(`Feature ${feature} is not supported yet`);\n}\n\nfunction invalid$1(arg) {\n  throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\n\nfunction asLiteral(value) {\n  if (Array.isArray(value)) {\n    return literalArr(value.map(asLiteral));\n  }\n\n  return literal(value, INFERRED_TYPE);\n}\n\nfunction conditionallyCreateMapObjectLiteral(keys, keepDeclared) {\n  if (Object.getOwnPropertyNames(keys).length > 0) {\n    return mapToExpression(keys, keepDeclared);\n  }\n\n  return null;\n}\n\nfunction mapToExpression(map, keepDeclared) {\n  return literalMap(Object.getOwnPropertyNames(map).map(key => {\n    // canonical syntax: `dirProp: publicProp`\n    // if there is no `:`, use dirProp = elProp\n    const value = map[key];\n    let declaredName;\n    let publicName;\n    let minifiedName;\n    let needsDeclaredName;\n\n    if (Array.isArray(value)) {\n      [publicName, declaredName] = value;\n      minifiedName = key;\n      needsDeclaredName = publicName !== declaredName;\n    } else {\n      [declaredName, publicName] = splitAtColon(key, [key, value]);\n      minifiedName = declaredName; // Only include the declared name if extracted from the key, i.e. the key contains a colon.\n      // Otherwise the declared name should be omitted even if it is different from the public name,\n      // as it may have already been minified.\n\n      needsDeclaredName = publicName !== declaredName && key.includes(':');\n    }\n\n    return {\n      key: minifiedName,\n      // put quotes around keys that contain potentially unsafe characters\n      quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n      value: keepDeclared && needsDeclaredName ? literalArr([asLiteral(publicName), asLiteral(declaredName)]) : asLiteral(publicName)\n    };\n  }));\n}\n/**\r\n *  Remove trailing null nodes as they are implied.\r\n */\n\n\nfunction trimTrailingNulls(parameters) {\n  while (isNull(parameters[parameters.length - 1])) {\n    parameters.pop();\n  }\n\n  return parameters;\n}\n\nfunction getQueryPredicate(query, constantPool) {\n  if (Array.isArray(query.predicate)) {\n    let predicate = [];\n    query.predicate.forEach(selector => {\n      // Each item in predicates array may contain strings with comma-separated refs\n      // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n      // as separate array entities\n      const selectors = selector.split(',').map(token => literal(token.trim()));\n      predicate.push(...selectors);\n    });\n    return constantPool.getConstLiteral(literalArr(predicate), true);\n  } else {\n    return query.predicate;\n  }\n}\n/**\r\n * A representation for an object literal used during codegen of definition objects. The generic\r\n * type `T` allows to reference a documented type of the generated structure, such that the\r\n * property names that are set can be resolved to their documented declaration.\r\n */\n\n\nclass DefinitionMap {\n  constructor() {\n    this.values = [];\n  }\n\n  set(key, value) {\n    if (value) {\n      this.values.push({\n        key: key,\n        value,\n        quoted: false\n      });\n    }\n  }\n\n  toLiteralMap() {\n    return literalMap(this.values);\n  }\n\n}\n/**\r\n * Extract a map of properties to values for a given element or template node, which can be used\r\n * by the directive matching machinery.\r\n *\r\n * @param elOrTpl the element or template in question\r\n * @return an object set up for directive matching. For attributes on the element/template, this\r\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\r\n * property name to an empty string.\r\n */\n\n\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n  const attributesMap = {};\n\n  if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n    elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');\n  } else {\n    elOrTpl.attributes.forEach(a => {\n      if (!isI18nAttribute(a.name)) {\n        attributesMap[a.name] = a.value;\n      }\n    });\n    elOrTpl.inputs.forEach(i => {\n      attributesMap[i.name] = '';\n    });\n    elOrTpl.outputs.forEach(o => {\n      attributesMap[o.name] = '';\n    });\n  }\n\n  return attributesMap;\n}\n/** Returns a call expression to a chained instruction, e.g. `property(params[0])(params[1])`. */\n\n\nfunction chainedInstruction(reference, calls, span) {\n  let expression = importExpr(reference, null, span);\n\n  if (calls.length > 0) {\n    for (let i = 0; i < calls.length; i++) {\n      expression = expression.callFn(calls[i], span);\n    }\n  } else {\n    // Add a blank invocation, in case the `calls` array is empty.\n    expression = expression.callFn([], span);\n  }\n\n  return expression;\n}\n/**\r\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\r\n * interpolation instructions.\r\n * @param interpolation An interpolation ast\r\n */\n\n\nfunction getInterpolationArgsLength(interpolation) {\n  const {\n    expressions,\n    strings\n  } = interpolation;\n\n  if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n    // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n    // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n    // `textInterpolate`.\n    return 1;\n  } else {\n    return expressions.length + strings.length;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Creates an array literal expression from the given array, mapping all values to an expression\r\n * using the provided mapping function. If the array is empty or null, then null is returned.\r\n *\r\n * @param values The array to transfer into literal array expression.\r\n * @param mapper The logic to use for creating an expression for the array's values.\r\n * @returns An array literal expression representing `values`, or null if `values` is empty or\r\n * is itself null.\r\n */\n\n\nfunction toOptionalLiteralArray(values, mapper) {\n  if (values === null || values.length === 0) {\n    return null;\n  }\n\n  return literalArr(values.map(value => mapper(value)));\n}\n/**\r\n * Creates an object literal expression from the given object, mapping all values to an expression\r\n * using the provided mapping function. If the object has no keys, then null is returned.\r\n *\r\n * @param object The object to transfer into an object literal expression.\r\n * @param mapper The logic to use for creating an expression for the object's values.\r\n * @returns An object literal expression representing `object`, or null if `object` does not have\r\n * any keys.\r\n */\n\n\nfunction toOptionalLiteralMap(object, mapper) {\n  const entries = Object.keys(object).map(key => {\n    const value = object[key];\n    return {\n      key,\n      value: mapper(value),\n      quoted: true\n    };\n  });\n\n  if (entries.length > 0) {\n    return literalMap(entries);\n  } else {\n    return null;\n  }\n}\n\nfunction compileDependencies(deps) {\n  if (deps === 'invalid') {\n    // The `deps` can be set to the string \"invalid\"  by the `unwrapConstructorDependencies()`\n    // function, which tries to convert `ConstructorDeps` into `R3DependencyMetadata[]`.\n    return literal('invalid');\n  } else if (deps === null) {\n    return literal(null);\n  } else {\n    return literalArr(deps.map(compileDependency));\n  }\n}\n\nfunction compileDependency(dep) {\n  const depMeta = new DefinitionMap();\n  depMeta.set('token', dep.token);\n\n  if (dep.attributeNameType !== null) {\n    depMeta.set('attribute', literal(true));\n  }\n\n  if (dep.host) {\n    depMeta.set('host', literal(true));\n  }\n\n  if (dep.optional) {\n    depMeta.set('optional', literal(true));\n  }\n\n  if (dep.self) {\n    depMeta.set('self', literal(true));\n  }\n\n  if (dep.skipSelf) {\n    depMeta.set('skipSelf', literal(true));\n  }\n\n  return depMeta.toLiteralMap();\n}\n/**\r\n * Generate an expression that has the given `expr` wrapped in the following form:\r\n *\r\n * ```\r\n * forwardRef(() => expr)\r\n * ```\r\n */\n\n\nfunction generateForwardRef(expr) {\n  return importExpr(Identifiers.forwardRef).callFn([fn([], [new ReturnStatement(expr)])]);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n\n\nconst VERSION = 3;\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\n\nclass SourceMapGenerator {\n  constructor(file = null) {\n    this.file = file;\n    this.sourcesContent = new Map();\n    this.lines = [];\n    this.lastCol0 = 0;\n    this.hasMappings = false;\n  } // The content is `null` when the content is expected to be loaded using the URL\n\n\n  addSource(url, content = null) {\n    if (!this.sourcesContent.has(url)) {\n      this.sourcesContent.set(url, content);\n    }\n\n    return this;\n  }\n\n  addLine() {\n    this.lines.push([]);\n    this.lastCol0 = 0;\n    return this;\n  }\n\n  addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n    if (!this.currentLine) {\n      throw new Error(`A line must be added before mappings can be added`);\n    }\n\n    if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n      throw new Error(`Unknown source file \"${sourceUrl}\"`);\n    }\n\n    if (col0 == null) {\n      throw new Error(`The column in the generated code must be provided`);\n    }\n\n    if (col0 < this.lastCol0) {\n      throw new Error(`Mapping should be added in output order`);\n    }\n\n    if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n      throw new Error(`The source location must be provided when a source url is provided`);\n    }\n\n    this.hasMappings = true;\n    this.lastCol0 = col0;\n    this.currentLine.push({\n      col0,\n      sourceUrl,\n      sourceLine0,\n      sourceCol0\n    });\n    return this;\n  }\n  /**\r\n   * @internal strip this from published d.ts files due to\r\n   * https://github.com/microsoft/TypeScript/issues/36216\r\n   */\n\n\n  get currentLine() {\n    return this.lines.slice(-1)[0];\n  }\n\n  toJSON() {\n    if (!this.hasMappings) {\n      return null;\n    }\n\n    const sourcesIndex = new Map();\n    const sources = [];\n    const sourcesContent = [];\n    Array.from(this.sourcesContent.keys()).forEach((url, i) => {\n      sourcesIndex.set(url, i);\n      sources.push(url);\n      sourcesContent.push(this.sourcesContent.get(url) || null);\n    });\n    let mappings = '';\n    let lastCol0 = 0;\n    let lastSourceIndex = 0;\n    let lastSourceLine0 = 0;\n    let lastSourceCol0 = 0;\n    this.lines.forEach(segments => {\n      lastCol0 = 0;\n      mappings += segments.map(segment => {\n        // zero-based starting column of the line in the generated code\n        let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n        lastCol0 = segment.col0;\n\n        if (segment.sourceUrl != null) {\n          // zero-based index into the “sources” list\n          segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n          lastSourceIndex = sourcesIndex.get(segment.sourceUrl); // the zero-based starting line in the original source\n\n          segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n          lastSourceLine0 = segment.sourceLine0; // the zero-based starting column in the original source\n\n          segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n          lastSourceCol0 = segment.sourceCol0;\n        }\n\n        return segAsStr;\n      }).join(',');\n      mappings += ';';\n    });\n    mappings = mappings.slice(0, -1);\n    return {\n      'file': this.file || '',\n      'version': VERSION,\n      'sourceRoot': '',\n      'sources': sources,\n      'sourcesContent': sourcesContent,\n      'mappings': mappings\n    };\n  }\n\n  toJsComment() {\n    return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';\n  }\n\n}\n\nfunction toBase64String(value) {\n  let b64 = '';\n  const encoded = utf8Encode(value);\n\n  for (let i = 0; i < encoded.length;) {\n    const i1 = encoded[i++];\n    const i2 = i < encoded.length ? encoded[i++] : null;\n    const i3 = i < encoded.length ? encoded[i++] : null;\n    b64 += toBase64Digit(i1 >> 2);\n    b64 += toBase64Digit((i1 & 3) << 4 | (i2 === null ? 0 : i2 >> 4));\n    b64 += i2 === null ? '=' : toBase64Digit((i2 & 15) << 2 | (i3 === null ? 0 : i3 >> 6));\n    b64 += i2 === null || i3 === null ? '=' : toBase64Digit(i3 & 63);\n  }\n\n  return b64;\n}\n\nfunction toBase64VLQ(value) {\n  value = value < 0 ? (-value << 1) + 1 : value << 1;\n  let out = '';\n\n  do {\n    let digit = value & 31;\n    value = value >> 5;\n\n    if (value > 0) {\n      digit = digit | 32;\n    }\n\n    out += toBase64Digit(digit);\n  } while (value > 0);\n\n  return out;\n}\n\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfunction toBase64Digit(value) {\n  if (value < 0 || value >= 64) {\n    throw new Error(`Can only encode value in the range [0, 63]`);\n  }\n\n  return B64_DIGITS[value];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst _INDENT_WITH = '  ';\nconst CATCH_ERROR_VAR$1 = /*#__PURE__*/variable('error', null, null);\nconst CATCH_STACK_VAR$1 = /*#__PURE__*/variable('stack', null, null);\n\nclass _EmittedLine {\n  constructor(indent) {\n    this.indent = indent;\n    this.partsLength = 0;\n    this.parts = [];\n    this.srcSpans = [];\n  }\n\n}\n\nclass EmitterVisitorContext {\n  constructor(_indent) {\n    this._indent = _indent;\n    this._classes = [];\n    this._preambleLineCount = 0;\n    this._lines = [new _EmittedLine(_indent)];\n  }\n\n  static createRoot() {\n    return new EmitterVisitorContext(0);\n  }\n  /**\r\n   * @internal strip this from published d.ts files due to\r\n   * https://github.com/microsoft/TypeScript/issues/36216\r\n   */\n\n\n  get _currentLine() {\n    return this._lines[this._lines.length - 1];\n  }\n\n  println(from, lastPart = '') {\n    this.print(from || null, lastPart, true);\n  }\n\n  lineIsEmpty() {\n    return this._currentLine.parts.length === 0;\n  }\n\n  lineLength() {\n    return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n  }\n\n  print(from, part, newLine = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n\n      this._currentLine.partsLength += part.length;\n\n      this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n    }\n\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n\n  removeEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n\n  incIndent() {\n    this._indent++;\n\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n\n  decIndent() {\n    this._indent--;\n\n    if (this.lineIsEmpty()) {\n      this._currentLine.indent = this._indent;\n    }\n  }\n\n  pushClass(clazz) {\n    this._classes.push(clazz);\n  }\n\n  popClass() {\n    return this._classes.pop();\n  }\n\n  get currentClass() {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n\n  toSource() {\n    return this.sourceLines.map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '').join('\\n');\n  }\n\n  toSourceMapGenerator(genFilePath, startsAtLine = 0) {\n    const map = new SourceMapGenerator(genFilePath);\n    let firstOffsetMapped = false;\n\n    const mapFirstOffsetIfNeeded = () => {\n      if (!firstOffsetMapped) {\n        // Add a single space so that tools won't try to load the file from disk.\n        // Note: We are using virtual urls like `ng:///`, so we have to\n        // provide a content here.\n        map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n        firstOffsetMapped = true;\n      }\n    };\n\n    for (let i = 0; i < startsAtLine; i++) {\n      map.addLine();\n      mapFirstOffsetIfNeeded();\n    }\n\n    this.sourceLines.forEach((line, lineIdx) => {\n      map.addLine();\n      const spans = line.srcSpans;\n      const parts = line.parts;\n      let col0 = line.indent * _INDENT_WITH.length;\n      let spanIdx = 0; // skip leading parts without source spans\n\n      while (spanIdx < spans.length && !spans[spanIdx]) {\n        col0 += parts[spanIdx].length;\n        spanIdx++;\n      }\n\n      if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n        firstOffsetMapped = true;\n      } else {\n        mapFirstOffsetIfNeeded();\n      }\n\n      while (spanIdx < spans.length) {\n        const span = spans[spanIdx];\n        const source = span.start.file;\n        const sourceLine = span.start.line;\n        const sourceCol = span.start.col;\n        map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);\n        col0 += parts[spanIdx].length;\n        spanIdx++; // assign parts without span or the same span to the previous segment\n\n        while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n          col0 += parts[spanIdx].length;\n          spanIdx++;\n        }\n      }\n    });\n    return map;\n  }\n\n  setPreambleLineCount(count) {\n    return this._preambleLineCount = count;\n  }\n\n  spanOf(line, column) {\n    const emittedLine = this._lines[line - this._preambleLineCount];\n\n    if (emittedLine) {\n      let columnsLeft = column - _createIndent(emittedLine.indent).length;\n\n      for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n        const part = emittedLine.parts[partIndex];\n\n        if (part.length > columnsLeft) {\n          return emittedLine.srcSpans[partIndex];\n        }\n\n        columnsLeft -= part.length;\n      }\n    }\n\n    return null;\n  }\n  /**\r\n   * @internal strip this from published d.ts files due to\r\n   * https://github.com/microsoft/TypeScript/issues/36216\r\n   */\n\n\n  get sourceLines() {\n    if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n      return this._lines.slice(0, -1);\n    }\n\n    return this._lines;\n  }\n\n}\n\nclass AbstractEmitterVisitor {\n  constructor(_escapeDollarInStrings) {\n    this._escapeDollarInStrings = _escapeDollarInStrings;\n  }\n\n  printLeadingComments(stmt, ctx) {\n    if (stmt.leadingComments === undefined) {\n      return;\n    }\n\n    for (const comment of stmt.leadingComments) {\n      if (comment instanceof JSDocComment) {\n        ctx.print(stmt, `/*${comment.toString()}*/`, comment.trailingNewline);\n      } else {\n        if (comment.multiline) {\n          ctx.print(stmt, `/* ${comment.text} */`, comment.trailingNewline);\n        } else {\n          comment.text.split('\\n').forEach(line => {\n            ctx.println(stmt, `// ${line}`);\n          });\n        }\n      }\n    }\n  }\n\n  visitExpressionStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n\n  visitReturnStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    ctx.print(stmt, `return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(stmt, ';');\n    return null;\n  }\n\n  visitIfStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    ctx.print(stmt, `if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(stmt, `) {`);\n    const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(stmt, ` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(stmt, ` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n\n      if (hasElseCase) {\n        ctx.println(stmt, `} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  visitThrowStmt(stmt, ctx) {\n    this.printLeadingComments(stmt, ctx);\n    ctx.print(stmt, `throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(stmt, `;`);\n    return null;\n  }\n\n  visitWriteVarExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n\n    ctx.print(expr, `${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n\n    return null;\n  }\n\n  visitWriteKeyExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(expr, `] = `);\n    expr.value.visitExpression(this, ctx);\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n\n    return null;\n  }\n\n  visitWritePropExpr(expr, ctx) {\n    const lineWasEmpty = ctx.lineIsEmpty();\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, '(');\n    }\n\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(expr, `.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n\n    if (!lineWasEmpty) {\n      ctx.print(expr, ')');\n    }\n\n    return null;\n  }\n\n  visitInvokeMethodExpr(expr, ctx) {\n    expr.receiver.visitExpression(this, ctx);\n    let name = expr.name;\n\n    if (expr.builtin != null) {\n      name = this.getBuiltinMethodName(expr.builtin);\n\n      if (name == null) {\n        // some builtins just mean to skip the call.\n        return null;\n      }\n    }\n\n    ctx.print(expr, `.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(expr, `)`);\n    return null;\n  }\n\n  visitInvokeFunctionExpr(expr, ctx) {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(expr, `(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(expr, `)`);\n    return null;\n  }\n\n  visitTaggedTemplateExpr(expr, ctx) {\n    expr.tag.visitExpression(this, ctx);\n    ctx.print(expr, '`' + expr.template.elements[0].rawText);\n\n    for (let i = 1; i < expr.template.elements.length; i++) {\n      ctx.print(expr, '${');\n      expr.template.expressions[i - 1].visitExpression(this, ctx);\n      ctx.print(expr, `}${expr.template.elements[i].rawText}`);\n    }\n\n    ctx.print(expr, '`');\n    return null;\n  }\n\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n  }\n\n  visitTypeofExpr(expr, ctx) {\n    ctx.print(expr, 'typeof ');\n    expr.expr.visitExpression(this, ctx);\n  }\n\n  visitReadVarExpr(ast, ctx) {\n    let varName = ast.name;\n\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case BuiltinVar.Super:\n          varName = 'super';\n          break;\n\n        case BuiltinVar.This:\n          varName = 'this';\n          break;\n\n        case BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR$1.name;\n          break;\n\n        case BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR$1.name;\n          break;\n\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n\n    ctx.print(ast, varName);\n    return null;\n  }\n\n  visitInstantiateExpr(ast, ctx) {\n    ctx.print(ast, `new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(ast, `(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitLiteralExpr(ast, ctx) {\n    const value = ast.value;\n\n    if (typeof value === 'string') {\n      ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(ast, `${value}`);\n    }\n\n    return null;\n  }\n\n  visitLocalizedString(ast, ctx) {\n    const head = ast.serializeI18nHead();\n    ctx.print(ast, '$localize `' + head.raw);\n\n    for (let i = 1; i < ast.messageParts.length; i++) {\n      ctx.print(ast, '${');\n      ast.expressions[i - 1].visitExpression(this, ctx);\n      ctx.print(ast, `}${ast.serializeI18nTemplatePart(i).raw}`);\n    }\n\n    ctx.print(ast, '`');\n    return null;\n  }\n\n  visitConditionalExpr(ast, ctx) {\n    ctx.print(ast, `(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print(ast, '? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(ast, ': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitNotExpr(ast, ctx) {\n    ctx.print(ast, '!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n\n  visitAssertNotNullExpr(ast, ctx) {\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n\n  visitUnaryOperatorExpr(ast, ctx) {\n    let opStr;\n\n    switch (ast.operator) {\n      case UnaryOperator.Plus:\n        opStr = '+';\n        break;\n\n      case UnaryOperator.Minus:\n        opStr = '-';\n        break;\n\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n\n    if (ast.parens) ctx.print(ast, `(`);\n    ctx.print(ast, opStr);\n    ast.expr.visitExpression(this, ctx);\n    if (ast.parens) ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitBinaryOperatorExpr(ast, ctx) {\n    let opStr;\n\n    switch (ast.operator) {\n      case BinaryOperator.Equals:\n        opStr = '==';\n        break;\n\n      case BinaryOperator.Identical:\n        opStr = '===';\n        break;\n\n      case BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n\n      case BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n\n      case BinaryOperator.And:\n        opStr = '&&';\n        break;\n\n      case BinaryOperator.BitwiseAnd:\n        opStr = '&';\n        break;\n\n      case BinaryOperator.Or:\n        opStr = '||';\n        break;\n\n      case BinaryOperator.Plus:\n        opStr = '+';\n        break;\n\n      case BinaryOperator.Minus:\n        opStr = '-';\n        break;\n\n      case BinaryOperator.Divide:\n        opStr = '/';\n        break;\n\n      case BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n\n      case BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n\n      case BinaryOperator.Lower:\n        opStr = '<';\n        break;\n\n      case BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n\n      case BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n\n      case BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n\n      case BinaryOperator.NullishCoalesce:\n        opStr = '??';\n        break;\n\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n\n    if (ast.parens) ctx.print(ast, `(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(ast, ` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    if (ast.parens) ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitReadPropExpr(ast, ctx) {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `.`);\n    ctx.print(ast, ast.name);\n    return null;\n  }\n\n  visitReadKeyExpr(ast, ctx) {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(ast, `[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(ast, `]`);\n    return null;\n  }\n\n  visitLiteralArrayExpr(ast, ctx) {\n    ctx.print(ast, `[`);\n    this.visitAllExpressions(ast.entries, ctx, ',');\n    ctx.print(ast, `]`);\n    return null;\n  }\n\n  visitLiteralMapExpr(ast, ctx) {\n    ctx.print(ast, `{`);\n    this.visitAllObjects(entry => {\n      ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',');\n    ctx.print(ast, `}`);\n    return null;\n  }\n\n  visitCommaExpr(ast, ctx) {\n    ctx.print(ast, '(');\n    this.visitAllExpressions(ast.parts, ctx, ',');\n    ctx.print(ast, ')');\n    return null;\n  }\n\n  visitAllExpressions(expressions, ctx, separator) {\n    this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n  }\n\n  visitAllObjects(handler, expressions, ctx, separator) {\n    let incrementedIndent = false;\n\n    for (let i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        if (ctx.lineLength() > 80) {\n          ctx.print(null, separator, true);\n\n          if (!incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.incIndent();\n            ctx.incIndent();\n            incrementedIndent = true;\n          }\n        } else {\n          ctx.print(null, separator, false);\n        }\n      }\n\n      handler(expressions[i]);\n    }\n\n    if (incrementedIndent) {\n      // continuation are marked with double indent.\n      ctx.decIndent();\n      ctx.decIndent();\n    }\n  }\n\n  visitAllStatements(statements, ctx) {\n    statements.forEach(stmt => stmt.visitStatement(this, ctx));\n  }\n\n}\n\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\n  if (input == null) {\n    return null;\n  }\n\n  const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\n\nfunction _createIndent(count) {\n  let res = '';\n\n  for (let i = 0; i < count; i++) {\n    res += _INDENT_WITH;\n  }\n\n  return res;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction typeWithParameters(type, numParams) {\n  if (numParams === 0) {\n    return expressionType(type);\n  }\n\n  const params = [];\n\n  for (let i = 0; i < numParams; i++) {\n    params.push(DYNAMIC_TYPE);\n  }\n\n  return expressionType(type, undefined, params);\n}\n\nconst ANIMATE_SYMBOL_PREFIX = '@';\n\nfunction prepareSyntheticPropertyName(name) {\n  return `${ANIMATE_SYMBOL_PREFIX}${name}`;\n}\n\nfunction prepareSyntheticListenerName(name, phase) {\n  return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;\n}\n\nfunction getSafePropertyAccessString(accessor, name) {\n  const escapedName = escapeIdentifier(name, false, false);\n  return escapedName !== name ? `${accessor}[${escapedName}]` : `${accessor}.${name}`;\n}\n\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n  return `animation_${name}_${phase}`;\n}\n\nfunction jitOnlyGuardedExpression(expr) {\n  return guardedExpression('ngJitMode', expr);\n}\n\nfunction devOnlyGuardedExpression(expr) {\n  return guardedExpression('ngDevMode', expr);\n}\n\nfunction guardedExpression(guard, expr) {\n  const guardExpr = new ExternalExpr({\n    name: guard,\n    moduleName: null\n  });\n  const guardNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(guardExpr), literal('undefined'));\n  const guardUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, guardNotDefined, guardExpr,\n  /* type */\n  undefined,\n  /* sourceSpan */\n  undefined, true);\n  return new BinaryOperatorExpr(BinaryOperator.And, guardUndefinedOrTrue, expr);\n}\n\nfunction wrapReference(value) {\n  const wrapped = new WrappedNodeExpr(value);\n  return {\n    value: wrapped,\n    type: wrapped\n  };\n}\n\nfunction refsToArray(refs, shouldForwardDeclare) {\n  const values = literalArr(refs.map(ref => ref.value));\n  return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;\n}\n\nvar R3FactoryDelegateType = /*#__PURE__*/(() => {\n  R3FactoryDelegateType = R3FactoryDelegateType || {};\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n  R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n  return R3FactoryDelegateType;\n})();\nvar FactoryTarget = /*#__PURE__*/(() => {\n  FactoryTarget = FactoryTarget || {};\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n  return FactoryTarget;\n})();\n\n/**\r\n * Construct a factory function expression for the given `R3FactoryMetadata`.\r\n */\nfunction compileFactoryFunction(meta) {\n  const t = variable('t');\n  let baseFactoryVar = null; // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n  // this type is always created by constructor invocation, then this is the type-to-create\n  // parameter provided by the user (t) if specified, or the current type if not. If there is a\n  // delegated factory (which is used to create the current type) then this is only the type-to-\n  // create parameter (t).\n\n  const typeForCtor = !isDelegatedFactoryMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) : t;\n  let ctorExpr = null;\n\n  if (meta.deps !== null) {\n    // There is a constructor (either explicitly or implicitly defined).\n    if (meta.deps !== 'invalid') {\n      ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.target));\n    }\n  } else {\n    // There is no constructor, use the base class' factory to construct typeForCtor.\n    baseFactoryVar = variable(`ɵ${meta.name}_BaseFactory`);\n    ctorExpr = baseFactoryVar.callFn([typeForCtor]);\n  }\n\n  const body = [];\n  let retExpr = null;\n\n  function makeConditionalFactory(nonCtorExpr) {\n    const r = variable('r');\n    body.push(r.set(NULL_EXPR).toDeclStmt());\n    const ctorStmt = ctorExpr !== null ? r.set(ctorExpr).toStmt() : importExpr(Identifiers.invalidFactory).callFn([]).toStmt();\n    body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n    return r;\n  }\n\n  if (isDelegatedFactoryMetadata(meta)) {\n    // This type is created with a delegated factory. If a type parameter is not specified, call\n    // the factory instead.\n    const delegateArgs = injectDependencies(meta.delegateDeps, meta.target); // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.\n\n    const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ? InstantiateExpr : InvokeFunctionExpr)(meta.delegate, delegateArgs);\n    retExpr = makeConditionalFactory(factoryExpr);\n  } else if (isExpressionFactoryMetadata(meta)) {\n    // TODO(alxhub): decide whether to lower the value here or in the caller\n    retExpr = makeConditionalFactory(meta.expression);\n  } else {\n    retExpr = ctorExpr;\n  }\n\n  if (retExpr === null) {\n    // The expression cannot be formed so render an `ɵɵinvalidFactory()` call.\n    body.push(importExpr(Identifiers.invalidFactory).callFn([]).toStmt());\n  } else if (baseFactoryVar !== null) {\n    // This factory uses a base factory, so call `ɵɵgetInheritedFactory()` to compute it.\n    const getInheritedFactoryCall = importExpr(Identifiers.getInheritedFactory).callFn([meta.internalType]); // Memoize the base factoryFn: `baseFactory || (baseFactory = ɵɵgetInheritedFactory(...))`\n\n    const baseFactory = new BinaryOperatorExpr(BinaryOperator.Or, baseFactoryVar, baseFactoryVar.set(getInheritedFactoryCall));\n    body.push(new ReturnStatement(baseFactory.callFn([typeForCtor])));\n  } else {\n    // This is straightforward factory, just return it.\n    body.push(new ReturnStatement(retExpr));\n  }\n\n  let factoryFn = fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`);\n\n  if (baseFactoryVar !== null) {\n    // There is a base factory variable so wrap its declaration along with the factory function into\n    // an IIFE.\n    factoryFn = fn([], [new DeclareVarStmt(baseFactoryVar.name), new ReturnStatement(factoryFn)]).callFn([],\n    /* sourceSpan */\n    undefined,\n    /* pure */\n    true);\n  }\n\n  return {\n    expression: factoryFn,\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\n\nfunction createFactoryType(meta) {\n  const ctorDepsType = meta.deps !== null && meta.deps !== 'invalid' ? createCtorDepsType(meta.deps) : NONE_TYPE;\n  return expressionType(importExpr(Identifiers.FactoryDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]));\n}\n\nfunction injectDependencies(deps, target) {\n  return deps.map((dep, index) => compileInjectDependency(dep, target, index));\n}\n\nfunction compileInjectDependency(dep, target, index) {\n  // Interpret the dependency according to its resolved type.\n  if (dep.token === null) {\n    return importExpr(Identifiers.invalidFactoryDep).callFn([literal(index)]);\n  } else if (dep.attributeNameType === null) {\n    // Build up the injection flags according to the metadata.\n    const flags = 0\n    /* Default */\n    | (dep.self ? 2\n    /* Self */\n    : 0) | (dep.skipSelf ? 4\n    /* SkipSelf */\n    : 0) | (dep.host ? 1\n    /* Host */\n    : 0) | (dep.optional ? 8\n    /* Optional */\n    : 0) | (target === FactoryTarget.Pipe ? 16\n    /* ForPipe */\n    : 0); // If this dependency is optional or otherwise has non-default flags, then additional\n    // parameters describing how to inject the dependency must be passed to the inject function\n    // that's being used.\n\n    let flagsParam = flags !== 0\n    /* Default */\n    || dep.optional ? literal(flags) : null; // Build up the arguments to the injectFn call.\n\n    const injectArgs = [dep.token];\n\n    if (flagsParam) {\n      injectArgs.push(flagsParam);\n    }\n\n    const injectFn = getInjectFn(target);\n    return importExpr(injectFn).callFn(injectArgs);\n  } else {\n    // The `dep.attributeTypeName` value is defined, which indicates that this is an `@Attribute()`\n    // type dependency. For the generated JS we still want to use the `dep.token` value in case the\n    // name given for the attribute is not a string literal. For example given `@Attribute(foo())`,\n    // we want to generate `ɵɵinjectAttribute(foo())`.\n    //\n    // The `dep.attributeTypeName` is only actually used (in `createCtorDepType()`) to generate\n    // typings.\n    return importExpr(Identifiers.injectAttribute).callFn([dep.token]);\n  }\n}\n\nfunction createCtorDepsType(deps) {\n  let hasTypes = false;\n  const attributeTypes = deps.map(dep => {\n    const type = createCtorDepType(dep);\n\n    if (type !== null) {\n      hasTypes = true;\n      return type;\n    } else {\n      return literal(null);\n    }\n  });\n\n  if (hasTypes) {\n    return expressionType(literalArr(attributeTypes));\n  } else {\n    return NONE_TYPE;\n  }\n}\n\nfunction createCtorDepType(dep) {\n  const entries = [];\n\n  if (dep.attributeNameType !== null) {\n    entries.push({\n      key: 'attribute',\n      value: dep.attributeNameType,\n      quoted: false\n    });\n  }\n\n  if (dep.optional) {\n    entries.push({\n      key: 'optional',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.host) {\n    entries.push({\n      key: 'host',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.self) {\n    entries.push({\n      key: 'self',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  if (dep.skipSelf) {\n    entries.push({\n      key: 'skipSelf',\n      value: literal(true),\n      quoted: false\n    });\n  }\n\n  return entries.length > 0 ? literalMap(entries) : null;\n}\n\nfunction isDelegatedFactoryMetadata(meta) {\n  return meta.delegateType !== undefined;\n}\n\nfunction isExpressionFactoryMetadata(meta) {\n  return meta.expression !== undefined;\n}\n\nfunction getInjectFn(target) {\n  switch (target) {\n    case FactoryTarget.Component:\n    case FactoryTarget.Directive:\n    case FactoryTarget.Pipe:\n      return Identifiers.directiveInject;\n\n    case FactoryTarget.NgModule:\n    case FactoryTarget.Injectable:\n    default:\n      return Identifiers.inject;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction createR3ProviderExpression(expression, isForwardRef) {\n  return {\n    expression,\n    isForwardRef\n  };\n}\n\nfunction compileInjectable(meta, resolveForwardRefs) {\n  let result = null;\n  const factoryMeta = {\n    name: meta.name,\n    type: meta.type,\n    internalType: meta.internalType,\n    typeArgumentCount: meta.typeArgumentCount,\n    deps: [],\n    target: FactoryTarget.Injectable\n  };\n\n  if (meta.useClass !== undefined) {\n    // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n    // used to instantiate the class with dependencies injected, or deps are not specified and\n    // the factory of the class is used to instantiate it.\n    //\n    // A special case exists for useClass: Type where Type is the injectable type itself and no\n    // deps are specified, in which case 'useClass' is effectively ignored.\n    const useClassOnSelf = meta.useClass.expression.isEquivalent(meta.internalType);\n    let deps = undefined;\n\n    if (meta.deps !== undefined) {\n      deps = meta.deps;\n    }\n\n    if (deps !== undefined) {\n      // factory: () => new meta.useClass(...deps)\n      result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n        delegate: meta.useClass.expression,\n        delegateDeps: deps,\n        delegateType: R3FactoryDelegateType.Class\n      }));\n    } else if (useClassOnSelf) {\n      result = compileFactoryFunction(factoryMeta);\n    } else {\n      result = {\n        statements: [],\n        expression: delegateToFactory(meta.type.value, meta.useClass.expression, resolveForwardRefs)\n      };\n    }\n  } else if (meta.useFactory !== undefined) {\n    if (meta.deps !== undefined) {\n      result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n        delegate: meta.useFactory,\n        delegateDeps: meta.deps || [],\n        delegateType: R3FactoryDelegateType.Function\n      }));\n    } else {\n      result = {\n        statements: [],\n        expression: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])\n      };\n    }\n  } else if (meta.useValue !== undefined) {\n    // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n    // client code because meta.useValue is an Expression which will be defined even if the actual\n    // value is undefined.\n    result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n      expression: meta.useValue.expression\n    }));\n  } else if (meta.useExisting !== undefined) {\n    // useExisting is an `inject` call on the existing token.\n    result = compileFactoryFunction(Object.assign(Object.assign({}, factoryMeta), {\n      expression: importExpr(Identifiers.inject).callFn([meta.useExisting.expression])\n    }));\n  } else {\n    result = {\n      statements: [],\n      expression: delegateToFactory(meta.type.value, meta.internalType, resolveForwardRefs)\n    };\n  }\n\n  const token = meta.internalType;\n  const injectableProps = new DefinitionMap();\n  injectableProps.set('token', token);\n  injectableProps.set('factory', result.expression); // Only generate providedIn property if it has a non-null value\n\n  if (meta.providedIn.expression.value !== null) {\n    injectableProps.set('providedIn', meta.providedIn.isForwardRef ? generateForwardRef(meta.providedIn.expression) : meta.providedIn.expression);\n  }\n\n  const expression = importExpr(Identifiers.ɵɵdefineInjectable).callFn([injectableProps.toLiteralMap()], undefined, true);\n  return {\n    expression,\n    type: createInjectableType(meta),\n    statements: result.statements\n  };\n}\n\nfunction createInjectableType(meta) {\n  return new ExpressionType(importExpr(Identifiers.InjectableDeclaration, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));\n}\n\nfunction delegateToFactory(type, internalType, unwrapForwardRefs) {\n  if (type.node === internalType.node) {\n    // The types are the same, so we can simply delegate directly to the type's factory.\n    // ```\n    // factory: type.ɵfac\n    // ```\n    return internalType.prop('ɵfac');\n  }\n\n  if (!unwrapForwardRefs) {\n    // The type is not wrapped in a `forwardRef()`, so we create a simple factory function that\n    // accepts a sub-type as an argument.\n    // ```\n    // factory: function(t) { return internalType.ɵfac(t); }\n    // ```\n    return createFactoryFunction(internalType);\n  } // The internalType is actually wrapped in a `forwardRef()` so we need to resolve that before\n  // calling its factory.\n  // ```\n  // factory: function(t) { return core.resolveForwardRef(type).ɵfac(t); }\n  // ```\n\n\n  const unwrappedType = importExpr(Identifiers.resolveForwardRef).callFn([internalType]);\n  return createFactoryFunction(unwrappedType);\n}\n\nfunction createFactoryFunction(type) {\n  return fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(type.callMethod('ɵfac', [variable('t')]))]);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction assertArrayOfStrings(identifier, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n\n  for (let i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst UNUSABLE_INTERPOLATION_REGEXPS = [/^\\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\\/\\// // comment\n];\n\nfunction assertInterpolationSymbols(identifier, value) {\n  if (value != null && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (value != null) {\n    const start = value[0];\n    const end = value[1]; // Check for unusable interpolation symbols\n\n    UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass InterpolationConfig {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static fromArray(markers) {\n    if (!markers) {\n      return DEFAULT_INTERPOLATION_CONFIG;\n    }\n\n    assertInterpolationSymbols('interpolation', markers);\n    return new InterpolationConfig(markers[0], markers[1]);\n  }\n\n}\n\nconst DEFAULT_INTERPOLATION_CONFIG = /*#__PURE__*/new InterpolationConfig('{{', '}}');\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A token representing the a reference to a static type.\r\n *\r\n * This token is unique for a filePath and name and can be used as a hash table key.\r\n */\n\nclass StaticSymbol {\n  constructor(filePath, name, members) {\n    this.filePath = filePath;\n    this.name = name;\n    this.members = members;\n  }\n\n  assertNoMembers() {\n    if (this.members.length) {\n      throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\n    }\n  }\n\n}\n/**\r\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\r\n * same symbol values.\r\n */\n\n\nclass StaticSymbolCache {\n  constructor() {\n    this.cache = new Map();\n  }\n\n  get(declarationFile, name, members) {\n    members = members || [];\n    const memberSuffix = members.length ? `.${members.join('.')}` : '';\n    const key = `\"${declarationFile}\".${name}${memberSuffix}`;\n    let result = this.cache.get(key);\n\n    if (!result) {\n      result = new StaticSymbol(declarationFile, name, members);\n      this.cache.set(key, result);\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst $EOF = 0;\nconst $BSPACE = 8;\nconst $TAB = 9;\nconst $LF = 10;\nconst $VTAB = 11;\nconst $FF = 12;\nconst $CR = 13;\nconst $SPACE = 32;\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $PERCENT = 37;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $LPAREN = 40;\nconst $RPAREN = 41;\nconst $STAR = 42;\nconst $PLUS = 43;\nconst $COMMA = 44;\nconst $MINUS = 45;\nconst $PERIOD = 46;\nconst $SLASH = 47;\nconst $COLON = 58;\nconst $SEMICOLON = 59;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $0 = 48;\nconst $7 = 55;\nconst $9 = 57;\nconst $A = 65;\nconst $E = 69;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\nconst $LBRACKET = 91;\nconst $BACKSLASH = 92;\nconst $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97;\nconst $b = 98;\nconst $e = 101;\nconst $f = 102;\nconst $n = 110;\nconst $r = 114;\nconst $t = 116;\nconst $u = 117;\nconst $v = 118;\nconst $x = 120;\nconst $z = 122;\nconst $LBRACE = 123;\nconst $BAR = 124;\nconst $RBRACE = 125;\nconst $NBSP = 160;\nconst $PIPE = 124;\nconst $TILDA = 126;\nconst $AT = 64;\nconst $BT = 96;\n\nfunction isWhitespace(code) {\n  return code >= $TAB && code <= $SPACE || code == $NBSP;\n}\n\nfunction isDigit(code) {\n  return $0 <= code && code <= $9;\n}\n\nfunction isAsciiLetter(code) {\n  return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n\nfunction isAsciiHexDigit(code) {\n  return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\n\nfunction isNewLine(code) {\n  return code === $LF || code === $CR;\n}\n\nfunction isOctalDigit(code) {\n  return $0 <= code && code <= $7;\n}\n\nfunction isQuote(code) {\n  return code === $SQ || code === $DQ || code === $BT;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass ParseLocation {\n  constructor(file, offset, line, col) {\n    this.file = file;\n    this.offset = offset;\n    this.line = line;\n    this.col = col;\n  }\n\n  toString() {\n    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n  }\n\n  moveBy(delta) {\n    const source = this.file.content;\n    const len = source.length;\n    let offset = this.offset;\n    let line = this.line;\n    let col = this.col;\n\n    while (offset > 0 && delta < 0) {\n      offset--;\n      delta++;\n      const ch = source.charCodeAt(offset);\n\n      if (ch == $LF) {\n        line--;\n        const priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n        col = priorLine > 0 ? offset - priorLine : offset;\n      } else {\n        col--;\n      }\n    }\n\n    while (offset < len && delta > 0) {\n      const ch = source.charCodeAt(offset);\n      offset++;\n      delta--;\n\n      if (ch == $LF) {\n        line++;\n        col = 0;\n      } else {\n        col++;\n      }\n    }\n\n    return new ParseLocation(this.file, offset, line, col);\n  } // Return the source around the location\n  // Up to `maxChars` or `maxLines` on each side of the location\n\n\n  getContext(maxChars, maxLines) {\n    const content = this.file.content;\n    let startOffset = this.offset;\n\n    if (startOffset != null) {\n      if (startOffset > content.length - 1) {\n        startOffset = content.length - 1;\n      }\n\n      let endOffset = startOffset;\n      let ctxChars = 0;\n      let ctxLines = 0;\n\n      while (ctxChars < maxChars && startOffset > 0) {\n        startOffset--;\n        ctxChars++;\n\n        if (content[startOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n\n      ctxChars = 0;\n      ctxLines = 0;\n\n      while (ctxChars < maxChars && endOffset < content.length - 1) {\n        endOffset++;\n        ctxChars++;\n\n        if (content[endOffset] == '\\n') {\n          if (++ctxLines == maxLines) {\n            break;\n          }\n        }\n      }\n\n      return {\n        before: content.substring(startOffset, this.offset),\n        after: content.substring(this.offset, endOffset + 1)\n      };\n    }\n\n    return null;\n  }\n\n}\n\nclass ParseSourceFile {\n  constructor(content, url) {\n    this.content = content;\n    this.url = url;\n  }\n\n}\n\nclass ParseSourceSpan {\n  /**\r\n   * Create an object that holds information about spans of tokens/nodes captured during\r\n   * lexing/parsing of text.\r\n   *\r\n   * @param start\r\n   * The location of the start of the span (having skipped leading trivia).\r\n   * Skipping leading trivia makes source-spans more \"user friendly\", since things like HTML\r\n   * elements will appear to begin at the start of the opening tag, rather than at the start of any\r\n   * leading trivia, which could include newlines.\r\n   *\r\n   * @param end\r\n   * The location of the end of the span.\r\n   *\r\n   * @param fullStart\r\n   * The start of the token without skipping the leading trivia.\r\n   * This is used by tooling that splits tokens further, such as extracting Angular interpolations\r\n   * from text tokens. Such tooling creates new source-spans relative to the original token's\r\n   * source-span. If leading trivia characters have been skipped then the new source-spans may be\r\n   * incorrectly offset.\r\n   *\r\n   * @param details\r\n   * Additional information (such as identifier names) that should be associated with the span.\r\n   */\n  constructor(start, end, fullStart = start, details = null) {\n    this.start = start;\n    this.end = end;\n    this.fullStart = fullStart;\n    this.details = details;\n  }\n\n  toString() {\n    return this.start.file.content.substring(this.start.offset, this.end.offset);\n  }\n\n}\n\nvar ParseErrorLevel = /*#__PURE__*/(() => {\n  ParseErrorLevel = ParseErrorLevel || {};\n  ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n  ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n  return ParseErrorLevel;\n})();\n\nclass ParseError {\n  constructor(span, msg, level = ParseErrorLevel.ERROR) {\n    this.span = span;\n    this.msg = msg;\n    this.level = level;\n  }\n\n  contextualMessage() {\n    const ctx = this.span.start.getContext(100, 3);\n    return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` : this.msg;\n  }\n\n  toString() {\n    const details = this.span.details ? `, ${this.span.details}` : '';\n    return `${this.contextualMessage()}: ${this.span.start}${details}`;\n  }\n\n}\n\nfunction typeSourceSpan(kind, type) {\n  const moduleUrl = identifierModuleUrl(type);\n  const sourceFileName = moduleUrl != null ? `in ${kind} ${identifierName(type)} in ${moduleUrl}` : `in ${kind} ${identifierName(type)}`;\n  const sourceFile = new ParseSourceFile('', sourceFileName);\n  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n/**\r\n * Generates Source Span object for a given R3 Type for JIT mode.\r\n *\r\n * @param kind Component or Directive.\r\n * @param typeName name of the Component or Directive.\r\n * @param sourceUrl reference to Component or Directive source.\r\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\r\n */\n\n\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n  const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;\n  const sourceFile = new ParseSourceFile('', sourceFileName);\n  return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n\nfunction syntaxError(msg, parseErrors) {\n  const error = Error(msg);\n  error[ERROR_SYNTAX_ERROR] = true;\n  if (parseErrors) error[ERROR_PARSE_ERRORS] = parseErrors;\n  return error;\n}\n\nconst ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nconst ERROR_PARSE_ERRORS = 'ngParseErrors';\n\nfunction isSyntaxError(error) {\n  return error[ERROR_SYNTAX_ERROR];\n}\n\nfunction getParseErrors(error) {\n  return error[ERROR_PARSE_ERRORS] || [];\n}\n\nlet _anonymousTypeIndex = 0;\n\nfunction identifierName(compileIdentifier) {\n  if (!compileIdentifier || !compileIdentifier.reference) {\n    return null;\n  }\n\n  const ref = compileIdentifier.reference;\n\n  if (ref instanceof StaticSymbol) {\n    return ref.name;\n  }\n\n  if (ref['__anonymousType']) {\n    return ref['__anonymousType'];\n  }\n\n  if (ref['__forward_ref__']) {\n    // We do not want to try to stringify a `forwardRef()` function because that would cause the\n    // inner function to be evaluated too early, defeating the whole point of the `forwardRef`.\n    return '__forward_ref__';\n  }\n\n  let identifier = stringify(ref);\n\n  if (identifier.indexOf('(') >= 0) {\n    // case: anonymous functions!\n    identifier = `anonymous_${_anonymousTypeIndex++}`;\n    ref['__anonymousType'] = identifier;\n  } else {\n    identifier = sanitizeIdentifier(identifier);\n  }\n\n  return identifier;\n}\n\nfunction identifierModuleUrl(compileIdentifier) {\n  const ref = compileIdentifier.reference;\n\n  if (ref instanceof StaticSymbol) {\n    return ref.filePath;\n  } // Runtime type\n\n\n  return `./${stringify(ref)}`;\n}\n\nfunction sanitizeIdentifier(name) {\n  return name.replace(/\\W/g, '_');\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * In TypeScript, tagged template functions expect a \"template object\", which is an array of\r\n * \"cooked\" strings plus a `raw` property that contains an array of \"raw\" strings. This is\r\n * typically constructed with a function called `__makeTemplateObject(cooked, raw)`, but it may not\r\n * be available in all environments.\r\n *\r\n * This is a JavaScript polyfill that uses __makeTemplateObject when it's available, but otherwise\r\n * creates an inline helper with the same functionality.\r\n *\r\n * In the inline function, if `Object.defineProperty` is available we use that to attach the `raw`\r\n * array.\r\n */\n\n\nconst makeTemplateObjectPolyfill = '(this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,\"raw\",{value:t}):e.raw=t,e})';\n\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\n  constructor() {\n    super(false);\n  }\n\n  visitDeclareClassStmt(stmt, ctx) {\n    ctx.pushClass(stmt);\n\n    this._visitClassConstructor(stmt, ctx);\n\n    if (stmt.parent != null) {\n      ctx.print(stmt, `${stmt.name}.prototype = Object.create(`);\n      stmt.parent.visitExpression(this, ctx);\n      ctx.println(stmt, `.prototype);`);\n    }\n\n    stmt.getters.forEach(getter => this._visitClassGetter(stmt, getter, ctx));\n    stmt.methods.forEach(method => this._visitClassMethod(stmt, method, ctx));\n    ctx.popClass();\n    return null;\n  }\n\n  _visitClassConstructor(stmt, ctx) {\n    ctx.print(stmt, `function ${stmt.name}(`);\n\n    if (stmt.constructorMethod != null) {\n      this._visitParams(stmt.constructorMethod.params, ctx);\n    }\n\n    ctx.println(stmt, `) {`);\n    ctx.incIndent();\n\n    if (stmt.constructorMethod != null) {\n      if (stmt.constructorMethod.body.length > 0) {\n        ctx.println(stmt, `var self = this;`);\n        this.visitAllStatements(stmt.constructorMethod.body, ctx);\n      }\n    }\n\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n  }\n\n  _visitClassGetter(stmt, getter, ctx) {\n    ctx.println(stmt, `Object.defineProperty(${stmt.name}.prototype, '${getter.name}', { get: function() {`);\n    ctx.incIndent();\n\n    if (getter.body.length > 0) {\n      ctx.println(stmt, `var self = this;`);\n      this.visitAllStatements(getter.body, ctx);\n    }\n\n    ctx.decIndent();\n    ctx.println(stmt, `}});`);\n  }\n\n  _visitClassMethod(stmt, method, ctx) {\n    ctx.print(stmt, `${stmt.name}.prototype.${method.name} = function(`);\n\n    this._visitParams(method.params, ctx);\n\n    ctx.println(stmt, `) {`);\n    ctx.incIndent();\n\n    if (method.body.length > 0) {\n      ctx.println(stmt, `var self = this;`);\n      this.visitAllStatements(method.body, ctx);\n    }\n\n    ctx.decIndent();\n    ctx.println(stmt, `};`);\n  }\n\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n  }\n\n  visitReadVarExpr(ast, ctx) {\n    if (ast.builtin === BuiltinVar.This) {\n      ctx.print(ast, 'self');\n    } else if (ast.builtin === BuiltinVar.Super) {\n      throw new Error(`'super' needs to be handled at a parent ast node, not at the variable level!`);\n    } else {\n      super.visitReadVarExpr(ast, ctx);\n    }\n\n    return null;\n  }\n\n  visitDeclareVarStmt(stmt, ctx) {\n    ctx.print(stmt, `var ${stmt.name}`);\n\n    if (stmt.value) {\n      ctx.print(stmt, ' = ');\n      stmt.value.visitExpression(this, ctx);\n    }\n\n    ctx.println(stmt, `;`);\n    return null;\n  }\n\n  visitCastExpr(ast, ctx) {\n    ast.value.visitExpression(this, ctx);\n    return null;\n  }\n\n  visitInvokeFunctionExpr(expr, ctx) {\n    const fnExpr = expr.fn;\n\n    if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n      ctx.currentClass.parent.visitExpression(this, ctx);\n      ctx.print(expr, `.call(this`);\n\n      if (expr.args.length > 0) {\n        ctx.print(expr, `, `);\n        this.visitAllExpressions(expr.args, ctx, ',');\n      }\n\n      ctx.print(expr, `)`);\n    } else {\n      super.visitInvokeFunctionExpr(expr, ctx);\n    }\n\n    return null;\n  }\n\n  visitTaggedTemplateExpr(ast, ctx) {\n    // The following convoluted piece of code is effectively the downlevelled equivalent of\n    // ```\n    // tag`...`\n    // ```\n    // which is effectively like:\n    // ```\n    // tag(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n    // ```\n    const elements = ast.template.elements;\n    ast.tag.visitExpression(this, ctx);\n    ctx.print(ast, `(${makeTemplateObjectPolyfill}(`);\n    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.text, false)).join(', ')}], `);\n    ctx.print(ast, `[${elements.map(part => escapeIdentifier(part.rawText, false)).join(', ')}])`);\n    ast.template.expressions.forEach(expression => {\n      ctx.print(ast, ', ');\n      expression.visitExpression(this, ctx);\n    });\n    ctx.print(ast, ')');\n    return null;\n  }\n\n  visitFunctionExpr(ast, ctx) {\n    ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);\n\n    this._visitParams(ast.params, ctx);\n\n    ctx.println(ast, `) {`);\n    ctx.incIndent();\n    this.visitAllStatements(ast.statements, ctx);\n    ctx.decIndent();\n    ctx.print(ast, `}`);\n    return null;\n  }\n\n  visitDeclareFunctionStmt(stmt, ctx) {\n    ctx.print(stmt, `function ${stmt.name}(`);\n\n    this._visitParams(stmt.params, ctx);\n\n    ctx.println(stmt, `) {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.statements, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  visitTryCatchStmt(stmt, ctx) {\n    ctx.println(stmt, `try {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.bodyStmts, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\n    ctx.incIndent();\n    const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);\n    this.visitAllStatements(catchStmts, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  visitLocalizedString(ast, ctx) {\n    // The following convoluted piece of code is effectively the downlevelled equivalent of\n    // ```\n    // $localize `...`\n    // ```\n    // which is effectively like:\n    // ```\n    // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);\n    // ```\n    ctx.print(ast, `$localize(${makeTemplateObjectPolyfill}(`);\n    const parts = [ast.serializeI18nHead()];\n\n    for (let i = 1; i < ast.messageParts.length; i++) {\n      parts.push(ast.serializeI18nTemplatePart(i));\n    }\n\n    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.cooked, false)).join(', ')}], `);\n    ctx.print(ast, `[${parts.map(part => escapeIdentifier(part.raw, false)).join(', ')}])`);\n    ast.expressions.forEach(expression => {\n      ctx.print(ast, ', ');\n      expression.visitExpression(this, ctx);\n    });\n    ctx.print(ast, ')');\n    return null;\n  }\n\n  _visitParams(params, ctx) {\n    this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\n  }\n\n  getBuiltinMethodName(method) {\n    let name;\n\n    switch (method) {\n      case BuiltinMethod.ConcatArray:\n        name = 'concat';\n        break;\n\n      case BuiltinMethod.SubscribeObservable:\n        name = 'subscribe';\n        break;\n\n      case BuiltinMethod.Bind:\n        name = 'bind';\n        break;\n\n      default:\n        throw new Error(`Unknown builtin method: ${method}`);\n    }\n\n    return name;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * The Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported, or undefined if the policy has not been created yet.\r\n */\n\n\nlet policy;\n/**\r\n * Returns the Trusted Types policy, or null if Trusted Types are not\r\n * enabled/supported. The first call to this function will create the policy.\r\n */\n\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-jit', {\n          createScript: s => s\n        });\n      } catch (_a) {// trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n\n  return policy;\n}\n/**\r\n * Unsafely promote a string to a TrustedScript, falling back to strings when\r\n * Trusted Types are not available.\r\n * @security In particular, it must be assured that the provided string will\r\n * never cause an XSS vulnerability if used in a context that will be\r\n * interpreted and executed as a script by a browser, e.g. when calling eval.\r\n */\n\n\nfunction trustedScriptFromString(script) {\n  var _a;\n\n  return ((_a = getPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(script)) || script;\n}\n/**\r\n * Unsafely call the Function constructor with the given string arguments.\r\n * @security This is a security-sensitive function; any use of this function\r\n * must go through security review. In particular, it must be assured that it\r\n * is only called from the JIT compiler, as use in other code can lead to XSS\r\n * vulnerabilities.\r\n */\n\n\nfunction newTrustedFunctionForJIT(...args) {\n  if (!_global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  } // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\n\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`; // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n\n  const fn = _global['eval'](trustedScriptFromString(body));\n\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  } // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n\n\n  fn.toString = () => body; // 2. When calling the resulting function, `this` should refer to `global`\n\n\n  return fn.bind(_global); // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A helper class to manage the evaluation of JIT generated code.\r\n */\n\n\nclass JitEvaluator {\n  /**\r\n   *\r\n   * @param sourceUrl The URL of the generated code.\r\n   * @param statements An array of Angular statement AST nodes to be evaluated.\r\n   * @param reflector A helper used when converting the statements to executable code.\r\n   * @param createSourceMaps If true then create a source-map for the generated code and include it\r\n   * inline as a source-map comment.\r\n   * @returns A map of all the variables in the generated code.\r\n   */\n  evaluateStatements(sourceUrl, statements, reflector, createSourceMaps) {\n    const converter = new JitEmitterVisitor(reflector);\n    const ctx = EmitterVisitorContext.createRoot(); // Ensure generated code is in strict mode\n\n    if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n      statements = [literal('use strict').toStmt(), ...statements];\n    }\n\n    converter.visitAllStatements(statements, ctx);\n    converter.createReturnStmt(ctx);\n    return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n  }\n  /**\r\n   * Evaluate a piece of JIT generated code.\r\n   * @param sourceUrl The URL of this generated code.\r\n   * @param ctx A context object that contains an AST of the code to be evaluated.\r\n   * @param vars A map containing the names and values of variables that the evaluated code might\r\n   * reference.\r\n   * @param createSourceMap If true then create a source-map for the generated code and include it\r\n   * inline as a source-map comment.\r\n   * @returns The result of evaluating the code.\r\n   */\n\n\n  evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n    let fnBody = `\"use strict\";${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n    const fnArgNames = [];\n    const fnArgValues = [];\n\n    for (const argName in vars) {\n      fnArgValues.push(vars[argName]);\n      fnArgNames.push(argName);\n    }\n\n    if (createSourceMap) {\n      // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n      // E.g. ```\n      // function anonymous(a,b,c\n      // /**/) { ... }```\n      // We don't want to hard code this fact, so we auto detect it via an empty function first.\n      const emptyFn = newTrustedFunctionForJIT(...fnArgNames.concat('return null;')).toString();\n      const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n      fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n    }\n\n    const fn = newTrustedFunctionForJIT(...fnArgNames.concat(fnBody));\n    return this.executeFunction(fn, fnArgValues);\n  }\n  /**\r\n   * Execute a JIT generated function by calling it.\r\n   *\r\n   * This method can be overridden in tests to capture the functions that are generated\r\n   * by this `JitEvaluator` class.\r\n   *\r\n   * @param fn A function to execute.\r\n   * @param args The arguments to pass to the function being executed.\r\n   * @returns The return value of the executed function.\r\n   */\n\n\n  executeFunction(fn, args) {\n    return fn(...args);\n  }\n\n}\n/**\r\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\r\n */\n\n\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\n  constructor(reflector) {\n    super();\n    this.reflector = reflector;\n    this._evalArgNames = [];\n    this._evalArgValues = [];\n    this._evalExportedVars = [];\n  }\n\n  createReturnStmt(ctx) {\n    const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\n    stmt.visitStatement(this, ctx);\n  }\n\n  getArgs() {\n    const result = {};\n\n    for (let i = 0; i < this._evalArgNames.length; i++) {\n      result[this._evalArgNames[i]] = this._evalArgValues[i];\n    }\n\n    return result;\n  }\n\n  visitExternalExpr(ast, ctx) {\n    this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);\n\n    return null;\n  }\n\n  visitWrappedNodeExpr(ast, ctx) {\n    this._emitReferenceToExternal(ast, ast.node, ctx);\n\n    return null;\n  }\n\n  visitDeclareVarStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n\n    return super.visitDeclareVarStmt(stmt, ctx);\n  }\n\n  visitDeclareFunctionStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n\n    return super.visitDeclareFunctionStmt(stmt, ctx);\n  }\n\n  visitDeclareClassStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      this._evalExportedVars.push(stmt.name);\n    }\n\n    return super.visitDeclareClassStmt(stmt, ctx);\n  }\n\n  _emitReferenceToExternal(ast, value, ctx) {\n    let id = this._evalArgValues.indexOf(value);\n\n    if (id === -1) {\n      id = this._evalArgValues.length;\n\n      this._evalArgValues.push(value);\n\n      const name = identifierName({\n        reference: value\n      }) || 'val';\n\n      this._evalArgNames.push(`jit_${name}_${id}`);\n    }\n\n    ctx.print(ast, this._evalArgNames[id]);\n  }\n\n}\n\nfunction isUseStrictStatement(statement) {\n  return statement.isEquivalent(literal('use strict').toStmt());\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction compileInjector(meta) {\n  const definitionMap = new DefinitionMap();\n\n  if (meta.providers !== null) {\n    definitionMap.set('providers', meta.providers);\n  }\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n\n  const expression = importExpr(Identifiers.defineInjector).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createInjectorType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n\nfunction createInjectorType(meta) {\n  return new ExpressionType(importExpr(Identifiers.InjectorDeclaration, [new ExpressionType(meta.type.type)]));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Implementation of `CompileReflector` which resolves references to @angular/core\r\n * symbols at runtime, according to a consumer-provided mapping.\r\n *\r\n * Only supports `resolveExternalReference`, all other methods throw.\r\n */\n\n\nclass R3JitReflector {\n  constructor(context) {\n    this.context = context;\n  }\n\n  resolveExternalReference(ref) {\n    // This reflector only handles @angular/core imports.\n    if (ref.moduleName !== '@angular/core') {\n      throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n    }\n\n    if (!this.context.hasOwnProperty(ref.name)) {\n      throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);\n    }\n\n    return this.context[ref.name];\n  }\n\n  parameters(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  annotations(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  shallowAnnotations(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  tryAnnotations(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  propMetadata(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  hasLifecycleHook(type, lcProperty) {\n    throw new Error('Not implemented.');\n  }\n\n  guards(typeOrFunc) {\n    throw new Error('Not implemented.');\n  }\n\n  componentModuleUrl(type, cmpMetadata) {\n    throw new Error('Not implemented.');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\r\n */\n\n\nfunction compileNgModule(meta) {\n  const {\n    internalType,\n    bootstrap,\n    declarations,\n    imports,\n    exports,\n    schemas,\n    containsForwardDecls,\n    emitInline,\n    id\n  } = meta;\n  const statements = [];\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('type', internalType);\n\n  if (bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(bootstrap, containsForwardDecls));\n  } // If requested to emit scope information inline, pass the `declarations`, `imports` and `exports`\n  // to the `ɵɵdefineNgModule()` call. The JIT compilation uses this.\n\n\n  if (emitInline) {\n    if (declarations.length > 0) {\n      definitionMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n    }\n\n    if (imports.length > 0) {\n      definitionMap.set('imports', refsToArray(imports, containsForwardDecls));\n    }\n\n    if (exports.length > 0) {\n      definitionMap.set('exports', refsToArray(exports, containsForwardDecls));\n    }\n  } // If not emitting inline, the scope information is not passed into `ɵɵdefineNgModule` as it would\n  // prevent tree-shaking of the declarations, imports and exports references.\n  else {\n    const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n\n    if (setNgModuleScopeCall !== null) {\n      statements.push(setNgModuleScopeCall);\n    }\n  }\n\n  if (schemas !== null && schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(schemas.map(ref => ref.value)));\n  }\n\n  if (id !== null) {\n    definitionMap.set('id', id);\n  }\n\n  const expression = importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createNgModuleType(meta);\n  return {\n    expression,\n    type,\n    statements\n  };\n}\n/**\r\n * This function is used in JIT mode to generate the call to `ɵɵdefineNgModule()` from a call to\r\n * `ɵɵngDeclareNgModule()`.\r\n */\n\n\nfunction compileNgModuleDeclarationExpression(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('type', new WrappedNodeExpr(meta.type));\n\n  if (meta.bootstrap !== undefined) {\n    definitionMap.set('bootstrap', new WrappedNodeExpr(meta.bootstrap));\n  }\n\n  if (meta.declarations !== undefined) {\n    definitionMap.set('declarations', new WrappedNodeExpr(meta.declarations));\n  }\n\n  if (meta.imports !== undefined) {\n    definitionMap.set('imports', new WrappedNodeExpr(meta.imports));\n  }\n\n  if (meta.exports !== undefined) {\n    definitionMap.set('exports', new WrappedNodeExpr(meta.exports));\n  }\n\n  if (meta.schemas !== undefined) {\n    definitionMap.set('schemas', new WrappedNodeExpr(meta.schemas));\n  }\n\n  if (meta.id !== undefined) {\n    definitionMap.set('id', new WrappedNodeExpr(meta.id));\n  }\n\n  return importExpr(Identifiers.defineNgModule).callFn([definitionMap.toLiteralMap()]);\n}\n\nfunction createNgModuleType({\n  type: moduleType,\n  declarations,\n  imports,\n  exports\n}) {\n  return new ExpressionType(importExpr(Identifiers.NgModuleDeclaration, [new ExpressionType(moduleType.type), tupleTypeOf(declarations), tupleTypeOf(imports), tupleTypeOf(exports)]));\n}\n/**\r\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\r\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\r\n * such that the references to declarations, imports and exports may be elided causing these\r\n * symbols to become tree-shakeable.\r\n */\n\n\nfunction generateSetNgModuleScopeCall(meta) {\n  const {\n    adjacentType: moduleType,\n    declarations,\n    imports,\n    exports,\n    containsForwardDecls\n  } = meta;\n  const scopeMap = new DefinitionMap();\n\n  if (declarations.length > 0) {\n    scopeMap.set('declarations', refsToArray(declarations, containsForwardDecls));\n  }\n\n  if (imports.length > 0) {\n    scopeMap.set('imports', refsToArray(imports, containsForwardDecls));\n  }\n\n  if (exports.length > 0) {\n    scopeMap.set('exports', refsToArray(exports, containsForwardDecls));\n  }\n\n  if (Object.keys(scopeMap.values).length === 0) {\n    return null;\n  } // setNgModuleScope(...)\n\n\n  const fnCall = new InvokeFunctionExpr(\n  /* fn */\n  importExpr(Identifiers.setNgModuleScope),\n  /* args */\n  [moduleType, scopeMap.toLiteralMap()]); // (ngJitMode guard) && setNgModuleScope(...)\n\n  const guardedCall = jitOnlyGuardedExpression(fnCall); // function() { (ngJitMode guard) && setNgModuleScope(...); }\n\n  const iife = new FunctionExpr(\n  /* params */\n  [],\n  /* statements */\n  [guardedCall.toStmt()]); // (function() { (ngJitMode guard) && setNgModuleScope(...); })()\n\n  const iifeCall = new InvokeFunctionExpr(\n  /* fn */\n  iife,\n  /* args */\n  []);\n  return iifeCall.toStmt();\n}\n\nfunction tupleTypeOf(exp) {\n  const types = exp.map(ref => typeofExpr(ref.type));\n  return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction compilePipeFromMetadata(metadata) {\n  const definitionMapValues = []; // e.g. `name: 'myPipe'`\n\n  definitionMapValues.push({\n    key: 'name',\n    value: literal(metadata.pipeName),\n    quoted: false\n  }); // e.g. `type: MyPipe`\n\n  definitionMapValues.push({\n    key: 'type',\n    value: metadata.type.value,\n    quoted: false\n  }); // e.g. `pure: true`\n\n  definitionMapValues.push({\n    key: 'pure',\n    value: literal(metadata.pure),\n    quoted: false\n  });\n  const expression = importExpr(Identifiers.definePipe).callFn([literalMap(definitionMapValues)], undefined, true);\n  const type = createPipeType(metadata);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n\nfunction createPipeType(metadata) {\n  return new ExpressionType(importExpr(Identifiers.PipeDeclaration, [typeWithParameters(metadata.type.type, metadata.typeArgumentCount), new ExpressionType(new LiteralExpr(metadata.pipeName))]));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass ParserError {\n  constructor(message, input, errLocation, ctxLocation) {\n    this.input = input;\n    this.errLocation = errLocation;\n    this.ctxLocation = ctxLocation;\n    this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n  }\n\n}\n\nclass ParseSpan {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n  toAbsolute(absoluteOffset) {\n    return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);\n  }\n\n}\n\nclass AST {\n  constructor(span,\n  /**\r\n   * Absolute location of the expression AST in a source code file.\r\n   */\n  sourceSpan) {\n    this.span = span;\n    this.sourceSpan = sourceSpan;\n  }\n\n  toString() {\n    return 'AST';\n  }\n\n}\n\nclass ASTWithName extends AST {\n  constructor(span, sourceSpan, nameSpan) {\n    super(span, sourceSpan);\n    this.nameSpan = nameSpan;\n  }\n\n}\n/**\r\n * Represents a quoted expression of the form:\r\n *\r\n * quote = prefix `:` uninterpretedExpression\r\n * prefix = identifier\r\n * uninterpretedExpression = arbitrary string\r\n *\r\n * A quoted expression is meant to be pre-processed by an AST transformer that\r\n * converts it into another AST that no longer contains quoted expressions.\r\n * It is meant to allow third-party developers to extend Angular template\r\n * expression language. The `uninterpretedExpression` part of the quote is\r\n * therefore not interpreted by the Angular's own expression parser.\r\n */\n\n\nclass Quote extends AST {\n  constructor(span, sourceSpan, prefix, uninterpretedExpression, location) {\n    super(span, sourceSpan);\n    this.prefix = prefix;\n    this.uninterpretedExpression = uninterpretedExpression;\n    this.location = location;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitQuote(this, context);\n  }\n\n  toString() {\n    return 'Quote';\n  }\n\n}\n\nclass EmptyExpr extends AST {\n  visit(visitor, context = null) {// do nothing\n  }\n\n}\n\nclass ImplicitReceiver extends AST {\n  visit(visitor, context = null) {\n    return visitor.visitImplicitReceiver(this, context);\n  }\n\n}\n/**\r\n * Receiver when something is accessed through `this` (e.g. `this.foo`). Note that this class\r\n * inherits from `ImplicitReceiver`, because accessing something through `this` is treated the\r\n * same as accessing it implicitly inside of an Angular template (e.g. `[attr.title]=\"this.title\"`\r\n * is the same as `[attr.title]=\"title\"`.). Inheriting allows for the `this` accesses to be treated\r\n * the same as implicit ones, except for a couple of exceptions like `$event` and `$any`.\r\n * TODO: we should find a way for this class not to extend from `ImplicitReceiver` in the future.\r\n */\n\n\nclass ThisReceiver extends ImplicitReceiver {\n  visit(visitor, context = null) {\n    var _a;\n\n    return (_a = visitor.visitThisReceiver) === null || _a === void 0 ? void 0 : _a.call(visitor, this, context);\n  }\n\n}\n/**\r\n * Multiple expressions separated by a semicolon.\r\n */\n\n\nclass Chain extends AST {\n  constructor(span, sourceSpan, expressions) {\n    super(span, sourceSpan);\n    this.expressions = expressions;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitChain(this, context);\n  }\n\n}\n\nclass Conditional extends AST {\n  constructor(span, sourceSpan, condition, trueExp, falseExp) {\n    super(span, sourceSpan);\n    this.condition = condition;\n    this.trueExp = trueExp;\n    this.falseExp = falseExp;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitConditional(this, context);\n  }\n\n}\n\nclass PropertyRead extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitPropertyRead(this, context);\n  }\n\n}\n\nclass PropertyWrite extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name, value) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.value = value;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitPropertyWrite(this, context);\n  }\n\n}\n\nclass SafePropertyRead extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitSafePropertyRead(this, context);\n  }\n\n}\n\nclass KeyedRead extends AST {\n  constructor(span, sourceSpan, receiver, key) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitKeyedRead(this, context);\n  }\n\n}\n\nclass SafeKeyedRead extends AST {\n  constructor(span, sourceSpan, receiver, key) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitSafeKeyedRead(this, context);\n  }\n\n}\n\nclass KeyedWrite extends AST {\n  constructor(span, sourceSpan, receiver, key, value) {\n    super(span, sourceSpan);\n    this.receiver = receiver;\n    this.key = key;\n    this.value = value;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitKeyedWrite(this, context);\n  }\n\n}\n\nclass BindingPipe extends ASTWithName {\n  constructor(span, sourceSpan, exp, name, args, nameSpan) {\n    super(span, sourceSpan, nameSpan);\n    this.exp = exp;\n    this.name = name;\n    this.args = args;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitPipe(this, context);\n  }\n\n}\n\nclass LiteralPrimitive extends AST {\n  constructor(span, sourceSpan, value) {\n    super(span, sourceSpan);\n    this.value = value;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitLiteralPrimitive(this, context);\n  }\n\n}\n\nclass LiteralArray extends AST {\n  constructor(span, sourceSpan, expressions) {\n    super(span, sourceSpan);\n    this.expressions = expressions;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitLiteralArray(this, context);\n  }\n\n}\n\nclass LiteralMap extends AST {\n  constructor(span, sourceSpan, keys, values) {\n    super(span, sourceSpan);\n    this.keys = keys;\n    this.values = values;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitLiteralMap(this, context);\n  }\n\n}\n\nclass Interpolation extends AST {\n  constructor(span, sourceSpan, strings, expressions) {\n    super(span, sourceSpan);\n    this.strings = strings;\n    this.expressions = expressions;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitInterpolation(this, context);\n  }\n\n}\n\nclass Binary extends AST {\n  constructor(span, sourceSpan, operation, left, right) {\n    super(span, sourceSpan);\n    this.operation = operation;\n    this.left = left;\n    this.right = right;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitBinary(this, context);\n  }\n\n}\n/**\r\n * For backwards compatibility reasons, `Unary` inherits from `Binary` and mimics the binary AST\r\n * node that was originally used. This inheritance relation can be deleted in some future major,\r\n * after consumers have been given a chance to fully support Unary.\r\n */\n\n\nclass Unary extends Binary {\n  /**\r\n   * During the deprecation period this constructor is private, to avoid consumers from creating\r\n   * a `Unary` with the fallback properties for `Binary`.\r\n   */\n  constructor(span, sourceSpan, operator, expr, binaryOp, binaryLeft, binaryRight) {\n    super(span, sourceSpan, binaryOp, binaryLeft, binaryRight);\n    this.operator = operator;\n    this.expr = expr;\n  }\n  /**\r\n   * Creates a unary minus expression \"-x\", represented as `Binary` using \"0 - x\".\r\n   */\n\n\n  static createMinus(span, sourceSpan, expr) {\n    return new Unary(span, sourceSpan, '-', expr, '-', new LiteralPrimitive(span, sourceSpan, 0), expr);\n  }\n  /**\r\n   * Creates a unary plus expression \"+x\", represented as `Binary` using \"x - 0\".\r\n   */\n\n\n  static createPlus(span, sourceSpan, expr) {\n    return new Unary(span, sourceSpan, '+', expr, '-', expr, new LiteralPrimitive(span, sourceSpan, 0));\n  }\n\n  visit(visitor, context = null) {\n    if (visitor.visitUnary !== undefined) {\n      return visitor.visitUnary(this, context);\n    }\n\n    return visitor.visitBinary(this, context);\n  }\n\n}\n\nclass PrefixNot extends AST {\n  constructor(span, sourceSpan, expression) {\n    super(span, sourceSpan);\n    this.expression = expression;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitPrefixNot(this, context);\n  }\n\n}\n\nclass NonNullAssert extends AST {\n  constructor(span, sourceSpan, expression) {\n    super(span, sourceSpan);\n    this.expression = expression;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitNonNullAssert(this, context);\n  }\n\n}\n\nclass MethodCall extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name, args, argumentSpan) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.args = args;\n    this.argumentSpan = argumentSpan;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitMethodCall(this, context);\n  }\n\n}\n\nclass SafeMethodCall extends ASTWithName {\n  constructor(span, sourceSpan, nameSpan, receiver, name, args, argumentSpan) {\n    super(span, sourceSpan, nameSpan);\n    this.receiver = receiver;\n    this.name = name;\n    this.args = args;\n    this.argumentSpan = argumentSpan;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitSafeMethodCall(this, context);\n  }\n\n}\n\nclass FunctionCall extends AST {\n  constructor(span, sourceSpan, target, args) {\n    super(span, sourceSpan);\n    this.target = target;\n    this.args = args;\n  }\n\n  visit(visitor, context = null) {\n    return visitor.visitFunctionCall(this, context);\n  }\n\n}\n/**\r\n * Records the absolute position of a text span in a source file, where `start` and `end` are the\r\n * starting and ending byte offsets, respectively, of the text span in a source file.\r\n */\n\n\nclass AbsoluteSourceSpan {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nclass ASTWithSource extends AST {\n  constructor(ast, source, location, absoluteOffset, errors) {\n    super(new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length));\n    this.ast = ast;\n    this.source = source;\n    this.location = location;\n    this.errors = errors;\n  }\n\n  visit(visitor, context = null) {\n    if (visitor.visitASTWithSource) {\n      return visitor.visitASTWithSource(this, context);\n    }\n\n    return this.ast.visit(visitor, context);\n  }\n\n  toString() {\n    return `${this.source} in ${this.location}`;\n  }\n\n}\n\nclass VariableBinding {\n  /**\r\n   * @param sourceSpan entire span of the binding.\r\n   * @param key name of the LHS along with its span.\r\n   * @param value optional value for the RHS along with its span.\r\n   */\n  constructor(sourceSpan, key, value) {\n    this.sourceSpan = sourceSpan;\n    this.key = key;\n    this.value = value;\n  }\n\n}\n\nclass ExpressionBinding {\n  /**\r\n   * @param sourceSpan entire span of the binding.\r\n   * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its\r\n   * span. Note that the length of the span may not be the same as\r\n   * `key.source.length`. For example,\r\n   * 1. key.source = ngFor, key.span is for \"ngFor\"\r\n   * 2. key.source = ngForOf, key.span is for \"of\"\r\n   * 3. key.source = ngForTrackBy, key.span is for \"trackBy\"\r\n   * @param value optional expression for the RHS.\r\n   */\n  constructor(sourceSpan, key, value) {\n    this.sourceSpan = sourceSpan;\n    this.key = key;\n    this.value = value;\n  }\n\n}\n\nclass RecursiveAstVisitor$1 {\n  visit(ast, context) {\n    // The default implementation just visits every node.\n    // Classes that extend RecursiveAstVisitor should override this function\n    // to selectively visit the specified node.\n    ast.visit(this, context);\n  }\n\n  visitUnary(ast, context) {\n    this.visit(ast.expr, context);\n  }\n\n  visitBinary(ast, context) {\n    this.visit(ast.left, context);\n    this.visit(ast.right, context);\n  }\n\n  visitChain(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n\n  visitConditional(ast, context) {\n    this.visit(ast.condition, context);\n    this.visit(ast.trueExp, context);\n    this.visit(ast.falseExp, context);\n  }\n\n  visitPipe(ast, context) {\n    this.visit(ast.exp, context);\n    this.visitAll(ast.args, context);\n  }\n\n  visitFunctionCall(ast, context) {\n    if (ast.target) {\n      this.visit(ast.target, context);\n    }\n\n    this.visitAll(ast.args, context);\n  }\n\n  visitImplicitReceiver(ast, context) {}\n\n  visitThisReceiver(ast, context) {}\n\n  visitInterpolation(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n\n  visitKeyedRead(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n  }\n\n  visitKeyedWrite(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n    this.visit(ast.value, context);\n  }\n\n  visitLiteralArray(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n\n  visitLiteralMap(ast, context) {\n    this.visitAll(ast.values, context);\n  }\n\n  visitLiteralPrimitive(ast, context) {}\n\n  visitMethodCall(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visitAll(ast.args, context);\n  }\n\n  visitPrefixNot(ast, context) {\n    this.visit(ast.expression, context);\n  }\n\n  visitNonNullAssert(ast, context) {\n    this.visit(ast.expression, context);\n  }\n\n  visitPropertyRead(ast, context) {\n    this.visit(ast.receiver, context);\n  }\n\n  visitPropertyWrite(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.value, context);\n  }\n\n  visitSafePropertyRead(ast, context) {\n    this.visit(ast.receiver, context);\n  }\n\n  visitSafeMethodCall(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visitAll(ast.args, context);\n  }\n\n  visitSafeKeyedRead(ast, context) {\n    this.visit(ast.receiver, context);\n    this.visit(ast.key, context);\n  }\n\n  visitQuote(ast, context) {} // This is not part of the AstVisitor interface, just a helper method\n\n\n  visitAll(asts, context) {\n    for (const ast of asts) {\n      this.visit(ast, context);\n    }\n  }\n\n}\n\nclass AstTransformer$1 {\n  visitImplicitReceiver(ast, context) {\n    return ast;\n  }\n\n  visitThisReceiver(ast, context) {\n    return ast;\n  }\n\n  visitInterpolation(ast, context) {\n    return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralPrimitive(ast, context) {\n    return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);\n  }\n\n  visitPropertyRead(ast, context) {\n    return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n  }\n\n  visitPropertyWrite(ast, context) {\n    return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n  }\n\n  visitSafePropertyRead(ast, context) {\n    return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name);\n  }\n\n  visitMethodCall(ast, context) {\n    return new MethodCall(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args), ast.argumentSpan);\n  }\n\n  visitSafeMethodCall(ast, context) {\n    return new SafeMethodCall(ast.span, ast.sourceSpan, ast.nameSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args), ast.argumentSpan);\n  }\n\n  visitFunctionCall(ast, context) {\n    return new FunctionCall(ast.span, ast.sourceSpan, ast.target.visit(this), this.visitAll(ast.args));\n  }\n\n  visitLiteralArray(ast, context) {\n    return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n  }\n\n  visitLiteralMap(ast, context) {\n    return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));\n  }\n\n  visitUnary(ast, context) {\n    switch (ast.operator) {\n      case '+':\n        return Unary.createPlus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n\n      case '-':\n        return Unary.createMinus(ast.span, ast.sourceSpan, ast.expr.visit(this));\n\n      default:\n        throw new Error(`Unknown unary operator ${ast.operator}`);\n    }\n  }\n\n  visitBinary(ast, context) {\n    return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));\n  }\n\n  visitPrefixNot(ast, context) {\n    return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));\n  }\n\n  visitNonNullAssert(ast, context) {\n    return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));\n  }\n\n  visitConditional(ast, context) {\n    return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n  }\n\n  visitPipe(ast, context) {\n    return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);\n  }\n\n  visitKeyedRead(ast, context) {\n    return new KeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n  }\n\n  visitKeyedWrite(ast, context) {\n    return new KeyedWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this), ast.value.visit(this));\n  }\n\n  visitAll(asts) {\n    const res = [];\n\n    for (let i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n\n    return res;\n  }\n\n  visitChain(ast, context) {\n    return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));\n  }\n\n  visitQuote(ast, context) {\n    return new Quote(ast.span, ast.sourceSpan, ast.prefix, ast.uninterpretedExpression, ast.location);\n  }\n\n  visitSafeKeyedRead(ast, context) {\n    return new SafeKeyedRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.key.visit(this));\n  }\n\n} // A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\n\n\nclass AstMemoryEfficientTransformer {\n  visitImplicitReceiver(ast, context) {\n    return ast;\n  }\n\n  visitThisReceiver(ast, context) {\n    return ast;\n  }\n\n  visitInterpolation(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n    if (expressions !== ast.expressions) return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);\n    return ast;\n  }\n\n  visitLiteralPrimitive(ast, context) {\n    return ast;\n  }\n\n  visitPropertyRead(ast, context) {\n    const receiver = ast.receiver.visit(this);\n\n    if (receiver !== ast.receiver) {\n      return new PropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n    }\n\n    return ast;\n  }\n\n  visitPropertyWrite(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const value = ast.value.visit(this);\n\n    if (receiver !== ast.receiver || value !== ast.value) {\n      return new PropertyWrite(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, value);\n    }\n\n    return ast;\n  }\n\n  visitSafePropertyRead(ast, context) {\n    const receiver = ast.receiver.visit(this);\n\n    if (receiver !== ast.receiver) {\n      return new SafePropertyRead(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name);\n    }\n\n    return ast;\n  }\n\n  visitMethodCall(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new MethodCall(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, args, ast.argumentSpan);\n    }\n\n    return ast;\n  }\n\n  visitSafeMethodCall(ast, context) {\n    const receiver = ast.receiver.visit(this);\n    const args = this.visitAll(ast.args);\n\n    if (receiver !== ast.receiver || args !== ast.args) {\n      return new SafeMethodCall(ast.span, ast.sourceSpan, ast.nameSpan, receiver, ast.name, args, ast.argumentSpan);\n    }\n\n    return ast;\n  }\n\n  visitFunctionCall(ast, context) {\n    const target = ast.target && ast.target.visit(this);\n    const args = this.visitAll(ast.args);\n\n    if (target !== ast.target || args !== ast.args) {\n      return new FunctionCall(ast.span, ast.sourceSpan, target, args);\n    }\n\n    return ast;\n  }\n\n  visitLiteralArray(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n\n    if (expressions !== ast.expressions) {\n      return new LiteralArray(ast.span, ast.sourceSpan, expressions);\n    }\n\n    return ast;\n  }\n\n  visitLiteralMap(ast, context) {\n    const values = this.visitAll(ast.values);\n\n    if (values !== ast.values) {\n      return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);\n    }\n\n    return ast;\n  }\n\n  visitUnary(ast, context) {\n    const expr = ast.expr.visit(this);\n\n    if (expr !== ast.expr) {\n      switch (ast.operator) {\n        case '+':\n          return Unary.createPlus(ast.span, ast.sourceSpan, expr);\n\n        case '-':\n          return Unary.createMinus(ast.span, ast.sourceSpan, expr);\n\n        default:\n          throw new Error(`Unknown unary operator ${ast.operator}`);\n      }\n    }\n\n    return ast;\n  }\n\n  visitBinary(ast, context) {\n    const left = ast.left.visit(this);\n    const right = ast.right.visit(this);\n\n    if (left !== ast.left || right !== ast.right) {\n      return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);\n    }\n\n    return ast;\n  }\n\n  visitPrefixNot(ast, context) {\n    const expression = ast.expression.visit(this);\n\n    if (expression !== ast.expression) {\n      return new PrefixNot(ast.span, ast.sourceSpan, expression);\n    }\n\n    return ast;\n  }\n\n  visitNonNullAssert(ast, context) {\n    const expression = ast.expression.visit(this);\n\n    if (expression !== ast.expression) {\n      return new NonNullAssert(ast.span, ast.sourceSpan, expression);\n    }\n\n    return ast;\n  }\n\n  visitConditional(ast, context) {\n    const condition = ast.condition.visit(this);\n    const trueExp = ast.trueExp.visit(this);\n    const falseExp = ast.falseExp.visit(this);\n\n    if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n      return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);\n    }\n\n    return ast;\n  }\n\n  visitPipe(ast, context) {\n    const exp = ast.exp.visit(this);\n    const args = this.visitAll(ast.args);\n\n    if (exp !== ast.exp || args !== ast.args) {\n      return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);\n    }\n\n    return ast;\n  }\n\n  visitKeyedRead(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n\n    if (obj !== ast.receiver || key !== ast.key) {\n      return new KeyedRead(ast.span, ast.sourceSpan, obj, key);\n    }\n\n    return ast;\n  }\n\n  visitKeyedWrite(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n    const value = ast.value.visit(this);\n\n    if (obj !== ast.receiver || key !== ast.key || value !== ast.value) {\n      return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);\n    }\n\n    return ast;\n  }\n\n  visitAll(asts) {\n    const res = [];\n    let modified = false;\n\n    for (let i = 0; i < asts.length; ++i) {\n      const original = asts[i];\n      const value = original.visit(this);\n      res[i] = value;\n      modified = modified || value !== original;\n    }\n\n    return modified ? res : asts;\n  }\n\n  visitChain(ast, context) {\n    const expressions = this.visitAll(ast.expressions);\n\n    if (expressions !== ast.expressions) {\n      return new Chain(ast.span, ast.sourceSpan, expressions);\n    }\n\n    return ast;\n  }\n\n  visitQuote(ast, context) {\n    return ast;\n  }\n\n  visitSafeKeyedRead(ast, context) {\n    const obj = ast.receiver.visit(this);\n    const key = ast.key.visit(this);\n\n    if (obj !== ast.receiver || key !== ast.key) {\n      return new SafeKeyedRead(ast.span, ast.sourceSpan, obj, key);\n    }\n\n    return ast;\n  }\n\n} // Bindings\n\n\nclass ParsedProperty {\n  constructor(name, expression, type, // TODO(FW-2095): `keySpan` should really be required but allows `undefined` so VE does\n  // not need to be updated. Make `keySpan` required when VE is removed.\n  sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.expression = expression;\n    this.type = type;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n    this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n  }\n\n}\n\nvar ParsedPropertyType = /*#__PURE__*/(() => {\n  ParsedPropertyType = ParsedPropertyType || {};\n  ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n  ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n  ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n  return ParsedPropertyType;\n})();\n\nclass ParsedEvent {\n  // Regular events have a target\n  // Animation events have a phase\n  constructor(name, targetOrPhase, type, handler, sourceSpan, // TODO(FW-2095): keySpan should be required but was made optional to avoid changing VE\n  handlerSpan, keySpan) {\n    this.name = name;\n    this.targetOrPhase = targetOrPhase;\n    this.type = type;\n    this.handler = handler;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.keySpan = keySpan;\n  }\n\n}\n/**\r\n * ParsedVariable represents a variable declaration in a microsyntax expression.\r\n */\n\n\nclass ParsedVariable {\n  constructor(name, value, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n}\n\nclass BoundElementProperty {\n  constructor(name, type, securityContext, value, unit, sourceSpan, keySpan, valueSpan) {\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst CORE$1 = '@angular/core';\nlet Identifiers$1 = /*#__PURE__*/(() => {\n  class Identifiers$1 {}\n\n  Identifiers$1.ANALYZE_FOR_ENTRY_COMPONENTS = {\n    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ElementRef = {\n    name: 'ElementRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.NgModuleRef = {\n    name: 'NgModuleRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ViewContainerRef = {\n    name: 'ViewContainerRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ChangeDetectorRef = {\n    name: 'ChangeDetectorRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.QueryList = {\n    name: 'QueryList',\n    moduleName: CORE$1\n  };\n  Identifiers$1.TemplateRef = {\n    name: 'TemplateRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.Renderer2 = {\n    name: 'Renderer2',\n    moduleName: CORE$1\n  };\n  Identifiers$1.CodegenComponentFactoryResolver = {\n    name: 'ɵCodegenComponentFactoryResolver',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ComponentFactoryResolver = {\n    name: 'ComponentFactoryResolver',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ComponentFactory = {\n    name: 'ComponentFactory',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ComponentRef = {\n    name: 'ComponentRef',\n    moduleName: CORE$1\n  };\n  Identifiers$1.NgModuleFactory = {\n    name: 'NgModuleFactory',\n    moduleName: CORE$1\n  };\n  Identifiers$1.createModuleFactory = {\n    name: 'ɵcmf',\n    moduleName: CORE$1\n  };\n  Identifiers$1.moduleDef = {\n    name: 'ɵmod',\n    moduleName: CORE$1\n  };\n  Identifiers$1.moduleProviderDef = {\n    name: 'ɵmpd',\n    moduleName: CORE$1\n  };\n  Identifiers$1.RegisterModuleFactoryFn = {\n    name: 'ɵregisterModuleFactory',\n    moduleName: CORE$1\n  };\n  Identifiers$1.inject = {\n    name: 'ɵɵinject',\n    moduleName: CORE$1\n  };\n  Identifiers$1.directiveInject = {\n    name: 'ɵɵdirectiveInject',\n    moduleName: CORE$1\n  };\n  Identifiers$1.INJECTOR = {\n    name: 'INJECTOR',\n    moduleName: CORE$1\n  };\n  Identifiers$1.Injector = {\n    name: 'Injector',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE$1\n  };\n  Identifiers$1.SecurityContext = {\n    name: 'SecurityContext',\n    moduleName: CORE$1\n  };\n  Identifiers$1.LOCALE_ID = {\n    name: 'LOCALE_ID',\n    moduleName: CORE$1\n  };\n  Identifiers$1.TRANSLATIONS_FORMAT = {\n    name: 'TRANSLATIONS_FORMAT',\n    moduleName: CORE$1\n  };\n  Identifiers$1.inlineInterpolate = {\n    name: 'ɵinlineInterpolate',\n    moduleName: CORE$1\n  };\n  Identifiers$1.interpolate = {\n    name: 'ɵinterpolate',\n    moduleName: CORE$1\n  };\n  Identifiers$1.EMPTY_ARRAY = {\n    name: 'ɵEMPTY_ARRAY',\n    moduleName: CORE$1\n  };\n  Identifiers$1.EMPTY_MAP = {\n    name: 'ɵEMPTY_MAP',\n    moduleName: CORE$1\n  };\n  Identifiers$1.Renderer = {\n    name: 'Renderer',\n    moduleName: CORE$1\n  };\n  Identifiers$1.viewDef = {\n    name: 'ɵvid',\n    moduleName: CORE$1\n  };\n  Identifiers$1.elementDef = {\n    name: 'ɵeld',\n    moduleName: CORE$1\n  };\n  Identifiers$1.anchorDef = {\n    name: 'ɵand',\n    moduleName: CORE$1\n  };\n  Identifiers$1.textDef = {\n    name: 'ɵted',\n    moduleName: CORE$1\n  };\n  Identifiers$1.directiveDef = {\n    name: 'ɵdid',\n    moduleName: CORE$1\n  };\n  Identifiers$1.providerDef = {\n    name: 'ɵprd',\n    moduleName: CORE$1\n  };\n  Identifiers$1.queryDef = {\n    name: 'ɵqud',\n    moduleName: CORE$1\n  };\n  Identifiers$1.pureArrayDef = {\n    name: 'ɵpad',\n    moduleName: CORE$1\n  };\n  Identifiers$1.pureObjectDef = {\n    name: 'ɵpod',\n    moduleName: CORE$1\n  };\n  Identifiers$1.purePipeDef = {\n    name: 'ɵppd',\n    moduleName: CORE$1\n  };\n  Identifiers$1.pipeDef = {\n    name: 'ɵpid',\n    moduleName: CORE$1\n  };\n  Identifiers$1.nodeValue = {\n    name: 'ɵnov',\n    moduleName: CORE$1\n  };\n  Identifiers$1.ngContentDef = {\n    name: 'ɵncd',\n    moduleName: CORE$1\n  };\n  Identifiers$1.unwrapValue = {\n    name: 'ɵunv',\n    moduleName: CORE$1\n  };\n  Identifiers$1.createRendererType2 = {\n    name: 'ɵcrt',\n    moduleName: CORE$1\n  }; // type only\n\n  Identifiers$1.RendererType2 = {\n    name: 'RendererType2',\n    moduleName: CORE$1\n  }; // type only\n\n  Identifiers$1.ViewDefinition = {\n    name: 'ɵViewDefinition',\n    moduleName: CORE$1\n  };\n  Identifiers$1.createComponentFactory = {\n    name: 'ɵccf',\n    moduleName: CORE$1\n  };\n  return Identifiers$1;\n})();\n\nfunction createTokenForReference(reference) {\n  return {\n    identifier: {\n      reference: reference\n    }\n  };\n}\n\nfunction createTokenForExternalReference(reflector, reference) {\n  return createTokenForReference(reflector.resolveExternalReference(reference));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass EventHandlerVars {}\n\nEventHandlerVars.event = /*#__PURE__*/variable('$event');\n\nclass ConvertActionBindingResult {\n  constructor(\n  /**\r\n   * Render2 compatible statements,\r\n   */\n  stmts,\n  /**\r\n   * Variable name used with render2 compatible statements.\r\n   */\n  allowDefault) {\n    this.stmts = stmts;\n    this.allowDefault = allowDefault;\n    /**\r\n     * This is bit of a hack. It converts statements which render2 expects to statements which are\r\n     * expected by render3.\r\n     *\r\n     * Example: `<div click=\"doSomething($event)\">` will generate:\r\n     *\r\n     * Render3:\r\n     * ```\r\n     * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\r\n     * return pd_b;\r\n     * ```\r\n     *\r\n     * but render2 expects:\r\n     * ```\r\n     * return ctx.doSomething($event);\r\n     * ```\r\n     */\n    // TODO(misko): remove this hack once we no longer support ViewEngine.\n\n    this.render3Stmts = stmts.map(statement => {\n      if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name && statement.value instanceof BinaryOperatorExpr) {\n        const lhs = statement.value.lhs;\n        return new ReturnStatement(lhs.value);\n      }\n\n      return statement;\n    });\n  }\n\n}\n/**\r\n * Converts the given expression AST into an executable output AST, assuming the expression is\r\n * used in an action binding (e.g. an event handler).\r\n */\n\n\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses, globals) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver(globals);\n  }\n\n  const actionWithoutBuiltins = convertPropertyBindingBuiltins({\n    createLiteralArrayConverter: argCount => {\n      // Note: no caching for literal arrays in actions.\n      return args => literalArr(args);\n    },\n    createLiteralMapConverter: keys => {\n      // Note: no caching for literal maps in actions.\n      return values => {\n        const entries = keys.map((k, i) => ({\n          key: k.key,\n          value: values[i],\n          quoted: k.quoted\n        }));\n        return literalMap(entries);\n      };\n    },\n    createPipeConverter: name => {\n      throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\n    }\n  }, action);\n  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses);\n  const actionStmts = [];\n  flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n  prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  const lastIndex = actionStmts.length - 1;\n  let preventDefaultVar = null;\n\n  if (lastIndex >= 0) {\n    const lastStatement = actionStmts[lastIndex];\n    const returnExpr = convertStmtIntoExpression(lastStatement);\n\n    if (returnExpr) {\n      // Note: We need to cast the result of the method call to dynamic,\n      // as it might be a void method!\n      preventDefaultVar = createPreventDefaultVar(bindingId);\n      actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);\n    }\n  }\n\n  return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\n\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n  return convertBuiltins(converterFactory, ast);\n}\n\nclass ConvertPropertyBindingResult {\n  constructor(stmts, currValExpr) {\n    this.stmts = stmts;\n    this.currValExpr = currValExpr;\n  }\n\n}\n\nvar BindingForm = /*#__PURE__*/(() => {\n  BindingForm = BindingForm || {};\n  // The general form of binding expression, supports all expressions.\n  BindingForm[BindingForm[\"General\"] = 0] = \"General\"; // Try to generate a simple binding (no temporaries or statements)\n  // otherwise generate a general binding\n\n  BindingForm[BindingForm[\"TrySimple\"] = 1] = \"TrySimple\"; // Inlines assignment of temporaries into the generated expression. The result may still\n  // have statements attached for declarations of temporary variables.\n  // This is the only relevant form for Ivy, the other forms are only used in ViewEngine.\n\n  BindingForm[BindingForm[\"Expression\"] = 2] = \"Expression\";\n  return BindingForm;\n})();\n\n/**\r\n * Converts the given expression AST into an executable output AST, assuming the expression\r\n * is used in property binding. The expression has to be preprocessed via\r\n * `convertPropertyBindingBuiltins`.\r\n */\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n  if (!localResolver) {\n    localResolver = new DefaultLocalResolver();\n  }\n\n  const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n  const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n  const stmts = getStatementsFromVisitor(visitor, bindingId);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {\n    return new ConvertPropertyBindingResult([], outputExpr);\n  } else if (form === BindingForm.Expression) {\n    return new ConvertPropertyBindingResult(stmts, outputExpr);\n  }\n\n  const currValExpr = createCurrValueExpr(bindingId);\n  stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));\n  return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\r\n * Given some expression, such as a binding or interpolation expression, and a context expression to\r\n * look values up on, visit each facet of the given expression resolving values from the context\r\n * expression such that a list of arguments can be derived from the found values that can be used as\r\n * arguments to an external update instruction.\r\n *\r\n * @param localResolver The resolver to use to look up expressions by name appropriately\r\n * @param contextVariableExpression The expression representing the context variable used to create\r\n * the final argument expressions\r\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\r\n * be resolved and what arguments list to build.\r\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\r\n * arguments generated\r\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\r\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\r\n */\n\n\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n  const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);\n  const outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);\n\n  if (visitor.usesImplicitReceiver) {\n    localResolver.notifyImplicitReceiverUse();\n  }\n\n  const stmts = getStatementsFromVisitor(visitor, bindingId); // Removing the first argument, because it was a length for ViewEngine, not Ivy.\n\n  let args = outputExpr.args.slice(1);\n\n  if (expressionWithArgumentsToExtract instanceof Interpolation) {\n    // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n    // args returned to just the value, because we're going to pass it to a special instruction.\n    const strings = expressionWithArgumentsToExtract.strings;\n\n    if (args.length === 3 && strings[0] === '' && strings[1] === '') {\n      // Single argument interpolate instructions.\n      args = [args[1]];\n    } else if (args.length >= 19) {\n      // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n      // an array of arguments\n      args = [literalArr(args)];\n    }\n  }\n\n  return {\n    stmts,\n    args\n  };\n}\n\nfunction getStatementsFromVisitor(visitor, bindingId) {\n  const stmts = [];\n\n  for (let i = 0; i < visitor.temporaryCount; i++) {\n    stmts.push(temporaryDeclaration(bindingId, i));\n  }\n\n  return stmts;\n}\n\nfunction convertBuiltins(converterFactory, ast) {\n  const visitor = new _BuiltinAstConverter(converterFactory);\n  return ast.visit(visitor);\n}\n\nfunction temporaryName(bindingId, temporaryNumber) {\n  return `tmp_${bindingId}_${temporaryNumber}`;\n}\n\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n  return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber));\n}\n\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n  for (let i = temporaryCount - 1; i >= 0; i--) {\n    statements.unshift(temporaryDeclaration(bindingId, i));\n  }\n}\n\nvar _Mode = /*#__PURE__*/(() => {\n  _Mode = _Mode || {};\n  _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n  _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n  return _Mode;\n})();\n\nfunction ensureStatementMode(mode, ast) {\n  if (mode !== _Mode.Statement) {\n    throw new Error(`Expected a statement, but saw ${ast}`);\n  }\n}\n\nfunction ensureExpressionMode(mode, ast) {\n  if (mode !== _Mode.Expression) {\n    throw new Error(`Expected an expression, but saw ${ast}`);\n  }\n}\n\nfunction convertToStatementIfNeeded(mode, expr) {\n  if (mode === _Mode.Statement) {\n    return expr.toStmt();\n  } else {\n    return expr;\n  }\n}\n\nclass _BuiltinAstConverter extends AstTransformer$1 {\n  constructor(_converterFactory) {\n    super();\n    this._converterFactory = _converterFactory;\n  }\n\n  visitPipe(ast, context) {\n    const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n  }\n\n  visitLiteralArray(ast, context) {\n    const args = ast.expressions.map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n  }\n\n  visitLiteralMap(ast, context) {\n    const args = ast.values.map(ast => ast.visit(this, context));\n    return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n  }\n\n}\n\nclass _AstToIrVisitor {\n  constructor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {\n    this._localResolver = _localResolver;\n    this._implicitReceiver = _implicitReceiver;\n    this.bindingId = bindingId;\n    this.interpolationFunction = interpolationFunction;\n    this.baseSourceSpan = baseSourceSpan;\n    this.implicitReceiverAccesses = implicitReceiverAccesses;\n    this._nodeMap = new Map();\n    this._resultMap = new Map();\n    this._currentTemporary = 0;\n    this.temporaryCount = 0;\n    this.usesImplicitReceiver = false;\n  }\n\n  visitUnary(ast, mode) {\n    let op;\n\n    switch (ast.operator) {\n      case '+':\n        op = UnaryOperator.Plus;\n        break;\n\n      case '-':\n        op = UnaryOperator.Minus;\n        break;\n\n      default:\n        throw new Error(`Unsupported operator ${ast.operator}`);\n    }\n\n    return convertToStatementIfNeeded(mode, new UnaryOperatorExpr(op, this._visit(ast.expr, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n  }\n\n  visitBinary(ast, mode) {\n    let op;\n\n    switch (ast.operation) {\n      case '+':\n        op = BinaryOperator.Plus;\n        break;\n\n      case '-':\n        op = BinaryOperator.Minus;\n        break;\n\n      case '*':\n        op = BinaryOperator.Multiply;\n        break;\n\n      case '/':\n        op = BinaryOperator.Divide;\n        break;\n\n      case '%':\n        op = BinaryOperator.Modulo;\n        break;\n\n      case '&&':\n        op = BinaryOperator.And;\n        break;\n\n      case '||':\n        op = BinaryOperator.Or;\n        break;\n\n      case '==':\n        op = BinaryOperator.Equals;\n        break;\n\n      case '!=':\n        op = BinaryOperator.NotEquals;\n        break;\n\n      case '===':\n        op = BinaryOperator.Identical;\n        break;\n\n      case '!==':\n        op = BinaryOperator.NotIdentical;\n        break;\n\n      case '<':\n        op = BinaryOperator.Lower;\n        break;\n\n      case '>':\n        op = BinaryOperator.Bigger;\n        break;\n\n      case '<=':\n        op = BinaryOperator.LowerEquals;\n        break;\n\n      case '>=':\n        op = BinaryOperator.BiggerEquals;\n        break;\n\n      case '??':\n        return this.convertNullishCoalesce(ast, mode);\n\n      default:\n        throw new Error(`Unsupported operation ${ast.operation}`);\n    }\n\n    return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n  }\n\n  visitChain(ast, mode) {\n    ensureStatementMode(mode, ast);\n    return this.visitAll(ast.expressions, mode);\n  }\n\n  visitConditional(ast, mode) {\n    const value = this._visit(ast.condition, _Mode.Expression);\n\n    return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n  }\n\n  visitPipe(ast, mode) {\n    throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\n  }\n\n  visitFunctionCall(ast, mode) {\n    const convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n    let fnResult;\n\n    if (ast instanceof BuiltinFunctionCall) {\n      fnResult = ast.converter(convertedArgs);\n    } else {\n      fnResult = this._visit(ast.target, _Mode.Expression).callFn(convertedArgs, this.convertSourceSpan(ast.span));\n    }\n\n    return convertToStatementIfNeeded(mode, fnResult);\n  }\n\n  visitImplicitReceiver(ast, mode) {\n    ensureExpressionMode(mode, ast);\n    this.usesImplicitReceiver = true;\n    return this._implicitReceiver;\n  }\n\n  visitThisReceiver(ast, mode) {\n    return this.visitImplicitReceiver(ast, mode);\n  }\n\n  visitInterpolation(ast, mode) {\n    ensureExpressionMode(mode, ast);\n    const args = [literal(ast.expressions.length)];\n\n    for (let i = 0; i < ast.strings.length - 1; i++) {\n      args.push(literal(ast.strings[i]));\n      args.push(this._visit(ast.expressions[i], _Mode.Expression));\n    }\n\n    args.push(literal(ast.strings[ast.strings.length - 1]));\n\n    if (this.interpolationFunction) {\n      return this.interpolationFunction(args);\n    }\n\n    return ast.expressions.length <= 9 ? importExpr(Identifiers$1.inlineInterpolate).callFn(args) : importExpr(Identifiers$1.interpolate).callFn([args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))]);\n  }\n\n  visitKeyedRead(ast, mode) {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      return convertToStatementIfNeeded(mode, this._visit(ast.receiver, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n    }\n  }\n\n  visitKeyedWrite(ast, mode) {\n    const obj = this._visit(ast.receiver, _Mode.Expression);\n\n    const key = this._visit(ast.key, _Mode.Expression);\n\n    const value = this._visit(ast.value, _Mode.Expression);\n\n    if (obj === this._implicitReceiver) {\n      this._localResolver.maybeRestoreView();\n    }\n\n    return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n  }\n\n  visitLiteralArray(ast, mode) {\n    throw new Error(`Illegal State: literal arrays should have been converted into functions`);\n  }\n\n  visitLiteralMap(ast, mode) {\n    throw new Error(`Illegal State: literal maps should have been converted into functions`);\n  }\n\n  visitLiteralPrimitive(ast, mode) {\n    // For literal values of null, undefined, true, or false allow type interference\n    // to infer the type.\n    const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ? INFERRED_TYPE : undefined;\n    return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n  }\n\n  _getLocal(name, receiver) {\n    var _a;\n\n    if (((_a = this._localResolver.globals) === null || _a === void 0 ? void 0 : _a.has(name)) && receiver instanceof ThisReceiver) {\n      return null;\n    }\n\n    return this._localResolver.getLocal(name);\n  }\n\n  visitMethodCall(ast, mode) {\n    if (ast.receiver instanceof ImplicitReceiver && !(ast.receiver instanceof ThisReceiver) && ast.name === '$any') {\n      const args = this.visitAll(ast.args, _Mode.Expression);\n\n      if (args.length != 1) {\n        throw new Error(`Invalid call to $any, expected 1 argument but received ${args.length || 'none'}`);\n      }\n\n      return args[0].cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span));\n    }\n\n    const leftMostSafe = this.leftMostSafeNode(ast);\n\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      const args = this.visitAll(ast.args, _Mode.Expression);\n      const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n      let result = null;\n\n      const receiver = this._visit(ast.receiver, _Mode.Expression);\n\n      if (receiver === this._implicitReceiver) {\n        const varExpr = this._getLocal(ast.name, ast.receiver);\n\n        if (varExpr) {\n          // Restore the previous \"usesImplicitReceiver\" state since the implicit\n          // receiver has been replaced with a resolved local expression.\n          this.usesImplicitReceiver = prevUsesImplicitReceiver;\n          result = varExpr.callFn(args);\n          this.addImplicitReceiverAccess(ast.name);\n        }\n      }\n\n      if (result == null) {\n        result = receiver.callMethod(ast.name, args, this.convertSourceSpan(ast.span));\n      }\n\n      return convertToStatementIfNeeded(mode, result);\n    }\n  }\n\n  visitPrefixNot(ast, mode) {\n    return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n  }\n\n  visitNonNullAssert(ast, mode) {\n    return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n  }\n\n  visitPropertyRead(ast, mode) {\n    const leftMostSafe = this.leftMostSafeNode(ast);\n\n    if (leftMostSafe) {\n      return this.convertSafeAccess(ast, leftMostSafe, mode);\n    } else {\n      let result = null;\n      const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n\n      const receiver = this._visit(ast.receiver, _Mode.Expression);\n\n      if (receiver === this._implicitReceiver) {\n        result = this._getLocal(ast.name, ast.receiver);\n\n        if (result) {\n          // Restore the previous \"usesImplicitReceiver\" state since the implicit\n          // receiver has been replaced with a resolved local expression.\n          this.usesImplicitReceiver = prevUsesImplicitReceiver;\n          this.addImplicitReceiverAccess(ast.name);\n        }\n      }\n\n      if (result == null) {\n        result = receiver.prop(ast.name);\n      }\n\n      return convertToStatementIfNeeded(mode, result);\n    }\n  }\n\n  visitPropertyWrite(ast, mode) {\n    const receiver = this._visit(ast.receiver, _Mode.Expression);\n\n    const prevUsesImplicitReceiver = this.usesImplicitReceiver;\n    let varExpr = null;\n\n    if (receiver === this._implicitReceiver) {\n      const localExpr = this._getLocal(ast.name, ast.receiver);\n\n      if (localExpr) {\n        if (localExpr instanceof ReadPropExpr) {\n          // If the local variable is a property read expression, it's a reference\n          // to a 'context.property' value and will be used as the target of the\n          // write expression.\n          varExpr = localExpr; // Restore the previous \"usesImplicitReceiver\" state since the implicit\n          // receiver has been replaced with a resolved local expression.\n\n          this.usesImplicitReceiver = prevUsesImplicitReceiver;\n          this.addImplicitReceiverAccess(ast.name);\n        } else {\n          // Otherwise it's an error.\n          const receiver = ast.name;\n          const value = ast.value instanceof PropertyRead ? ast.value.name : undefined;\n          throw new Error(`Cannot assign value \"${value}\" to template variable \"${receiver}\". Template variables are read-only.`);\n        }\n      }\n    } // If no local expression could be produced, use the original receiver's\n    // property as the target.\n\n\n    if (varExpr === null) {\n      varExpr = receiver.prop(ast.name);\n    }\n\n    return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n  }\n\n  visitSafePropertyRead(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n\n  visitSafeMethodCall(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n\n  visitSafeKeyedRead(ast, mode) {\n    return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n  }\n\n  visitAll(asts, mode) {\n    return asts.map(ast => this._visit(ast, mode));\n  }\n\n  visitQuote(ast, mode) {\n    throw new Error(`Quotes are not supported for evaluation!\n        Statement: ${ast.uninterpretedExpression} located at ${ast.location}`);\n  }\n\n  _visit(ast, mode) {\n    const result = this._resultMap.get(ast);\n\n    if (result) return result;\n    return (this._nodeMap.get(ast) || ast).visit(this, mode);\n  }\n\n  convertSafeAccess(ast, leftMostSafe, mode) {\n    // If the expression contains a safe access node on the left it needs to be converted to\n    // an expression that guards the access to the member by checking the receiver for blank. As\n    // execution proceeds from left to right, the left most part of the expression must be guarded\n    // first but, because member access is left associative, the right side of the expression is at\n    // the top of the AST. The desired result requires lifting a copy of the left part of the\n    // expression up to test it for blank before generating the unguarded version.\n    // Consider, for example the following expression: a?.b.c?.d.e\n    // This results in the ast:\n    //         .\n    //        / \\\n    //       ?.   e\n    //      /  \\\n    //     .    d\n    //    / \\\n    //   ?.  c\n    //  /  \\\n    // a    b\n    // The following tree should be generated:\n    //\n    //        /---- ? ----\\\n    //       /      |      \\\n    //     a   /--- ? ---\\  null\n    //        /     |     \\\n    //       .      .     null\n    //      / \\    / \\\n    //     .  c   .   e\n    //    / \\    / \\\n    //   a   b  .   d\n    //         / \\\n    //        .   c\n    //       / \\\n    //      a   b\n    //\n    // Notice that the first guard condition is the left hand of the left most safe access node\n    // which comes in as leftMostSafe to this routine.\n    let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n\n    let temporary = undefined;\n\n    if (this.needsTemporaryInSafeAccess(leftMostSafe.receiver)) {\n      // If the expression has method calls or pipes then we need to save the result into a\n      // temporary variable to avoid calling stateful or impure code more than once.\n      temporary = this.allocateTemporary(); // Preserve the result in the temporary variable\n\n      guardedExpression = temporary.set(guardedExpression); // Ensure all further references to the guarded expression refer to the temporary instead.\n\n      this._resultMap.set(leftMostSafe.receiver, temporary);\n    }\n\n    const condition = guardedExpression.isBlank(); // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n    // leftMostNode with its unguarded version in the call to `this.visit()`.\n\n    if (leftMostSafe instanceof SafeMethodCall) {\n      this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args, leftMostSafe.argumentSpan));\n    } else if (leftMostSafe instanceof SafeKeyedRead) {\n      this._nodeMap.set(leftMostSafe, new KeyedRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.key));\n    } else {\n      this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.nameSpan, leftMostSafe.receiver, leftMostSafe.name));\n    } // Recursively convert the node now without the guarded member access.\n\n\n    const access = this._visit(ast, _Mode.Expression); // Remove the mapping. This is not strictly required as the converter only traverses each node\n    // once but is safer if the conversion is changed to traverse the nodes more than once.\n\n\n    this._nodeMap.delete(leftMostSafe); // If we allocated a temporary, release it.\n\n\n    if (temporary) {\n      this.releaseTemporary(temporary);\n    } // Produce the conditional\n\n\n    return convertToStatementIfNeeded(mode, condition.conditional(NULL_EXPR, access));\n  }\n\n  convertNullishCoalesce(ast, mode) {\n    const left = this._visit(ast.left, _Mode.Expression);\n\n    const right = this._visit(ast.right, _Mode.Expression);\n\n    const temporary = this.allocateTemporary();\n    this.releaseTemporary(temporary); // Generate the following expression. It is identical to how TS\n    // transpiles binary expressions with a nullish coalescing operator.\n    // let temp;\n    // (temp = a) !== null && temp !== undefined ? temp : b;\n\n    return convertToStatementIfNeeded(mode, temporary.set(left).notIdentical(NULL_EXPR).and(temporary.notIdentical(literal(undefined))).conditional(temporary, right));\n  } // Given an expression of the form a?.b.c?.d.e then the left most safe node is\n  // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n  // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n  // safe method call as this needs to be transformed initially to:\n  //   a == null ? null : a.c.b.c?.d.e\n  // then to:\n  //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n\n\n  leftMostSafeNode(ast) {\n    const visit = (visitor, ast) => {\n      return (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n\n    return ast.visit({\n      visitUnary(ast) {\n        return null;\n      },\n\n      visitBinary(ast) {\n        return null;\n      },\n\n      visitChain(ast) {\n        return null;\n      },\n\n      visitConditional(ast) {\n        return null;\n      },\n\n      visitFunctionCall(ast) {\n        return null;\n      },\n\n      visitImplicitReceiver(ast) {\n        return null;\n      },\n\n      visitThisReceiver(ast) {\n        return null;\n      },\n\n      visitInterpolation(ast) {\n        return null;\n      },\n\n      visitKeyedRead(ast) {\n        return visit(this, ast.receiver);\n      },\n\n      visitKeyedWrite(ast) {\n        return null;\n      },\n\n      visitLiteralArray(ast) {\n        return null;\n      },\n\n      visitLiteralMap(ast) {\n        return null;\n      },\n\n      visitLiteralPrimitive(ast) {\n        return null;\n      },\n\n      visitMethodCall(ast) {\n        return visit(this, ast.receiver);\n      },\n\n      visitPipe(ast) {\n        return null;\n      },\n\n      visitPrefixNot(ast) {\n        return null;\n      },\n\n      visitNonNullAssert(ast) {\n        return null;\n      },\n\n      visitPropertyRead(ast) {\n        return visit(this, ast.receiver);\n      },\n\n      visitPropertyWrite(ast) {\n        return null;\n      },\n\n      visitQuote(ast) {\n        return null;\n      },\n\n      visitSafeMethodCall(ast) {\n        return visit(this, ast.receiver) || ast;\n      },\n\n      visitSafePropertyRead(ast) {\n        return visit(this, ast.receiver) || ast;\n      },\n\n      visitSafeKeyedRead(ast) {\n        return visit(this, ast.receiver) || ast;\n      }\n\n    });\n  } // Returns true of the AST includes a method or a pipe indicating that, if the\n  // expression is used as the target of a safe property or method access then\n  // the expression should be stored into a temporary variable.\n\n\n  needsTemporaryInSafeAccess(ast) {\n    const visit = (visitor, ast) => {\n      return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n    };\n\n    const visitSome = (visitor, ast) => {\n      return ast.some(ast => visit(visitor, ast));\n    };\n\n    return ast.visit({\n      visitUnary(ast) {\n        return visit(this, ast.expr);\n      },\n\n      visitBinary(ast) {\n        return visit(this, ast.left) || visit(this, ast.right);\n      },\n\n      visitChain(ast) {\n        return false;\n      },\n\n      visitConditional(ast) {\n        return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);\n      },\n\n      visitFunctionCall(ast) {\n        return true;\n      },\n\n      visitImplicitReceiver(ast) {\n        return false;\n      },\n\n      visitThisReceiver(ast) {\n        return false;\n      },\n\n      visitInterpolation(ast) {\n        return visitSome(this, ast.expressions);\n      },\n\n      visitKeyedRead(ast) {\n        return false;\n      },\n\n      visitKeyedWrite(ast) {\n        return false;\n      },\n\n      visitLiteralArray(ast) {\n        return true;\n      },\n\n      visitLiteralMap(ast) {\n        return true;\n      },\n\n      visitLiteralPrimitive(ast) {\n        return false;\n      },\n\n      visitMethodCall(ast) {\n        return true;\n      },\n\n      visitPipe(ast) {\n        return true;\n      },\n\n      visitPrefixNot(ast) {\n        return visit(this, ast.expression);\n      },\n\n      visitNonNullAssert(ast) {\n        return visit(this, ast.expression);\n      },\n\n      visitPropertyRead(ast) {\n        return false;\n      },\n\n      visitPropertyWrite(ast) {\n        return false;\n      },\n\n      visitQuote(ast) {\n        return false;\n      },\n\n      visitSafeMethodCall(ast) {\n        return true;\n      },\n\n      visitSafePropertyRead(ast) {\n        return false;\n      },\n\n      visitSafeKeyedRead(ast) {\n        return false;\n      }\n\n    });\n  }\n\n  allocateTemporary() {\n    const tempNumber = this._currentTemporary++;\n    this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n    return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n  }\n\n  releaseTemporary(temporary) {\n    this._currentTemporary--;\n\n    if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n      throw new Error(`Temporary ${temporary.name} released out of order`);\n    }\n  }\n  /**\r\n   * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\r\n   *\r\n   * `ParseSpan` objects are relative to the start of the expression.\r\n   * This method converts these to full `ParseSourceSpan` objects that\r\n   * show where the span is within the overall source file.\r\n   *\r\n   * @param span the relative span to convert.\r\n   * @returns a `ParseSourceSpan` for the given span or null if no\r\n   * `baseSourceSpan` was provided to this class.\r\n   */\n\n\n  convertSourceSpan(span) {\n    if (this.baseSourceSpan) {\n      const start = this.baseSourceSpan.start.moveBy(span.start);\n      const end = this.baseSourceSpan.start.moveBy(span.end);\n      const fullStart = this.baseSourceSpan.fullStart.moveBy(span.start);\n      return new ParseSourceSpan(start, end, fullStart);\n    } else {\n      return null;\n    }\n  }\n  /** Adds the name of an AST to the list of implicit receiver accesses. */\n\n\n  addImplicitReceiverAccess(name) {\n    if (this.implicitReceiverAccesses) {\n      this.implicitReceiverAccesses.add(name);\n    }\n  }\n\n}\n\nfunction flattenStatements(arg, output) {\n  if (Array.isArray(arg)) {\n    arg.forEach(entry => flattenStatements(entry, output));\n  } else {\n    output.push(arg);\n  }\n}\n\nclass DefaultLocalResolver {\n  constructor(globals) {\n    this.globals = globals;\n  }\n\n  notifyImplicitReceiverUse() {}\n\n  maybeRestoreView() {}\n\n  getLocal(name) {\n    if (name === EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n\n    return null;\n  }\n\n}\n\nfunction createCurrValueExpr(bindingId) {\n  return variable(`currVal_${bindingId}`); // fix syntax highlighting: `\n}\n\nfunction createPreventDefaultVar(bindingId) {\n  return variable(`pd_${bindingId}`);\n}\n\nfunction convertStmtIntoExpression(stmt) {\n  if (stmt instanceof ExpressionStatement) {\n    return stmt.expr;\n  } else if (stmt instanceof ReturnStatement) {\n    return stmt.value;\n  }\n\n  return null;\n}\n\nclass BuiltinFunctionCall extends FunctionCall {\n  constructor(span, sourceSpan, args, converter) {\n    super(span, sourceSpan, null, args);\n    this.converter = converter;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n *\r\n * Please make sure to keep to edits in sync with the source file.\r\n *\r\n * Source:\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n *\r\n * The original file level comment is reproduced below\r\n */\n\n/*\r\n  This is a limited shim for ShadowDOM css styling.\r\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\r\n\r\n  The intention here is to support only the styling features which can be\r\n  relatively simply implemented. The goal is to allow users to avoid the\r\n  most obvious pitfalls and do so without compromising performance significantly.\r\n  For ShadowDOM styling that's not covered here, a set of best practices\r\n  can be provided that should allow users to accomplish more complex styling.\r\n\r\n  The following is a list of specific ShadowDOM styling features and a brief\r\n  discussion of the approach used to shim.\r\n\r\n  Shimmed features:\r\n\r\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\r\n  element using the :host rule. To shim this feature, the :host styles are\r\n  reformatted and prefixed with a given scope name and promoted to a\r\n  document level stylesheet.\r\n  For example, given a scope name of .foo, a rule like this:\r\n\r\n    :host {\r\n        background: red;\r\n      }\r\n    }\r\n\r\n  becomes:\r\n\r\n    .foo {\r\n      background: red;\r\n    }\r\n\r\n  * encapsulation: Styles defined within ShadowDOM, apply only to\r\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\r\n  this feature.\r\n\r\n  By default, rules are prefixed with the host element tag name\r\n  as a descendant selector. This ensures styling does not leak out of the 'top'\r\n  of the element's ShadowDOM. For example,\r\n\r\n  div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n  x-foo div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n\r\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\r\n  selectors are scoped by adding an attribute selector suffix to each\r\n  simple selector that contains the host element tag name. Each element\r\n  in the element's ShadowDOM template is also given the scope attribute.\r\n  Thus, these rules match only elements that have the scope attribute.\r\n  For example, given a scope name of x-foo, a rule like this:\r\n\r\n    div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n    div[x-foo] {\r\n      font-weight: bold;\r\n    }\r\n\r\n  Note that elements that are dynamically added to a scope must have the scope\r\n  selector added to them manually.\r\n\r\n  * upper/lower bound encapsulation: Styles which are defined outside a\r\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\r\n  inside a shadowRoot.\r\n\r\n  This styling behavior is not emulated. Some possible ways to do this that\r\n  were rejected due to complexity and/or performance concerns include: (1) reset\r\n  every possible property for every possible selector for a given scope name;\r\n  (2) re-implement css in javascript.\r\n\r\n  As an alternative, users should make sure to use selectors\r\n  specific to the scope in which they are working.\r\n\r\n  * ::distributed: This behavior is not emulated. It's often not necessary\r\n  to style the contents of a specific insertion point and instead, descendants\r\n  of the host element can be styled selectively. Users can also create an\r\n  extra node around an insertion point and style that node's contents\r\n  via descendent selectors. For example, with a shadowRoot like this:\r\n\r\n    <style>\r\n      ::content(div) {\r\n        background: red;\r\n      }\r\n    </style>\r\n    <content></content>\r\n\r\n  could become:\r\n\r\n    <style>\r\n      / *@polyfill .content-container div * /\r\n      ::content(div) {\r\n        background: red;\r\n      }\r\n    </style>\r\n    <div class=\"content-container\">\r\n      <content></content>\r\n    </div>\r\n\r\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\r\n  declaration. This is a directive to the styling shim to use the selector\r\n  in comments in lieu of the next selector when running under polyfill.\r\n*/\n\n\nclass ShadowCss {\n  constructor() {\n    this.strictStyling = true;\n  }\n  /*\r\n   * Shim some cssText with the given selector. Returns cssText that can\r\n   * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\r\n   *\r\n   * When strictStyling is true:\r\n   * - selector is the attribute added to all elements inside the host,\r\n   * - hostSelector is the attribute added to the host itself.\r\n   */\n\n\n  shimCssText(cssText, selector, hostSelector = '') {\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    cssText = this._insertDirectives(cssText);\n\n    const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n\n    return [scopedCssText, ...commentsWithHash].join('\\n');\n  }\n\n  _insertDirectives(cssText) {\n    cssText = this._insertPolyfillDirectivesInCssText(cssText);\n    return this._insertPolyfillRulesInCssText(cssText);\n  }\n  /*\r\n   * Process styles to convert native ShadowDOM rules that will trip\r\n   * up the css parser; we rely on decorating the stylesheet with inert rules.\r\n   *\r\n   * For example, we convert this rule:\r\n   *\r\n   * polyfill-next-selector { content: ':host menu-item'; }\r\n   * ::content menu-item {\r\n   *\r\n   * to this:\r\n   *\r\n   * scopeName menu-item {\r\n   *\r\n   **/\n\n\n  _insertPolyfillDirectivesInCssText(cssText) {\n    // Difference with webcomponents.js: does not handle comments\n    return cssText.replace(_cssContentNextSelectorRe, function (...m) {\n      return m[2] + '{';\n    });\n  }\n  /*\r\n   * Process styles to add rules which will only apply under the polyfill\r\n   *\r\n   * For example, we convert this rule:\r\n   *\r\n   * polyfill-rule {\r\n   *   content: ':host menu-item';\r\n   * ...\r\n   * }\r\n   *\r\n   * to this:\r\n   *\r\n   * scopeName menu-item {...}\r\n   *\r\n   **/\n\n\n  _insertPolyfillRulesInCssText(cssText) {\n    // Difference with webcomponents.js: does not handle comments\n    return cssText.replace(_cssContentRuleRe, (...m) => {\n      const rule = m[0].replace(m[1], '').replace(m[2], '');\n      return m[4] + rule;\n    });\n  }\n  /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\r\n   *\r\n   *  .foo {... }\r\n   *\r\n   *  and converts this to\r\n   *\r\n   *  scopeName .foo { ... }\r\n   */\n\n\n  _scopeCssText(cssText, scopeSelector, hostSelector) {\n    const unscopedRules = this._extractUnscopedRulesFromCssText(cssText); // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n\n\n    cssText = this._insertPolyfillHostInCssText(cssText);\n    cssText = this._convertColonHost(cssText);\n    cssText = this._convertColonHostContext(cssText);\n    cssText = this._convertShadowDOMSelectors(cssText);\n\n    if (scopeSelector) {\n      cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n    }\n\n    cssText = cssText + '\\n' + unscopedRules;\n    return cssText.trim();\n  }\n  /*\r\n   * Process styles to add rules which will only apply under the polyfill\r\n   * and do not process via CSSOM. (CSSOM is destructive to rules on rare\r\n   * occasions, e.g. -webkit-calc on Safari.)\r\n   * For example, we convert this rule:\r\n   *\r\n   * @polyfill-unscoped-rule {\r\n   *   content: 'menu-item';\r\n   * ... }\r\n   *\r\n   * to this:\r\n   *\r\n   * menu-item {...}\r\n   *\r\n   **/\n\n\n  _extractUnscopedRulesFromCssText(cssText) {\n    // Difference with webcomponents.js: does not handle comments\n    let r = '';\n    let m;\n    _cssContentUnscopedRuleRe.lastIndex = 0;\n\n    while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n      const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n      r += rule + '\\n\\n';\n    }\n\n    return r;\n  }\n  /*\r\n   * convert a rule like :host(.foo) > .bar { }\r\n   *\r\n   * to\r\n   *\r\n   * .foo<scopeName> > .bar\r\n   */\n\n\n  _convertColonHost(cssText) {\n    return cssText.replace(_cssColonHostRe, (_, hostSelectors, otherSelectors) => {\n      if (hostSelectors) {\n        const convertedSelectors = [];\n        const hostSelectorArray = hostSelectors.split(',').map(p => p.trim());\n\n        for (const hostSelector of hostSelectorArray) {\n          if (!hostSelector) break;\n          const convertedSelector = _polyfillHostNoCombinator + hostSelector.replace(_polyfillHost, '') + otherSelectors;\n          convertedSelectors.push(convertedSelector);\n        }\n\n        return convertedSelectors.join(',');\n      } else {\n        return _polyfillHostNoCombinator + otherSelectors;\n      }\n    });\n  }\n  /*\r\n   * convert a rule like :host-context(.foo) > .bar { }\r\n   *\r\n   * to\r\n   *\r\n   * .foo<scopeName> > .bar, .foo <scopeName> > .bar { }\r\n   *\r\n   * and\r\n   *\r\n   * :host-context(.foo:host) .bar { ... }\r\n   *\r\n   * to\r\n   *\r\n   * .foo<scopeName> .bar { ... }\r\n   */\n\n\n  _convertColonHostContext(cssText) {\n    return cssText.replace(_cssColonHostContextReGlobal, selectorText => {\n      // We have captured a selector that contains a `:host-context` rule.\n      var _a; // For backward compatibility `:host-context` may contain a comma separated list of selectors.\n      // Each context selector group will contain a list of host-context selectors that must match\n      // an ancestor of the host.\n      // (Normally `contextSelectorGroups` will only contain a single array of context selectors.)\n\n\n      const contextSelectorGroups = [[]]; // There may be more than `:host-context` in this selector so `selectorText` could look like:\n      // `:host-context(.one):host-context(.two)`.\n      // Execute `_cssColonHostContextRe` over and over until we have extracted all the\n      // `:host-context` selectors from this selector.\n\n      let match;\n\n      while (match = _cssColonHostContextRe.exec(selectorText)) {\n        // `match` = [':host-context(<selectors>)<rest>', <selectors>, <rest>]\n        // The `<selectors>` could actually be a comma separated list: `:host-context(.one, .two)`.\n        const newContextSelectors = ((_a = match[1]) !== null && _a !== void 0 ? _a : '').trim().split(',').map(m => m.trim()).filter(m => m !== ''); // We must duplicate the current selector group for each of these new selectors.\n        // For example if the current groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c'],\n        //   ['x', 'y', 'z'],\n        // ]\n        // ```\n        // And we have a new set of comma separated selectors: `:host-context(m,n)` then the new\n        // groups are:\n        // ```\n        // [\n        //   ['a', 'b', 'c', 'm'],\n        //   ['x', 'y', 'z', 'm'],\n        //   ['a', 'b', 'c', 'n'],\n        //   ['x', 'y', 'z', 'n'],\n        // ]\n        // ```\n\n        const contextSelectorGroupsLength = contextSelectorGroups.length;\n        repeatGroups(contextSelectorGroups, newContextSelectors.length);\n\n        for (let i = 0; i < newContextSelectors.length; i++) {\n          for (let j = 0; j < contextSelectorGroupsLength; j++) {\n            contextSelectorGroups[j + i * contextSelectorGroupsLength].push(newContextSelectors[i]);\n          }\n        } // Update the `selectorText` and see repeat to see if there are more `:host-context`s.\n\n\n        selectorText = match[2];\n      } // The context selectors now must be combined with each other to capture all the possible\n      // selectors that `:host-context` can match. See `combineHostContextSelectors()` for more\n      // info about how this is done.\n\n\n      return contextSelectorGroups.map(contextSelectors => combineHostContextSelectors(contextSelectors, selectorText)).join(', ');\n    });\n  }\n  /*\r\n   * Convert combinators like ::shadow and pseudo-elements like ::content\r\n   * by replacing with space.\r\n   */\n\n\n  _convertShadowDOMSelectors(cssText) {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n  } // change a selector like 'div' to 'name div'\n\n\n  _scopeSelectors(cssText, scopeSelector, hostSelector) {\n    return processRules(cssText, rule => {\n      let selector = rule.selector;\n      let content = rule.content;\n\n      if (rule.selector[0] !== '@') {\n        selector = this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@document')) {\n        content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n      } else if (rule.selector.startsWith('@font-face') || rule.selector.startsWith('@page')) {\n        content = this._stripScopingSelectors(rule.content);\n      }\n\n      return new CssRule(selector, content);\n    });\n  }\n  /**\r\n   * Handle a css text that is within a rule that should not contain scope selectors by simply\r\n   * removing them! An example of such a rule is `@font-face`.\r\n   *\r\n   * `@font-face` rules cannot contain nested selectors. Nor can they be nested under a selector.\r\n   * Normally this would be a syntax error by the author of the styles. But in some rare cases, such\r\n   * as importing styles from a library, and applying `:host ::ng-deep` to the imported styles, we\r\n   * can end up with broken css if the imported styles happen to contain @font-face rules.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```\r\n   * :host ::ng-deep {\r\n   *   import 'some/lib/containing/font-face';\r\n   * }\r\n   *\r\n   * Similar logic applies to `@page` rules which can contain a particular set of properties,\r\n   * as well as some specific at-rules. Since they can't be encapsulated, we have to strip\r\n   * any scoping selectors from them. For more information: https://www.w3.org/TR/css-page-3\r\n   * ```\r\n   */\n\n\n  _stripScopingSelectors(cssText) {\n    return processRules(cssText, rule => {\n      const selector = rule.selector.replace(_shadowDeepSelectors, ' ').replace(_polyfillHostNoCombinatorRe, ' ');\n      return new CssRule(selector, rule.content);\n    });\n  }\n\n  _scopeSelector(selector, scopeSelector, hostSelector, strict) {\n    return selector.split(',').map(part => part.trim().split(_shadowDeepSelectors)).map(deepParts => {\n      const [shallowPart, ...otherParts] = deepParts;\n\n      const applyScope = shallowPart => {\n        if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n          return strict ? this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n        } else {\n          return shallowPart;\n        }\n      };\n\n      return [applyScope(shallowPart), ...otherParts].join(' ');\n    }).join(', ');\n  }\n\n  _selectorNeedsScoping(selector, scopeSelector) {\n    const re = this._makeScopeMatcher(scopeSelector);\n\n    return !re.test(selector);\n  }\n\n  _makeScopeMatcher(scopeSelector) {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n  }\n\n  _applySelectorScope(selector, scopeSelector, hostSelector) {\n    // Difference from webcomponents.js: scopeSelector could not be an array\n    return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n  } // scope via name and [is=name]\n\n\n  _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n\n    if (_polyfillHostRe.test(selector)) {\n      const replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;\n      return selector.replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\n        return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n          return before + replaceBy + colon + after;\n        });\n      }).replace(_polyfillHostRe, replaceBy + ' ');\n    }\n\n    return scopeSelector + ' ' + selector;\n  } // return a selector with [name] suffix on each simple selector\n  // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n\n\n  _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const attrName = '[' + scopeSelector + ']';\n\n    const _scopeSelectorPart = p => {\n      let scopedP = p.trim();\n\n      if (!scopedP) {\n        return '';\n      }\n\n      if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n        scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n      } else {\n        // remove :host since it should be unnecessary\n        const t = p.replace(_polyfillHostRe, '');\n\n        if (t.length > 0) {\n          const matches = t.match(/([^:]*)(:*)(.*)/);\n\n          if (matches) {\n            scopedP = matches[1] + attrName + matches[2] + matches[3];\n          }\n        }\n      }\n\n      return scopedP;\n    };\n\n    const safeContent = new SafeSelector(selector);\n    selector = safeContent.content();\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g; // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1; // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n\n    let shouldScope = !hasHost;\n\n    while ((res = sep.exec(selector)) !== null) {\n      const separator = res[1];\n      const part = selector.slice(startIndex, res.index).trim();\n      shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n      const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n      scopedSelector += `${scopedPart} ${separator} `;\n      startIndex = sep.lastIndex;\n    }\n\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part; // replace the placeholders with their original values\n\n    return safeContent.restore(scopedSelector);\n  }\n\n  _insertPolyfillHostInCssText(selector) {\n    return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);\n  }\n\n}\n\nclass SafeSelector {\n  constructor(selector) {\n    this.placeholders = [];\n    this.index = 0; // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n\n    selector = this._escapeRegexMatches(selector, /(\\[[^\\]]*\\])/g); // CSS allows for certain special characters to be used in selectors if they're escaped.\n    // E.g. `.foo:blue` won't match a class called `foo:blue`, because the colon denotes a\n    // pseudo-class, but writing `.foo\\:blue` will match, because the colon was escaped.\n    // Replace all escape sequences (`\\` followed by a character) with a placeholder so\n    // that our handling of pseudo-selectors doesn't mess with them.\n\n    selector = this._escapeRegexMatches(selector, /(\\\\.)/g); // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n\n    this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(exp);\n      this.index++;\n      return pseudo + replaceBy;\n    });\n  }\n\n  restore(content) {\n    return content.replace(/__ph-(\\d+)__/g, (_ph, index) => this.placeholders[+index]);\n  }\n\n  content() {\n    return this._content;\n  }\n  /**\r\n   * Replaces all of the substrings that match a regex within a\r\n   * special string (e.g. `__ph-0__`, `__ph-1__`, etc).\r\n   */\n\n\n  _escapeRegexMatches(content, pattern) {\n    return content.replace(pattern, (_, keep) => {\n      const replaceBy = `__ph-${this.index}__`;\n      this.placeholders.push(keep);\n      this.index++;\n      return replaceBy;\n    });\n  }\n\n}\n\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost'; // note: :host-context pre-processed to -shadowcsshostcontext.\n\nconst _polyfillHostContext = '-shadowcsscontext';\n\nconst _parenSuffix = '(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\n\nconst _cssColonHostRe = /*#__PURE__*/new RegExp(_polyfillHost + _parenSuffix, 'gim');\n\nconst _cssColonHostContextReGlobal = /*#__PURE__*/new RegExp(_polyfillHostContext + _parenSuffix, 'gim');\n\nconst _cssColonHostContextRe = /*#__PURE__*/new RegExp(_polyfillHostContext + _parenSuffix, 'im');\n\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\n\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, // Deprecated selectors\n/\\/shadow-deep\\//g, /\\/shadow\\//g]; // The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\n\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*[\\s\\S]*?\\*\\//g;\n\nfunction stripComments(input) {\n  return input.replace(_commentRe, '');\n}\n\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n\nfunction extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n}\n\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst QUOTE_PLACEHOLDER = '%QUOTED%';\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _quotedRe = /%QUOTED%/g;\nconst CONTENT_PAIRS = /*#__PURE__*/new Map([['{', '}']]);\nconst QUOTE_PAIRS = /*#__PURE__*/new Map([[`\"`, `\"`], [`'`, `'`]]);\n\nclass CssRule {\n  constructor(selector, content) {\n    this.selector = selector;\n    this.content = content;\n  }\n\n}\n\nfunction processRules(input, ruleCallback) {\n  const inputWithEscapedQuotes = escapeBlocks(input, QUOTE_PAIRS, QUOTE_PLACEHOLDER);\n  const inputWithEscapedBlocks = escapeBlocks(inputWithEscapedQuotes.escapedString, CONTENT_PAIRS, BLOCK_PLACEHOLDER);\n  let nextBlockIndex = 0;\n  let nextQuoteIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = '';\n    let suffix = m[4];\n    let contentPrefix = '';\n\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n\n    const rule = ruleCallback(new CssRule(selector, content));\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  }).replace(_quotedRe, () => inputWithEscapedQuotes.blocks[nextQuoteIndex++]);\n}\n\nclass StringWithEscapedBlocks {\n  constructor(escapedString, blocks) {\n    this.escapedString = escapedString;\n    this.blocks = blocks;\n  }\n\n}\n\nfunction escapeBlocks(input, charPairs, placeholder) {\n  const resultParts = [];\n  const escapedBlocks = [];\n  let openCharCount = 0;\n  let nonBlockStartIndex = 0;\n  let blockStartIndex = -1;\n  let openChar;\n  let closeChar;\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n\n    if (char === '\\\\') {\n      i++;\n    } else if (char === closeChar) {\n      openCharCount--;\n\n      if (openCharCount === 0) {\n        escapedBlocks.push(input.substring(blockStartIndex, i));\n        resultParts.push(placeholder);\n        nonBlockStartIndex = i;\n        blockStartIndex = -1;\n        openChar = closeChar = undefined;\n      }\n    } else if (char === openChar) {\n      openCharCount++;\n    } else if (openCharCount === 0 && charPairs.has(char)) {\n      openChar = char;\n      closeChar = charPairs.get(char);\n      openCharCount = 1;\n      blockStartIndex = i + 1;\n      resultParts.push(input.substring(nonBlockStartIndex, blockStartIndex));\n    }\n  }\n\n  if (blockStartIndex !== -1) {\n    escapedBlocks.push(input.substring(blockStartIndex));\n    resultParts.push(placeholder);\n  } else {\n    resultParts.push(input.substring(nonBlockStartIndex));\n  }\n\n  return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n/**\r\n * Combine the `contextSelectors` with the `hostMarker` and the `otherSelectors`\r\n * to create a selector that matches the same as `:host-context()`.\r\n *\r\n * Given a single context selector `A` we need to output selectors that match on the host and as an\r\n * ancestor of the host:\r\n *\r\n * ```\r\n * A <hostMarker>, A<hostMarker> {}\r\n * ```\r\n *\r\n * When there is more than one context selector we also have to create combinations of those\r\n * selectors with each other. For example if there are `A` and `B` selectors the output is:\r\n *\r\n * ```\r\n * AB<hostMarker>, AB <hostMarker>, A B<hostMarker>,\r\n * B A<hostMarker>, A B <hostMarker>, B A <hostMarker> {}\r\n * ```\r\n *\r\n * And so on...\r\n *\r\n * @param hostMarker the string that selects the host element.\r\n * @param contextSelectors an array of context selectors that will be combined.\r\n * @param otherSelectors the rest of the selectors that are not context selectors.\r\n */\n\n\nfunction combineHostContextSelectors(contextSelectors, otherSelectors) {\n  const hostMarker = _polyfillHostNoCombinator;\n  _polyfillHostRe.lastIndex = 0; // reset the regex to ensure we get an accurate test\n\n  const otherSelectorsHasHost = _polyfillHostRe.test(otherSelectors); // If there are no context selectors then just output a host marker\n\n\n  if (contextSelectors.length === 0) {\n    return hostMarker + otherSelectors;\n  }\n\n  const combined = [contextSelectors.pop() || ''];\n\n  while (contextSelectors.length > 0) {\n    const length = combined.length;\n    const contextSelector = contextSelectors.pop();\n\n    for (let i = 0; i < length; i++) {\n      const previousSelectors = combined[i]; // Add the new selector as a descendant of the previous selectors\n\n      combined[length * 2 + i] = previousSelectors + ' ' + contextSelector; // Add the new selector as an ancestor of the previous selectors\n\n      combined[length + i] = contextSelector + ' ' + previousSelectors; // Add the new selector to act on the same element as the previous selectors\n\n      combined[i] = contextSelector + previousSelectors;\n    }\n  } // Finally connect the selector to the `hostMarker`s: either acting directly on the host\n  // (A<hostMarker>) or as an ancestor (A <hostMarker>).\n\n\n  return combined.map(s => otherSelectorsHasHost ? `${s}${otherSelectors}` : `${s}${hostMarker}${otherSelectors}, ${s} ${hostMarker}${otherSelectors}`).join(',');\n}\n/**\r\n * Mutate the given `groups` array so that there are `multiples` clones of the original array\r\n * stored.\r\n *\r\n * For example `repeatGroups([a, b], 3)` will result in `[a, b, a, b, a, b]` - but importantly the\r\n * newly added groups will be clones of the original.\r\n *\r\n * @param groups An array of groups of strings that will be repeated. This array is mutated\r\n *     in-place.\r\n * @param multiples The number of times the current groups should appear.\r\n */\n\n\nfunction repeatGroups(groups, multiples) {\n  const length = groups.length;\n\n  for (let i = 1; i < multiples; i++) {\n    for (let j = 0; j < length; j++) {\n      groups[j + i * length] = groups[j].slice(0);\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\n\n\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n\nfunction viewClassName(compType, embeddedTemplateIndex) {\n  return `View_${identifierName({\n    reference: compType\n  })}_${embeddedTemplateIndex}`;\n}\n\nfunction rendererTypeName(compType) {\n  return `RenderType_${identifierName({\n    reference: compType\n  })}`;\n}\n\nfunction hostViewClassName(compType) {\n  return `HostView_${identifierName({\n    reference: compType\n  })}`;\n}\n\nfunction componentFactoryName(compType) {\n  return `${identifierName({\n    reference: compType\n  })}NgFactory`;\n}\n\nvar CompileSummaryKind = /*#__PURE__*/(() => {\n  CompileSummaryKind = CompileSummaryKind || {};\n  CompileSummaryKind[CompileSummaryKind[\"Pipe\"] = 0] = \"Pipe\";\n  CompileSummaryKind[CompileSummaryKind[\"Directive\"] = 1] = \"Directive\";\n  CompileSummaryKind[CompileSummaryKind[\"NgModule\"] = 2] = \"NgModule\";\n  CompileSummaryKind[CompileSummaryKind[\"Injectable\"] = 3] = \"Injectable\";\n  return CompileSummaryKind;\n})();\n\nfunction tokenName(token) {\n  return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\n\nfunction tokenReference(token) {\n  if (token.identifier != null) {\n    return token.identifier.reference;\n  } else {\n    return token.value;\n  }\n}\n/**\r\n * Metadata about a stylesheet\r\n */\n\n\nclass CompileStylesheetMetadata {\n  constructor({\n    moduleUrl,\n    styles,\n    styleUrls\n  } = {}) {\n    this.moduleUrl = moduleUrl || null;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n  }\n\n}\n/**\r\n * Metadata regarding compilation of a template.\r\n */\n\n\nclass CompileTemplateMetadata {\n  constructor({\n    encapsulation,\n    template,\n    templateUrl,\n    htmlAst,\n    styles,\n    styleUrls,\n    externalStylesheets,\n    animations,\n    ngContentSelectors,\n    interpolation,\n    isInline,\n    preserveWhitespaces\n  }) {\n    this.encapsulation = encapsulation;\n    this.template = template;\n    this.templateUrl = templateUrl;\n    this.htmlAst = htmlAst;\n    this.styles = _normalizeArray(styles);\n    this.styleUrls = _normalizeArray(styleUrls);\n    this.externalStylesheets = _normalizeArray(externalStylesheets);\n    this.animations = animations ? flatten(animations) : [];\n    this.ngContentSelectors = ngContentSelectors || [];\n\n    if (interpolation && interpolation.length != 2) {\n      throw new Error(`'interpolation' should have a start and an end symbol.`);\n    }\n\n    this.interpolation = interpolation;\n    this.isInline = isInline;\n    this.preserveWhitespaces = preserveWhitespaces;\n  }\n\n  toSummary() {\n    return {\n      ngContentSelectors: this.ngContentSelectors,\n      encapsulation: this.encapsulation,\n      styles: this.styles,\n      animations: this.animations\n    };\n  }\n\n}\n/**\r\n * Metadata regarding compilation of a directive.\r\n */\n\n\nclass CompileDirectiveMetadata {\n  constructor({\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    hostListeners,\n    hostProperties,\n    hostAttributes,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory\n  }) {\n    this.isHost = !!isHost;\n    this.type = type;\n    this.isComponent = isComponent;\n    this.selector = selector;\n    this.exportAs = exportAs;\n    this.changeDetection = changeDetection;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.hostListeners = hostListeners;\n    this.hostProperties = hostProperties;\n    this.hostAttributes = hostAttributes;\n    this.providers = _normalizeArray(providers);\n    this.viewProviders = _normalizeArray(viewProviders);\n    this.queries = _normalizeArray(queries);\n    this.guards = guards;\n    this.viewQueries = _normalizeArray(viewQueries);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.template = template;\n    this.componentViewType = componentViewType;\n    this.rendererType = rendererType;\n    this.componentFactory = componentFactory;\n  }\n\n  static create({\n    isHost,\n    type,\n    isComponent,\n    selector,\n    exportAs,\n    changeDetection,\n    inputs,\n    outputs,\n    host,\n    providers,\n    viewProviders,\n    queries,\n    guards,\n    viewQueries,\n    entryComponents,\n    template,\n    componentViewType,\n    rendererType,\n    componentFactory\n  }) {\n    const hostListeners = {};\n    const hostProperties = {};\n    const hostAttributes = {};\n\n    if (host != null) {\n      Object.keys(host).forEach(key => {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP);\n\n        if (matches === null) {\n          hostAttributes[key] = value;\n        } else if (matches[1] != null) {\n          hostProperties[matches[1]] = value;\n        } else if (matches[2] != null) {\n          hostListeners[matches[2]] = value;\n        }\n      });\n    }\n\n    const inputsMap = {};\n\n    if (inputs != null) {\n      inputs.forEach(bindConfig => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        inputsMap[parts[0]] = parts[1];\n      });\n    }\n\n    const outputsMap = {};\n\n    if (outputs != null) {\n      outputs.forEach(bindConfig => {\n        // canonical syntax: `dirProp: elProp`\n        // if there is no `:`, use dirProp = elProp\n        const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n        outputsMap[parts[0]] = parts[1];\n      });\n    }\n\n    return new CompileDirectiveMetadata({\n      isHost,\n      type,\n      isComponent: !!isComponent,\n      selector,\n      exportAs,\n      changeDetection,\n      inputs: inputsMap,\n      outputs: outputsMap,\n      hostListeners,\n      hostProperties,\n      hostAttributes,\n      providers,\n      viewProviders,\n      queries,\n      guards,\n      viewQueries,\n      entryComponents,\n      template,\n      componentViewType,\n      rendererType,\n      componentFactory\n    });\n  }\n\n  toSummary() {\n    return {\n      summaryKind: CompileSummaryKind.Directive,\n      type: this.type,\n      isComponent: this.isComponent,\n      selector: this.selector,\n      exportAs: this.exportAs,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      hostListeners: this.hostListeners,\n      hostProperties: this.hostProperties,\n      hostAttributes: this.hostAttributes,\n      providers: this.providers,\n      viewProviders: this.viewProviders,\n      queries: this.queries,\n      guards: this.guards,\n      viewQueries: this.viewQueries,\n      entryComponents: this.entryComponents,\n      changeDetection: this.changeDetection,\n      template: this.template && this.template.toSummary(),\n      componentViewType: this.componentViewType,\n      rendererType: this.rendererType,\n      componentFactory: this.componentFactory\n    };\n  }\n\n}\n\nclass CompilePipeMetadata {\n  constructor({\n    type,\n    name,\n    pure\n  }) {\n    this.type = type;\n    this.name = name;\n    this.pure = !!pure;\n  }\n\n  toSummary() {\n    return {\n      summaryKind: CompileSummaryKind.Pipe,\n      type: this.type,\n      name: this.name,\n      pure: this.pure\n    };\n  }\n\n}\n\nclass CompileShallowModuleMetadata {}\n/**\r\n * Metadata regarding compilation of a module.\r\n */\n\n\nclass CompileNgModuleMetadata {\n  constructor({\n    type,\n    providers,\n    declaredDirectives,\n    exportedDirectives,\n    declaredPipes,\n    exportedPipes,\n    entryComponents,\n    bootstrapComponents,\n    importedModules,\n    exportedModules,\n    schemas,\n    transitiveModule,\n    id\n  }) {\n    this.type = type || null;\n    this.declaredDirectives = _normalizeArray(declaredDirectives);\n    this.exportedDirectives = _normalizeArray(exportedDirectives);\n    this.declaredPipes = _normalizeArray(declaredPipes);\n    this.exportedPipes = _normalizeArray(exportedPipes);\n    this.providers = _normalizeArray(providers);\n    this.entryComponents = _normalizeArray(entryComponents);\n    this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n    this.importedModules = _normalizeArray(importedModules);\n    this.exportedModules = _normalizeArray(exportedModules);\n    this.schemas = _normalizeArray(schemas);\n    this.id = id || null;\n    this.transitiveModule = transitiveModule || null;\n  }\n\n  toSummary() {\n    const module = this.transitiveModule;\n    return {\n      summaryKind: CompileSummaryKind.NgModule,\n      type: this.type,\n      entryComponents: module.entryComponents,\n      providers: module.providers,\n      modules: module.modules,\n      exportedDirectives: module.exportedDirectives,\n      exportedPipes: module.exportedPipes\n    };\n  }\n\n}\n\nclass TransitiveCompileNgModuleMetadata {\n  constructor() {\n    this.directivesSet = new Set();\n    this.directives = [];\n    this.exportedDirectivesSet = new Set();\n    this.exportedDirectives = [];\n    this.pipesSet = new Set();\n    this.pipes = [];\n    this.exportedPipesSet = new Set();\n    this.exportedPipes = [];\n    this.modulesSet = new Set();\n    this.modules = [];\n    this.entryComponentsSet = new Set();\n    this.entryComponents = [];\n    this.providers = [];\n  }\n\n  addProvider(provider, module) {\n    this.providers.push({\n      provider: provider,\n      module: module\n    });\n  }\n\n  addDirective(id) {\n    if (!this.directivesSet.has(id.reference)) {\n      this.directivesSet.add(id.reference);\n      this.directives.push(id);\n    }\n  }\n\n  addExportedDirective(id) {\n    if (!this.exportedDirectivesSet.has(id.reference)) {\n      this.exportedDirectivesSet.add(id.reference);\n      this.exportedDirectives.push(id);\n    }\n  }\n\n  addPipe(id) {\n    if (!this.pipesSet.has(id.reference)) {\n      this.pipesSet.add(id.reference);\n      this.pipes.push(id);\n    }\n  }\n\n  addExportedPipe(id) {\n    if (!this.exportedPipesSet.has(id.reference)) {\n      this.exportedPipesSet.add(id.reference);\n      this.exportedPipes.push(id);\n    }\n  }\n\n  addModule(id) {\n    if (!this.modulesSet.has(id.reference)) {\n      this.modulesSet.add(id.reference);\n      this.modules.push(id);\n    }\n  }\n\n  addEntryComponent(ec) {\n    if (!this.entryComponentsSet.has(ec.componentType)) {\n      this.entryComponentsSet.add(ec.componentType);\n      this.entryComponents.push(ec);\n    }\n  }\n\n}\n\nfunction _normalizeArray(obj) {\n  return obj || [];\n}\n\nclass ProviderMeta {\n  constructor(token, {\n    useClass,\n    useValue,\n    useExisting,\n    useFactory,\n    deps,\n    multi\n  }) {\n    this.token = token;\n    this.useClass = useClass || null;\n    this.useValue = useValue;\n    this.useExisting = useExisting;\n    this.useFactory = useFactory || null;\n    this.dependencies = deps || null;\n    this.multi = !!multi;\n  }\n\n}\n\nfunction flatten(list) {\n  return list.reduce((flat, item) => {\n    const flatItem = Array.isArray(item) ? flatten(item) : item;\n    return flat.concat(flatItem);\n  }, []);\n}\n\nfunction jitSourceUrl(url) {\n  // Note: We need 3 \"/\" so that ng shows up as a separate domain\n  // in the chrome dev tools.\n  return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\n\nfunction templateSourceUrl(ngModuleType, compMeta, templateMeta) {\n  let url;\n\n  if (templateMeta.isInline) {\n    if (compMeta.type.reference instanceof StaticSymbol) {\n      // Note: a .ts file might contain multiple components with inline templates,\n      // so we need to give them unique urls, as these will be used for sourcemaps.\n      url = `${compMeta.type.reference.filePath}.${compMeta.type.reference.name}.html`;\n    } else {\n      url = `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.html`;\n    }\n  } else {\n    url = templateMeta.templateUrl;\n  }\n\n  return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\n\nfunction sharedStylesheetJitUrl(meta, id) {\n  const pathParts = meta.moduleUrl.split(/\\/\\\\/g);\n  const baseName = pathParts[pathParts.length - 1];\n  return jitSourceUrl(`css/${id}${baseName}.ngstyle.js`);\n}\n\nfunction ngModuleJitUrl(moduleMeta) {\n  return jitSourceUrl(`${identifierName(moduleMeta.type)}/module.ngfactory.js`);\n}\n\nfunction templateJitUrl(ngModuleType, compMeta) {\n  return jitSourceUrl(`${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.ngfactory.js`);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nclass StylesCompileDependency {\n  constructor(name, moduleUrl, setValue) {\n    this.name = name;\n    this.moduleUrl = moduleUrl;\n    this.setValue = setValue;\n  }\n\n}\n\nclass CompiledStylesheet {\n  constructor(outputCtx, stylesVar, dependencies, isShimmed, meta) {\n    this.outputCtx = outputCtx;\n    this.stylesVar = stylesVar;\n    this.dependencies = dependencies;\n    this.isShimmed = isShimmed;\n    this.meta = meta;\n  }\n\n}\n\nclass StyleCompiler {\n  constructor(_urlResolver) {\n    this._urlResolver = _urlResolver;\n    this._shadowCss = new ShadowCss();\n  }\n\n  compileComponent(outputCtx, comp) {\n    const template = comp.template;\n    return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({\n      styles: template.styles,\n      styleUrls: template.styleUrls,\n      moduleUrl: identifierModuleUrl(comp.type)\n    }), this.needsStyleShim(comp), true);\n  }\n\n  compileStyles(outputCtx, comp, stylesheet, shim = this.needsStyleShim(comp)) {\n    return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n  }\n\n  needsStyleShim(comp) {\n    return comp.template.encapsulation === ViewEncapsulation.Emulated;\n  }\n\n  _compileStyles(outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\n    const styleExpressions = stylesheet.styles.map(plainStyle => literal(this._shimIfNeeded(plainStyle, shim)));\n    const dependencies = [];\n    stylesheet.styleUrls.forEach(styleUrl => {\n      const exprIndex = styleExpressions.length; // Note: This placeholder will be filled later.\n\n      styleExpressions.push(null);\n      dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, value => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\n    }); // styles variable contains plain strings and arrays of other styles arrays (recursive),\n    // so we set its type to dynamic.\n\n    const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n    const stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, isComponentStylesheet ? [StmtModifier.Final] : [StmtModifier.Final, StmtModifier.Exported]);\n    outputCtx.statements.push(stmt);\n    return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n  }\n\n  _shimIfNeeded(style, shim) {\n    return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n  }\n\n}\n\nfunction getStylesVarName(component) {\n  let result = `styles`;\n\n  if (component) {\n    result += `_${identifierName(component.type)}`;\n  }\n\n  return result;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A path is an ordered set of elements. Typically a path is to  a\r\n * particular offset in a source file. The head of the list is the top\r\n * most node. The tail is the node that contains the offset directly.\r\n *\r\n * For example, the expression `a + b + c` might have an ast that looks\r\n * like:\r\n *     +\r\n *    / \\\r\n *   a   +\r\n *      / \\\r\n *     b   c\r\n *\r\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\r\n * 'c' at 9-10]` and the path the node at offset 1 would be\r\n * `['+' at 1-10, 'a' at 1-2]`.\r\n */\n\n\nclass AstPath {\n  constructor(path, position = -1) {\n    this.path = path;\n    this.position = position;\n  }\n\n  get empty() {\n    return !this.path || !this.path.length;\n  }\n\n  get head() {\n    return this.path[0];\n  }\n\n  get tail() {\n    return this.path[this.path.length - 1];\n  }\n\n  parentOf(node) {\n    return node && this.path[this.path.indexOf(node) - 1];\n  }\n\n  childOf(node) {\n    return this.path[this.path.indexOf(node) + 1];\n  }\n\n  first(ctor) {\n    for (let i = this.path.length - 1; i >= 0; i--) {\n      let item = this.path[i];\n      if (item instanceof ctor) return item;\n    }\n  }\n\n  push(node) {\n    this.path.push(node);\n  }\n\n  pop() {\n    return this.path.pop();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass NodeWithI18n {\n  constructor(sourceSpan, i18n) {\n    this.sourceSpan = sourceSpan;\n    this.i18n = i18n;\n  }\n\n}\n\nclass Text$3 extends NodeWithI18n {\n  constructor(value, sourceSpan, tokens, i18n) {\n    super(sourceSpan, i18n);\n    this.value = value;\n    this.tokens = tokens;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitText(this, context);\n  }\n\n}\n\nclass Expansion extends NodeWithI18n {\n  constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n    super(sourceSpan, i18n);\n    this.switchValue = switchValue;\n    this.type = type;\n    this.cases = cases;\n    this.switchValueSourceSpan = switchValueSourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitExpansion(this, context);\n  }\n\n}\n\nclass ExpansionCase {\n  constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n    this.value = value;\n    this.expression = expression;\n    this.sourceSpan = sourceSpan;\n    this.valueSourceSpan = valueSourceSpan;\n    this.expSourceSpan = expSourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitExpansionCase(this, context);\n  }\n\n}\n\nclass Attribute extends NodeWithI18n {\n  constructor(name, value, sourceSpan, keySpan, valueSpan, valueTokens, i18n) {\n    super(sourceSpan, i18n);\n    this.name = name;\n    this.value = value;\n    this.keySpan = keySpan;\n    this.valueSpan = valueSpan;\n    this.valueTokens = valueTokens;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitAttribute(this, context);\n  }\n\n}\n\nclass Element$1 extends NodeWithI18n {\n  constructor(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan = null, i18n) {\n    super(sourceSpan, i18n);\n    this.name = name;\n    this.attrs = attrs;\n    this.children = children;\n    this.startSourceSpan = startSourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitElement(this, context);\n  }\n\n}\n\nclass Comment$1 {\n  constructor(value, sourceSpan) {\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitComment(this, context);\n  }\n\n}\n\nfunction visitAll$1(visitor, nodes, context = null) {\n  const result = [];\n  const visit = visitor.visit ? ast => visitor.visit(ast, context) || ast.visit(visitor, context) : ast => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n\nclass RecursiveVisitor$1 {\n  constructor() {}\n\n  visitElement(ast, context) {\n    this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.children);\n    });\n  }\n\n  visitAttribute(ast, context) {}\n\n  visitText(ast, context) {}\n\n  visitComment(ast, context) {}\n\n  visitExpansion(ast, context) {\n    return this.visitChildren(context, visit => {\n      visit(ast.cases);\n    });\n  }\n\n  visitExpansionCase(ast, context) {}\n\n  visitChildren(context, cb) {\n    let results = [];\n    let t = this;\n\n    function visit(children) {\n      if (children) results.push(visitAll$1(t, children, context));\n    }\n\n    cb(visit);\n    return Array.prototype.concat.apply([], results);\n  }\n\n}\n\nfunction spanOf(ast) {\n  const start = ast.sourceSpan.start.offset;\n  let end = ast.sourceSpan.end.offset;\n\n  if (ast instanceof Element$1) {\n    if (ast.endSourceSpan) {\n      end = ast.endSourceSpan.end.offset;\n    } else if (ast.children && ast.children.length) {\n      end = spanOf(ast.children[ast.children.length - 1]).end;\n    }\n  }\n\n  return {\n    start,\n    end\n  };\n}\n\nfunction findNode(nodes, position) {\n  const path = [];\n  const visitor = new class extends RecursiveVisitor$1 {\n    visit(ast, context) {\n      const span = spanOf(ast);\n\n      if (span.start <= position && position < span.end) {\n        path.push(ast);\n      } else {\n        // Returning a value here will result in the children being skipped.\n        return true;\n      }\n    }\n\n  }();\n  visitAll$1(visitor, nodes);\n  return new AstPath(path, position);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Mapping between all HTML entity names and their unicode representation.\n// Generated from https://html.spec.whatwg.org/multipage/entities.json by stripping\n// the `&` and `;` from the keys and removing the duplicates.\n// see https://www.w3.org/TR/html51/syntax.html#named-character-references\n\n\nconst NAMED_ENTITIES = {\n  'AElig': '\\u00C6',\n  'AMP': '\\u0026',\n  'amp': '\\u0026',\n  'Aacute': '\\u00C1',\n  'Abreve': '\\u0102',\n  'Acirc': '\\u00C2',\n  'Acy': '\\u0410',\n  'Afr': '\\uD835\\uDD04',\n  'Agrave': '\\u00C0',\n  'Alpha': '\\u0391',\n  'Amacr': '\\u0100',\n  'And': '\\u2A53',\n  'Aogon': '\\u0104',\n  'Aopf': '\\uD835\\uDD38',\n  'ApplyFunction': '\\u2061',\n  'af': '\\u2061',\n  'Aring': '\\u00C5',\n  'angst': '\\u00C5',\n  'Ascr': '\\uD835\\uDC9C',\n  'Assign': '\\u2254',\n  'colone': '\\u2254',\n  'coloneq': '\\u2254',\n  'Atilde': '\\u00C3',\n  'Auml': '\\u00C4',\n  'Backslash': '\\u2216',\n  'setminus': '\\u2216',\n  'setmn': '\\u2216',\n  'smallsetminus': '\\u2216',\n  'ssetmn': '\\u2216',\n  'Barv': '\\u2AE7',\n  'Barwed': '\\u2306',\n  'doublebarwedge': '\\u2306',\n  'Bcy': '\\u0411',\n  'Because': '\\u2235',\n  'becaus': '\\u2235',\n  'because': '\\u2235',\n  'Bernoullis': '\\u212C',\n  'Bscr': '\\u212C',\n  'bernou': '\\u212C',\n  'Beta': '\\u0392',\n  'Bfr': '\\uD835\\uDD05',\n  'Bopf': '\\uD835\\uDD39',\n  'Breve': '\\u02D8',\n  'breve': '\\u02D8',\n  'Bumpeq': '\\u224E',\n  'HumpDownHump': '\\u224E',\n  'bump': '\\u224E',\n  'CHcy': '\\u0427',\n  'COPY': '\\u00A9',\n  'copy': '\\u00A9',\n  'Cacute': '\\u0106',\n  'Cap': '\\u22D2',\n  'CapitalDifferentialD': '\\u2145',\n  'DD': '\\u2145',\n  'Cayleys': '\\u212D',\n  'Cfr': '\\u212D',\n  'Ccaron': '\\u010C',\n  'Ccedil': '\\u00C7',\n  'Ccirc': '\\u0108',\n  'Cconint': '\\u2230',\n  'Cdot': '\\u010A',\n  'Cedilla': '\\u00B8',\n  'cedil': '\\u00B8',\n  'CenterDot': '\\u00B7',\n  'centerdot': '\\u00B7',\n  'middot': '\\u00B7',\n  'Chi': '\\u03A7',\n  'CircleDot': '\\u2299',\n  'odot': '\\u2299',\n  'CircleMinus': '\\u2296',\n  'ominus': '\\u2296',\n  'CirclePlus': '\\u2295',\n  'oplus': '\\u2295',\n  'CircleTimes': '\\u2297',\n  'otimes': '\\u2297',\n  'ClockwiseContourIntegral': '\\u2232',\n  'cwconint': '\\u2232',\n  'CloseCurlyDoubleQuote': '\\u201D',\n  'rdquo': '\\u201D',\n  'rdquor': '\\u201D',\n  'CloseCurlyQuote': '\\u2019',\n  'rsquo': '\\u2019',\n  'rsquor': '\\u2019',\n  'Colon': '\\u2237',\n  'Proportion': '\\u2237',\n  'Colone': '\\u2A74',\n  'Congruent': '\\u2261',\n  'equiv': '\\u2261',\n  'Conint': '\\u222F',\n  'DoubleContourIntegral': '\\u222F',\n  'ContourIntegral': '\\u222E',\n  'conint': '\\u222E',\n  'oint': '\\u222E',\n  'Copf': '\\u2102',\n  'complexes': '\\u2102',\n  'Coproduct': '\\u2210',\n  'coprod': '\\u2210',\n  'CounterClockwiseContourIntegral': '\\u2233',\n  'awconint': '\\u2233',\n  'Cross': '\\u2A2F',\n  'Cscr': '\\uD835\\uDC9E',\n  'Cup': '\\u22D3',\n  'CupCap': '\\u224D',\n  'asympeq': '\\u224D',\n  'DDotrahd': '\\u2911',\n  'DJcy': '\\u0402',\n  'DScy': '\\u0405',\n  'DZcy': '\\u040F',\n  'Dagger': '\\u2021',\n  'ddagger': '\\u2021',\n  'Darr': '\\u21A1',\n  'Dashv': '\\u2AE4',\n  'DoubleLeftTee': '\\u2AE4',\n  'Dcaron': '\\u010E',\n  'Dcy': '\\u0414',\n  'Del': '\\u2207',\n  'nabla': '\\u2207',\n  'Delta': '\\u0394',\n  'Dfr': '\\uD835\\uDD07',\n  'DiacriticalAcute': '\\u00B4',\n  'acute': '\\u00B4',\n  'DiacriticalDot': '\\u02D9',\n  'dot': '\\u02D9',\n  'DiacriticalDoubleAcute': '\\u02DD',\n  'dblac': '\\u02DD',\n  'DiacriticalGrave': '\\u0060',\n  'grave': '\\u0060',\n  'DiacriticalTilde': '\\u02DC',\n  'tilde': '\\u02DC',\n  'Diamond': '\\u22C4',\n  'diam': '\\u22C4',\n  'diamond': '\\u22C4',\n  'DifferentialD': '\\u2146',\n  'dd': '\\u2146',\n  'Dopf': '\\uD835\\uDD3B',\n  'Dot': '\\u00A8',\n  'DoubleDot': '\\u00A8',\n  'die': '\\u00A8',\n  'uml': '\\u00A8',\n  'DotDot': '\\u20DC',\n  'DotEqual': '\\u2250',\n  'doteq': '\\u2250',\n  'esdot': '\\u2250',\n  'DoubleDownArrow': '\\u21D3',\n  'Downarrow': '\\u21D3',\n  'dArr': '\\u21D3',\n  'DoubleLeftArrow': '\\u21D0',\n  'Leftarrow': '\\u21D0',\n  'lArr': '\\u21D0',\n  'DoubleLeftRightArrow': '\\u21D4',\n  'Leftrightarrow': '\\u21D4',\n  'hArr': '\\u21D4',\n  'iff': '\\u21D4',\n  'DoubleLongLeftArrow': '\\u27F8',\n  'Longleftarrow': '\\u27F8',\n  'xlArr': '\\u27F8',\n  'DoubleLongLeftRightArrow': '\\u27FA',\n  'Longleftrightarrow': '\\u27FA',\n  'xhArr': '\\u27FA',\n  'DoubleLongRightArrow': '\\u27F9',\n  'Longrightarrow': '\\u27F9',\n  'xrArr': '\\u27F9',\n  'DoubleRightArrow': '\\u21D2',\n  'Implies': '\\u21D2',\n  'Rightarrow': '\\u21D2',\n  'rArr': '\\u21D2',\n  'DoubleRightTee': '\\u22A8',\n  'vDash': '\\u22A8',\n  'DoubleUpArrow': '\\u21D1',\n  'Uparrow': '\\u21D1',\n  'uArr': '\\u21D1',\n  'DoubleUpDownArrow': '\\u21D5',\n  'Updownarrow': '\\u21D5',\n  'vArr': '\\u21D5',\n  'DoubleVerticalBar': '\\u2225',\n  'par': '\\u2225',\n  'parallel': '\\u2225',\n  'shortparallel': '\\u2225',\n  'spar': '\\u2225',\n  'DownArrow': '\\u2193',\n  'ShortDownArrow': '\\u2193',\n  'darr': '\\u2193',\n  'downarrow': '\\u2193',\n  'DownArrowBar': '\\u2913',\n  'DownArrowUpArrow': '\\u21F5',\n  'duarr': '\\u21F5',\n  'DownBreve': '\\u0311',\n  'DownLeftRightVector': '\\u2950',\n  'DownLeftTeeVector': '\\u295E',\n  'DownLeftVector': '\\u21BD',\n  'leftharpoondown': '\\u21BD',\n  'lhard': '\\u21BD',\n  'DownLeftVectorBar': '\\u2956',\n  'DownRightTeeVector': '\\u295F',\n  'DownRightVector': '\\u21C1',\n  'rhard': '\\u21C1',\n  'rightharpoondown': '\\u21C1',\n  'DownRightVectorBar': '\\u2957',\n  'DownTee': '\\u22A4',\n  'top': '\\u22A4',\n  'DownTeeArrow': '\\u21A7',\n  'mapstodown': '\\u21A7',\n  'Dscr': '\\uD835\\uDC9F',\n  'Dstrok': '\\u0110',\n  'ENG': '\\u014A',\n  'ETH': '\\u00D0',\n  'Eacute': '\\u00C9',\n  'Ecaron': '\\u011A',\n  'Ecirc': '\\u00CA',\n  'Ecy': '\\u042D',\n  'Edot': '\\u0116',\n  'Efr': '\\uD835\\uDD08',\n  'Egrave': '\\u00C8',\n  'Element': '\\u2208',\n  'in': '\\u2208',\n  'isin': '\\u2208',\n  'isinv': '\\u2208',\n  'Emacr': '\\u0112',\n  'EmptySmallSquare': '\\u25FB',\n  'EmptyVerySmallSquare': '\\u25AB',\n  'Eogon': '\\u0118',\n  'Eopf': '\\uD835\\uDD3C',\n  'Epsilon': '\\u0395',\n  'Equal': '\\u2A75',\n  'EqualTilde': '\\u2242',\n  'eqsim': '\\u2242',\n  'esim': '\\u2242',\n  'Equilibrium': '\\u21CC',\n  'rightleftharpoons': '\\u21CC',\n  'rlhar': '\\u21CC',\n  'Escr': '\\u2130',\n  'expectation': '\\u2130',\n  'Esim': '\\u2A73',\n  'Eta': '\\u0397',\n  'Euml': '\\u00CB',\n  'Exists': '\\u2203',\n  'exist': '\\u2203',\n  'ExponentialE': '\\u2147',\n  'ee': '\\u2147',\n  'exponentiale': '\\u2147',\n  'Fcy': '\\u0424',\n  'Ffr': '\\uD835\\uDD09',\n  'FilledSmallSquare': '\\u25FC',\n  'FilledVerySmallSquare': '\\u25AA',\n  'blacksquare': '\\u25AA',\n  'squarf': '\\u25AA',\n  'squf': '\\u25AA',\n  'Fopf': '\\uD835\\uDD3D',\n  'ForAll': '\\u2200',\n  'forall': '\\u2200',\n  'Fouriertrf': '\\u2131',\n  'Fscr': '\\u2131',\n  'GJcy': '\\u0403',\n  'GT': '\\u003E',\n  'gt': '\\u003E',\n  'Gamma': '\\u0393',\n  'Gammad': '\\u03DC',\n  'Gbreve': '\\u011E',\n  'Gcedil': '\\u0122',\n  'Gcirc': '\\u011C',\n  'Gcy': '\\u0413',\n  'Gdot': '\\u0120',\n  'Gfr': '\\uD835\\uDD0A',\n  'Gg': '\\u22D9',\n  'ggg': '\\u22D9',\n  'Gopf': '\\uD835\\uDD3E',\n  'GreaterEqual': '\\u2265',\n  'ge': '\\u2265',\n  'geq': '\\u2265',\n  'GreaterEqualLess': '\\u22DB',\n  'gel': '\\u22DB',\n  'gtreqless': '\\u22DB',\n  'GreaterFullEqual': '\\u2267',\n  'gE': '\\u2267',\n  'geqq': '\\u2267',\n  'GreaterGreater': '\\u2AA2',\n  'GreaterLess': '\\u2277',\n  'gl': '\\u2277',\n  'gtrless': '\\u2277',\n  'GreaterSlantEqual': '\\u2A7E',\n  'geqslant': '\\u2A7E',\n  'ges': '\\u2A7E',\n  'GreaterTilde': '\\u2273',\n  'gsim': '\\u2273',\n  'gtrsim': '\\u2273',\n  'Gscr': '\\uD835\\uDCA2',\n  'Gt': '\\u226B',\n  'NestedGreaterGreater': '\\u226B',\n  'gg': '\\u226B',\n  'HARDcy': '\\u042A',\n  'Hacek': '\\u02C7',\n  'caron': '\\u02C7',\n  'Hat': '\\u005E',\n  'Hcirc': '\\u0124',\n  'Hfr': '\\u210C',\n  'Poincareplane': '\\u210C',\n  'HilbertSpace': '\\u210B',\n  'Hscr': '\\u210B',\n  'hamilt': '\\u210B',\n  'Hopf': '\\u210D',\n  'quaternions': '\\u210D',\n  'HorizontalLine': '\\u2500',\n  'boxh': '\\u2500',\n  'Hstrok': '\\u0126',\n  'HumpEqual': '\\u224F',\n  'bumpe': '\\u224F',\n  'bumpeq': '\\u224F',\n  'IEcy': '\\u0415',\n  'IJlig': '\\u0132',\n  'IOcy': '\\u0401',\n  'Iacute': '\\u00CD',\n  'Icirc': '\\u00CE',\n  'Icy': '\\u0418',\n  'Idot': '\\u0130',\n  'Ifr': '\\u2111',\n  'Im': '\\u2111',\n  'image': '\\u2111',\n  'imagpart': '\\u2111',\n  'Igrave': '\\u00CC',\n  'Imacr': '\\u012A',\n  'ImaginaryI': '\\u2148',\n  'ii': '\\u2148',\n  'Int': '\\u222C',\n  'Integral': '\\u222B',\n  'int': '\\u222B',\n  'Intersection': '\\u22C2',\n  'bigcap': '\\u22C2',\n  'xcap': '\\u22C2',\n  'InvisibleComma': '\\u2063',\n  'ic': '\\u2063',\n  'InvisibleTimes': '\\u2062',\n  'it': '\\u2062',\n  'Iogon': '\\u012E',\n  'Iopf': '\\uD835\\uDD40',\n  'Iota': '\\u0399',\n  'Iscr': '\\u2110',\n  'imagline': '\\u2110',\n  'Itilde': '\\u0128',\n  'Iukcy': '\\u0406',\n  'Iuml': '\\u00CF',\n  'Jcirc': '\\u0134',\n  'Jcy': '\\u0419',\n  'Jfr': '\\uD835\\uDD0D',\n  'Jopf': '\\uD835\\uDD41',\n  'Jscr': '\\uD835\\uDCA5',\n  'Jsercy': '\\u0408',\n  'Jukcy': '\\u0404',\n  'KHcy': '\\u0425',\n  'KJcy': '\\u040C',\n  'Kappa': '\\u039A',\n  'Kcedil': '\\u0136',\n  'Kcy': '\\u041A',\n  'Kfr': '\\uD835\\uDD0E',\n  'Kopf': '\\uD835\\uDD42',\n  'Kscr': '\\uD835\\uDCA6',\n  'LJcy': '\\u0409',\n  'LT': '\\u003C',\n  'lt': '\\u003C',\n  'Lacute': '\\u0139',\n  'Lambda': '\\u039B',\n  'Lang': '\\u27EA',\n  'Laplacetrf': '\\u2112',\n  'Lscr': '\\u2112',\n  'lagran': '\\u2112',\n  'Larr': '\\u219E',\n  'twoheadleftarrow': '\\u219E',\n  'Lcaron': '\\u013D',\n  'Lcedil': '\\u013B',\n  'Lcy': '\\u041B',\n  'LeftAngleBracket': '\\u27E8',\n  'lang': '\\u27E8',\n  'langle': '\\u27E8',\n  'LeftArrow': '\\u2190',\n  'ShortLeftArrow': '\\u2190',\n  'larr': '\\u2190',\n  'leftarrow': '\\u2190',\n  'slarr': '\\u2190',\n  'LeftArrowBar': '\\u21E4',\n  'larrb': '\\u21E4',\n  'LeftArrowRightArrow': '\\u21C6',\n  'leftrightarrows': '\\u21C6',\n  'lrarr': '\\u21C6',\n  'LeftCeiling': '\\u2308',\n  'lceil': '\\u2308',\n  'LeftDoubleBracket': '\\u27E6',\n  'lobrk': '\\u27E6',\n  'LeftDownTeeVector': '\\u2961',\n  'LeftDownVector': '\\u21C3',\n  'dharl': '\\u21C3',\n  'downharpoonleft': '\\u21C3',\n  'LeftDownVectorBar': '\\u2959',\n  'LeftFloor': '\\u230A',\n  'lfloor': '\\u230A',\n  'LeftRightArrow': '\\u2194',\n  'harr': '\\u2194',\n  'leftrightarrow': '\\u2194',\n  'LeftRightVector': '\\u294E',\n  'LeftTee': '\\u22A3',\n  'dashv': '\\u22A3',\n  'LeftTeeArrow': '\\u21A4',\n  'mapstoleft': '\\u21A4',\n  'LeftTeeVector': '\\u295A',\n  'LeftTriangle': '\\u22B2',\n  'vartriangleleft': '\\u22B2',\n  'vltri': '\\u22B2',\n  'LeftTriangleBar': '\\u29CF',\n  'LeftTriangleEqual': '\\u22B4',\n  'ltrie': '\\u22B4',\n  'trianglelefteq': '\\u22B4',\n  'LeftUpDownVector': '\\u2951',\n  'LeftUpTeeVector': '\\u2960',\n  'LeftUpVector': '\\u21BF',\n  'uharl': '\\u21BF',\n  'upharpoonleft': '\\u21BF',\n  'LeftUpVectorBar': '\\u2958',\n  'LeftVector': '\\u21BC',\n  'leftharpoonup': '\\u21BC',\n  'lharu': '\\u21BC',\n  'LeftVectorBar': '\\u2952',\n  'LessEqualGreater': '\\u22DA',\n  'leg': '\\u22DA',\n  'lesseqgtr': '\\u22DA',\n  'LessFullEqual': '\\u2266',\n  'lE': '\\u2266',\n  'leqq': '\\u2266',\n  'LessGreater': '\\u2276',\n  'lessgtr': '\\u2276',\n  'lg': '\\u2276',\n  'LessLess': '\\u2AA1',\n  'LessSlantEqual': '\\u2A7D',\n  'leqslant': '\\u2A7D',\n  'les': '\\u2A7D',\n  'LessTilde': '\\u2272',\n  'lesssim': '\\u2272',\n  'lsim': '\\u2272',\n  'Lfr': '\\uD835\\uDD0F',\n  'Ll': '\\u22D8',\n  'Lleftarrow': '\\u21DA',\n  'lAarr': '\\u21DA',\n  'Lmidot': '\\u013F',\n  'LongLeftArrow': '\\u27F5',\n  'longleftarrow': '\\u27F5',\n  'xlarr': '\\u27F5',\n  'LongLeftRightArrow': '\\u27F7',\n  'longleftrightarrow': '\\u27F7',\n  'xharr': '\\u27F7',\n  'LongRightArrow': '\\u27F6',\n  'longrightarrow': '\\u27F6',\n  'xrarr': '\\u27F6',\n  'Lopf': '\\uD835\\uDD43',\n  'LowerLeftArrow': '\\u2199',\n  'swarr': '\\u2199',\n  'swarrow': '\\u2199',\n  'LowerRightArrow': '\\u2198',\n  'searr': '\\u2198',\n  'searrow': '\\u2198',\n  'Lsh': '\\u21B0',\n  'lsh': '\\u21B0',\n  'Lstrok': '\\u0141',\n  'Lt': '\\u226A',\n  'NestedLessLess': '\\u226A',\n  'll': '\\u226A',\n  'Map': '\\u2905',\n  'Mcy': '\\u041C',\n  'MediumSpace': '\\u205F',\n  'Mellintrf': '\\u2133',\n  'Mscr': '\\u2133',\n  'phmmat': '\\u2133',\n  'Mfr': '\\uD835\\uDD10',\n  'MinusPlus': '\\u2213',\n  'mnplus': '\\u2213',\n  'mp': '\\u2213',\n  'Mopf': '\\uD835\\uDD44',\n  'Mu': '\\u039C',\n  'NJcy': '\\u040A',\n  'Nacute': '\\u0143',\n  'Ncaron': '\\u0147',\n  'Ncedil': '\\u0145',\n  'Ncy': '\\u041D',\n  'NegativeMediumSpace': '\\u200B',\n  'NegativeThickSpace': '\\u200B',\n  'NegativeThinSpace': '\\u200B',\n  'NegativeVeryThinSpace': '\\u200B',\n  'ZeroWidthSpace': '\\u200B',\n  'NewLine': '\\u000A',\n  'Nfr': '\\uD835\\uDD11',\n  'NoBreak': '\\u2060',\n  'NonBreakingSpace': '\\u00A0',\n  'nbsp': '\\u00A0',\n  'Nopf': '\\u2115',\n  'naturals': '\\u2115',\n  'Not': '\\u2AEC',\n  'NotCongruent': '\\u2262',\n  'nequiv': '\\u2262',\n  'NotCupCap': '\\u226D',\n  'NotDoubleVerticalBar': '\\u2226',\n  'npar': '\\u2226',\n  'nparallel': '\\u2226',\n  'nshortparallel': '\\u2226',\n  'nspar': '\\u2226',\n  'NotElement': '\\u2209',\n  'notin': '\\u2209',\n  'notinva': '\\u2209',\n  'NotEqual': '\\u2260',\n  'ne': '\\u2260',\n  'NotEqualTilde': '\\u2242\\u0338',\n  'nesim': '\\u2242\\u0338',\n  'NotExists': '\\u2204',\n  'nexist': '\\u2204',\n  'nexists': '\\u2204',\n  'NotGreater': '\\u226F',\n  'ngt': '\\u226F',\n  'ngtr': '\\u226F',\n  'NotGreaterEqual': '\\u2271',\n  'nge': '\\u2271',\n  'ngeq': '\\u2271',\n  'NotGreaterFullEqual': '\\u2267\\u0338',\n  'ngE': '\\u2267\\u0338',\n  'ngeqq': '\\u2267\\u0338',\n  'NotGreaterGreater': '\\u226B\\u0338',\n  'nGtv': '\\u226B\\u0338',\n  'NotGreaterLess': '\\u2279',\n  'ntgl': '\\u2279',\n  'NotGreaterSlantEqual': '\\u2A7E\\u0338',\n  'ngeqslant': '\\u2A7E\\u0338',\n  'nges': '\\u2A7E\\u0338',\n  'NotGreaterTilde': '\\u2275',\n  'ngsim': '\\u2275',\n  'NotHumpDownHump': '\\u224E\\u0338',\n  'nbump': '\\u224E\\u0338',\n  'NotHumpEqual': '\\u224F\\u0338',\n  'nbumpe': '\\u224F\\u0338',\n  'NotLeftTriangle': '\\u22EA',\n  'nltri': '\\u22EA',\n  'ntriangleleft': '\\u22EA',\n  'NotLeftTriangleBar': '\\u29CF\\u0338',\n  'NotLeftTriangleEqual': '\\u22EC',\n  'nltrie': '\\u22EC',\n  'ntrianglelefteq': '\\u22EC',\n  'NotLess': '\\u226E',\n  'nless': '\\u226E',\n  'nlt': '\\u226E',\n  'NotLessEqual': '\\u2270',\n  'nle': '\\u2270',\n  'nleq': '\\u2270',\n  'NotLessGreater': '\\u2278',\n  'ntlg': '\\u2278',\n  'NotLessLess': '\\u226A\\u0338',\n  'nLtv': '\\u226A\\u0338',\n  'NotLessSlantEqual': '\\u2A7D\\u0338',\n  'nleqslant': '\\u2A7D\\u0338',\n  'nles': '\\u2A7D\\u0338',\n  'NotLessTilde': '\\u2274',\n  'nlsim': '\\u2274',\n  'NotNestedGreaterGreater': '\\u2AA2\\u0338',\n  'NotNestedLessLess': '\\u2AA1\\u0338',\n  'NotPrecedes': '\\u2280',\n  'npr': '\\u2280',\n  'nprec': '\\u2280',\n  'NotPrecedesEqual': '\\u2AAF\\u0338',\n  'npre': '\\u2AAF\\u0338',\n  'npreceq': '\\u2AAF\\u0338',\n  'NotPrecedesSlantEqual': '\\u22E0',\n  'nprcue': '\\u22E0',\n  'NotReverseElement': '\\u220C',\n  'notni': '\\u220C',\n  'notniva': '\\u220C',\n  'NotRightTriangle': '\\u22EB',\n  'nrtri': '\\u22EB',\n  'ntriangleright': '\\u22EB',\n  'NotRightTriangleBar': '\\u29D0\\u0338',\n  'NotRightTriangleEqual': '\\u22ED',\n  'nrtrie': '\\u22ED',\n  'ntrianglerighteq': '\\u22ED',\n  'NotSquareSubset': '\\u228F\\u0338',\n  'NotSquareSubsetEqual': '\\u22E2',\n  'nsqsube': '\\u22E2',\n  'NotSquareSuperset': '\\u2290\\u0338',\n  'NotSquareSupersetEqual': '\\u22E3',\n  'nsqsupe': '\\u22E3',\n  'NotSubset': '\\u2282\\u20D2',\n  'nsubset': '\\u2282\\u20D2',\n  'vnsub': '\\u2282\\u20D2',\n  'NotSubsetEqual': '\\u2288',\n  'nsube': '\\u2288',\n  'nsubseteq': '\\u2288',\n  'NotSucceeds': '\\u2281',\n  'nsc': '\\u2281',\n  'nsucc': '\\u2281',\n  'NotSucceedsEqual': '\\u2AB0\\u0338',\n  'nsce': '\\u2AB0\\u0338',\n  'nsucceq': '\\u2AB0\\u0338',\n  'NotSucceedsSlantEqual': '\\u22E1',\n  'nsccue': '\\u22E1',\n  'NotSucceedsTilde': '\\u227F\\u0338',\n  'NotSuperset': '\\u2283\\u20D2',\n  'nsupset': '\\u2283\\u20D2',\n  'vnsup': '\\u2283\\u20D2',\n  'NotSupersetEqual': '\\u2289',\n  'nsupe': '\\u2289',\n  'nsupseteq': '\\u2289',\n  'NotTilde': '\\u2241',\n  'nsim': '\\u2241',\n  'NotTildeEqual': '\\u2244',\n  'nsime': '\\u2244',\n  'nsimeq': '\\u2244',\n  'NotTildeFullEqual': '\\u2247',\n  'ncong': '\\u2247',\n  'NotTildeTilde': '\\u2249',\n  'nap': '\\u2249',\n  'napprox': '\\u2249',\n  'NotVerticalBar': '\\u2224',\n  'nmid': '\\u2224',\n  'nshortmid': '\\u2224',\n  'nsmid': '\\u2224',\n  'Nscr': '\\uD835\\uDCA9',\n  'Ntilde': '\\u00D1',\n  'Nu': '\\u039D',\n  'OElig': '\\u0152',\n  'Oacute': '\\u00D3',\n  'Ocirc': '\\u00D4',\n  'Ocy': '\\u041E',\n  'Odblac': '\\u0150',\n  'Ofr': '\\uD835\\uDD12',\n  'Ograve': '\\u00D2',\n  'Omacr': '\\u014C',\n  'Omega': '\\u03A9',\n  'ohm': '\\u03A9',\n  'Omicron': '\\u039F',\n  'Oopf': '\\uD835\\uDD46',\n  'OpenCurlyDoubleQuote': '\\u201C',\n  'ldquo': '\\u201C',\n  'OpenCurlyQuote': '\\u2018',\n  'lsquo': '\\u2018',\n  'Or': '\\u2A54',\n  'Oscr': '\\uD835\\uDCAA',\n  'Oslash': '\\u00D8',\n  'Otilde': '\\u00D5',\n  'Otimes': '\\u2A37',\n  'Ouml': '\\u00D6',\n  'OverBar': '\\u203E',\n  'oline': '\\u203E',\n  'OverBrace': '\\u23DE',\n  'OverBracket': '\\u23B4',\n  'tbrk': '\\u23B4',\n  'OverParenthesis': '\\u23DC',\n  'PartialD': '\\u2202',\n  'part': '\\u2202',\n  'Pcy': '\\u041F',\n  'Pfr': '\\uD835\\uDD13',\n  'Phi': '\\u03A6',\n  'Pi': '\\u03A0',\n  'PlusMinus': '\\u00B1',\n  'plusmn': '\\u00B1',\n  'pm': '\\u00B1',\n  'Popf': '\\u2119',\n  'primes': '\\u2119',\n  'Pr': '\\u2ABB',\n  'Precedes': '\\u227A',\n  'pr': '\\u227A',\n  'prec': '\\u227A',\n  'PrecedesEqual': '\\u2AAF',\n  'pre': '\\u2AAF',\n  'preceq': '\\u2AAF',\n  'PrecedesSlantEqual': '\\u227C',\n  'prcue': '\\u227C',\n  'preccurlyeq': '\\u227C',\n  'PrecedesTilde': '\\u227E',\n  'precsim': '\\u227E',\n  'prsim': '\\u227E',\n  'Prime': '\\u2033',\n  'Product': '\\u220F',\n  'prod': '\\u220F',\n  'Proportional': '\\u221D',\n  'prop': '\\u221D',\n  'propto': '\\u221D',\n  'varpropto': '\\u221D',\n  'vprop': '\\u221D',\n  'Pscr': '\\uD835\\uDCAB',\n  'Psi': '\\u03A8',\n  'QUOT': '\\u0022',\n  'quot': '\\u0022',\n  'Qfr': '\\uD835\\uDD14',\n  'Qopf': '\\u211A',\n  'rationals': '\\u211A',\n  'Qscr': '\\uD835\\uDCAC',\n  'RBarr': '\\u2910',\n  'drbkarow': '\\u2910',\n  'REG': '\\u00AE',\n  'circledR': '\\u00AE',\n  'reg': '\\u00AE',\n  'Racute': '\\u0154',\n  'Rang': '\\u27EB',\n  'Rarr': '\\u21A0',\n  'twoheadrightarrow': '\\u21A0',\n  'Rarrtl': '\\u2916',\n  'Rcaron': '\\u0158',\n  'Rcedil': '\\u0156',\n  'Rcy': '\\u0420',\n  'Re': '\\u211C',\n  'Rfr': '\\u211C',\n  'real': '\\u211C',\n  'realpart': '\\u211C',\n  'ReverseElement': '\\u220B',\n  'SuchThat': '\\u220B',\n  'ni': '\\u220B',\n  'niv': '\\u220B',\n  'ReverseEquilibrium': '\\u21CB',\n  'leftrightharpoons': '\\u21CB',\n  'lrhar': '\\u21CB',\n  'ReverseUpEquilibrium': '\\u296F',\n  'duhar': '\\u296F',\n  'Rho': '\\u03A1',\n  'RightAngleBracket': '\\u27E9',\n  'rang': '\\u27E9',\n  'rangle': '\\u27E9',\n  'RightArrow': '\\u2192',\n  'ShortRightArrow': '\\u2192',\n  'rarr': '\\u2192',\n  'rightarrow': '\\u2192',\n  'srarr': '\\u2192',\n  'RightArrowBar': '\\u21E5',\n  'rarrb': '\\u21E5',\n  'RightArrowLeftArrow': '\\u21C4',\n  'rightleftarrows': '\\u21C4',\n  'rlarr': '\\u21C4',\n  'RightCeiling': '\\u2309',\n  'rceil': '\\u2309',\n  'RightDoubleBracket': '\\u27E7',\n  'robrk': '\\u27E7',\n  'RightDownTeeVector': '\\u295D',\n  'RightDownVector': '\\u21C2',\n  'dharr': '\\u21C2',\n  'downharpoonright': '\\u21C2',\n  'RightDownVectorBar': '\\u2955',\n  'RightFloor': '\\u230B',\n  'rfloor': '\\u230B',\n  'RightTee': '\\u22A2',\n  'vdash': '\\u22A2',\n  'RightTeeArrow': '\\u21A6',\n  'map': '\\u21A6',\n  'mapsto': '\\u21A6',\n  'RightTeeVector': '\\u295B',\n  'RightTriangle': '\\u22B3',\n  'vartriangleright': '\\u22B3',\n  'vrtri': '\\u22B3',\n  'RightTriangleBar': '\\u29D0',\n  'RightTriangleEqual': '\\u22B5',\n  'rtrie': '\\u22B5',\n  'trianglerighteq': '\\u22B5',\n  'RightUpDownVector': '\\u294F',\n  'RightUpTeeVector': '\\u295C',\n  'RightUpVector': '\\u21BE',\n  'uharr': '\\u21BE',\n  'upharpoonright': '\\u21BE',\n  'RightUpVectorBar': '\\u2954',\n  'RightVector': '\\u21C0',\n  'rharu': '\\u21C0',\n  'rightharpoonup': '\\u21C0',\n  'RightVectorBar': '\\u2953',\n  'Ropf': '\\u211D',\n  'reals': '\\u211D',\n  'RoundImplies': '\\u2970',\n  'Rrightarrow': '\\u21DB',\n  'rAarr': '\\u21DB',\n  'Rscr': '\\u211B',\n  'realine': '\\u211B',\n  'Rsh': '\\u21B1',\n  'rsh': '\\u21B1',\n  'RuleDelayed': '\\u29F4',\n  'SHCHcy': '\\u0429',\n  'SHcy': '\\u0428',\n  'SOFTcy': '\\u042C',\n  'Sacute': '\\u015A',\n  'Sc': '\\u2ABC',\n  'Scaron': '\\u0160',\n  'Scedil': '\\u015E',\n  'Scirc': '\\u015C',\n  'Scy': '\\u0421',\n  'Sfr': '\\uD835\\uDD16',\n  'ShortUpArrow': '\\u2191',\n  'UpArrow': '\\u2191',\n  'uarr': '\\u2191',\n  'uparrow': '\\u2191',\n  'Sigma': '\\u03A3',\n  'SmallCircle': '\\u2218',\n  'compfn': '\\u2218',\n  'Sopf': '\\uD835\\uDD4A',\n  'Sqrt': '\\u221A',\n  'radic': '\\u221A',\n  'Square': '\\u25A1',\n  'squ': '\\u25A1',\n  'square': '\\u25A1',\n  'SquareIntersection': '\\u2293',\n  'sqcap': '\\u2293',\n  'SquareSubset': '\\u228F',\n  'sqsub': '\\u228F',\n  'sqsubset': '\\u228F',\n  'SquareSubsetEqual': '\\u2291',\n  'sqsube': '\\u2291',\n  'sqsubseteq': '\\u2291',\n  'SquareSuperset': '\\u2290',\n  'sqsup': '\\u2290',\n  'sqsupset': '\\u2290',\n  'SquareSupersetEqual': '\\u2292',\n  'sqsupe': '\\u2292',\n  'sqsupseteq': '\\u2292',\n  'SquareUnion': '\\u2294',\n  'sqcup': '\\u2294',\n  'Sscr': '\\uD835\\uDCAE',\n  'Star': '\\u22C6',\n  'sstarf': '\\u22C6',\n  'Sub': '\\u22D0',\n  'Subset': '\\u22D0',\n  'SubsetEqual': '\\u2286',\n  'sube': '\\u2286',\n  'subseteq': '\\u2286',\n  'Succeeds': '\\u227B',\n  'sc': '\\u227B',\n  'succ': '\\u227B',\n  'SucceedsEqual': '\\u2AB0',\n  'sce': '\\u2AB0',\n  'succeq': '\\u2AB0',\n  'SucceedsSlantEqual': '\\u227D',\n  'sccue': '\\u227D',\n  'succcurlyeq': '\\u227D',\n  'SucceedsTilde': '\\u227F',\n  'scsim': '\\u227F',\n  'succsim': '\\u227F',\n  'Sum': '\\u2211',\n  'sum': '\\u2211',\n  'Sup': '\\u22D1',\n  'Supset': '\\u22D1',\n  'Superset': '\\u2283',\n  'sup': '\\u2283',\n  'supset': '\\u2283',\n  'SupersetEqual': '\\u2287',\n  'supe': '\\u2287',\n  'supseteq': '\\u2287',\n  'THORN': '\\u00DE',\n  'TRADE': '\\u2122',\n  'trade': '\\u2122',\n  'TSHcy': '\\u040B',\n  'TScy': '\\u0426',\n  'Tab': '\\u0009',\n  'Tau': '\\u03A4',\n  'Tcaron': '\\u0164',\n  'Tcedil': '\\u0162',\n  'Tcy': '\\u0422',\n  'Tfr': '\\uD835\\uDD17',\n  'Therefore': '\\u2234',\n  'there4': '\\u2234',\n  'therefore': '\\u2234',\n  'Theta': '\\u0398',\n  'ThickSpace': '\\u205F\\u200A',\n  'ThinSpace': '\\u2009',\n  'thinsp': '\\u2009',\n  'Tilde': '\\u223C',\n  'sim': '\\u223C',\n  'thicksim': '\\u223C',\n  'thksim': '\\u223C',\n  'TildeEqual': '\\u2243',\n  'sime': '\\u2243',\n  'simeq': '\\u2243',\n  'TildeFullEqual': '\\u2245',\n  'cong': '\\u2245',\n  'TildeTilde': '\\u2248',\n  'ap': '\\u2248',\n  'approx': '\\u2248',\n  'asymp': '\\u2248',\n  'thickapprox': '\\u2248',\n  'thkap': '\\u2248',\n  'Topf': '\\uD835\\uDD4B',\n  'TripleDot': '\\u20DB',\n  'tdot': '\\u20DB',\n  'Tscr': '\\uD835\\uDCAF',\n  'Tstrok': '\\u0166',\n  'Uacute': '\\u00DA',\n  'Uarr': '\\u219F',\n  'Uarrocir': '\\u2949',\n  'Ubrcy': '\\u040E',\n  'Ubreve': '\\u016C',\n  'Ucirc': '\\u00DB',\n  'Ucy': '\\u0423',\n  'Udblac': '\\u0170',\n  'Ufr': '\\uD835\\uDD18',\n  'Ugrave': '\\u00D9',\n  'Umacr': '\\u016A',\n  'UnderBar': '\\u005F',\n  'lowbar': '\\u005F',\n  'UnderBrace': '\\u23DF',\n  'UnderBracket': '\\u23B5',\n  'bbrk': '\\u23B5',\n  'UnderParenthesis': '\\u23DD',\n  'Union': '\\u22C3',\n  'bigcup': '\\u22C3',\n  'xcup': '\\u22C3',\n  'UnionPlus': '\\u228E',\n  'uplus': '\\u228E',\n  'Uogon': '\\u0172',\n  'Uopf': '\\uD835\\uDD4C',\n  'UpArrowBar': '\\u2912',\n  'UpArrowDownArrow': '\\u21C5',\n  'udarr': '\\u21C5',\n  'UpDownArrow': '\\u2195',\n  'updownarrow': '\\u2195',\n  'varr': '\\u2195',\n  'UpEquilibrium': '\\u296E',\n  'udhar': '\\u296E',\n  'UpTee': '\\u22A5',\n  'bot': '\\u22A5',\n  'bottom': '\\u22A5',\n  'perp': '\\u22A5',\n  'UpTeeArrow': '\\u21A5',\n  'mapstoup': '\\u21A5',\n  'UpperLeftArrow': '\\u2196',\n  'nwarr': '\\u2196',\n  'nwarrow': '\\u2196',\n  'UpperRightArrow': '\\u2197',\n  'nearr': '\\u2197',\n  'nearrow': '\\u2197',\n  'Upsi': '\\u03D2',\n  'upsih': '\\u03D2',\n  'Upsilon': '\\u03A5',\n  'Uring': '\\u016E',\n  'Uscr': '\\uD835\\uDCB0',\n  'Utilde': '\\u0168',\n  'Uuml': '\\u00DC',\n  'VDash': '\\u22AB',\n  'Vbar': '\\u2AEB',\n  'Vcy': '\\u0412',\n  'Vdash': '\\u22A9',\n  'Vdashl': '\\u2AE6',\n  'Vee': '\\u22C1',\n  'bigvee': '\\u22C1',\n  'xvee': '\\u22C1',\n  'Verbar': '\\u2016',\n  'Vert': '\\u2016',\n  'VerticalBar': '\\u2223',\n  'mid': '\\u2223',\n  'shortmid': '\\u2223',\n  'smid': '\\u2223',\n  'VerticalLine': '\\u007C',\n  'verbar': '\\u007C',\n  'vert': '\\u007C',\n  'VerticalSeparator': '\\u2758',\n  'VerticalTilde': '\\u2240',\n  'wr': '\\u2240',\n  'wreath': '\\u2240',\n  'VeryThinSpace': '\\u200A',\n  'hairsp': '\\u200A',\n  'Vfr': '\\uD835\\uDD19',\n  'Vopf': '\\uD835\\uDD4D',\n  'Vscr': '\\uD835\\uDCB1',\n  'Vvdash': '\\u22AA',\n  'Wcirc': '\\u0174',\n  'Wedge': '\\u22C0',\n  'bigwedge': '\\u22C0',\n  'xwedge': '\\u22C0',\n  'Wfr': '\\uD835\\uDD1A',\n  'Wopf': '\\uD835\\uDD4E',\n  'Wscr': '\\uD835\\uDCB2',\n  'Xfr': '\\uD835\\uDD1B',\n  'Xi': '\\u039E',\n  'Xopf': '\\uD835\\uDD4F',\n  'Xscr': '\\uD835\\uDCB3',\n  'YAcy': '\\u042F',\n  'YIcy': '\\u0407',\n  'YUcy': '\\u042E',\n  'Yacute': '\\u00DD',\n  'Ycirc': '\\u0176',\n  'Ycy': '\\u042B',\n  'Yfr': '\\uD835\\uDD1C',\n  'Yopf': '\\uD835\\uDD50',\n  'Yscr': '\\uD835\\uDCB4',\n  'Yuml': '\\u0178',\n  'ZHcy': '\\u0416',\n  'Zacute': '\\u0179',\n  'Zcaron': '\\u017D',\n  'Zcy': '\\u0417',\n  'Zdot': '\\u017B',\n  'Zeta': '\\u0396',\n  'Zfr': '\\u2128',\n  'zeetrf': '\\u2128',\n  'Zopf': '\\u2124',\n  'integers': '\\u2124',\n  'Zscr': '\\uD835\\uDCB5',\n  'aacute': '\\u00E1',\n  'abreve': '\\u0103',\n  'ac': '\\u223E',\n  'mstpos': '\\u223E',\n  'acE': '\\u223E\\u0333',\n  'acd': '\\u223F',\n  'acirc': '\\u00E2',\n  'acy': '\\u0430',\n  'aelig': '\\u00E6',\n  'afr': '\\uD835\\uDD1E',\n  'agrave': '\\u00E0',\n  'alefsym': '\\u2135',\n  'aleph': '\\u2135',\n  'alpha': '\\u03B1',\n  'amacr': '\\u0101',\n  'amalg': '\\u2A3F',\n  'and': '\\u2227',\n  'wedge': '\\u2227',\n  'andand': '\\u2A55',\n  'andd': '\\u2A5C',\n  'andslope': '\\u2A58',\n  'andv': '\\u2A5A',\n  'ang': '\\u2220',\n  'angle': '\\u2220',\n  'ange': '\\u29A4',\n  'angmsd': '\\u2221',\n  'measuredangle': '\\u2221',\n  'angmsdaa': '\\u29A8',\n  'angmsdab': '\\u29A9',\n  'angmsdac': '\\u29AA',\n  'angmsdad': '\\u29AB',\n  'angmsdae': '\\u29AC',\n  'angmsdaf': '\\u29AD',\n  'angmsdag': '\\u29AE',\n  'angmsdah': '\\u29AF',\n  'angrt': '\\u221F',\n  'angrtvb': '\\u22BE',\n  'angrtvbd': '\\u299D',\n  'angsph': '\\u2222',\n  'angzarr': '\\u237C',\n  'aogon': '\\u0105',\n  'aopf': '\\uD835\\uDD52',\n  'apE': '\\u2A70',\n  'apacir': '\\u2A6F',\n  'ape': '\\u224A',\n  'approxeq': '\\u224A',\n  'apid': '\\u224B',\n  'apos': '\\u0027',\n  'aring': '\\u00E5',\n  'ascr': '\\uD835\\uDCB6',\n  'ast': '\\u002A',\n  'midast': '\\u002A',\n  'atilde': '\\u00E3',\n  'auml': '\\u00E4',\n  'awint': '\\u2A11',\n  'bNot': '\\u2AED',\n  'backcong': '\\u224C',\n  'bcong': '\\u224C',\n  'backepsilon': '\\u03F6',\n  'bepsi': '\\u03F6',\n  'backprime': '\\u2035',\n  'bprime': '\\u2035',\n  'backsim': '\\u223D',\n  'bsim': '\\u223D',\n  'backsimeq': '\\u22CD',\n  'bsime': '\\u22CD',\n  'barvee': '\\u22BD',\n  'barwed': '\\u2305',\n  'barwedge': '\\u2305',\n  'bbrktbrk': '\\u23B6',\n  'bcy': '\\u0431',\n  'bdquo': '\\u201E',\n  'ldquor': '\\u201E',\n  'bemptyv': '\\u29B0',\n  'beta': '\\u03B2',\n  'beth': '\\u2136',\n  'between': '\\u226C',\n  'twixt': '\\u226C',\n  'bfr': '\\uD835\\uDD1F',\n  'bigcirc': '\\u25EF',\n  'xcirc': '\\u25EF',\n  'bigodot': '\\u2A00',\n  'xodot': '\\u2A00',\n  'bigoplus': '\\u2A01',\n  'xoplus': '\\u2A01',\n  'bigotimes': '\\u2A02',\n  'xotime': '\\u2A02',\n  'bigsqcup': '\\u2A06',\n  'xsqcup': '\\u2A06',\n  'bigstar': '\\u2605',\n  'starf': '\\u2605',\n  'bigtriangledown': '\\u25BD',\n  'xdtri': '\\u25BD',\n  'bigtriangleup': '\\u25B3',\n  'xutri': '\\u25B3',\n  'biguplus': '\\u2A04',\n  'xuplus': '\\u2A04',\n  'bkarow': '\\u290D',\n  'rbarr': '\\u290D',\n  'blacklozenge': '\\u29EB',\n  'lozf': '\\u29EB',\n  'blacktriangle': '\\u25B4',\n  'utrif': '\\u25B4',\n  'blacktriangledown': '\\u25BE',\n  'dtrif': '\\u25BE',\n  'blacktriangleleft': '\\u25C2',\n  'ltrif': '\\u25C2',\n  'blacktriangleright': '\\u25B8',\n  'rtrif': '\\u25B8',\n  'blank': '\\u2423',\n  'blk12': '\\u2592',\n  'blk14': '\\u2591',\n  'blk34': '\\u2593',\n  'block': '\\u2588',\n  'bne': '\\u003D\\u20E5',\n  'bnequiv': '\\u2261\\u20E5',\n  'bnot': '\\u2310',\n  'bopf': '\\uD835\\uDD53',\n  'bowtie': '\\u22C8',\n  'boxDL': '\\u2557',\n  'boxDR': '\\u2554',\n  'boxDl': '\\u2556',\n  'boxDr': '\\u2553',\n  'boxH': '\\u2550',\n  'boxHD': '\\u2566',\n  'boxHU': '\\u2569',\n  'boxHd': '\\u2564',\n  'boxHu': '\\u2567',\n  'boxUL': '\\u255D',\n  'boxUR': '\\u255A',\n  'boxUl': '\\u255C',\n  'boxUr': '\\u2559',\n  'boxV': '\\u2551',\n  'boxVH': '\\u256C',\n  'boxVL': '\\u2563',\n  'boxVR': '\\u2560',\n  'boxVh': '\\u256B',\n  'boxVl': '\\u2562',\n  'boxVr': '\\u255F',\n  'boxbox': '\\u29C9',\n  'boxdL': '\\u2555',\n  'boxdR': '\\u2552',\n  'boxdl': '\\u2510',\n  'boxdr': '\\u250C',\n  'boxhD': '\\u2565',\n  'boxhU': '\\u2568',\n  'boxhd': '\\u252C',\n  'boxhu': '\\u2534',\n  'boxminus': '\\u229F',\n  'minusb': '\\u229F',\n  'boxplus': '\\u229E',\n  'plusb': '\\u229E',\n  'boxtimes': '\\u22A0',\n  'timesb': '\\u22A0',\n  'boxuL': '\\u255B',\n  'boxuR': '\\u2558',\n  'boxul': '\\u2518',\n  'boxur': '\\u2514',\n  'boxv': '\\u2502',\n  'boxvH': '\\u256A',\n  'boxvL': '\\u2561',\n  'boxvR': '\\u255E',\n  'boxvh': '\\u253C',\n  'boxvl': '\\u2524',\n  'boxvr': '\\u251C',\n  'brvbar': '\\u00A6',\n  'bscr': '\\uD835\\uDCB7',\n  'bsemi': '\\u204F',\n  'bsol': '\\u005C',\n  'bsolb': '\\u29C5',\n  'bsolhsub': '\\u27C8',\n  'bull': '\\u2022',\n  'bullet': '\\u2022',\n  'bumpE': '\\u2AAE',\n  'cacute': '\\u0107',\n  'cap': '\\u2229',\n  'capand': '\\u2A44',\n  'capbrcup': '\\u2A49',\n  'capcap': '\\u2A4B',\n  'capcup': '\\u2A47',\n  'capdot': '\\u2A40',\n  'caps': '\\u2229\\uFE00',\n  'caret': '\\u2041',\n  'ccaps': '\\u2A4D',\n  'ccaron': '\\u010D',\n  'ccedil': '\\u00E7',\n  'ccirc': '\\u0109',\n  'ccups': '\\u2A4C',\n  'ccupssm': '\\u2A50',\n  'cdot': '\\u010B',\n  'cemptyv': '\\u29B2',\n  'cent': '\\u00A2',\n  'cfr': '\\uD835\\uDD20',\n  'chcy': '\\u0447',\n  'check': '\\u2713',\n  'checkmark': '\\u2713',\n  'chi': '\\u03C7',\n  'cir': '\\u25CB',\n  'cirE': '\\u29C3',\n  'circ': '\\u02C6',\n  'circeq': '\\u2257',\n  'cire': '\\u2257',\n  'circlearrowleft': '\\u21BA',\n  'olarr': '\\u21BA',\n  'circlearrowright': '\\u21BB',\n  'orarr': '\\u21BB',\n  'circledS': '\\u24C8',\n  'oS': '\\u24C8',\n  'circledast': '\\u229B',\n  'oast': '\\u229B',\n  'circledcirc': '\\u229A',\n  'ocir': '\\u229A',\n  'circleddash': '\\u229D',\n  'odash': '\\u229D',\n  'cirfnint': '\\u2A10',\n  'cirmid': '\\u2AEF',\n  'cirscir': '\\u29C2',\n  'clubs': '\\u2663',\n  'clubsuit': '\\u2663',\n  'colon': '\\u003A',\n  'comma': '\\u002C',\n  'commat': '\\u0040',\n  'comp': '\\u2201',\n  'complement': '\\u2201',\n  'congdot': '\\u2A6D',\n  'copf': '\\uD835\\uDD54',\n  'copysr': '\\u2117',\n  'crarr': '\\u21B5',\n  'cross': '\\u2717',\n  'cscr': '\\uD835\\uDCB8',\n  'csub': '\\u2ACF',\n  'csube': '\\u2AD1',\n  'csup': '\\u2AD0',\n  'csupe': '\\u2AD2',\n  'ctdot': '\\u22EF',\n  'cudarrl': '\\u2938',\n  'cudarrr': '\\u2935',\n  'cuepr': '\\u22DE',\n  'curlyeqprec': '\\u22DE',\n  'cuesc': '\\u22DF',\n  'curlyeqsucc': '\\u22DF',\n  'cularr': '\\u21B6',\n  'curvearrowleft': '\\u21B6',\n  'cularrp': '\\u293D',\n  'cup': '\\u222A',\n  'cupbrcap': '\\u2A48',\n  'cupcap': '\\u2A46',\n  'cupcup': '\\u2A4A',\n  'cupdot': '\\u228D',\n  'cupor': '\\u2A45',\n  'cups': '\\u222A\\uFE00',\n  'curarr': '\\u21B7',\n  'curvearrowright': '\\u21B7',\n  'curarrm': '\\u293C',\n  'curlyvee': '\\u22CE',\n  'cuvee': '\\u22CE',\n  'curlywedge': '\\u22CF',\n  'cuwed': '\\u22CF',\n  'curren': '\\u00A4',\n  'cwint': '\\u2231',\n  'cylcty': '\\u232D',\n  'dHar': '\\u2965',\n  'dagger': '\\u2020',\n  'daleth': '\\u2138',\n  'dash': '\\u2010',\n  'hyphen': '\\u2010',\n  'dbkarow': '\\u290F',\n  'rBarr': '\\u290F',\n  'dcaron': '\\u010F',\n  'dcy': '\\u0434',\n  'ddarr': '\\u21CA',\n  'downdownarrows': '\\u21CA',\n  'ddotseq': '\\u2A77',\n  'eDDot': '\\u2A77',\n  'deg': '\\u00B0',\n  'delta': '\\u03B4',\n  'demptyv': '\\u29B1',\n  'dfisht': '\\u297F',\n  'dfr': '\\uD835\\uDD21',\n  'diamondsuit': '\\u2666',\n  'diams': '\\u2666',\n  'digamma': '\\u03DD',\n  'gammad': '\\u03DD',\n  'disin': '\\u22F2',\n  'div': '\\u00F7',\n  'divide': '\\u00F7',\n  'divideontimes': '\\u22C7',\n  'divonx': '\\u22C7',\n  'djcy': '\\u0452',\n  'dlcorn': '\\u231E',\n  'llcorner': '\\u231E',\n  'dlcrop': '\\u230D',\n  'dollar': '\\u0024',\n  'dopf': '\\uD835\\uDD55',\n  'doteqdot': '\\u2251',\n  'eDot': '\\u2251',\n  'dotminus': '\\u2238',\n  'minusd': '\\u2238',\n  'dotplus': '\\u2214',\n  'plusdo': '\\u2214',\n  'dotsquare': '\\u22A1',\n  'sdotb': '\\u22A1',\n  'drcorn': '\\u231F',\n  'lrcorner': '\\u231F',\n  'drcrop': '\\u230C',\n  'dscr': '\\uD835\\uDCB9',\n  'dscy': '\\u0455',\n  'dsol': '\\u29F6',\n  'dstrok': '\\u0111',\n  'dtdot': '\\u22F1',\n  'dtri': '\\u25BF',\n  'triangledown': '\\u25BF',\n  'dwangle': '\\u29A6',\n  'dzcy': '\\u045F',\n  'dzigrarr': '\\u27FF',\n  'eacute': '\\u00E9',\n  'easter': '\\u2A6E',\n  'ecaron': '\\u011B',\n  'ecir': '\\u2256',\n  'eqcirc': '\\u2256',\n  'ecirc': '\\u00EA',\n  'ecolon': '\\u2255',\n  'eqcolon': '\\u2255',\n  'ecy': '\\u044D',\n  'edot': '\\u0117',\n  'efDot': '\\u2252',\n  'fallingdotseq': '\\u2252',\n  'efr': '\\uD835\\uDD22',\n  'eg': '\\u2A9A',\n  'egrave': '\\u00E8',\n  'egs': '\\u2A96',\n  'eqslantgtr': '\\u2A96',\n  'egsdot': '\\u2A98',\n  'el': '\\u2A99',\n  'elinters': '\\u23E7',\n  'ell': '\\u2113',\n  'els': '\\u2A95',\n  'eqslantless': '\\u2A95',\n  'elsdot': '\\u2A97',\n  'emacr': '\\u0113',\n  'empty': '\\u2205',\n  'emptyset': '\\u2205',\n  'emptyv': '\\u2205',\n  'varnothing': '\\u2205',\n  'emsp13': '\\u2004',\n  'emsp14': '\\u2005',\n  'emsp': '\\u2003',\n  'eng': '\\u014B',\n  'ensp': '\\u2002',\n  'eogon': '\\u0119',\n  'eopf': '\\uD835\\uDD56',\n  'epar': '\\u22D5',\n  'eparsl': '\\u29E3',\n  'eplus': '\\u2A71',\n  'epsi': '\\u03B5',\n  'epsilon': '\\u03B5',\n  'epsiv': '\\u03F5',\n  'straightepsilon': '\\u03F5',\n  'varepsilon': '\\u03F5',\n  'equals': '\\u003D',\n  'equest': '\\u225F',\n  'questeq': '\\u225F',\n  'equivDD': '\\u2A78',\n  'eqvparsl': '\\u29E5',\n  'erDot': '\\u2253',\n  'risingdotseq': '\\u2253',\n  'erarr': '\\u2971',\n  'escr': '\\u212F',\n  'eta': '\\u03B7',\n  'eth': '\\u00F0',\n  'euml': '\\u00EB',\n  'euro': '\\u20AC',\n  'excl': '\\u0021',\n  'fcy': '\\u0444',\n  'female': '\\u2640',\n  'ffilig': '\\uFB03',\n  'fflig': '\\uFB00',\n  'ffllig': '\\uFB04',\n  'ffr': '\\uD835\\uDD23',\n  'filig': '\\uFB01',\n  'fjlig': '\\u0066\\u006A',\n  'flat': '\\u266D',\n  'fllig': '\\uFB02',\n  'fltns': '\\u25B1',\n  'fnof': '\\u0192',\n  'fopf': '\\uD835\\uDD57',\n  'fork': '\\u22D4',\n  'pitchfork': '\\u22D4',\n  'forkv': '\\u2AD9',\n  'fpartint': '\\u2A0D',\n  'frac12': '\\u00BD',\n  'half': '\\u00BD',\n  'frac13': '\\u2153',\n  'frac14': '\\u00BC',\n  'frac15': '\\u2155',\n  'frac16': '\\u2159',\n  'frac18': '\\u215B',\n  'frac23': '\\u2154',\n  'frac25': '\\u2156',\n  'frac34': '\\u00BE',\n  'frac35': '\\u2157',\n  'frac38': '\\u215C',\n  'frac45': '\\u2158',\n  'frac56': '\\u215A',\n  'frac58': '\\u215D',\n  'frac78': '\\u215E',\n  'frasl': '\\u2044',\n  'frown': '\\u2322',\n  'sfrown': '\\u2322',\n  'fscr': '\\uD835\\uDCBB',\n  'gEl': '\\u2A8C',\n  'gtreqqless': '\\u2A8C',\n  'gacute': '\\u01F5',\n  'gamma': '\\u03B3',\n  'gap': '\\u2A86',\n  'gtrapprox': '\\u2A86',\n  'gbreve': '\\u011F',\n  'gcirc': '\\u011D',\n  'gcy': '\\u0433',\n  'gdot': '\\u0121',\n  'gescc': '\\u2AA9',\n  'gesdot': '\\u2A80',\n  'gesdoto': '\\u2A82',\n  'gesdotol': '\\u2A84',\n  'gesl': '\\u22DB\\uFE00',\n  'gesles': '\\u2A94',\n  'gfr': '\\uD835\\uDD24',\n  'gimel': '\\u2137',\n  'gjcy': '\\u0453',\n  'glE': '\\u2A92',\n  'gla': '\\u2AA5',\n  'glj': '\\u2AA4',\n  'gnE': '\\u2269',\n  'gneqq': '\\u2269',\n  'gnap': '\\u2A8A',\n  'gnapprox': '\\u2A8A',\n  'gne': '\\u2A88',\n  'gneq': '\\u2A88',\n  'gnsim': '\\u22E7',\n  'gopf': '\\uD835\\uDD58',\n  'gscr': '\\u210A',\n  'gsime': '\\u2A8E',\n  'gsiml': '\\u2A90',\n  'gtcc': '\\u2AA7',\n  'gtcir': '\\u2A7A',\n  'gtdot': '\\u22D7',\n  'gtrdot': '\\u22D7',\n  'gtlPar': '\\u2995',\n  'gtquest': '\\u2A7C',\n  'gtrarr': '\\u2978',\n  'gvertneqq': '\\u2269\\uFE00',\n  'gvnE': '\\u2269\\uFE00',\n  'hardcy': '\\u044A',\n  'harrcir': '\\u2948',\n  'harrw': '\\u21AD',\n  'leftrightsquigarrow': '\\u21AD',\n  'hbar': '\\u210F',\n  'hslash': '\\u210F',\n  'planck': '\\u210F',\n  'plankv': '\\u210F',\n  'hcirc': '\\u0125',\n  'hearts': '\\u2665',\n  'heartsuit': '\\u2665',\n  'hellip': '\\u2026',\n  'mldr': '\\u2026',\n  'hercon': '\\u22B9',\n  'hfr': '\\uD835\\uDD25',\n  'hksearow': '\\u2925',\n  'searhk': '\\u2925',\n  'hkswarow': '\\u2926',\n  'swarhk': '\\u2926',\n  'hoarr': '\\u21FF',\n  'homtht': '\\u223B',\n  'hookleftarrow': '\\u21A9',\n  'larrhk': '\\u21A9',\n  'hookrightarrow': '\\u21AA',\n  'rarrhk': '\\u21AA',\n  'hopf': '\\uD835\\uDD59',\n  'horbar': '\\u2015',\n  'hscr': '\\uD835\\uDCBD',\n  'hstrok': '\\u0127',\n  'hybull': '\\u2043',\n  'iacute': '\\u00ED',\n  'icirc': '\\u00EE',\n  'icy': '\\u0438',\n  'iecy': '\\u0435',\n  'iexcl': '\\u00A1',\n  'ifr': '\\uD835\\uDD26',\n  'igrave': '\\u00EC',\n  'iiiint': '\\u2A0C',\n  'qint': '\\u2A0C',\n  'iiint': '\\u222D',\n  'tint': '\\u222D',\n  'iinfin': '\\u29DC',\n  'iiota': '\\u2129',\n  'ijlig': '\\u0133',\n  'imacr': '\\u012B',\n  'imath': '\\u0131',\n  'inodot': '\\u0131',\n  'imof': '\\u22B7',\n  'imped': '\\u01B5',\n  'incare': '\\u2105',\n  'infin': '\\u221E',\n  'infintie': '\\u29DD',\n  'intcal': '\\u22BA',\n  'intercal': '\\u22BA',\n  'intlarhk': '\\u2A17',\n  'intprod': '\\u2A3C',\n  'iprod': '\\u2A3C',\n  'iocy': '\\u0451',\n  'iogon': '\\u012F',\n  'iopf': '\\uD835\\uDD5A',\n  'iota': '\\u03B9',\n  'iquest': '\\u00BF',\n  'iscr': '\\uD835\\uDCBE',\n  'isinE': '\\u22F9',\n  'isindot': '\\u22F5',\n  'isins': '\\u22F4',\n  'isinsv': '\\u22F3',\n  'itilde': '\\u0129',\n  'iukcy': '\\u0456',\n  'iuml': '\\u00EF',\n  'jcirc': '\\u0135',\n  'jcy': '\\u0439',\n  'jfr': '\\uD835\\uDD27',\n  'jmath': '\\u0237',\n  'jopf': '\\uD835\\uDD5B',\n  'jscr': '\\uD835\\uDCBF',\n  'jsercy': '\\u0458',\n  'jukcy': '\\u0454',\n  'kappa': '\\u03BA',\n  'kappav': '\\u03F0',\n  'varkappa': '\\u03F0',\n  'kcedil': '\\u0137',\n  'kcy': '\\u043A',\n  'kfr': '\\uD835\\uDD28',\n  'kgreen': '\\u0138',\n  'khcy': '\\u0445',\n  'kjcy': '\\u045C',\n  'kopf': '\\uD835\\uDD5C',\n  'kscr': '\\uD835\\uDCC0',\n  'lAtail': '\\u291B',\n  'lBarr': '\\u290E',\n  'lEg': '\\u2A8B',\n  'lesseqqgtr': '\\u2A8B',\n  'lHar': '\\u2962',\n  'lacute': '\\u013A',\n  'laemptyv': '\\u29B4',\n  'lambda': '\\u03BB',\n  'langd': '\\u2991',\n  'lap': '\\u2A85',\n  'lessapprox': '\\u2A85',\n  'laquo': '\\u00AB',\n  'larrbfs': '\\u291F',\n  'larrfs': '\\u291D',\n  'larrlp': '\\u21AB',\n  'looparrowleft': '\\u21AB',\n  'larrpl': '\\u2939',\n  'larrsim': '\\u2973',\n  'larrtl': '\\u21A2',\n  'leftarrowtail': '\\u21A2',\n  'lat': '\\u2AAB',\n  'latail': '\\u2919',\n  'late': '\\u2AAD',\n  'lates': '\\u2AAD\\uFE00',\n  'lbarr': '\\u290C',\n  'lbbrk': '\\u2772',\n  'lbrace': '\\u007B',\n  'lcub': '\\u007B',\n  'lbrack': '\\u005B',\n  'lsqb': '\\u005B',\n  'lbrke': '\\u298B',\n  'lbrksld': '\\u298F',\n  'lbrkslu': '\\u298D',\n  'lcaron': '\\u013E',\n  'lcedil': '\\u013C',\n  'lcy': '\\u043B',\n  'ldca': '\\u2936',\n  'ldrdhar': '\\u2967',\n  'ldrushar': '\\u294B',\n  'ldsh': '\\u21B2',\n  'le': '\\u2264',\n  'leq': '\\u2264',\n  'leftleftarrows': '\\u21C7',\n  'llarr': '\\u21C7',\n  'leftthreetimes': '\\u22CB',\n  'lthree': '\\u22CB',\n  'lescc': '\\u2AA8',\n  'lesdot': '\\u2A7F',\n  'lesdoto': '\\u2A81',\n  'lesdotor': '\\u2A83',\n  'lesg': '\\u22DA\\uFE00',\n  'lesges': '\\u2A93',\n  'lessdot': '\\u22D6',\n  'ltdot': '\\u22D6',\n  'lfisht': '\\u297C',\n  'lfr': '\\uD835\\uDD29',\n  'lgE': '\\u2A91',\n  'lharul': '\\u296A',\n  'lhblk': '\\u2584',\n  'ljcy': '\\u0459',\n  'llhard': '\\u296B',\n  'lltri': '\\u25FA',\n  'lmidot': '\\u0140',\n  'lmoust': '\\u23B0',\n  'lmoustache': '\\u23B0',\n  'lnE': '\\u2268',\n  'lneqq': '\\u2268',\n  'lnap': '\\u2A89',\n  'lnapprox': '\\u2A89',\n  'lne': '\\u2A87',\n  'lneq': '\\u2A87',\n  'lnsim': '\\u22E6',\n  'loang': '\\u27EC',\n  'loarr': '\\u21FD',\n  'longmapsto': '\\u27FC',\n  'xmap': '\\u27FC',\n  'looparrowright': '\\u21AC',\n  'rarrlp': '\\u21AC',\n  'lopar': '\\u2985',\n  'lopf': '\\uD835\\uDD5D',\n  'loplus': '\\u2A2D',\n  'lotimes': '\\u2A34',\n  'lowast': '\\u2217',\n  'loz': '\\u25CA',\n  'lozenge': '\\u25CA',\n  'lpar': '\\u0028',\n  'lparlt': '\\u2993',\n  'lrhard': '\\u296D',\n  'lrm': '\\u200E',\n  'lrtri': '\\u22BF',\n  'lsaquo': '\\u2039',\n  'lscr': '\\uD835\\uDCC1',\n  'lsime': '\\u2A8D',\n  'lsimg': '\\u2A8F',\n  'lsquor': '\\u201A',\n  'sbquo': '\\u201A',\n  'lstrok': '\\u0142',\n  'ltcc': '\\u2AA6',\n  'ltcir': '\\u2A79',\n  'ltimes': '\\u22C9',\n  'ltlarr': '\\u2976',\n  'ltquest': '\\u2A7B',\n  'ltrPar': '\\u2996',\n  'ltri': '\\u25C3',\n  'triangleleft': '\\u25C3',\n  'lurdshar': '\\u294A',\n  'luruhar': '\\u2966',\n  'lvertneqq': '\\u2268\\uFE00',\n  'lvnE': '\\u2268\\uFE00',\n  'mDDot': '\\u223A',\n  'macr': '\\u00AF',\n  'strns': '\\u00AF',\n  'male': '\\u2642',\n  'malt': '\\u2720',\n  'maltese': '\\u2720',\n  'marker': '\\u25AE',\n  'mcomma': '\\u2A29',\n  'mcy': '\\u043C',\n  'mdash': '\\u2014',\n  'mfr': '\\uD835\\uDD2A',\n  'mho': '\\u2127',\n  'micro': '\\u00B5',\n  'midcir': '\\u2AF0',\n  'minus': '\\u2212',\n  'minusdu': '\\u2A2A',\n  'mlcp': '\\u2ADB',\n  'models': '\\u22A7',\n  'mopf': '\\uD835\\uDD5E',\n  'mscr': '\\uD835\\uDCC2',\n  'mu': '\\u03BC',\n  'multimap': '\\u22B8',\n  'mumap': '\\u22B8',\n  'nGg': '\\u22D9\\u0338',\n  'nGt': '\\u226B\\u20D2',\n  'nLeftarrow': '\\u21CD',\n  'nlArr': '\\u21CD',\n  'nLeftrightarrow': '\\u21CE',\n  'nhArr': '\\u21CE',\n  'nLl': '\\u22D8\\u0338',\n  'nLt': '\\u226A\\u20D2',\n  'nRightarrow': '\\u21CF',\n  'nrArr': '\\u21CF',\n  'nVDash': '\\u22AF',\n  'nVdash': '\\u22AE',\n  'nacute': '\\u0144',\n  'nang': '\\u2220\\u20D2',\n  'napE': '\\u2A70\\u0338',\n  'napid': '\\u224B\\u0338',\n  'napos': '\\u0149',\n  'natur': '\\u266E',\n  'natural': '\\u266E',\n  'ncap': '\\u2A43',\n  'ncaron': '\\u0148',\n  'ncedil': '\\u0146',\n  'ncongdot': '\\u2A6D\\u0338',\n  'ncup': '\\u2A42',\n  'ncy': '\\u043D',\n  'ndash': '\\u2013',\n  'neArr': '\\u21D7',\n  'nearhk': '\\u2924',\n  'nedot': '\\u2250\\u0338',\n  'nesear': '\\u2928',\n  'toea': '\\u2928',\n  'nfr': '\\uD835\\uDD2B',\n  'nharr': '\\u21AE',\n  'nleftrightarrow': '\\u21AE',\n  'nhpar': '\\u2AF2',\n  'nis': '\\u22FC',\n  'nisd': '\\u22FA',\n  'njcy': '\\u045A',\n  'nlE': '\\u2266\\u0338',\n  'nleqq': '\\u2266\\u0338',\n  'nlarr': '\\u219A',\n  'nleftarrow': '\\u219A',\n  'nldr': '\\u2025',\n  'nopf': '\\uD835\\uDD5F',\n  'not': '\\u00AC',\n  'notinE': '\\u22F9\\u0338',\n  'notindot': '\\u22F5\\u0338',\n  'notinvb': '\\u22F7',\n  'notinvc': '\\u22F6',\n  'notnivb': '\\u22FE',\n  'notnivc': '\\u22FD',\n  'nparsl': '\\u2AFD\\u20E5',\n  'npart': '\\u2202\\u0338',\n  'npolint': '\\u2A14',\n  'nrarr': '\\u219B',\n  'nrightarrow': '\\u219B',\n  'nrarrc': '\\u2933\\u0338',\n  'nrarrw': '\\u219D\\u0338',\n  'nscr': '\\uD835\\uDCC3',\n  'nsub': '\\u2284',\n  'nsubE': '\\u2AC5\\u0338',\n  'nsubseteqq': '\\u2AC5\\u0338',\n  'nsup': '\\u2285',\n  'nsupE': '\\u2AC6\\u0338',\n  'nsupseteqq': '\\u2AC6\\u0338',\n  'ntilde': '\\u00F1',\n  'nu': '\\u03BD',\n  'num': '\\u0023',\n  'numero': '\\u2116',\n  'numsp': '\\u2007',\n  'nvDash': '\\u22AD',\n  'nvHarr': '\\u2904',\n  'nvap': '\\u224D\\u20D2',\n  'nvdash': '\\u22AC',\n  'nvge': '\\u2265\\u20D2',\n  'nvgt': '\\u003E\\u20D2',\n  'nvinfin': '\\u29DE',\n  'nvlArr': '\\u2902',\n  'nvle': '\\u2264\\u20D2',\n  'nvlt': '\\u003C\\u20D2',\n  'nvltrie': '\\u22B4\\u20D2',\n  'nvrArr': '\\u2903',\n  'nvrtrie': '\\u22B5\\u20D2',\n  'nvsim': '\\u223C\\u20D2',\n  'nwArr': '\\u21D6',\n  'nwarhk': '\\u2923',\n  'nwnear': '\\u2927',\n  'oacute': '\\u00F3',\n  'ocirc': '\\u00F4',\n  'ocy': '\\u043E',\n  'odblac': '\\u0151',\n  'odiv': '\\u2A38',\n  'odsold': '\\u29BC',\n  'oelig': '\\u0153',\n  'ofcir': '\\u29BF',\n  'ofr': '\\uD835\\uDD2C',\n  'ogon': '\\u02DB',\n  'ograve': '\\u00F2',\n  'ogt': '\\u29C1',\n  'ohbar': '\\u29B5',\n  'olcir': '\\u29BE',\n  'olcross': '\\u29BB',\n  'olt': '\\u29C0',\n  'omacr': '\\u014D',\n  'omega': '\\u03C9',\n  'omicron': '\\u03BF',\n  'omid': '\\u29B6',\n  'oopf': '\\uD835\\uDD60',\n  'opar': '\\u29B7',\n  'operp': '\\u29B9',\n  'or': '\\u2228',\n  'vee': '\\u2228',\n  'ord': '\\u2A5D',\n  'order': '\\u2134',\n  'orderof': '\\u2134',\n  'oscr': '\\u2134',\n  'ordf': '\\u00AA',\n  'ordm': '\\u00BA',\n  'origof': '\\u22B6',\n  'oror': '\\u2A56',\n  'orslope': '\\u2A57',\n  'orv': '\\u2A5B',\n  'oslash': '\\u00F8',\n  'osol': '\\u2298',\n  'otilde': '\\u00F5',\n  'otimesas': '\\u2A36',\n  'ouml': '\\u00F6',\n  'ovbar': '\\u233D',\n  'para': '\\u00B6',\n  'parsim': '\\u2AF3',\n  'parsl': '\\u2AFD',\n  'pcy': '\\u043F',\n  'percnt': '\\u0025',\n  'period': '\\u002E',\n  'permil': '\\u2030',\n  'pertenk': '\\u2031',\n  'pfr': '\\uD835\\uDD2D',\n  'phi': '\\u03C6',\n  'phiv': '\\u03D5',\n  'straightphi': '\\u03D5',\n  'varphi': '\\u03D5',\n  'phone': '\\u260E',\n  'pi': '\\u03C0',\n  'piv': '\\u03D6',\n  'varpi': '\\u03D6',\n  'planckh': '\\u210E',\n  'plus': '\\u002B',\n  'plusacir': '\\u2A23',\n  'pluscir': '\\u2A22',\n  'plusdu': '\\u2A25',\n  'pluse': '\\u2A72',\n  'plussim': '\\u2A26',\n  'plustwo': '\\u2A27',\n  'pointint': '\\u2A15',\n  'popf': '\\uD835\\uDD61',\n  'pound': '\\u00A3',\n  'prE': '\\u2AB3',\n  'prap': '\\u2AB7',\n  'precapprox': '\\u2AB7',\n  'precnapprox': '\\u2AB9',\n  'prnap': '\\u2AB9',\n  'precneqq': '\\u2AB5',\n  'prnE': '\\u2AB5',\n  'precnsim': '\\u22E8',\n  'prnsim': '\\u22E8',\n  'prime': '\\u2032',\n  'profalar': '\\u232E',\n  'profline': '\\u2312',\n  'profsurf': '\\u2313',\n  'prurel': '\\u22B0',\n  'pscr': '\\uD835\\uDCC5',\n  'psi': '\\u03C8',\n  'puncsp': '\\u2008',\n  'qfr': '\\uD835\\uDD2E',\n  'qopf': '\\uD835\\uDD62',\n  'qprime': '\\u2057',\n  'qscr': '\\uD835\\uDCC6',\n  'quatint': '\\u2A16',\n  'quest': '\\u003F',\n  'rAtail': '\\u291C',\n  'rHar': '\\u2964',\n  'race': '\\u223D\\u0331',\n  'racute': '\\u0155',\n  'raemptyv': '\\u29B3',\n  'rangd': '\\u2992',\n  'range': '\\u29A5',\n  'raquo': '\\u00BB',\n  'rarrap': '\\u2975',\n  'rarrbfs': '\\u2920',\n  'rarrc': '\\u2933',\n  'rarrfs': '\\u291E',\n  'rarrpl': '\\u2945',\n  'rarrsim': '\\u2974',\n  'rarrtl': '\\u21A3',\n  'rightarrowtail': '\\u21A3',\n  'rarrw': '\\u219D',\n  'rightsquigarrow': '\\u219D',\n  'ratail': '\\u291A',\n  'ratio': '\\u2236',\n  'rbbrk': '\\u2773',\n  'rbrace': '\\u007D',\n  'rcub': '\\u007D',\n  'rbrack': '\\u005D',\n  'rsqb': '\\u005D',\n  'rbrke': '\\u298C',\n  'rbrksld': '\\u298E',\n  'rbrkslu': '\\u2990',\n  'rcaron': '\\u0159',\n  'rcedil': '\\u0157',\n  'rcy': '\\u0440',\n  'rdca': '\\u2937',\n  'rdldhar': '\\u2969',\n  'rdsh': '\\u21B3',\n  'rect': '\\u25AD',\n  'rfisht': '\\u297D',\n  'rfr': '\\uD835\\uDD2F',\n  'rharul': '\\u296C',\n  'rho': '\\u03C1',\n  'rhov': '\\u03F1',\n  'varrho': '\\u03F1',\n  'rightrightarrows': '\\u21C9',\n  'rrarr': '\\u21C9',\n  'rightthreetimes': '\\u22CC',\n  'rthree': '\\u22CC',\n  'ring': '\\u02DA',\n  'rlm': '\\u200F',\n  'rmoust': '\\u23B1',\n  'rmoustache': '\\u23B1',\n  'rnmid': '\\u2AEE',\n  'roang': '\\u27ED',\n  'roarr': '\\u21FE',\n  'ropar': '\\u2986',\n  'ropf': '\\uD835\\uDD63',\n  'roplus': '\\u2A2E',\n  'rotimes': '\\u2A35',\n  'rpar': '\\u0029',\n  'rpargt': '\\u2994',\n  'rppolint': '\\u2A12',\n  'rsaquo': '\\u203A',\n  'rscr': '\\uD835\\uDCC7',\n  'rtimes': '\\u22CA',\n  'rtri': '\\u25B9',\n  'triangleright': '\\u25B9',\n  'rtriltri': '\\u29CE',\n  'ruluhar': '\\u2968',\n  'rx': '\\u211E',\n  'sacute': '\\u015B',\n  'scE': '\\u2AB4',\n  'scap': '\\u2AB8',\n  'succapprox': '\\u2AB8',\n  'scaron': '\\u0161',\n  'scedil': '\\u015F',\n  'scirc': '\\u015D',\n  'scnE': '\\u2AB6',\n  'succneqq': '\\u2AB6',\n  'scnap': '\\u2ABA',\n  'succnapprox': '\\u2ABA',\n  'scnsim': '\\u22E9',\n  'succnsim': '\\u22E9',\n  'scpolint': '\\u2A13',\n  'scy': '\\u0441',\n  'sdot': '\\u22C5',\n  'sdote': '\\u2A66',\n  'seArr': '\\u21D8',\n  'sect': '\\u00A7',\n  'semi': '\\u003B',\n  'seswar': '\\u2929',\n  'tosa': '\\u2929',\n  'sext': '\\u2736',\n  'sfr': '\\uD835\\uDD30',\n  'sharp': '\\u266F',\n  'shchcy': '\\u0449',\n  'shcy': '\\u0448',\n  'shy': '\\u00AD',\n  'sigma': '\\u03C3',\n  'sigmaf': '\\u03C2',\n  'sigmav': '\\u03C2',\n  'varsigma': '\\u03C2',\n  'simdot': '\\u2A6A',\n  'simg': '\\u2A9E',\n  'simgE': '\\u2AA0',\n  'siml': '\\u2A9D',\n  'simlE': '\\u2A9F',\n  'simne': '\\u2246',\n  'simplus': '\\u2A24',\n  'simrarr': '\\u2972',\n  'smashp': '\\u2A33',\n  'smeparsl': '\\u29E4',\n  'smile': '\\u2323',\n  'ssmile': '\\u2323',\n  'smt': '\\u2AAA',\n  'smte': '\\u2AAC',\n  'smtes': '\\u2AAC\\uFE00',\n  'softcy': '\\u044C',\n  'sol': '\\u002F',\n  'solb': '\\u29C4',\n  'solbar': '\\u233F',\n  'sopf': '\\uD835\\uDD64',\n  'spades': '\\u2660',\n  'spadesuit': '\\u2660',\n  'sqcaps': '\\u2293\\uFE00',\n  'sqcups': '\\u2294\\uFE00',\n  'sscr': '\\uD835\\uDCC8',\n  'star': '\\u2606',\n  'sub': '\\u2282',\n  'subset': '\\u2282',\n  'subE': '\\u2AC5',\n  'subseteqq': '\\u2AC5',\n  'subdot': '\\u2ABD',\n  'subedot': '\\u2AC3',\n  'submult': '\\u2AC1',\n  'subnE': '\\u2ACB',\n  'subsetneqq': '\\u2ACB',\n  'subne': '\\u228A',\n  'subsetneq': '\\u228A',\n  'subplus': '\\u2ABF',\n  'subrarr': '\\u2979',\n  'subsim': '\\u2AC7',\n  'subsub': '\\u2AD5',\n  'subsup': '\\u2AD3',\n  'sung': '\\u266A',\n  'sup1': '\\u00B9',\n  'sup2': '\\u00B2',\n  'sup3': '\\u00B3',\n  'supE': '\\u2AC6',\n  'supseteqq': '\\u2AC6',\n  'supdot': '\\u2ABE',\n  'supdsub': '\\u2AD8',\n  'supedot': '\\u2AC4',\n  'suphsol': '\\u27C9',\n  'suphsub': '\\u2AD7',\n  'suplarr': '\\u297B',\n  'supmult': '\\u2AC2',\n  'supnE': '\\u2ACC',\n  'supsetneqq': '\\u2ACC',\n  'supne': '\\u228B',\n  'supsetneq': '\\u228B',\n  'supplus': '\\u2AC0',\n  'supsim': '\\u2AC8',\n  'supsub': '\\u2AD4',\n  'supsup': '\\u2AD6',\n  'swArr': '\\u21D9',\n  'swnwar': '\\u292A',\n  'szlig': '\\u00DF',\n  'target': '\\u2316',\n  'tau': '\\u03C4',\n  'tcaron': '\\u0165',\n  'tcedil': '\\u0163',\n  'tcy': '\\u0442',\n  'telrec': '\\u2315',\n  'tfr': '\\uD835\\uDD31',\n  'theta': '\\u03B8',\n  'thetasym': '\\u03D1',\n  'thetav': '\\u03D1',\n  'vartheta': '\\u03D1',\n  'thorn': '\\u00FE',\n  'times': '\\u00D7',\n  'timesbar': '\\u2A31',\n  'timesd': '\\u2A30',\n  'topbot': '\\u2336',\n  'topcir': '\\u2AF1',\n  'topf': '\\uD835\\uDD65',\n  'topfork': '\\u2ADA',\n  'tprime': '\\u2034',\n  'triangle': '\\u25B5',\n  'utri': '\\u25B5',\n  'triangleq': '\\u225C',\n  'trie': '\\u225C',\n  'tridot': '\\u25EC',\n  'triminus': '\\u2A3A',\n  'triplus': '\\u2A39',\n  'trisb': '\\u29CD',\n  'tritime': '\\u2A3B',\n  'trpezium': '\\u23E2',\n  'tscr': '\\uD835\\uDCC9',\n  'tscy': '\\u0446',\n  'tshcy': '\\u045B',\n  'tstrok': '\\u0167',\n  'uHar': '\\u2963',\n  'uacute': '\\u00FA',\n  'ubrcy': '\\u045E',\n  'ubreve': '\\u016D',\n  'ucirc': '\\u00FB',\n  'ucy': '\\u0443',\n  'udblac': '\\u0171',\n  'ufisht': '\\u297E',\n  'ufr': '\\uD835\\uDD32',\n  'ugrave': '\\u00F9',\n  'uhblk': '\\u2580',\n  'ulcorn': '\\u231C',\n  'ulcorner': '\\u231C',\n  'ulcrop': '\\u230F',\n  'ultri': '\\u25F8',\n  'umacr': '\\u016B',\n  'uogon': '\\u0173',\n  'uopf': '\\uD835\\uDD66',\n  'upsi': '\\u03C5',\n  'upsilon': '\\u03C5',\n  'upuparrows': '\\u21C8',\n  'uuarr': '\\u21C8',\n  'urcorn': '\\u231D',\n  'urcorner': '\\u231D',\n  'urcrop': '\\u230E',\n  'uring': '\\u016F',\n  'urtri': '\\u25F9',\n  'uscr': '\\uD835\\uDCCA',\n  'utdot': '\\u22F0',\n  'utilde': '\\u0169',\n  'uuml': '\\u00FC',\n  'uwangle': '\\u29A7',\n  'vBar': '\\u2AE8',\n  'vBarv': '\\u2AE9',\n  'vangrt': '\\u299C',\n  'varsubsetneq': '\\u228A\\uFE00',\n  'vsubne': '\\u228A\\uFE00',\n  'varsubsetneqq': '\\u2ACB\\uFE00',\n  'vsubnE': '\\u2ACB\\uFE00',\n  'varsupsetneq': '\\u228B\\uFE00',\n  'vsupne': '\\u228B\\uFE00',\n  'varsupsetneqq': '\\u2ACC\\uFE00',\n  'vsupnE': '\\u2ACC\\uFE00',\n  'vcy': '\\u0432',\n  'veebar': '\\u22BB',\n  'veeeq': '\\u225A',\n  'vellip': '\\u22EE',\n  'vfr': '\\uD835\\uDD33',\n  'vopf': '\\uD835\\uDD67',\n  'vscr': '\\uD835\\uDCCB',\n  'vzigzag': '\\u299A',\n  'wcirc': '\\u0175',\n  'wedbar': '\\u2A5F',\n  'wedgeq': '\\u2259',\n  'weierp': '\\u2118',\n  'wp': '\\u2118',\n  'wfr': '\\uD835\\uDD34',\n  'wopf': '\\uD835\\uDD68',\n  'wscr': '\\uD835\\uDCCC',\n  'xfr': '\\uD835\\uDD35',\n  'xi': '\\u03BE',\n  'xnis': '\\u22FB',\n  'xopf': '\\uD835\\uDD69',\n  'xscr': '\\uD835\\uDCCD',\n  'yacute': '\\u00FD',\n  'yacy': '\\u044F',\n  'ycirc': '\\u0177',\n  'ycy': '\\u044B',\n  'yen': '\\u00A5',\n  'yfr': '\\uD835\\uDD36',\n  'yicy': '\\u0457',\n  'yopf': '\\uD835\\uDD6A',\n  'yscr': '\\uD835\\uDCCE',\n  'yucy': '\\u044E',\n  'yuml': '\\u00FF',\n  'zacute': '\\u017A',\n  'zcaron': '\\u017E',\n  'zcy': '\\u0437',\n  'zdot': '\\u017C',\n  'zeta': '\\u03B6',\n  'zfr': '\\uD835\\uDD37',\n  'zhcy': '\\u0436',\n  'zigrarr': '\\u21DD',\n  'zopf': '\\uD835\\uDD6B',\n  'zscr': '\\uD835\\uDCCF',\n  'zwj': '\\u200D',\n  'zwnj': '\\u200C'\n}; // The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\n\nconst NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nclass TokenError extends ParseError {\n  constructor(errorMsg, tokenType, span) {\n    super(span, errorMsg);\n    this.tokenType = tokenType;\n  }\n\n}\n\nclass TokenizeResult {\n  constructor(tokens, errors, nonNormalizedIcuExpressions) {\n    this.tokens = tokens;\n    this.errors = errors;\n    this.nonNormalizedIcuExpressions = nonNormalizedIcuExpressions;\n  }\n\n}\n\nfunction tokenize(source, url, getTagDefinition, options = {}) {\n  const tokenizer = new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options);\n  tokenizer.tokenize();\n  return new TokenizeResult(mergeTextTokens(tokenizer.tokens), tokenizer.errors, tokenizer.nonNormalizedIcuExpressions);\n}\n\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n\nfunction _unexpectedCharacterErrorMsg(charCode) {\n  const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n  return `Unexpected character \"${char}\"`;\n}\n\nfunction _unknownEntityErrorMsg(entitySrc) {\n  return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\n\nfunction _unparsableEntityErrorMsg(type, entityStr) {\n  return `Unable to parse entity \"${entityStr}\" - ${type} character reference entities must end with \";\"`;\n}\n\nvar CharacterReferenceType = /*#__PURE__*/(() => {\n  CharacterReferenceType = CharacterReferenceType || {};\n  CharacterReferenceType[\"HEX\"] = \"hexadecimal\";\n  CharacterReferenceType[\"DEC\"] = \"decimal\";\n  return CharacterReferenceType;\n})();\n\nclass _ControlFlowError {\n  constructor(error) {\n    this.error = error;\n  }\n\n} // See https://www.w3.org/TR/html51/syntax.html#writing-html-documents\n\n\nclass _Tokenizer {\n  /**\r\n   * @param _file The html source file being tokenized.\r\n   * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\r\n   * @param options Configuration of the tokenization.\r\n   */\n  constructor(_file, _getTagDefinition, options) {\n    this._getTagDefinition = _getTagDefinition;\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    this._expansionCaseStack = [];\n    this._inInterpolation = false;\n    this.tokens = [];\n    this.errors = [];\n    this.nonNormalizedIcuExpressions = [];\n    this._tokenizeIcu = options.tokenizeExpansionForms || false;\n    this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n    this._leadingTriviaCodePoints = options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);\n    const range = options.range || {\n      endPos: _file.content.length,\n      startPos: 0,\n      startLine: 0,\n      startCol: 0\n    };\n    this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) : new PlainCharacterCursor(_file, range);\n    this._preserveLineEndings = options.preserveLineEndings || false;\n    this._escapedString = options.escapedString || false;\n    this._i18nNormalizeLineEndingsInICUs = options.i18nNormalizeLineEndingsInICUs || false;\n\n    try {\n      this._cursor.init();\n    } catch (e) {\n      this.handleError(e);\n    }\n  }\n\n  _processCarriageReturns(content) {\n    if (this._preserveLineEndings) {\n      return content;\n    } // https://www.w3.org/TR/html51/syntax.html#preprocessing-the-input-stream\n    // In order to keep the original position in the source, we can not\n    // pre-process it.\n    // Instead CRs are processed right before instantiating the tokens.\n\n\n    return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n  }\n\n  tokenize() {\n    while (this._cursor.peek() !== $EOF) {\n      const start = this._cursor.clone();\n\n      try {\n        if (this._attemptCharCode($LT)) {\n          if (this._attemptCharCode($BANG)) {\n            if (this._attemptCharCode($LBRACKET)) {\n              this._consumeCdata(start);\n            } else if (this._attemptCharCode($MINUS)) {\n              this._consumeComment(start);\n            } else {\n              this._consumeDocType(start);\n            }\n          } else if (this._attemptCharCode($SLASH)) {\n            this._consumeTagClose(start);\n          } else {\n            this._consumeTagOpen(start);\n          }\n        } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n          // In (possibly interpolated) text the end of the text is given by `isTextEnd()`, while\n          // the premature end of an interpolation is given by the start of a new HTML element.\n          this._consumeWithInterpolation(5\n          /* TEXT */\n          , 8\n          /* INTERPOLATION */\n          , () => this._isTextEnd(), () => this._isTagStart());\n        }\n      } catch (e) {\n        this.handleError(e);\n      }\n    }\n\n    this._beginToken(24\n    /* EOF */\n    );\n\n    this._endToken([]);\n  }\n  /**\r\n   * @returns whether an ICU token has been created\r\n   * @internal\r\n   */\n\n\n  _tokenizeExpansionForm() {\n    if (this.isExpansionFormStart()) {\n      this._consumeExpansionFormStart();\n\n      return true;\n    }\n\n    if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n      this._consumeExpansionCaseStart();\n\n      return true;\n    }\n\n    if (this._cursor.peek() === $RBRACE) {\n      if (this._isInExpansionCase()) {\n        this._consumeExpansionCaseEnd();\n\n        return true;\n      }\n\n      if (this._isInExpansionForm()) {\n        this._consumeExpansionFormEnd();\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _beginToken(type, start = this._cursor.clone()) {\n    this._currentTokenStart = start;\n    this._currentTokenType = type;\n  }\n\n  _endToken(parts, end) {\n    if (this._currentTokenStart === null) {\n      throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n    }\n\n    if (this._currentTokenType === null) {\n      throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n    }\n\n    const token = {\n      type: this._currentTokenType,\n      parts,\n      sourceSpan: (end !== null && end !== void 0 ? end : this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints)\n    };\n    this.tokens.push(token);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return token;\n  }\n\n  _createError(msg, span) {\n    if (this._isInExpansionForm()) {\n      msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n    }\n\n    const error = new TokenError(msg, this._currentTokenType, span);\n    this._currentTokenStart = null;\n    this._currentTokenType = null;\n    return new _ControlFlowError(error);\n  }\n\n  handleError(e) {\n    if (e instanceof CursorError) {\n      e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n    }\n\n    if (e instanceof _ControlFlowError) {\n      this.errors.push(e.error);\n    } else {\n      throw e;\n    }\n  }\n\n  _attemptCharCode(charCode) {\n    if (this._cursor.peek() === charCode) {\n      this._cursor.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _attemptCharCodeCaseInsensitive(charCode) {\n    if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n      this._cursor.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _requireCharCode(charCode) {\n    const location = this._cursor.clone();\n\n    if (!this._attemptCharCode(charCode)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n    }\n  }\n\n  _attemptStr(chars) {\n    const len = chars.length;\n\n    if (this._cursor.charsLeft() < len) {\n      return false;\n    }\n\n    const initialPosition = this._cursor.clone();\n\n    for (let i = 0; i < len; i++) {\n      if (!this._attemptCharCode(chars.charCodeAt(i))) {\n        // If attempting to parse the string fails, we want to reset the parser\n        // to where it was before the attempt\n        this._cursor = initialPosition;\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _attemptStrCaseInsensitive(chars) {\n    for (let i = 0; i < chars.length; i++) {\n      if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _requireStr(chars) {\n    const location = this._cursor.clone();\n\n    if (!this._attemptStr(chars)) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n    }\n  }\n\n  _attemptCharCodeUntilFn(predicate) {\n    while (!predicate(this._cursor.peek())) {\n      this._cursor.advance();\n    }\n  }\n\n  _requireCharCodeUntilFn(predicate, len) {\n    const start = this._cursor.clone();\n\n    this._attemptCharCodeUntilFn(predicate);\n\n    if (this._cursor.diff(start) < len) {\n      throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n    }\n  }\n\n  _attemptUntilChar(char) {\n    while (this._cursor.peek() !== char) {\n      this._cursor.advance();\n    }\n  }\n\n  _readChar() {\n    // Don't rely upon reading directly from `_input` as the actual char value\n    // may have been generated from an escape sequence.\n    const char = String.fromCodePoint(this._cursor.peek());\n\n    this._cursor.advance();\n\n    return char;\n  }\n\n  _consumeEntity(textTokenType) {\n    this._beginToken(9\n    /* ENCODED_ENTITY */\n    );\n\n    const start = this._cursor.clone();\n\n    this._cursor.advance();\n\n    if (this._attemptCharCode($HASH)) {\n      const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n\n      const codeStart = this._cursor.clone();\n\n      this._attemptCharCodeUntilFn(isDigitEntityEnd);\n\n      if (this._cursor.peek() != $SEMICOLON) {\n        // Advance cursor to include the peeked character in the string provided to the error\n        // message.\n        this._cursor.advance();\n\n        const entityType = isHex ? CharacterReferenceType.HEX : CharacterReferenceType.DEC;\n        throw this._createError(_unparsableEntityErrorMsg(entityType, this._cursor.getChars(start)), this._cursor.getSpan());\n      }\n\n      const strNum = this._cursor.getChars(codeStart);\n\n      this._cursor.advance();\n\n      try {\n        const charCode = parseInt(strNum, isHex ? 16 : 10);\n\n        this._endToken([String.fromCharCode(charCode), this._cursor.getChars(start)]);\n      } catch (_a) {\n        throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n      }\n    } else {\n      const nameStart = this._cursor.clone();\n\n      this._attemptCharCodeUntilFn(isNamedEntityEnd);\n\n      if (this._cursor.peek() != $SEMICOLON) {\n        // No semicolon was found so abort the encoded entity token that was in progress, and treat\n        // this as a text token\n        this._beginToken(textTokenType, start);\n\n        this._cursor = nameStart;\n\n        this._endToken(['&']);\n      } else {\n        const name = this._cursor.getChars(nameStart);\n\n        this._cursor.advance();\n\n        const char = NAMED_ENTITIES[name];\n\n        if (!char) {\n          throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n        }\n\n        this._endToken([char, `&${name};`]);\n      }\n    }\n  }\n\n  _consumeRawText(consumeEntities, endMarkerPredicate) {\n    this._beginToken(consumeEntities ? 6\n    /* ESCAPABLE_RAW_TEXT */\n    : 7\n    /* RAW_TEXT */\n    );\n\n    const parts = [];\n\n    while (true) {\n      const tagCloseStart = this._cursor.clone();\n\n      const foundEndMarker = endMarkerPredicate();\n      this._cursor = tagCloseStart;\n\n      if (foundEndMarker) {\n        break;\n      }\n\n      if (consumeEntities && this._cursor.peek() === $AMPERSAND) {\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n\n        parts.length = 0;\n\n        this._consumeEntity(6\n        /* ESCAPABLE_RAW_TEXT */\n        );\n\n        this._beginToken(6\n        /* ESCAPABLE_RAW_TEXT */\n        );\n      } else {\n        parts.push(this._readChar());\n      }\n    }\n\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n\n  _consumeComment(start) {\n    this._beginToken(10\n    /* COMMENT_START */\n    , start);\n\n    this._requireCharCode($MINUS);\n\n    this._endToken([]);\n\n    this._consumeRawText(false, () => this._attemptStr('-->'));\n\n    this._beginToken(11\n    /* COMMENT_END */\n    );\n\n    this._requireStr('-->');\n\n    this._endToken([]);\n  }\n\n  _consumeCdata(start) {\n    this._beginToken(12\n    /* CDATA_START */\n    , start);\n\n    this._requireStr('CDATA[');\n\n    this._endToken([]);\n\n    this._consumeRawText(false, () => this._attemptStr(']]>'));\n\n    this._beginToken(13\n    /* CDATA_END */\n    );\n\n    this._requireStr(']]>');\n\n    this._endToken([]);\n  }\n\n  _consumeDocType(start) {\n    this._beginToken(18\n    /* DOC_TYPE */\n    , start);\n\n    const contentStart = this._cursor.clone();\n\n    this._attemptUntilChar($GT);\n\n    const content = this._cursor.getChars(contentStart);\n\n    this._cursor.advance();\n\n    this._endToken([content]);\n  }\n\n  _consumePrefixAndName() {\n    const nameOrPrefixStart = this._cursor.clone();\n\n    let prefix = '';\n\n    while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n      this._cursor.advance();\n    }\n\n    let nameStart;\n\n    if (this._cursor.peek() === $COLON) {\n      prefix = this._cursor.getChars(nameOrPrefixStart);\n\n      this._cursor.advance();\n\n      nameStart = this._cursor.clone();\n    } else {\n      nameStart = nameOrPrefixStart;\n    }\n\n    this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n\n    const name = this._cursor.getChars(nameStart);\n\n    return [prefix, name];\n  }\n\n  _consumeTagOpen(start) {\n    let tagName;\n    let prefix;\n    let openTagToken;\n\n    try {\n      if (!isAsciiLetter(this._cursor.peek())) {\n        throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n      }\n\n      openTagToken = this._consumeTagOpenStart(start);\n      prefix = openTagToken.parts[0];\n      tagName = openTagToken.parts[1];\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT && this._cursor.peek() !== $LT && this._cursor.peek() !== $EOF) {\n        this._consumeAttributeName();\n\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n\n        if (this._attemptCharCode($EQ)) {\n          this._attemptCharCodeUntilFn(isNotWhitespace);\n\n          this._consumeAttributeValue();\n        }\n\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n      }\n\n      this._consumeTagOpenEnd();\n    } catch (e) {\n      if (e instanceof _ControlFlowError) {\n        if (openTagToken) {\n          // We errored before we could close the opening tag, so it is incomplete.\n          openTagToken.type = 4\n          /* INCOMPLETE_TAG_OPEN */\n          ;\n        } else {\n          // When the start tag is invalid, assume we want a \"<\" as text.\n          // Back to back text tokens are merged at the end.\n          this._beginToken(5\n          /* TEXT */\n          , start);\n\n          this._endToken(['<']);\n        }\n\n        return;\n      }\n\n      throw e;\n    }\n\n    const contentTokenType = this._getTagDefinition(tagName).getContentType(prefix);\n\n    if (contentTokenType === TagContentType.RAW_TEXT) {\n      this._consumeRawTextWithTagClose(prefix, tagName, false);\n    } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n      this._consumeRawTextWithTagClose(prefix, tagName, true);\n    }\n  }\n\n  _consumeRawTextWithTagClose(prefix, tagName, consumeEntities) {\n    this._consumeRawText(consumeEntities, () => {\n      if (!this._attemptCharCode($LT)) return false;\n      if (!this._attemptCharCode($SLASH)) return false;\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      if (!this._attemptStrCaseInsensitive(tagName)) return false;\n\n      this._attemptCharCodeUntilFn(isNotWhitespace);\n\n      return this._attemptCharCode($GT);\n    });\n\n    this._beginToken(3\n    /* TAG_CLOSE */\n    );\n\n    this._requireCharCodeUntilFn(code => code === $GT, 3);\n\n    this._cursor.advance(); // Consume the `>`\n\n\n    this._endToken([prefix, tagName]);\n  }\n\n  _consumeTagOpenStart(start) {\n    this._beginToken(0\n    /* TAG_OPEN_START */\n    , start);\n\n    const parts = this._consumePrefixAndName();\n\n    return this._endToken(parts);\n  }\n\n  _consumeAttributeName() {\n    const attrNameStart = this._cursor.peek();\n\n    if (attrNameStart === $SQ || attrNameStart === $DQ) {\n      throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n    }\n\n    this._beginToken(14\n    /* ATTR_NAME */\n    );\n\n    const prefixAndName = this._consumePrefixAndName();\n\n    this._endToken(prefixAndName);\n  }\n\n  _consumeAttributeValue() {\n    let value;\n\n    if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n      const quoteChar = this._cursor.peek();\n\n      this._consumeQuote(quoteChar); // In an attribute then end of the attribute value and the premature end to an interpolation\n      // are both triggered by the `quoteChar`.\n\n\n      const endPredicate = () => this._cursor.peek() === quoteChar;\n\n      this._consumeWithInterpolation(16\n      /* ATTR_VALUE_TEXT */\n      , 17\n      /* ATTR_VALUE_INTERPOLATION */\n      , endPredicate, endPredicate);\n\n      this._consumeQuote(quoteChar);\n    } else {\n      const endPredicate = () => isNameEnd(this._cursor.peek());\n\n      this._consumeWithInterpolation(16\n      /* ATTR_VALUE_TEXT */\n      , 17\n      /* ATTR_VALUE_INTERPOLATION */\n      , endPredicate, endPredicate);\n    }\n  }\n\n  _consumeQuote(quoteChar) {\n    this._beginToken(15\n    /* ATTR_QUOTE */\n    );\n\n    this._requireCharCode(quoteChar);\n\n    this._endToken([String.fromCodePoint(quoteChar)]);\n  }\n\n  _consumeTagOpenEnd() {\n    const tokenType = this._attemptCharCode($SLASH) ? 2\n    /* TAG_OPEN_END_VOID */\n    : 1\n    /* TAG_OPEN_END */\n    ;\n\n    this._beginToken(tokenType);\n\n    this._requireCharCode($GT);\n\n    this._endToken([]);\n  }\n\n  _consumeTagClose(start) {\n    this._beginToken(3\n    /* TAG_CLOSE */\n    , start);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    const prefixAndName = this._consumePrefixAndName();\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._requireCharCode($GT);\n\n    this._endToken(prefixAndName);\n  }\n\n  _consumeExpansionFormStart() {\n    this._beginToken(19\n    /* EXPANSION_FORM_START */\n    );\n\n    this._requireCharCode($LBRACE);\n\n    this._endToken([]);\n\n    this._expansionCaseStack.push(19\n    /* EXPANSION_FORM_START */\n    );\n\n    this._beginToken(7\n    /* RAW_TEXT */\n    );\n\n    const condition = this._readUntil($COMMA);\n\n    const normalizedCondition = this._processCarriageReturns(condition);\n\n    if (this._i18nNormalizeLineEndingsInICUs) {\n      // We explicitly want to normalize line endings for this text.\n      this._endToken([normalizedCondition]);\n    } else {\n      // We are not normalizing line endings.\n      const conditionToken = this._endToken([condition]);\n\n      if (normalizedCondition !== condition) {\n        this.nonNormalizedIcuExpressions.push(conditionToken);\n      }\n    }\n\n    this._requireCharCode($COMMA);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(7\n    /* RAW_TEXT */\n    );\n\n    const type = this._readUntil($COMMA);\n\n    this._endToken([type]);\n\n    this._requireCharCode($COMMA);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n  }\n\n  _consumeExpansionCaseStart() {\n    this._beginToken(20\n    /* EXPANSION_CASE_VALUE */\n    );\n\n    const value = this._readUntil($LBRACE).trim();\n\n    this._endToken([value]);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._beginToken(21\n    /* EXPANSION_CASE_EXP_START */\n    );\n\n    this._requireCharCode($LBRACE);\n\n    this._endToken([]);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.push(21\n    /* EXPANSION_CASE_EXP_START */\n    );\n  }\n\n  _consumeExpansionCaseEnd() {\n    this._beginToken(22\n    /* EXPANSION_CASE_EXP_END */\n    );\n\n    this._requireCharCode($RBRACE);\n\n    this._endToken([]);\n\n    this._attemptCharCodeUntilFn(isNotWhitespace);\n\n    this._expansionCaseStack.pop();\n  }\n\n  _consumeExpansionFormEnd() {\n    this._beginToken(23\n    /* EXPANSION_FORM_END */\n    );\n\n    this._requireCharCode($RBRACE);\n\n    this._endToken([]);\n\n    this._expansionCaseStack.pop();\n  }\n  /**\r\n   * Consume a string that may contain interpolation expressions.\r\n   *\r\n   * The first token consumed will be of `tokenType` and then there will be alternating\r\n   * `interpolationTokenType` and `tokenType` tokens until the `endPredicate()` returns true.\r\n   *\r\n   * If an interpolation token ends prematurely it will have no end marker in its `parts` array.\r\n   *\r\n   * @param textTokenType the kind of tokens to interleave around interpolation tokens.\r\n   * @param interpolationTokenType the kind of tokens that contain interpolation.\r\n   * @param endPredicate a function that should return true when we should stop consuming.\r\n   * @param endInterpolation a function that should return true if there is a premature end to an\r\n   *     interpolation expression - i.e. before we get to the normal interpolation closing marker.\r\n   */\n\n\n  _consumeWithInterpolation(textTokenType, interpolationTokenType, endPredicate, endInterpolation) {\n    this._beginToken(textTokenType);\n\n    const parts = [];\n\n    while (!endPredicate()) {\n      const current = this._cursor.clone();\n\n      if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n        this._endToken([this._processCarriageReturns(parts.join(''))], current);\n\n        parts.length = 0;\n\n        this._consumeInterpolation(interpolationTokenType, current, endInterpolation);\n\n        this._beginToken(textTokenType);\n      } else if (this._cursor.peek() === $AMPERSAND) {\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n\n        parts.length = 0;\n\n        this._consumeEntity(textTokenType);\n\n        this._beginToken(textTokenType);\n      } else {\n        parts.push(this._readChar());\n      }\n    } // It is possible that an interpolation was started but not ended inside this text token.\n    // Make sure that we reset the state of the lexer correctly.\n\n\n    this._inInterpolation = false;\n\n    this._endToken([this._processCarriageReturns(parts.join(''))]);\n  }\n  /**\r\n   * Consume a block of text that has been interpreted as an Angular interpolation.\r\n   *\r\n   * @param interpolationTokenType the type of the interpolation token to generate.\r\n   * @param interpolationStart a cursor that points to the start of this interpolation.\r\n   * @param prematureEndPredicate a function that should return true if the next characters indicate\r\n   *     an end to the interpolation before its normal closing marker.\r\n   */\n\n\n  _consumeInterpolation(interpolationTokenType, interpolationStart, prematureEndPredicate) {\n    const parts = [];\n\n    this._beginToken(interpolationTokenType, interpolationStart);\n\n    parts.push(this._interpolationConfig.start); // Find the end of the interpolation, ignoring content inside quotes.\n\n    const expressionStart = this._cursor.clone();\n\n    let inQuote = null;\n    let inComment = false;\n\n    while (this._cursor.peek() !== $EOF && (prematureEndPredicate === null || !prematureEndPredicate())) {\n      const current = this._cursor.clone();\n\n      if (this._isTagStart()) {\n        // We are starting what looks like an HTML element in the middle of this interpolation.\n        // Reset the cursor to before the `<` character and end the interpolation token.\n        // (This is actually wrong but here for backward compatibility).\n        this._cursor = current;\n        parts.push(this._getProcessedChars(expressionStart, current));\n\n        this._endToken(parts);\n\n        return;\n      }\n\n      if (inQuote === null) {\n        if (this._attemptStr(this._interpolationConfig.end)) {\n          // We are not in a string, and we hit the end interpolation marker\n          parts.push(this._getProcessedChars(expressionStart, current));\n          parts.push(this._interpolationConfig.end);\n\n          this._endToken(parts);\n\n          return;\n        } else if (this._attemptStr('//')) {\n          // Once we are in a comment we ignore any quotes\n          inComment = true;\n        }\n      }\n\n      const char = this._cursor.peek();\n\n      this._cursor.advance();\n\n      if (char === $BACKSLASH) {\n        // Skip the next character because it was escaped.\n        this._cursor.advance();\n      } else if (char === inQuote) {\n        // Exiting the current quoted string\n        inQuote = null;\n      } else if (!inComment && inQuote === null && isQuote(char)) {\n        // Entering a new quoted string\n        inQuote = char;\n      }\n    } // We hit EOF without finding a closing interpolation marker\n\n\n    parts.push(this._getProcessedChars(expressionStart, this._cursor));\n\n    this._endToken(parts);\n  }\n\n  _getProcessedChars(start, end) {\n    return this._processCarriageReturns(end.getChars(start));\n  }\n\n  _isTextEnd() {\n    if (this._isTagStart() || this._cursor.peek() === $EOF) {\n      return true;\n    }\n\n    if (this._tokenizeIcu && !this._inInterpolation) {\n      if (this.isExpansionFormStart()) {\n        // start of an expansion form\n        return true;\n      }\n\n      if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n        // end of and expansion case\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\r\n   * Returns true if the current cursor is pointing to the start of a tag\r\n   * (opening/closing/comments/cdata/etc).\r\n   */\n\n\n  _isTagStart() {\n    if (this._cursor.peek() === $LT) {\n      // We assume that `<` followed by whitespace is not the start of an HTML element.\n      const tmp = this._cursor.clone();\n\n      tmp.advance(); // If the next character is alphabetic, ! nor / then it is a tag start\n\n      const code = tmp.peek();\n\n      if ($a <= code && code <= $z || $A <= code && code <= $Z || code === $SLASH || code === $BANG) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _readUntil(char) {\n    const start = this._cursor.clone();\n\n    this._attemptUntilChar(char);\n\n    return this._cursor.getChars(start);\n  }\n\n  _isInExpansionCase() {\n    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 21\n    /* EXPANSION_CASE_EXP_START */\n    ;\n  }\n\n  _isInExpansionForm() {\n    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 19\n    /* EXPANSION_FORM_START */\n    ;\n  }\n\n  isExpansionFormStart() {\n    if (this._cursor.peek() !== $LBRACE) {\n      return false;\n    }\n\n    if (this._interpolationConfig) {\n      const start = this._cursor.clone();\n\n      const isInterpolation = this._attemptStr(this._interpolationConfig.start);\n\n      this._cursor = start;\n      return !isInterpolation;\n    }\n\n    return true;\n  }\n\n}\n\nfunction isNotWhitespace(code) {\n  return !isWhitespace(code) || code === $EOF;\n}\n\nfunction isNameEnd(code) {\n  return isWhitespace(code) || code === $GT || code === $LT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ || code === $EOF;\n}\n\nfunction isPrefixEnd(code) {\n  return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);\n}\n\nfunction isDigitEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);\n}\n\nfunction isNamedEntityEnd(code) {\n  return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);\n}\n\nfunction isExpansionCaseStart(peek) {\n  return peek !== $RBRACE;\n}\n\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n  return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);\n}\n\nfunction toUpperCaseCharCode(code) {\n  return code >= $a && code <= $z ? code - $a + $A : code;\n}\n\nfunction mergeTextTokens(srcTokens) {\n  const dstTokens = [];\n  let lastDstToken = undefined;\n\n  for (let i = 0; i < srcTokens.length; i++) {\n    const token = srcTokens[i];\n\n    if (lastDstToken && lastDstToken.type === 5\n    /* TEXT */\n    && token.type === 5\n    /* TEXT */\n    || lastDstToken && lastDstToken.type === 16\n    /* ATTR_VALUE_TEXT */\n    && token.type === 16\n    /* ATTR_VALUE_TEXT */\n    ) {\n      lastDstToken.parts[0] += token.parts[0];\n      lastDstToken.sourceSpan.end = token.sourceSpan.end;\n    } else {\n      lastDstToken = token;\n      dstTokens.push(lastDstToken);\n    }\n  }\n\n  return dstTokens;\n}\n\nclass PlainCharacterCursor {\n  constructor(fileOrCursor, range) {\n    if (fileOrCursor instanceof PlainCharacterCursor) {\n      this.file = fileOrCursor.file;\n      this.input = fileOrCursor.input;\n      this.end = fileOrCursor.end;\n      const state = fileOrCursor.state; // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.\n      // In ES5 bundles the object spread operator is translated into the `__assign` helper, which\n      // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is\n      // called in tight loops, this difference matters.\n\n      this.state = {\n        peek: state.peek,\n        offset: state.offset,\n        line: state.line,\n        column: state.column\n      };\n    } else {\n      if (!range) {\n        throw new Error('Programming error: the range argument must be provided with a file argument.');\n      }\n\n      this.file = fileOrCursor;\n      this.input = fileOrCursor.content;\n      this.end = range.endPos;\n      this.state = {\n        peek: -1,\n        offset: range.startPos,\n        line: range.startLine,\n        column: range.startCol\n      };\n    }\n  }\n\n  clone() {\n    return new PlainCharacterCursor(this);\n  }\n\n  peek() {\n    return this.state.peek;\n  }\n\n  charsLeft() {\n    return this.end - this.state.offset;\n  }\n\n  diff(other) {\n    return this.state.offset - other.state.offset;\n  }\n\n  advance() {\n    this.advanceState(this.state);\n  }\n\n  init() {\n    this.updatePeek(this.state);\n  }\n\n  getSpan(start, leadingTriviaCodePoints) {\n    start = start || this;\n    let fullStart = start;\n\n    if (leadingTriviaCodePoints) {\n      while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n        if (fullStart === start) {\n          start = start.clone();\n        }\n\n        start.advance();\n      }\n    }\n\n    const startLocation = this.locationFromCursor(start);\n    const endLocation = this.locationFromCursor(this);\n    const fullStartLocation = fullStart !== start ? this.locationFromCursor(fullStart) : startLocation;\n    return new ParseSourceSpan(startLocation, endLocation, fullStartLocation);\n  }\n\n  getChars(start) {\n    return this.input.substring(start.state.offset, this.state.offset);\n  }\n\n  charAt(pos) {\n    return this.input.charCodeAt(pos);\n  }\n\n  advanceState(state) {\n    if (state.offset >= this.end) {\n      this.state = state;\n      throw new CursorError('Unexpected character \"EOF\"', this);\n    }\n\n    const currentChar = this.charAt(state.offset);\n\n    if (currentChar === $LF) {\n      state.line++;\n      state.column = 0;\n    } else if (!isNewLine(currentChar)) {\n      state.column++;\n    }\n\n    state.offset++;\n    this.updatePeek(state);\n  }\n\n  updatePeek(state) {\n    state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n  }\n\n  locationFromCursor(cursor) {\n    return new ParseLocation(cursor.file, cursor.state.offset, cursor.state.line, cursor.state.column);\n  }\n\n}\n\nclass EscapedCharacterCursor extends PlainCharacterCursor {\n  constructor(fileOrCursor, range) {\n    if (fileOrCursor instanceof EscapedCharacterCursor) {\n      super(fileOrCursor);\n      this.internalState = Object.assign({}, fileOrCursor.internalState);\n    } else {\n      super(fileOrCursor, range);\n      this.internalState = this.state;\n    }\n  }\n\n  advance() {\n    this.state = this.internalState;\n    super.advance();\n    this.processEscapeSequence();\n  }\n\n  init() {\n    super.init();\n    this.processEscapeSequence();\n  }\n\n  clone() {\n    return new EscapedCharacterCursor(this);\n  }\n\n  getChars(start) {\n    const cursor = start.clone();\n    let chars = '';\n\n    while (cursor.internalState.offset < this.internalState.offset) {\n      chars += String.fromCodePoint(cursor.peek());\n      cursor.advance();\n    }\n\n    return chars;\n  }\n  /**\r\n   * Process the escape sequence that starts at the current position in the text.\r\n   *\r\n   * This method is called to ensure that `peek` has the unescaped value of escape sequences.\r\n   */\n\n\n  processEscapeSequence() {\n    const peek = () => this.internalState.peek;\n\n    if (peek() === $BACKSLASH) {\n      // We have hit an escape sequence so we need the internal state to become independent\n      // of the external state.\n      this.internalState = Object.assign({}, this.state); // Move past the backslash\n\n      this.advanceState(this.internalState); // First check for standard control char sequences\n\n      if (peek() === $n) {\n        this.state.peek = $LF;\n      } else if (peek() === $r) {\n        this.state.peek = $CR;\n      } else if (peek() === $v) {\n        this.state.peek = $VTAB;\n      } else if (peek() === $t) {\n        this.state.peek = $TAB;\n      } else if (peek() === $b) {\n        this.state.peek = $BSPACE;\n      } else if (peek() === $f) {\n        this.state.peek = $FF;\n      } // Now consider more complex sequences\n      else if (peek() === $u) {\n        // Unicode code-point sequence\n        this.advanceState(this.internalState); // advance past the `u` char\n\n        if (peek() === $LBRACE) {\n          // Variable length Unicode, e.g. `\\x{123}`\n          this.advanceState(this.internalState); // advance past the `{` char\n          // Advance past the variable number of hex digits until we hit a `}` char\n\n          const digitStart = this.clone();\n          let length = 0;\n\n          while (peek() !== $RBRACE) {\n            this.advanceState(this.internalState);\n            length++;\n          }\n\n          this.state.peek = this.decodeHexDigits(digitStart, length);\n        } else {\n          // Fixed length Unicode, e.g. `\\u1234`\n          const digitStart = this.clone();\n          this.advanceState(this.internalState);\n          this.advanceState(this.internalState);\n          this.advanceState(this.internalState);\n          this.state.peek = this.decodeHexDigits(digitStart, 4);\n        }\n      } else if (peek() === $x) {\n        // Hex char code, e.g. `\\x2F`\n        this.advanceState(this.internalState); // advance past the `x` char\n\n        const digitStart = this.clone();\n        this.advanceState(this.internalState);\n        this.state.peek = this.decodeHexDigits(digitStart, 2);\n      } else if (isOctalDigit(peek())) {\n        // Octal char code, e.g. `\\012`,\n        let octal = '';\n        let length = 0;\n        let previous = this.clone();\n\n        while (isOctalDigit(peek()) && length < 3) {\n          previous = this.clone();\n          octal += String.fromCodePoint(peek());\n          this.advanceState(this.internalState);\n          length++;\n        }\n\n        this.state.peek = parseInt(octal, 8); // Backup one char\n\n        this.internalState = previous.internalState;\n      } else if (isNewLine(this.internalState.peek)) {\n        // Line continuation `\\` followed by a new line\n        this.advanceState(this.internalState); // advance over the newline\n\n        this.state = this.internalState;\n      } else {\n        // If none of the `if` blocks were executed then we just have an escaped normal character.\n        // In that case we just, effectively, skip the backslash from the character.\n        this.state.peek = this.internalState.peek;\n      }\n    }\n  }\n\n  decodeHexDigits(start, length) {\n    const hex = this.input.substr(start.internalState.offset, length);\n    const charCode = parseInt(hex, 16);\n\n    if (!isNaN(charCode)) {\n      return charCode;\n    } else {\n      start.state = start.internalState;\n      throw new CursorError('Invalid hexadecimal escape sequence', start);\n    }\n  }\n\n}\n\nclass CursorError {\n  constructor(msg, cursor) {\n    this.msg = msg;\n    this.cursor = cursor;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass TreeError extends ParseError {\n  constructor(elementName, span, msg) {\n    super(span, msg);\n    this.elementName = elementName;\n  }\n\n  static create(elementName, span, msg) {\n    return new TreeError(elementName, span, msg);\n  }\n\n}\n\nclass ParseTreeResult {\n  constructor(rootNodes, errors) {\n    this.rootNodes = rootNodes;\n    this.errors = errors;\n  }\n\n}\n\nclass Parser {\n  constructor(getTagDefinition) {\n    this.getTagDefinition = getTagDefinition;\n  }\n\n  parse(source, url, options) {\n    const tokenizeResult = tokenize(source, url, this.getTagDefinition, options);\n    const parser = new _TreeBuilder(tokenizeResult.tokens, this.getTagDefinition);\n    parser.build();\n    return new ParseTreeResult(parser.rootNodes, tokenizeResult.errors.concat(parser.errors));\n  }\n\n}\n\nclass _TreeBuilder {\n  constructor(tokens, getTagDefinition) {\n    this.tokens = tokens;\n    this.getTagDefinition = getTagDefinition;\n    this._index = -1;\n    this._elementStack = [];\n    this.rootNodes = [];\n    this.errors = [];\n\n    this._advance();\n  }\n\n  build() {\n    while (this._peek.type !== 24\n    /* EOF */\n    ) {\n      if (this._peek.type === 0\n      /* TAG_OPEN_START */\n      || this._peek.type === 4\n      /* INCOMPLETE_TAG_OPEN */\n      ) {\n        this._consumeStartTag(this._advance());\n      } else if (this._peek.type === 3\n      /* TAG_CLOSE */\n      ) {\n        this._consumeEndTag(this._advance());\n      } else if (this._peek.type === 12\n      /* CDATA_START */\n      ) {\n        this._closeVoidElement();\n\n        this._consumeCdata(this._advance());\n      } else if (this._peek.type === 10\n      /* COMMENT_START */\n      ) {\n        this._closeVoidElement();\n\n        this._consumeComment(this._advance());\n      } else if (this._peek.type === 5\n      /* TEXT */\n      || this._peek.type === 7\n      /* RAW_TEXT */\n      || this._peek.type === 6\n      /* ESCAPABLE_RAW_TEXT */\n      ) {\n        this._closeVoidElement();\n\n        this._consumeText(this._advance());\n      } else if (this._peek.type === 19\n      /* EXPANSION_FORM_START */\n      ) {\n        this._consumeExpansion(this._advance());\n      } else {\n        // Skip all other tokens...\n        this._advance();\n      }\n    }\n  }\n\n  _advance() {\n    const prev = this._peek;\n\n    if (this._index < this.tokens.length - 1) {\n      // Note: there is always an EOF token at the end\n      this._index++;\n    }\n\n    this._peek = this.tokens[this._index];\n    return prev;\n  }\n\n  _advanceIf(type) {\n    if (this._peek.type === type) {\n      return this._advance();\n    }\n\n    return null;\n  }\n\n  _consumeCdata(_startToken) {\n    this._consumeText(this._advance());\n\n    this._advanceIf(13\n    /* CDATA_END */\n    );\n  }\n\n  _consumeComment(token) {\n    const text = this._advanceIf(7\n    /* RAW_TEXT */\n    );\n\n    this._advanceIf(11\n    /* COMMENT_END */\n    );\n\n    const value = text != null ? text.parts[0].trim() : null;\n\n    this._addToParent(new Comment$1(value, token.sourceSpan));\n  }\n\n  _consumeExpansion(token) {\n    const switchValue = this._advance();\n\n    const type = this._advance();\n\n    const cases = []; // read =\n\n    while (this._peek.type === 20\n    /* EXPANSION_CASE_VALUE */\n    ) {\n      const expCase = this._parseExpansionCase();\n\n      if (!expCase) return; // error\n\n      cases.push(expCase);\n    } // read the final }\n\n\n    if (this._peek.type !== 23\n    /* EXPANSION_FORM_END */\n    ) {\n      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n      return;\n    }\n\n    const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end, token.sourceSpan.fullStart);\n\n    this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n\n    this._advance();\n  }\n\n  _parseExpansionCase() {\n    const value = this._advance(); // read {\n\n\n    if (this._peek.type !== 21\n    /* EXPANSION_CASE_EXP_START */\n    ) {\n      this.errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n      return null;\n    } // read until }\n\n\n    const start = this._advance();\n\n    const exp = this._collectExpansionExpTokens(start);\n\n    if (!exp) return null;\n\n    const end = this._advance();\n\n    exp.push({\n      type: 24\n      /* EOF */\n      ,\n      parts: [],\n      sourceSpan: end.sourceSpan\n    }); // parse everything in between { and }\n\n    const expansionCaseParser = new _TreeBuilder(exp, this.getTagDefinition);\n    expansionCaseParser.build();\n\n    if (expansionCaseParser.errors.length > 0) {\n      this.errors = this.errors.concat(expansionCaseParser.errors);\n      return null;\n    }\n\n    const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end, value.sourceSpan.fullStart);\n    const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end, start.sourceSpan.fullStart);\n    return new ExpansionCase(value.parts[0], expansionCaseParser.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n  }\n\n  _collectExpansionExpTokens(start) {\n    const exp = [];\n    const expansionFormStack = [21\n    /* EXPANSION_CASE_EXP_START */\n    ];\n\n    while (true) {\n      if (this._peek.type === 19\n      /* EXPANSION_FORM_START */\n      || this._peek.type === 21\n      /* EXPANSION_CASE_EXP_START */\n      ) {\n        expansionFormStack.push(this._peek.type);\n      }\n\n      if (this._peek.type === 22\n      /* EXPANSION_CASE_EXP_END */\n      ) {\n        if (lastOnStack(expansionFormStack, 21\n        /* EXPANSION_CASE_EXP_START */\n        )) {\n          expansionFormStack.pop();\n          if (expansionFormStack.length === 0) return exp;\n        } else {\n          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === 23\n      /* EXPANSION_FORM_END */\n      ) {\n        if (lastOnStack(expansionFormStack, 19\n        /* EXPANSION_FORM_START */\n        )) {\n          expansionFormStack.pop();\n        } else {\n          this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n          return null;\n        }\n      }\n\n      if (this._peek.type === 24\n      /* EOF */\n      ) {\n        this.errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n        return null;\n      }\n\n      exp.push(this._advance());\n    }\n  }\n\n  _consumeText(token) {\n    const tokens = [token];\n    const startSpan = token.sourceSpan;\n    let text = token.parts[0];\n\n    if (text.length > 0 && text[0] === '\\n') {\n      const parent = this._getParentElement();\n\n      if (parent != null && parent.children.length === 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {\n        text = text.substring(1);\n        tokens[0] = {\n          type: token.type,\n          sourceSpan: token.sourceSpan,\n          parts: [text]\n        };\n      }\n    }\n\n    while (this._peek.type === 8\n    /* INTERPOLATION */\n    || this._peek.type === 5\n    /* TEXT */\n    || this._peek.type === 9\n    /* ENCODED_ENTITY */\n    ) {\n      token = this._advance();\n      tokens.push(token);\n\n      if (token.type === 8\n      /* INTERPOLATION */\n      ) {\n        // For backward compatibility we decode HTML entities that appear in interpolation\n        // expressions. This is arguably a bug, but it could be a considerable breaking change to\n        // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n        // chain after View Engine has been removed.\n        text += token.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n      } else if (token.type === 9\n      /* ENCODED_ENTITY */\n      ) {\n        text += token.parts[0];\n      } else {\n        text += token.parts.join('');\n      }\n    }\n\n    if (text.length > 0) {\n      const endSpan = token.sourceSpan;\n\n      this._addToParent(new Text$3(text, new ParseSourceSpan(startSpan.start, endSpan.end, startSpan.fullStart, startSpan.details), tokens));\n    }\n  }\n\n  _closeVoidElement() {\n    const el = this._getParentElement();\n\n    if (el && this.getTagDefinition(el.name).isVoid) {\n      this._elementStack.pop();\n    }\n  }\n\n  _consumeStartTag(startTagToken) {\n    const [prefix, name] = startTagToken.parts;\n    const attrs = [];\n\n    while (this._peek.type === 14\n    /* ATTR_NAME */\n    ) {\n      attrs.push(this._consumeAttr(this._advance()));\n    }\n\n    const fullName = this._getElementFullName(prefix, name, this._getParentElement());\n\n    let selfClosing = false; // Note: There could have been a tokenizer error\n    // so that we don't get a token for the end tag...\n\n    if (this._peek.type === 2\n    /* TAG_OPEN_END_VOID */\n    ) {\n      this._advance();\n\n      selfClosing = true;\n      const tagDef = this.getTagDefinition(fullName);\n\n      if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n        this.errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n      }\n    } else if (this._peek.type === 1\n    /* TAG_OPEN_END */\n    ) {\n      this._advance();\n\n      selfClosing = false;\n    }\n\n    const end = this._peek.sourceSpan.fullStart;\n    const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart); // Create a separate `startSpan` because `span` will be modified when there is an `end` span.\n\n    const startSpan = new ParseSourceSpan(startTagToken.sourceSpan.start, end, startTagToken.sourceSpan.fullStart);\n    const el = new Element$1(fullName, attrs, [], span, startSpan, undefined);\n\n    this._pushElement(el);\n\n    if (selfClosing) {\n      // Elements that are self-closed have their `endSourceSpan` set to the full span, as the\n      // element start tag also represents the end tag.\n      this._popElement(fullName, span);\n    } else if (startTagToken.type === 4\n    /* INCOMPLETE_TAG_OPEN */\n    ) {\n      // We already know the opening tag is not complete, so it is unlikely it has a corresponding\n      // close tag. Let's optimistically parse it as a full element and emit an error.\n      this._popElement(fullName, null);\n\n      this.errors.push(TreeError.create(fullName, span, `Opening tag \"${fullName}\" not terminated.`));\n    }\n  }\n\n  _pushElement(el) {\n    const parentEl = this._getParentElement();\n\n    if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n      this._elementStack.pop();\n    }\n\n    this._addToParent(el);\n\n    this._elementStack.push(el);\n  }\n\n  _consumeEndTag(endTagToken) {\n    const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n\n    if (this.getTagDefinition(fullName).isVoid) {\n      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n    } else if (!this._popElement(fullName, endTagToken.sourceSpan)) {\n      const errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n      this.errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n    }\n  }\n  /**\r\n   * Closes the nearest element with the tag name `fullName` in the parse tree.\r\n   * `endSourceSpan` is the span of the closing tag, or null if the element does\r\n   * not have a closing tag (for example, this happens when an incomplete\r\n   * opening tag is recovered).\r\n   */\n\n\n  _popElement(fullName, endSourceSpan) {\n    let unexpectedCloseTagDetected = false;\n\n    for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n      const el = this._elementStack[stackIndex];\n\n      if (el.name === fullName) {\n        // Record the parse span with the element that is being closed. Any elements that are\n        // removed from the element stack at this point are closed implicitly, so they won't get\n        // an end source span (as there is no explicit closing element).\n        el.endSourceSpan = endSourceSpan;\n        el.sourceSpan.end = endSourceSpan !== null ? endSourceSpan.end : el.sourceSpan.end;\n\n        this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n\n        return !unexpectedCloseTagDetected;\n      }\n\n      if (!this.getTagDefinition(el.name).closedByParent) {\n        // Note that we encountered an unexpected close tag but continue processing the element\n        // stack so we can assign an `endSourceSpan` if there is a corresponding start tag for this\n        // end tag in the stack.\n        unexpectedCloseTagDetected = true;\n      }\n    }\n\n    return false;\n  }\n\n  _consumeAttr(attrName) {\n    const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n    let attrEnd = attrName.sourceSpan.end; // Consume any quote\n\n    if (this._peek.type === 15\n    /* ATTR_QUOTE */\n    ) {\n      this._advance();\n    } // Consume the attribute value\n\n\n    let value = '';\n    const valueTokens = [];\n    let valueStartSpan = undefined;\n    let valueEnd = undefined; // NOTE: We need to use a new variable `nextTokenType` here to hide the actual type of\n    // `_peek.type` from TS. Otherwise TS will narrow the type of `_peek.type` preventing it from\n    // being able to consider `ATTR_VALUE_INTERPOLATION` as an option. This is because TS is not\n    // able to see that `_advance()` will actually mutate `_peek`.\n\n    const nextTokenType = this._peek.type;\n\n    if (nextTokenType === 16\n    /* ATTR_VALUE_TEXT */\n    ) {\n      valueStartSpan = this._peek.sourceSpan;\n      valueEnd = this._peek.sourceSpan.end;\n\n      while (this._peek.type === 16\n      /* ATTR_VALUE_TEXT */\n      || this._peek.type === 17\n      /* ATTR_VALUE_INTERPOLATION */\n      || this._peek.type === 9\n      /* ENCODED_ENTITY */\n      ) {\n        const valueToken = this._advance();\n\n        valueTokens.push(valueToken);\n\n        if (valueToken.type === 17\n        /* ATTR_VALUE_INTERPOLATION */\n        ) {\n          // For backward compatibility we decode HTML entities that appear in interpolation\n          // expressions. This is arguably a bug, but it could be a considerable breaking change to\n          // fix it. It should be addressed in a larger project to refactor the entire parser/lexer\n          // chain after View Engine has been removed.\n          value += valueToken.parts.join('').replace(/&([^;]+);/g, decodeEntity);\n        } else if (valueToken.type === 9\n        /* ENCODED_ENTITY */\n        ) {\n          value += valueToken.parts[0];\n        } else {\n          value += valueToken.parts.join('');\n        }\n\n        valueEnd = attrEnd = valueToken.sourceSpan.end;\n      }\n    } // Consume any quote\n\n\n    if (this._peek.type === 15\n    /* ATTR_QUOTE */\n    ) {\n      const quoteToken = this._advance();\n\n      attrEnd = quoteToken.sourceSpan.end;\n    }\n\n    const valueSpan = valueStartSpan && valueEnd && new ParseSourceSpan(valueStartSpan.start, valueEnd, valueStartSpan.fullStart);\n    return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, attrEnd, attrName.sourceSpan.fullStart), attrName.sourceSpan, valueSpan, valueTokens.length > 0 ? valueTokens : undefined, undefined);\n  }\n\n  _getParentElement() {\n    return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n  }\n\n  _addToParent(node) {\n    const parent = this._getParentElement();\n\n    if (parent != null) {\n      parent.children.push(node);\n    } else {\n      this.rootNodes.push(node);\n    }\n  }\n\n  _getElementFullName(prefix, localName, parentElement) {\n    if (prefix === '') {\n      prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n\n      if (prefix === '' && parentElement != null) {\n        const parentTagName = splitNsName(parentElement.name)[1];\n        const parentTagDefinition = this.getTagDefinition(parentTagName);\n\n        if (!parentTagDefinition.preventNamespaceInheritance) {\n          prefix = getNsPrefix(parentElement.name);\n        }\n      }\n    }\n\n    return mergeNsAndName(prefix, localName);\n  }\n\n}\n\nfunction lastOnStack(stack, element) {\n  return stack.length > 0 && stack[stack.length - 1] === element;\n}\n/**\r\n * Decode the `entity` string, which we believe is the contents of an HTML entity.\r\n *\r\n * If the string is not actually a valid/known entity then just return the original `match` string.\r\n */\n\n\nfunction decodeEntity(match, entity) {\n  if (NAMED_ENTITIES[entity] !== undefined) {\n    return NAMED_ENTITIES[entity] || match;\n  }\n\n  if (/^#x[a-f0-9]+$/i.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(2), 16));\n  }\n\n  if (/^#\\d+$/.test(entity)) {\n    return String.fromCodePoint(parseInt(entity.slice(1), 10));\n  }\n\n  return match;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass HtmlParser extends Parser {\n  constructor() {\n    super(getHtmlTagDefinition);\n  }\n\n  parse(source, url, options) {\n    return super.parse(source, url, options);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nconst SKIP_WS_TRIM_TAGS = /*#__PURE__*/new Set(['pre', 'template', 'textarea', 'script', 'style']); // Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = /*#__PURE__*/new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = /*#__PURE__*/new RegExp(`[${WS_CHARS}]{2,}`, 'g');\n\nfunction hasPreserveWhitespacesAttr(attrs) {\n  return attrs.some(attr => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n/**\r\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\r\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\r\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\r\n * and later on replaced by a space. We are re-implementing the same idea here.\r\n */\n\n\nfunction replaceNgsp(value) {\n  // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n  return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\r\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\r\n * - consider spaces, tabs and new lines as whitespace characters;\r\n * - drop text nodes consisting of whitespace characters only;\r\n * - for all other text nodes replace consecutive whitespace characters with one space;\r\n * - convert &ngsp; pseudo-entity to a single space;\r\n *\r\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\r\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\r\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\r\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\r\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\r\n * and might be changed to \"on\" by default.\r\n */\n\n\nclass WhitespaceVisitor {\n  visitElement(element, context) {\n    if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n      // don't descent into elements where we need to preserve whitespaces\n      // but still visit all attributes to eliminate one used as a market to preserve WS\n      return new Element$1(element.name, visitAll$1(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n\n    return new Element$1(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n  }\n\n  visitAttribute(attribute, context) {\n    return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n  }\n\n  visitText(text, context) {\n    const isNotBlank = text.value.match(NO_WS_REGEXP);\n    const hasExpansionSibling = context && (context.prev instanceof Expansion || context.next instanceof Expansion);\n\n    if (isNotBlank || hasExpansionSibling) {\n      // Process the whitespace in the tokens of this Text node\n      const tokens = text.tokens.map(token => token.type === 5\n      /* TEXT */\n      ? createWhitespaceProcessedTextToken(token) : token); // Process the whitespace of the value of this Text node\n\n      const value = processWhitespace(text.value);\n      return new Text$3(value, text.sourceSpan, tokens, text.i18n);\n    }\n\n    return null;\n  }\n\n  visitComment(comment, context) {\n    return comment;\n  }\n\n  visitExpansion(expansion, context) {\n    return expansion;\n  }\n\n  visitExpansionCase(expansionCase, context) {\n    return expansionCase;\n  }\n\n}\n\nfunction createWhitespaceProcessedTextToken({\n  type,\n  parts,\n  sourceSpan\n}) {\n  return {\n    type,\n    parts: [processWhitespace(parts[0])],\n    sourceSpan\n  };\n}\n\nfunction processWhitespace(text) {\n  return replaceNgsp(text).replace(WS_REPLACE_REGEXP, ' ');\n}\n\nfunction removeWhitespaces(htmlAstWithErrors) {\n  return new ParseTreeResult(visitAll$1(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\n\nfunction visitAllWithSiblings(visitor, nodes) {\n  const result = [];\n  nodes.forEach((ast, i) => {\n    const context = {\n      prev: nodes[i - 1],\n      next: nodes[i + 1]\n    };\n    const astResult = ast.visit(visitor, context);\n\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\n\n\nconst PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\r\n * Expands special forms into elements.\r\n *\r\n * For example,\r\n *\r\n * ```\r\n * { messages.length, plural,\r\n *   =0 {zero}\r\n *   =1 {one}\r\n *   other {more than one}\r\n * }\r\n * ```\r\n *\r\n * will be expanded into\r\n *\r\n * ```\r\n * <ng-container [ngPlural]=\"messages.length\">\r\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\r\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\r\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\r\n * </ng-container>\r\n * ```\r\n */\n\nfunction expandNodes(nodes) {\n  const expander = new _Expander();\n  return new ExpansionResult(visitAll$1(expander, nodes), expander.isExpanded, expander.errors);\n}\n\nclass ExpansionResult {\n  constructor(nodes, expanded, errors) {\n    this.nodes = nodes;\n    this.expanded = expanded;\n    this.errors = errors;\n  }\n\n}\n\nclass ExpansionError extends ParseError {\n  constructor(span, errorMsg) {\n    super(span, errorMsg);\n  }\n\n}\n/**\r\n * Expand expansion forms (plural, select) to directives\r\n *\r\n * @internal\r\n */\n\n\nclass _Expander {\n  constructor() {\n    this.isExpanded = false;\n    this.errors = [];\n  }\n\n  visitElement(element, context) {\n    return new Element$1(element.name, element.attrs, visitAll$1(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n  }\n\n  visitAttribute(attribute, context) {\n    return attribute;\n  }\n\n  visitText(text, context) {\n    return text;\n  }\n\n  visitComment(comment, context) {\n    return comment;\n  }\n\n  visitExpansion(icu, context) {\n    this.isExpanded = true;\n    return icu.type === 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);\n  }\n\n  visitExpansionCase(icuCase, context) {\n    throw new Error('Should not be reached');\n  }\n\n} // Plural forms are expanded to `NgPlural` and `NgPluralCase`s\n\n\nfunction _expandPluralForm(ast, errors) {\n  const children = ast.cases.map(c => {\n    if (PLURAL_CASES.indexOf(c.value) === -1 && !c.value.match(/^=\\d+$/)) {\n      errors.push(new ExpansionError(c.valueSourceSpan, `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(', ')}`));\n    }\n\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n    return new Element$1(`ng-template`, [new Attribute('ngPluralCase', `${c.value}`, c.valueSourceSpan, undefined\n    /* keySpan */\n    , undefined\n    /* valueSpan */\n    , undefined\n    /* valueTokens */\n    , undefined\n    /* i18n */\n    )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan, undefined\n  /* keySpan */\n  , undefined\n  /* valueSpan */\n  , undefined\n  /* valueTokens */\n  , undefined\n  /* i18n */\n  );\n  return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n} // ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s\n\n\nfunction _expandDefaultForm(ast, errors) {\n  const children = ast.cases.map(c => {\n    const expansionResult = expandNodes(c.expression);\n    errors.push(...expansionResult.errors);\n\n    if (c.value === 'other') {\n      // other is the default case when no values match\n      return new Element$1(`ng-template`, [new Attribute('ngSwitchDefault', '', c.valueSourceSpan, undefined\n      /* keySpan */\n      , undefined\n      /* valueSpan */\n      , undefined\n      /* valueTokens */\n      , undefined\n      /* i18n */\n      )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    }\n\n    return new Element$1(`ng-template`, [new Attribute('ngSwitchCase', `${c.value}`, c.valueSourceSpan, undefined\n    /* keySpan */\n    , undefined\n    /* valueSpan */\n    , undefined\n    /* valueTokens */\n    , undefined\n    /* i18n */\n    )], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n  });\n  const switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan, undefined\n  /* keySpan */\n  , undefined\n  /* valueSpan */\n  , undefined\n  /* valueTokens */\n  , undefined\n  /* i18n */\n  );\n  return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A segment of text within the template.\r\n */\n\n\nclass TextAst {\n  constructor(value, ngContentIndex, sourceSpan) {\n    this.value = value;\n    this.ngContentIndex = ngContentIndex;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitText(this, context);\n  }\n\n}\n/**\r\n * A bound expression within the text of a template.\r\n */\n\n\nclass BoundTextAst {\n  constructor(value, ngContentIndex, sourceSpan) {\n    this.value = value;\n    this.ngContentIndex = ngContentIndex;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitBoundText(this, context);\n  }\n\n}\n/**\r\n * A plain attribute on an element.\r\n */\n\n\nclass AttrAst {\n  constructor(name, value, sourceSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitAttr(this, context);\n  }\n\n}\n\nconst BoundPropertyMapping = {\n  [4\n  /* Animation */\n  ]: 4\n  /* Animation */\n  ,\n  [1\n  /* Attribute */\n  ]: 1\n  /* Attribute */\n  ,\n  [2\n  /* Class */\n  ]: 2\n  /* Class */\n  ,\n  [0\n  /* Property */\n  ]: 0\n  /* Property */\n  ,\n  [3\n  /* Style */\n  ]: 3\n  /* Style */\n\n};\n/**\r\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\r\n * `[@trigger]=\"stateExp\"`)\r\n */\n\nclass BoundElementPropertyAst {\n  constructor(name, type, securityContext, value, unit, sourceSpan) {\n    this.name = name;\n    this.type = type;\n    this.securityContext = securityContext;\n    this.value = value;\n    this.unit = unit;\n    this.sourceSpan = sourceSpan;\n    this.isAnimation = this.type === 4\n    /* Animation */\n    ;\n  }\n\n  static fromBoundProperty(prop) {\n    const type = BoundPropertyMapping[prop.type];\n    return new BoundElementPropertyAst(prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n  }\n\n  visit(visitor, context) {\n    return visitor.visitElementProperty(this, context);\n  }\n\n}\n/**\r\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\r\n * `(@trigger.phase)=\"callback($event)\"`).\r\n */\n\n\nclass BoundEventAst {\n  constructor(name, target, phase, handler, sourceSpan, handlerSpan) {\n    this.name = name;\n    this.target = target;\n    this.phase = phase;\n    this.handler = handler;\n    this.sourceSpan = sourceSpan;\n    this.handlerSpan = handlerSpan;\n    this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n    this.isAnimation = !!this.phase;\n  }\n\n  static calcFullName(name, target, phase) {\n    if (target) {\n      return `${target}:${name}`;\n    }\n\n    if (phase) {\n      return `@${name}.${phase}`;\n    }\n\n    return name;\n  }\n\n  static fromParsedEvent(event) {\n    const target = event.type === 0\n    /* Regular */\n    ? event.targetOrPhase : null;\n    const phase = event.type === 1\n    /* Animation */\n    ? event.targetOrPhase : null;\n    return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan, event.handlerSpan);\n  }\n\n  visit(visitor, context) {\n    return visitor.visitEvent(this, context);\n  }\n\n}\n/**\r\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\r\n */\n\n\nclass ReferenceAst {\n  constructor(name, value, originalValue, sourceSpan) {\n    this.name = name;\n    this.value = value;\n    this.originalValue = originalValue;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitReference(this, context);\n  }\n\n}\n/**\r\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\r\n */\n\n\nclass VariableAst {\n  constructor(name, value, sourceSpan, valueSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n    this.valueSpan = valueSpan;\n  }\n\n  static fromParsedVariable(v) {\n    return new VariableAst(v.name, v.value, v.sourceSpan, v.valueSpan);\n  }\n\n  visit(visitor, context) {\n    return visitor.visitVariable(this, context);\n  }\n\n}\n/**\r\n * An element declaration in a template.\r\n */\n\n\nclass ElementAst {\n  constructor(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\n    this.name = name;\n    this.attrs = attrs;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.references = references;\n    this.directives = directives;\n    this.providers = providers;\n    this.hasViewContainer = hasViewContainer;\n    this.queryMatches = queryMatches;\n    this.children = children;\n    this.ngContentIndex = ngContentIndex;\n    this.sourceSpan = sourceSpan;\n    this.endSourceSpan = endSourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitElement(this, context);\n  }\n\n}\n/**\r\n * A `<ng-template>` element included in an Angular template.\r\n */\n\n\nclass EmbeddedTemplateAst {\n  constructor(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\n    this.attrs = attrs;\n    this.outputs = outputs;\n    this.references = references;\n    this.variables = variables;\n    this.directives = directives;\n    this.providers = providers;\n    this.hasViewContainer = hasViewContainer;\n    this.queryMatches = queryMatches;\n    this.children = children;\n    this.ngContentIndex = ngContentIndex;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitEmbeddedTemplate(this, context);\n  }\n\n}\n/**\r\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\r\n */\n\n\nclass BoundDirectivePropertyAst {\n  constructor(directiveName, templateName, value, sourceSpan) {\n    this.directiveName = directiveName;\n    this.templateName = templateName;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitDirectiveProperty(this, context);\n  }\n\n}\n/**\r\n * A directive declared on an element.\r\n */\n\n\nclass DirectiveAst {\n  constructor(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\n    this.directive = directive;\n    this.inputs = inputs;\n    this.hostProperties = hostProperties;\n    this.hostEvents = hostEvents;\n    this.contentQueryStartId = contentQueryStartId;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitDirective(this, context);\n  }\n\n}\n/**\r\n * A provider declared on an element\r\n */\n\n\nclass ProviderAst {\n  constructor(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {\n    this.token = token;\n    this.multiProvider = multiProvider;\n    this.eager = eager;\n    this.providers = providers;\n    this.providerType = providerType;\n    this.lifecycleHooks = lifecycleHooks;\n    this.sourceSpan = sourceSpan;\n    this.isModule = isModule;\n  }\n\n  visit(visitor, context) {\n    // No visit method in the visitor for now...\n    return null;\n  }\n\n}\n\nvar ProviderAstType = /*#__PURE__*/(() => {\n  ProviderAstType = ProviderAstType || {};\n  ProviderAstType[ProviderAstType[\"PublicService\"] = 0] = \"PublicService\";\n  ProviderAstType[ProviderAstType[\"PrivateService\"] = 1] = \"PrivateService\";\n  ProviderAstType[ProviderAstType[\"Component\"] = 2] = \"Component\";\n  ProviderAstType[ProviderAstType[\"Directive\"] = 3] = \"Directive\";\n  ProviderAstType[ProviderAstType[\"Builtin\"] = 4] = \"Builtin\";\n  return ProviderAstType;\n})();\n\n/**\r\n * Position where content is to be projected (instance of `<ng-content>` in a template).\r\n */\nclass NgContentAst {\n  constructor(index, ngContentIndex, sourceSpan) {\n    this.index = index;\n    this.ngContentIndex = ngContentIndex;\n    this.sourceSpan = sourceSpan;\n  }\n\n  visit(visitor, context) {\n    return visitor.visitNgContent(this, context);\n  }\n\n}\n/**\r\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\r\n * as the base class for a visitor that is only interested in a subset of the node types.\r\n */\n\n\nclass NullTemplateVisitor {\n  visitNgContent(ast, context) {}\n\n  visitEmbeddedTemplate(ast, context) {}\n\n  visitElement(ast, context) {}\n\n  visitReference(ast, context) {}\n\n  visitVariable(ast, context) {}\n\n  visitEvent(ast, context) {}\n\n  visitElementProperty(ast, context) {}\n\n  visitAttr(ast, context) {}\n\n  visitBoundText(ast, context) {}\n\n  visitText(ast, context) {}\n\n  visitDirective(ast, context) {}\n\n  visitDirectiveProperty(ast, context) {}\n\n}\n/**\r\n * Base class that can be used to build a visitor that visits each node\r\n * in an template ast recursively.\r\n */\n\n\nclass RecursiveTemplateAstVisitor extends NullTemplateVisitor {\n  constructor() {\n    super();\n  } // Nodes with children\n\n\n  visitEmbeddedTemplate(ast, context) {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.references);\n      visit(ast.variables);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitElement(ast, context) {\n    return this.visitChildren(context, visit => {\n      visit(ast.attrs);\n      visit(ast.inputs);\n      visit(ast.outputs);\n      visit(ast.references);\n      visit(ast.directives);\n      visit(ast.providers);\n      visit(ast.children);\n    });\n  }\n\n  visitDirective(ast, context) {\n    return this.visitChildren(context, visit => {\n      visit(ast.inputs);\n      visit(ast.hostProperties);\n      visit(ast.hostEvents);\n    });\n  }\n\n  visitChildren(context, cb) {\n    let results = [];\n    let t = this;\n\n    function visit(children) {\n      if (children && children.length) results.push(templateVisitAll(t, children, context));\n    }\n\n    cb(visit);\n    return Array.prototype.concat.apply([], results);\n  }\n\n}\n/**\r\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\r\n */\n\n\nfunction templateVisitAll(visitor, asts, context = null) {\n  const result = [];\n  const visit = visitor.visit ? ast => visitor.visit(ast, context) || ast.visit(visitor, context) : ast => ast.visit(visitor, context);\n  asts.forEach(ast => {\n    const astResult = visit(ast);\n\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass ProviderError extends ParseError {\n  constructor(message, span) {\n    super(span, message);\n  }\n\n}\n\nclass ProviderViewContext {\n  constructor(reflector, component) {\n    this.reflector = reflector;\n    this.component = component;\n    this.errors = [];\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new Map();\n    component.viewProviders.forEach(provider => {\n      if (this.viewProviders.get(tokenReference(provider.token)) == null) {\n        this.viewProviders.set(tokenReference(provider.token), true);\n      }\n    });\n  }\n\n}\n\nclass ProviderElementContext {\n  constructor(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\n    this.viewContext = viewContext;\n    this._parent = _parent;\n    this._isViewRoot = _isViewRoot;\n    this._directiveAsts = _directiveAsts;\n    this._sourceSpan = _sourceSpan;\n    this._transformedProviders = new Map();\n    this._seenProviders = new Map();\n    this._queriedTokens = new Map();\n    this.transformedHasViewContainer = false;\n    this._attrs = {};\n    attrs.forEach(attrAst => this._attrs[attrAst.name] = attrAst.value);\n\n    const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n\n    this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n    this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n    Array.from(this._allProviders.values()).forEach(provider => {\n      this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\n    });\n\n    if (isTemplate) {\n      const templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers$1.TemplateRef);\n\n      this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n    }\n\n    refs.forEach(refAst => {\n      let defaultQueryValue = refAst.value || createTokenForExternalReference(this.viewContext.reflector, Identifiers$1.ElementRef);\n\n      this._addQueryReadsTo({\n        value: refAst.name\n      }, defaultQueryValue, this._queriedTokens);\n    });\n\n    if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers$1.ViewContainerRef))) {\n      this.transformedHasViewContainer = true;\n    } // create the providers that we know are eager first\n\n\n    Array.from(this._allProviders.values()).forEach(provider => {\n      const eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\n\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n\n  afterElement() {\n    // collect lazy providers\n    Array.from(this._allProviders.values()).forEach(provider => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n\n  get transformProviders() {\n    // Note: Maps keep their insertion order.\n    const lazyProviders = [];\n    const eagerProviders = [];\n\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n\n    return lazyProviders.concat(eagerProviders);\n  }\n\n  get transformedDirectiveAsts() {\n    const sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n\n    const sortedDirectives = this._directiveAsts.slice();\n\n    sortedDirectives.sort((dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n\n  get queryMatches() {\n    const allMatches = [];\n\n    this._queriedTokens.forEach(matches => {\n      allMatches.push(...matches);\n    });\n\n    return allMatches;\n  }\n\n  _addQueryReadsTo(token, defaultValue, queryReadTokens) {\n    this._getQueriesFor(token).forEach(query => {\n      const queryValue = query.meta.read || defaultValue;\n      const tokenRef = tokenReference(queryValue);\n      let queryMatches = queryReadTokens.get(tokenRef);\n\n      if (!queryMatches) {\n        queryMatches = [];\n        queryReadTokens.set(tokenRef, queryMatches);\n      }\n\n      queryMatches.push({\n        queryId: query.queryId,\n        value: queryValue\n      });\n    });\n  }\n\n  _getQueriesFor(token) {\n    const result = [];\n    let currentEl = this;\n    let distance = 0;\n    let queries;\n\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(tokenReference(token));\n\n      if (queries) {\n        result.push(...queries.filter(query => query.meta.descendants || distance <= 1));\n      }\n\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n\n      currentEl = currentEl._parent;\n    }\n\n    queries = this.viewContext.viewQueries.get(tokenReference(token));\n\n    if (queries) {\n      result.push(...queries);\n    }\n\n    return result;\n  }\n\n  _getOrCreateLocalProvider(requestingProviderType, token, eager) {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n\n    if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) {\n      return null;\n    }\n\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this.viewContext.errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n      return null;\n    }\n\n    this._seenProviders.set(tokenReference(token), true);\n\n    const transformedProviders = resolvedProvider.providers.map(provider => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting;\n      let transformedDeps = undefined;\n\n      if (provider.useExisting != null) {\n        const existingDiDep = this._getDependency(resolvedProvider.providerType, {\n          token: provider.useExisting\n        }, eager);\n\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps = deps.map(dep => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (provider.useClass) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps = deps.map(dep => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst = _transformProviderAst(resolvedProvider, {\n      eager: eager,\n      providers: transformedProviders\n    });\n\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n\n    return transformedProviderAst;\n  }\n\n  _getLocalDependency(requestingProviderType, dep, eager = false) {\n    if (dep.isAttribute) {\n      const attrValue = this._attrs[dep.token.value];\n      return {\n        isValue: true,\n        value: attrValue == null ? null : attrValue\n      };\n    }\n\n    if (dep.token != null) {\n      // access builtints\n      if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) {\n        if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.Renderer) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.ElementRef) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.ChangeDetectorRef) || tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.TemplateRef)) {\n          return dep;\n        }\n\n        if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.ViewContainerRef)) {\n          this.transformedHasViewContainer = true;\n        }\n      } // access the injector\n\n\n      if (tokenReference(dep.token) === this.viewContext.reflector.resolveExternalReference(Identifiers$1.Injector)) {\n        return dep;\n      } // access providers\n\n\n      if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n        return dep;\n      }\n    }\n\n    return null;\n  }\n\n  _getDependency(requestingProviderType, dep, eager = false) {\n    let currElement = this;\n    let currEager = eager;\n    let result = null;\n\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n\n    if (dep.isSelf) {\n      if (!result && dep.isOptional) {\n        result = {\n          isValue: true,\n          value: null\n        };\n      }\n    } else {\n      // check parent elements\n      while (!result && currElement._parent) {\n        const prevElement = currElement;\n        currElement = currElement._parent;\n\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      } // check @Host restriction\n\n\n      if (!result) {\n        if (!dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {\n          result = dep;\n        } else {\n          result = dep.isOptional ? {\n            isValue: true,\n            value: null\n          } : null;\n        }\n      }\n    }\n\n    if (!result) {\n      this.viewContext.errors.push(new ProviderError(`No provider for ${tokenName(dep.token)}`, this._sourceSpan));\n    }\n\n    return result;\n  }\n\n}\n\nclass NgModuleProviderAnalyzer {\n  constructor(reflector, ngModule, extraProviders, sourceSpan) {\n    this.reflector = reflector;\n    this._transformedProviders = new Map();\n    this._seenProviders = new Map();\n    this._errors = [];\n    this._allProviders = new Map();\n    ngModule.transitiveModule.modules.forEach(ngModuleType => {\n      const ngModuleProvider = {\n        token: {\n          identifier: ngModuleType\n        },\n        useClass: ngModuleType\n      };\n\n      _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors, this._allProviders,\n      /* isModule */\n      true);\n    });\n\n    _resolveProviders(ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders,\n    /* isModule */\n    false);\n  }\n\n  parse() {\n    Array.from(this._allProviders.values()).forEach(provider => {\n      this._getOrCreateLocalProvider(provider.token, provider.eager);\n    });\n\n    if (this._errors.length > 0) {\n      const errorString = this._errors.join('\\n');\n\n      throw new Error(`Provider parse errors:\\n${errorString}`);\n    } // Note: Maps keep their insertion order.\n\n\n    const lazyProviders = [];\n    const eagerProviders = [];\n\n    this._transformedProviders.forEach(provider => {\n      if (provider.eager) {\n        eagerProviders.push(provider);\n      } else {\n        lazyProviders.push(provider);\n      }\n    });\n\n    return lazyProviders.concat(eagerProviders);\n  }\n\n  _getOrCreateLocalProvider(token, eager) {\n    const resolvedProvider = this._allProviders.get(tokenReference(token));\n\n    if (!resolvedProvider) {\n      return null;\n    }\n\n    let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n\n    if (transformedProviderAst) {\n      return transformedProviderAst;\n    }\n\n    if (this._seenProviders.get(tokenReference(token)) != null) {\n      this._errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));\n\n      return null;\n    }\n\n    this._seenProviders.set(tokenReference(token), true);\n\n    const transformedProviders = resolvedProvider.providers.map(provider => {\n      let transformedUseValue = provider.useValue;\n      let transformedUseExisting = provider.useExisting;\n      let transformedDeps = undefined;\n\n      if (provider.useExisting != null) {\n        const existingDiDep = this._getDependency({\n          token: provider.useExisting\n        }, eager, resolvedProvider.sourceSpan);\n\n        if (existingDiDep.token != null) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (provider.useFactory) {\n        const deps = provider.deps || provider.useFactory.diDeps;\n        transformedDeps = deps.map(dep => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (provider.useClass) {\n        const deps = provider.deps || provider.useClass.diDeps;\n        transformedDeps = deps.map(dep => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst = _transformProviderAst(resolvedProvider, {\n      eager: eager,\n      providers: transformedProviders\n    });\n\n    this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n\n    return transformedProviderAst;\n  }\n\n  _getDependency(dep, eager = false, requestorSourceSpan) {\n    let foundLocal = false;\n\n    if (!dep.isSkipSelf && dep.token != null) {\n      // access the injector\n      if (tokenReference(dep.token) === this.reflector.resolveExternalReference(Identifiers$1.Injector) || tokenReference(dep.token) === this.reflector.resolveExternalReference(Identifiers$1.ComponentFactoryResolver)) {\n        foundLocal = true; // access providers\n      } else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\n        foundLocal = true;\n      }\n    }\n\n    return dep;\n  }\n\n}\n\nfunction _transformProvider(provider, {\n  useExisting,\n  useValue,\n  deps\n}) {\n  return {\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  };\n}\n\nfunction _transformProviderAst(provider, {\n  eager,\n  providers\n}) {\n  return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);\n}\n\nfunction _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n  const providersByToken = new Map();\n  directives.forEach(directive => {\n    const dirProvider = {\n      token: {\n        identifier: directive.type\n      },\n      useClass: directive.type\n    };\n\n    _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken,\n    /* isModule */\n    false);\n  }); // Note: directives need to be able to overwrite providers of a component!\n\n  const directivesWithComponentFirst = directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach(directive => {\n    _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken,\n    /* isModule */\n    false);\n\n    _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken,\n    /* isModule */\n    false);\n  });\n  return providersByToken;\n}\n\nfunction _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {\n  providers.forEach(provider => {\n    let resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n\n    if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n      targetErrors.push(new ProviderError(`Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`, sourceSpan));\n    }\n\n    if (!resolvedProvider) {\n      const lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : [];\n      const isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n      resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);\n      targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        resolvedProvider.providers.length = 0;\n      }\n\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n\nfunction _getViewQueries(component) {\n  // Note: queries start with id 1 so we can use the number in a Bloom filter!\n  let viewQueryId = 1;\n  const viewQueries = new Map();\n\n  if (component.viewQueries) {\n    component.viewQueries.forEach(query => _addQueryToTokenMap(viewQueries, {\n      meta: query,\n      queryId: viewQueryId++\n    }));\n  }\n\n  return viewQueries;\n}\n\nfunction _getContentQueries(contentQueryStartId, directives) {\n  let contentQueryId = contentQueryStartId;\n  const contentQueries = new Map();\n  directives.forEach((directive, directiveIndex) => {\n    if (directive.queries) {\n      directive.queries.forEach(query => _addQueryToTokenMap(contentQueries, {\n        meta: query,\n        queryId: contentQueryId++\n      }));\n    }\n  });\n  return contentQueries;\n}\n\nfunction _addQueryToTokenMap(map, query) {\n  query.meta.selectors.forEach(token => {\n    let entry = map.get(tokenReference(token));\n\n    if (!entry) {\n      entry = [];\n      map.set(tokenReference(token), entry);\n    }\n\n    entry.push(query);\n  });\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass StyleWithImports {\n  constructor(style, styleUrls) {\n    this.style = style;\n    this.styleUrls = styleUrls;\n  }\n\n}\n\nfunction isStyleUrlResolvable(url) {\n  if (url == null || url.length === 0 || url[0] == '/') return false;\n  const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n  return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n/**\r\n * Rewrites stylesheets by resolving and removing the @import urls that\r\n * are either relative or don't have a `package:` scheme\r\n */\n\n\nfunction extractStyleUrls(resolver, baseUrl, cssText) {\n  const foundUrls = [];\n  const modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, (...m) => {\n    const url = m[1] || m[2];\n\n    if (!isStyleUrlResolvable(url)) {\n      // Do not attempt to resolve non-package absolute URLs with URI\n      // scheme\n      return m[0];\n    }\n\n    foundUrls.push(resolver.resolve(baseUrl, url));\n    return '';\n  });\n  return new StyleWithImports(modifiedCssText, foundUrls);\n}\n\nconst CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nconst CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nconst PROPERTY_PARTS_SEPARATOR = '.';\nconst ATTRIBUTE_PREFIX = 'attr';\nconst CLASS_PREFIX = 'class';\nconst STYLE_PREFIX = 'style';\nconst TEMPLATE_ATTR_PREFIX = '*';\nconst ANIMATE_PROP_PREFIX = 'animate-';\n/**\r\n * Parses bindings in templates and in the directive host area.\r\n */\n\nclass BindingParser {\n  constructor(_exprParser, _interpolationConfig, _schemaRegistry, pipes, errors) {\n    this._exprParser = _exprParser;\n    this._interpolationConfig = _interpolationConfig;\n    this._schemaRegistry = _schemaRegistry;\n    this.errors = errors;\n    this.pipesByName = null;\n    this._usedPipes = new Map(); // When the `pipes` parameter is `null`, do not check for used pipes\n    // This is used in IVY when we might not know the available pipes at compile time\n\n    if (pipes) {\n      const pipesByName = new Map();\n      pipes.forEach(pipe => pipesByName.set(pipe.name, pipe));\n      this.pipesByName = pipesByName;\n    }\n  }\n\n  get interpolationConfig() {\n    return this._interpolationConfig;\n  }\n\n  getUsedPipes() {\n    return Array.from(this._usedPipes.values());\n  }\n\n  createBoundHostProperties(dirMeta, sourceSpan) {\n    if (dirMeta.hostProperties) {\n      const boundProps = [];\n      Object.keys(dirMeta.hostProperties).forEach(propName => {\n        const expression = dirMeta.hostProperties[propName];\n\n        if (typeof expression === 'string') {\n          this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], // Use the `sourceSpan` for  `keySpan`. This isn't really accurate, but neither is the\n          // sourceSpan, as it represents the sourceSpan of the host itself rather than the\n          // source of the host binding (which doesn't exist in the template). Regardless,\n          // neither of these values are used in Ivy but are only here to satisfy the function\n          // signature. This should likely be refactored in the future so that `sourceSpan`\n          // isn't being used inaccurately.\n          boundProps, sourceSpan);\n        } else {\n          this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n        }\n      });\n      return boundProps;\n    }\n\n    return null;\n  }\n\n  createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {\n    const boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);\n    return boundProps && boundProps.map(prop => this.createBoundElementProperty(elementSelector, prop));\n  }\n\n  createDirectiveHostEventAsts(dirMeta, sourceSpan) {\n    if (dirMeta.hostListeners) {\n      const targetEvents = [];\n      Object.keys(dirMeta.hostListeners).forEach(propName => {\n        const expression = dirMeta.hostListeners[propName];\n\n        if (typeof expression === 'string') {\n          // Use the `sourceSpan` for  `keySpan` and `handlerSpan`. This isn't really accurate, but\n          // neither is the `sourceSpan`, as it represents the `sourceSpan` of the host itself\n          // rather than the source of the host binding (which doesn't exist in the template).\n          // Regardless, neither of these values are used in Ivy but are only here to satisfy the\n          // function signature. This should likely be refactored in the future so that `sourceSpan`\n          // isn't being used inaccurately.\n          this.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents, sourceSpan);\n        } else {\n          this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n        }\n      });\n      return targetEvents;\n    }\n\n    return null;\n  }\n\n  parseInterpolation(value, sourceSpan) {\n    const sourceInfo = sourceSpan.start.toString();\n    const absoluteOffset = sourceSpan.fullStart.offset;\n\n    try {\n      const ast = this._exprParser.parseInterpolation(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n\n      this._checkPipes(ast, sourceSpan);\n\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  /**\r\n   * Similar to `parseInterpolation`, but treats the provided string as a single expression\r\n   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\r\n   * This is used for parsing the switch expression in ICUs.\r\n   */\n\n\n  parseInterpolationExpression(expression, sourceSpan) {\n    const sourceInfo = sourceSpan.start.toString();\n    const absoluteOffset = sourceSpan.start.offset;\n\n    try {\n      const ast = this._exprParser.parseInterpolationExpression(expression, sourceInfo, absoluteOffset);\n\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n\n      this._checkPipes(ast, sourceSpan);\n\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n  /**\r\n   * Parses the bindings in a microsyntax expression, and converts them to\r\n   * `ParsedProperty` or `ParsedVariable`.\r\n   *\r\n   * @param tplKey template binding name\r\n   * @param tplValue template binding value\r\n   * @param sourceSpan span of template binding relative to entire the template\r\n   * @param absoluteValueOffset start of the tplValue relative to the entire template\r\n   * @param targetMatchableAttrs potential attributes to match in the template\r\n   * @param targetProps target property bindings in the template\r\n   * @param targetVars target variables in the template\r\n   */\n\n\n  parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars, isIvyAst) {\n    const absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX.length;\n\n    const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);\n\n    for (const binding of bindings) {\n      // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular\n      // binding within the microsyntax expression so it's more narrow than sourceSpan.\n      const bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);\n      const key = binding.key.source;\n      const keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);\n\n      if (binding instanceof VariableBinding) {\n        const value = binding.value ? binding.value.source : '$implicit';\n        const valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;\n        targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));\n      } else if (binding.value) {\n        const srcSpan = isIvyAst ? bindingSpan : sourceSpan;\n        const valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);\n\n        this._parsePropertyAst(key, binding.value, srcSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n      } else {\n        targetMatchableAttrs.push([key, ''\n        /* value */\n        ]); // Since this is a literal attribute with no RHS, source span should be\n        // just the key span.\n\n        this.parseLiteralAttr(key, null\n        /* value */\n        , keySpan, absoluteValueOffset, undefined\n        /* valueSpan */\n        , targetMatchableAttrs, targetProps, keySpan);\n      }\n    }\n  }\n  /**\r\n   * Parses the bindings in a microsyntax expression, e.g.\r\n   * ```\r\n   *    <tag *tplKey=\"let value1 = prop; let value2 = localVar\">\r\n   * ```\r\n   *\r\n   * @param tplKey template binding name\r\n   * @param tplValue template binding value\r\n   * @param sourceSpan span of template binding relative to entire the template\r\n   * @param absoluteKeyOffset start of the `tplKey`\r\n   * @param absoluteValueOffset start of the `tplValue`\r\n   */\n\n\n  _parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {\n    const sourceInfo = sourceSpan.start.toString();\n\n    try {\n      const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);\n\n      this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n\n      bindingsResult.templateBindings.forEach(binding => {\n        if (binding.value instanceof ASTWithSource) {\n          this._checkPipes(binding.value, sourceSpan);\n        }\n      });\n      bindingsResult.warnings.forEach(warning => {\n        this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);\n      });\n      return bindingsResult.templateBindings;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n\n      return [];\n    }\n  }\n\n  parseLiteralAttr(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n  // have to change This should be required when VE is removed.\n  targetProps, keySpan) {\n    if (isAnimationLabel(name)) {\n      name = name.substring(1);\n\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n\n      if (value) {\n        this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` + ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\n      }\n\n      this._parseAnimation(name, value, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    } else {\n      targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, keySpan, valueSpan));\n    }\n  }\n\n  parsePropertyBinding(name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n  // have to change This should be required when VE is removed.\n  targetMatchableAttrs, targetProps, keySpan) {\n    if (name.length === 0) {\n      this._reportError(`Property name is missing in binding`, sourceSpan);\n    }\n\n    let isAnimationProp = false;\n\n    if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n      isAnimationProp = true;\n      name = name.substring(ANIMATE_PROP_PREFIX.length);\n\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + ANIMATE_PROP_PREFIX.length, keySpan.end.offset));\n      }\n    } else if (isAnimationLabel(name)) {\n      isAnimationProp = true;\n      name = name.substring(1);\n\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n    }\n\n    if (isAnimationProp) {\n      this._parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    } else {\n      this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n    }\n  }\n\n  parsePropertyInterpolation(name, value, sourceSpan, valueSpan, targetMatchableAttrs, // TODO(atscott): keySpan is only optional here so VE template parser implementation does not\n  // have to change This should be required when VE is removed.\n  targetProps, keySpan) {\n    const expr = this.parseInterpolation(value, valueSpan || sourceSpan);\n\n    if (expr) {\n      this._parsePropertyAst(name, expr, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _parsePropertyAst(name, ast, sourceSpan, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, keySpan, valueSpan));\n  }\n\n  _parseAnimation(name, expression, sourceSpan, absoluteOffset, keySpan, valueSpan, targetMatchableAttrs, targetProps) {\n    if (name.length === 0) {\n      this._reportError('Animation trigger is missing', sourceSpan);\n    } // This will occur when a @trigger is not paired with an expression.\n    // For animations it is valid to not have an expression since */void\n    // states will be applied by angular when the element is attached/detached\n\n\n    const ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);\n\n    targetMatchableAttrs.push([name, ast.source]);\n    targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, keySpan, valueSpan));\n  }\n\n  _parseBinding(value, isHostBinding, sourceSpan, absoluteOffset) {\n    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n\n    try {\n      const ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n      if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);\n\n      this._checkPipes(ast, sourceSpan);\n\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n\n  createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {\n    if (boundProp.isAnimation) {\n      return new BoundElementProperty(boundProp.name, 4\n      /* Animation */\n      , SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n    }\n\n    let unit = null;\n    let bindingType = undefined;\n    let boundPropertyName = null;\n    const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n    let securityContexts = undefined; // Check for special cases (prefix style, attr, class)\n\n    if (parts.length > 1) {\n      if (parts[0] == ATTRIBUTE_PREFIX) {\n        boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);\n\n        if (!skipValidation) {\n          this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n        }\n\n        securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n        const nsSeparatorIdx = boundPropertyName.indexOf(':');\n\n        if (nsSeparatorIdx > -1) {\n          const ns = boundPropertyName.substring(0, nsSeparatorIdx);\n          const name = boundPropertyName.substring(nsSeparatorIdx + 1);\n          boundPropertyName = mergeNsAndName(ns, name);\n        }\n\n        bindingType = 1\n        /* Attribute */\n        ;\n      } else if (parts[0] == CLASS_PREFIX) {\n        boundPropertyName = parts[1];\n        bindingType = 2\n        /* Class */\n        ;\n        securityContexts = [SecurityContext.NONE];\n      } else if (parts[0] == STYLE_PREFIX) {\n        unit = parts.length > 2 ? parts[2] : null;\n        boundPropertyName = parts[1];\n        bindingType = 3\n        /* Style */\n        ;\n        securityContexts = [SecurityContext.STYLE];\n      }\n    } // If not a special case, use the full property name\n\n\n    if (boundPropertyName === null) {\n      const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n\n      boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n      securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n      bindingType = 0\n      /* Property */\n      ;\n\n      if (!skipValidation) {\n        this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n      }\n    }\n\n    return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.keySpan, boundProp.valueSpan);\n  } // TODO: keySpan should be required but was made optional to avoid changing VE parser.\n\n\n  parseEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n    if (name.length === 0) {\n      this._reportError(`Event name is missing in binding`, sourceSpan);\n    }\n\n    if (isAnimationLabel(name)) {\n      name = name.substr(1);\n\n      if (keySpan !== undefined) {\n        keySpan = moveParseSourceSpan(keySpan, new AbsoluteSourceSpan(keySpan.start.offset + 1, keySpan.end.offset));\n      }\n\n      this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan);\n    } else {\n      this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan);\n    }\n  }\n\n  calcPossibleSecurityContexts(selector, propName, isAttribute) {\n    const prop = this._schemaRegistry.getMappedPropName(propName);\n\n    return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n  }\n\n  _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents, keySpan) {\n    const matches = splitAtPeriod(name, [name, '']);\n    const eventName = matches[0];\n    const phase = matches[1].toLowerCase();\n\n    const ast = this._parseAction(expression, handlerSpan);\n\n    targetEvents.push(new ParsedEvent(eventName, phase, 1\n    /* Animation */\n    , ast, sourceSpan, handlerSpan, keySpan));\n\n    if (eventName.length === 0) {\n      this._reportError(`Animation event name is missing in binding`, sourceSpan);\n    }\n\n    if (phase) {\n      if (phase !== 'start' && phase !== 'done') {\n        this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\n      }\n    } else {\n      this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\n    }\n  }\n\n  _parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents, keySpan) {\n    // long format: 'target: eventName'\n    const [target, eventName] = splitAtColon(name, [null, name]);\n\n    const ast = this._parseAction(expression, handlerSpan);\n\n    targetMatchableAttrs.push([name, ast.source]);\n    targetEvents.push(new ParsedEvent(eventName, target, 0\n    /* Regular */\n    , ast, sourceSpan, handlerSpan, keySpan)); // Don't detect directives for event names for now,\n    // so don't add the event name to the matchableAttrs\n  }\n\n  _parseAction(value, sourceSpan) {\n    const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n    const absoluteOffset = sourceSpan && sourceSpan.start ? sourceSpan.start.offset : 0;\n\n    try {\n      const ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);\n\n      if (ast) {\n        this._reportExpressionParserErrors(ast.errors, sourceSpan);\n      }\n\n      if (!ast || ast.ast instanceof EmptyExpr) {\n        this._reportError(`Empty expressions are not allowed`, sourceSpan);\n\n        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n      }\n\n      this._checkPipes(ast, sourceSpan);\n\n      return ast;\n    } catch (e) {\n      this._reportError(`${e}`, sourceSpan);\n\n      return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);\n    }\n  }\n\n  _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n    this.errors.push(new ParseError(sourceSpan, message, level));\n  }\n\n  _reportExpressionParserErrors(errors, sourceSpan) {\n    for (const error of errors) {\n      this._reportError(error.message, sourceSpan);\n    }\n  } // Make sure all the used pipes are known in `this.pipesByName`\n\n\n  _checkPipes(ast, sourceSpan) {\n    if (ast && this.pipesByName) {\n      const collector = new PipeCollector();\n      ast.visit(collector);\n      collector.pipes.forEach((ast, pipeName) => {\n        const pipeMeta = this.pipesByName.get(pipeName);\n\n        if (!pipeMeta) {\n          this._reportError(`The pipe '${pipeName}' could not be found`, new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n        } else {\n          this._usedPipes.set(pipeName, pipeMeta);\n        }\n      });\n    }\n  }\n  /**\r\n   * @param propName the name of the property / attribute\r\n   * @param sourceSpan\r\n   * @param isAttr true when binding to an attribute\r\n   */\n\n\n  _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n    const report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);\n\n    if (report.error) {\n      this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n    }\n  }\n\n}\n\nclass PipeCollector extends RecursiveAstVisitor$1 {\n  constructor() {\n    super(...arguments);\n    this.pipes = new Map();\n  }\n\n  visitPipe(ast, context) {\n    this.pipes.set(ast.name, ast);\n    ast.exp.visit(this);\n    this.visitAll(ast.args, context);\n    return null;\n  }\n\n}\n\nfunction isAnimationLabel(name) {\n  return name[0] == '@';\n}\n\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n  const ctxs = [];\n  CssSelector.parse(selector).forEach(selector => {\n    const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n    const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector()).map(selector => selector.element));\n    const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\n    ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\n  });\n  return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n/**\r\n * Compute a new ParseSourceSpan based off an original `sourceSpan` by using\r\n * absolute offsets from the specified `absoluteSpan`.\r\n *\r\n * @param sourceSpan original source span\r\n * @param absoluteSpan absolute source span to move to\r\n */\n\n\nfunction moveParseSourceSpan(sourceSpan, absoluteSpan) {\n  // The difference of two absolute offsets provide the relative offset\n  const startDiff = absoluteSpan.start - sourceSpan.start.offset;\n  const endDiff = absoluteSpan.end - sourceSpan.end.offset;\n  return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff), sourceSpan.fullStart.moveBy(startDiff), sourceSpan.details);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst NG_CONTENT_SELECT_ATTR = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\n\nfunction preparseElement(ast) {\n  let selectAttr = null;\n  let hrefAttr = null;\n  let relAttr = null;\n  let nonBindable = false;\n  let projectAs = '';\n  ast.attrs.forEach(attr => {\n    const lcAttrName = attr.name.toLowerCase();\n\n    if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n      selectAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n      hrefAttr = attr.value;\n    } else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n      relAttr = attr.value;\n    } else if (attr.name == NG_NON_BINDABLE_ATTR) {\n      nonBindable = true;\n    } else if (attr.name == NG_PROJECT_AS) {\n      if (attr.value.length > 0) {\n        projectAs = attr.value;\n      }\n    }\n  });\n  selectAttr = normalizeNgContentSelect(selectAttr);\n  const nodeName = ast.name.toLowerCase();\n  let type = PreparsedElementType.OTHER;\n\n  if (isNgContent(nodeName)) {\n    type = PreparsedElementType.NG_CONTENT;\n  } else if (nodeName == STYLE_ELEMENT) {\n    type = PreparsedElementType.STYLE;\n  } else if (nodeName == SCRIPT_ELEMENT) {\n    type = PreparsedElementType.SCRIPT;\n  } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n    type = PreparsedElementType.STYLESHEET;\n  }\n\n  return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n\nvar PreparsedElementType = /*#__PURE__*/(() => {\n  PreparsedElementType = PreparsedElementType || {};\n  PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n  PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n  PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n  PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n  return PreparsedElementType;\n})();\n\nclass PreparsedElement {\n  constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n    this.type = type;\n    this.selectAttr = selectAttr;\n    this.hrefAttr = hrefAttr;\n    this.nonBindable = nonBindable;\n    this.projectAs = projectAs;\n  }\n\n}\n\nfunction normalizeNgContentSelect(selectAttr) {\n  if (selectAttr === null || selectAttr.length === 0) {\n    return '*';\n  }\n\n  return selectAttr;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/; // Group 1 = \"bind-\"\n\nconst KW_BIND_IDX = 1; // Group 2 = \"let-\"\n\nconst KW_LET_IDX = 2; // Group 3 = \"ref-/#\"\n\nconst KW_REF_IDX = 3; // Group 4 = \"on-\"\n\nconst KW_ON_IDX = 4; // Group 5 = \"bindon-\"\n\nconst KW_BINDON_IDX = 5; // Group 6 = \"@\"\n\nconst KW_AT_IDX = 6; // Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n\nconst IDENT_KW_IDX = 7; // Group 8 = identifier inside [()]\n\nconst IDENT_BANANA_BOX_IDX = 8; // Group 9 = identifier inside []\n\nconst IDENT_PROPERTY_IDX = 9; // Group 10 = identifier inside ()\n\nconst IDENT_EVENT_IDX = 10;\nconst TEMPLATE_ATTR_PREFIX$1 = '*';\nconst CLASS_ATTR = 'class';\n\nlet _TEXT_CSS_SELECTOR;\n\nfunction TEXT_CSS_SELECTOR() {\n  if (!_TEXT_CSS_SELECTOR) {\n    _TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n  }\n\n  return _TEXT_CSS_SELECTOR;\n}\n\nclass TemplateParseError extends ParseError {\n  constructor(message, span, level) {\n    super(span, message, level);\n  }\n\n}\n\nclass TemplateParseResult {\n  constructor(templateAst, usedPipes, errors) {\n    this.templateAst = templateAst;\n    this.usedPipes = usedPipes;\n    this.errors = errors;\n  }\n\n}\n\nclass TemplateParser {\n  constructor(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n    this._config = _config;\n    this._reflector = _reflector;\n    this._exprParser = _exprParser;\n    this._schemaRegistry = _schemaRegistry;\n    this._htmlParser = _htmlParser;\n    this._console = _console;\n    this.transforms = transforms;\n  }\n\n  get expressionParser() {\n    return this._exprParser;\n  }\n\n  parse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n    var _a;\n\n    const result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\n    const warnings = result.errors.filter(error => error.level === ParseErrorLevel.WARNING);\n    const errors = result.errors.filter(error => error.level === ParseErrorLevel.ERROR);\n\n    if (warnings.length > 0) {\n      (_a = this._console) === null || _a === void 0 ? void 0 : _a.warn(`Template parse warnings:\\n${warnings.join('\\n')}`);\n    }\n\n    if (errors.length > 0) {\n      const errorString = errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\n    }\n\n    return {\n      template: result.templateAst,\n      pipes: result.usedPipes\n    };\n  }\n\n  tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n    let htmlParseResult = typeof template === 'string' ? this._htmlParser.parse(template, templateUrl, {\n      tokenizeExpansionForms: true,\n      interpolationConfig: this.getInterpolationConfig(component)\n    }) : template;\n\n    if (!preserveWhitespaces) {\n      htmlParseResult = removeWhitespaces(htmlParseResult);\n    }\n\n    return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\n  }\n\n  tryParseHtml(htmlAstWithErrors, component, directives, pipes, schemas) {\n    let result;\n    const errors = htmlAstWithErrors.errors;\n    const usedPipes = [];\n\n    if (htmlAstWithErrors.rootNodes.length > 0) {\n      const uniqDirectives = removeSummaryDuplicates(directives);\n      const uniqPipes = removeSummaryDuplicates(pipes);\n      const providerViewContext = new ProviderViewContext(this._reflector, component);\n      let interpolationConfig = undefined;\n\n      if (component.template && component.template.interpolation) {\n        interpolationConfig = {\n          start: component.template.interpolation[0],\n          end: component.template.interpolation[1]\n        };\n      }\n\n      const bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);\n      const parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\n      result = visitAll$1(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n      errors.push(...providerViewContext.errors);\n      usedPipes.push(...bindingParser.getUsedPipes());\n    } else {\n      result = [];\n    }\n\n    this._assertNoReferenceDuplicationOnTemplate(result, errors);\n\n    if (errors.length > 0) {\n      return new TemplateParseResult(result, usedPipes, errors);\n    }\n\n    if (this.transforms) {\n      this.transforms.forEach(transform => {\n        result = templateVisitAll(transform, result);\n      });\n    }\n\n    return new TemplateParseResult(result, usedPipes, errors);\n  }\n\n  expandHtml(htmlAstWithErrors, forced = false) {\n    const errors = htmlAstWithErrors.errors;\n\n    if (errors.length == 0 || forced) {\n      // Transform ICU messages to angular directives\n      const expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n      errors.push(...expandedHtmlAst.errors);\n      htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n    }\n\n    return htmlAstWithErrors;\n  }\n\n  getInterpolationConfig(component) {\n    if (component.template) {\n      return InterpolationConfig.fromArray(component.template.interpolation);\n    }\n\n    return undefined;\n  }\n  /** @internal */\n\n\n  _assertNoReferenceDuplicationOnTemplate(result, errors) {\n    const existingReferences = [];\n    result.filter(element => !!element.references).forEach(element => element.references.forEach(reference => {\n      const name = reference.name;\n\n      if (existingReferences.indexOf(name) < 0) {\n        existingReferences.push(name);\n      } else {\n        const error = new TemplateParseError(`Reference \"#${name}\" is defined several times`, reference.sourceSpan, ParseErrorLevel.ERROR);\n        errors.push(error);\n      }\n    }));\n  }\n\n}\n\nclass TemplateParseVisitor {\n  constructor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\n    this.reflector = reflector;\n    this.config = config;\n    this.providerViewContext = providerViewContext;\n    this._bindingParser = _bindingParser;\n    this._schemaRegistry = _schemaRegistry;\n    this._schemas = _schemas;\n    this._targetErrors = _targetErrors;\n    this.selectorMatcher = new SelectorMatcher();\n    this.directivesIndex = new Map();\n    this.ngContentCount = 0; // Note: queries start with id 1 so we can use the number in a Bloom filter!\n\n    this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n    directives.forEach((directive, index) => {\n      const selector = CssSelector.parse(directive.selector);\n      this.selectorMatcher.addSelectables(selector, directive);\n      this.directivesIndex.set(directive, index);\n    });\n  }\n\n  visitExpansion(expansion, context) {\n    return null;\n  }\n\n  visitExpansionCase(expansionCase, context) {\n    return null;\n  }\n\n  visitText(text, parent) {\n    const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());\n    const valueNoNgsp = replaceNgsp(text.value);\n\n    const expr = this._bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);\n\n    return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(valueNoNgsp, ngContentIndex, text.sourceSpan);\n  }\n\n  visitAttribute(attribute, context) {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n\n  visitComment(comment, context) {\n    return null;\n  }\n\n  visitElement(element, parent) {\n    const queryStartIndex = this.contentQueryStartId;\n    const elName = element.name;\n    const preparsedElement = preparseElement(element);\n\n    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {\n      // Skipping <script> for security reasons\n      // Skipping <style> as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      // Skipping stylesheets with either relative urls or package scheme as we already processed\n      // them in the StyleCompiler\n      return null;\n    }\n\n    const matchableAttrs = [];\n    const elementOrDirectiveProps = [];\n    const elementOrDirectiveRefs = [];\n    const elementVars = [];\n    const events = [];\n    const templateElementOrDirectiveProps = [];\n    const templateMatchableAttrs = [];\n    const templateElementVars = [];\n    let hasInlineTemplates = false;\n    const attrs = [];\n    const isTemplateElement = isNgTemplate(element.name);\n    element.attrs.forEach(attr => {\n      const parsedVariables = [];\n\n      const hasBinding = this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\n\n      elementVars.push(...parsedVariables.map(v => VariableAst.fromParsedVariable(v)));\n      let templateValue;\n      let templateKey;\n\n      const normalizedName = this._normalizeAttributeName(attr.name);\n\n      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$1)) {\n        templateValue = attr.value;\n        templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$1.length);\n      }\n\n      const hasTemplateBinding = templateValue != null;\n\n      if (hasTemplateBinding) {\n        if (hasInlineTemplates) {\n          this._reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attr.sourceSpan);\n        }\n\n        hasInlineTemplates = true;\n        const parsedVariables = [];\n        const absoluteOffset = (attr.valueSpan || attr.sourceSpan).start.offset;\n\n        this._bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attr.sourceSpan, absoluteOffset, templateMatchableAttrs, templateElementOrDirectiveProps, parsedVariables, false\n        /* isIvyAst */\n        );\n\n        templateElementVars.push(...parsedVariables.map(v => VariableAst.fromParsedVariable(v)));\n      }\n\n      if (!hasBinding && !hasTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attrs.push(this.visitAttribute(attr, null));\n        matchableAttrs.push([attr.name, attr.value]);\n      }\n    });\n    const elementCssSelector = createElementCssSelector(elName, matchableAttrs);\n\n    const {\n      directives: directiveMetas,\n      matchElement\n    } = this._parseDirectives(this.selectorMatcher, elementCssSelector);\n\n    const references = [];\n    const boundDirectivePropNames = new Set();\n\n    const directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);\n\n    const elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\n\n    const isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n    const providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);\n    const children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));\n    providerContext.afterElement(); // Override the actual selector when the `ngProjectAs` attribute is provided\n\n    const projectionSelector = preparsedElement.projectAs != '' ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;\n    const ngContentIndex = parent.findNgContentIndex(projectionSelector);\n    let parsedElement;\n\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      // `<ng-content>` element\n      if (element.children && !element.children.every(_isEmptyTextNode)) {\n        this._reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n      }\n\n      parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n    } else if (isTemplateElement) {\n      // `<ng-template>` element\n      this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n\n      this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);\n\n      parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n    } else {\n      // element other than `<ng-content>` and `<ng-template>`\n      this._assertElementExists(matchElement, element);\n\n      this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);\n\n      const ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n      parsedElement = new ElementAst(elName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan, element.endSourceSpan || null);\n    }\n\n    if (hasInlineTemplates) {\n      // The element as a *-attribute\n      const templateQueryStartIndex = this.contentQueryStartId;\n      const templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);\n\n      const {\n        directives\n      } = this._parseDirectives(this.selectorMatcher, templateSelector);\n\n      const templateBoundDirectivePropNames = new Set();\n\n      const templateDirectiveAsts = this._createDirectiveAsts(true, elName, directives, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);\n\n      const templateElementProps = this._createElementPropertyAsts(elName, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n\n      this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);\n\n      const templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);\n      templateProviderContext.afterElement();\n      parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);\n    }\n\n    return parsedElement;\n  }\n\n  _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\n    const name = this._normalizeAttributeName(attr.name);\n\n    const value = attr.value;\n    const srcSpan = attr.sourceSpan;\n    const absoluteOffset = attr.valueSpan ? attr.valueSpan.start.offset : srcSpan.start.offset;\n    const boundEvents = [];\n    const bindParts = name.match(BIND_NAME_REGEXP);\n    let hasBinding = false;\n\n    if (bindParts !== null) {\n      hasBinding = true;\n\n      if (bindParts[KW_BIND_IDX] != null) {\n        this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n      } else if (bindParts[KW_LET_IDX]) {\n        if (isTemplateElement) {\n          const identifier = bindParts[IDENT_KW_IDX];\n\n          this._parseVariable(identifier, value, srcSpan, targetVars);\n        } else {\n          this._reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n        }\n      } else if (bindParts[KW_REF_IDX]) {\n        const identifier = bindParts[IDENT_KW_IDX];\n\n        this._parseReference(identifier, value, srcSpan, targetRefs);\n      } else if (bindParts[KW_ON_IDX]) {\n        this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n      } else if (bindParts[KW_BINDON_IDX]) {\n        this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n\n        this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n      } else if (bindParts[KW_AT_IDX]) {\n        this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n      } else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n        this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n\n        this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n      } else if (bindParts[IDENT_PROPERTY_IDX]) {\n        this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n      } else if (bindParts[IDENT_EVENT_IDX]) {\n        this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n      }\n    } else {\n      hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, attr.valueSpan, targetMatchableAttrs, targetProps);\n    }\n\n    if (!hasBinding) {\n      this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);\n    }\n\n    targetEvents.push(...boundEvents.map(e => BoundEventAst.fromParsedEvent(e)));\n    return hasBinding;\n  }\n\n  _normalizeAttributeName(attrName) {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n  }\n\n  _parseVariable(identifier, value, sourceSpan, targetVars) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this._reportError(`Variable does not have a name`, sourceSpan);\n    }\n\n    targetVars.push(new VariableAst(identifier, value, sourceSpan));\n  }\n\n  _parseReference(identifier, value, sourceSpan, targetRefs) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this._reportError(`Reference does not have a name`, sourceSpan);\n    }\n\n    targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n  }\n\n  _parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents) {\n    this._bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents);\n  }\n\n  _parseDirectives(selectorMatcher, elementCssSelector) {\n    // Need to sort the directives so that we get consistent results throughout,\n    // as selectorMatcher uses Maps inside.\n    // Also deduplicate directives as they might match more than one time!\n    const directives = newArray(this.directivesIndex.size); // Whether any directive selector matches on the element name\n\n    let matchElement = false;\n    selectorMatcher.match(elementCssSelector, (selector, directive) => {\n      directives[this.directivesIndex.get(directive)] = directive;\n      matchElement = matchElement || selector.hasElementSelector();\n    });\n    return {\n      directives: directives.filter(dir => !!dir),\n      matchElement\n    };\n  }\n\n  _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\n    const matchedReferences = new Set();\n    let component = null;\n    const directiveAsts = directives.map(directive => {\n      const sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, elementSourceSpan.fullStart, `Directive ${identifierName(directive.type)}`);\n\n      if (directive.isComponent) {\n        component = directive;\n      }\n\n      const directiveProperties = [];\n\n      const boundProperties = this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);\n\n      let hostProperties = boundProperties.map(prop => BoundElementPropertyAst.fromBoundProperty(prop)); // Note: We need to check the host properties here as well,\n      // as we don't know the element name in the DirectiveWrapperCompiler yet.\n\n      hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);\n\n      const parsedEvents = this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);\n\n      this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n\n      elementOrDirectiveRefs.forEach(elOrDirRef => {\n        if (elOrDirRef.value.length === 0 && directive.isComponent || elOrDirRef.isReferenceToDirective(directive)) {\n          targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));\n          matchedReferences.add(elOrDirRef.name);\n        }\n      });\n      const hostEvents = parsedEvents.map(e => BoundEventAst.fromParsedEvent(e));\n      const contentQueryStartId = this.contentQueryStartId;\n      this.contentQueryStartId += directive.queries.length;\n      return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\n    });\n    elementOrDirectiveRefs.forEach(elOrDirRef => {\n      if (elOrDirRef.value.length > 0) {\n        if (!matchedReferences.has(elOrDirRef.name)) {\n          this._reportError(`There is no directive with \"exportAs\" set to \"${elOrDirRef.value}\"`, elOrDirRef.sourceSpan);\n        }\n      } else if (!component) {\n        let refToken = null;\n\n        if (isTemplateElement) {\n          refToken = createTokenForExternalReference(this.reflector, Identifiers$1.TemplateRef);\n        }\n\n        targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));\n      }\n    });\n    return directiveAsts;\n  }\n\n  _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\n    if (directiveProperties) {\n      const boundPropsByName = new Map();\n      boundProps.forEach(boundProp => {\n        const prevValue = boundPropsByName.get(boundProp.name);\n\n        if (!prevValue || prevValue.isLiteral) {\n          // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n          boundPropsByName.set(boundProp.name, boundProp);\n        }\n      });\n      Object.keys(directiveProperties).forEach(dirProp => {\n        const elProp = directiveProperties[dirProp];\n        const boundProp = boundPropsByName.get(elProp); // Bindings are optional, so this binding only needs to be set up if an expression is given.\n\n        if (boundProp) {\n          targetBoundDirectivePropNames.add(boundProp.name);\n\n          if (!isEmptyExpression(boundProp.expression)) {\n            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n          }\n        }\n      });\n    }\n  }\n\n  _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {\n    const boundElementProps = [];\n    props.forEach(prop => {\n      if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n        const boundProp = this._bindingParser.createBoundElementProperty(elementName, prop);\n\n        boundElementProps.push(BoundElementPropertyAst.fromBoundProperty(boundProp));\n      }\n    });\n    return this._checkPropertiesInSchema(elementName, boundElementProps);\n  }\n\n  _findComponentDirectives(directives) {\n    return directives.filter(directive => directive.directive.isComponent);\n  }\n\n  _findComponentDirectiveNames(directives) {\n    return this._findComponentDirectives(directives).map(directive => identifierName(directive.directive.type));\n  }\n\n  _assertOnlyOneComponent(directives, sourceSpan) {\n    const componentTypeNames = this._findComponentDirectiveNames(directives);\n\n    if (componentTypeNames.length > 1) {\n      this._reportError(`More than one component matched on this element.\\n` + `Make sure that only one component's selector can match a given element.\\n` + `Conflicting components: ${componentTypeNames.join(',')}`, sourceSpan);\n    }\n  }\n  /**\r\n   * Make sure that non-angular tags conform to the schemas.\r\n   *\r\n   * Note: An element is considered an angular tag when at least one directive selector matches the\r\n   * tag name.\r\n   *\r\n   * @param matchElement Whether any directive has matched on the tag name\r\n   * @param element the html element\r\n   */\n\n\n  _assertElementExists(matchElement, element) {\n    const elName = element.name.replace(/^:xhtml:/, '');\n\n    if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n      let errorMsg = `'${elName}' is not a known element:\\n`;\n      errorMsg += `1. If '${elName}' is an Angular component, then verify that it is part of this module.\\n`;\n\n      if (elName.indexOf('-') > -1) {\n        errorMsg += `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n      } else {\n        errorMsg += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n      }\n\n      this._reportError(errorMsg, element.sourceSpan);\n    }\n  }\n\n  _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {\n    const componentTypeNames = this._findComponentDirectiveNames(directives);\n\n    if (componentTypeNames.length > 0) {\n      this._reportError(`Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);\n    }\n\n    elementProps.forEach(prop => {\n      this._reportError(`Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, sourceSpan);\n    });\n  }\n\n  _assertAllEventsPublishedByDirectives(directives, events) {\n    const allDirectiveEvents = new Set();\n    directives.forEach(directive => {\n      Object.keys(directive.directive.outputs).forEach(k => {\n        const eventName = directive.directive.outputs[k];\n        allDirectiveEvents.add(eventName);\n      });\n    });\n    events.forEach(event => {\n      if (event.target != null || !allDirectiveEvents.has(event.name)) {\n        this._reportError(`Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, event.sourceSpan);\n      }\n    });\n  }\n\n  _checkPropertiesInSchema(elementName, boundProps) {\n    // Note: We can't filter out empty expressions before this method,\n    // as we still want to validate them!\n    return boundProps.filter(boundProp => {\n      if (boundProp.type === 0\n      /* Property */\n      && !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {\n        let errorMsg = `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;\n\n        if (elementName.startsWith('ng-')) {\n          errorMsg += `\\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` + `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        } else if (elementName.indexOf('-') > -1) {\n          errorMsg += `\\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` + `\\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` + `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        }\n\n        this._reportError(errorMsg, boundProp.sourceSpan);\n      }\n\n      return !isEmptyExpression(boundProp.value);\n    });\n  }\n\n  _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n\n}\n\nclass NonBindableVisitor {\n  visitElement(ast, parent) {\n    const preparsedElement = preparseElement(ast);\n\n    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    const attrNameAndValues = ast.attrs.map(attr => [attr.name, attr.value]);\n    const selector = createElementCssSelector(ast.name, attrNameAndValues);\n    const ngContentIndex = parent.findNgContentIndex(selector);\n    const children = visitAll$1(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n    return new ElementAst(ast.name, visitAll$1(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n  }\n\n  visitComment(comment, context) {\n    return null;\n  }\n\n  visitAttribute(attribute, context) {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n\n  visitText(text, parent) {\n    const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());\n    return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n  }\n\n  visitExpansion(expansion, context) {\n    return expansion;\n  }\n\n  visitExpansionCase(expansionCase, context) {\n    return expansionCase;\n  }\n\n}\n/**\r\n * A reference to an element or directive in a template. E.g., the reference in this template:\r\n *\r\n * <div #myMenu=\"coolMenu\">\r\n *\r\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\r\n */\n\n\nclass ElementOrDirectiveRef {\n  constructor(name, value, sourceSpan) {\n    this.name = name;\n    this.value = value;\n    this.sourceSpan = sourceSpan;\n  }\n  /** Gets whether this is a reference to the given directive. */\n\n\n  isReferenceToDirective(directive) {\n    return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\n  }\n\n}\n/** Splits a raw, potentially comma-delimited `exportAs` value into an array of names. */\n\n\nfunction splitExportAs(exportAs) {\n  return exportAs ? exportAs.split(',').map(e => e.trim()) : [];\n}\n\nfunction splitClasses(classAttrValue) {\n  return classAttrValue.trim().split(/\\s+/g);\n}\n\nclass ElementContext {\n  constructor(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n    this.isTemplateElement = isTemplateElement;\n    this._ngContentIndexMatcher = _ngContentIndexMatcher;\n    this._wildcardNgContentIndex = _wildcardNgContentIndex;\n    this.providerContext = providerContext;\n  }\n\n  static create(isTemplateElement, directives, providerContext) {\n    const matcher = new SelectorMatcher();\n    let wildcardNgContentIndex = null;\n    const component = directives.find(directive => directive.directive.isComponent);\n\n    if (component) {\n      const ngContentSelectors = component.directive.template.ngContentSelectors;\n\n      for (let i = 0; i < ngContentSelectors.length; i++) {\n        const selector = ngContentSelectors[i];\n\n        if (selector === '*') {\n          wildcardNgContentIndex = i;\n        } else {\n          matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n        }\n      }\n    }\n\n    return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n  }\n\n  findNgContentIndex(selector) {\n    const ngContentIndices = [];\n\n    this._ngContentIndexMatcher.match(selector, (selector, ngContentIndex) => {\n      ngContentIndices.push(ngContentIndex);\n    });\n\n    ngContentIndices.sort();\n\n    if (this._wildcardNgContentIndex != null) {\n      ngContentIndices.push(this._wildcardNgContentIndex);\n    }\n\n    return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n  }\n\n}\n\nfunction createElementCssSelector(elementName, attributes) {\n  const cssSelector = new CssSelector();\n  const elNameNoNs = splitNsName(elementName)[1];\n  cssSelector.setElement(elNameNoNs);\n\n  for (let i = 0; i < attributes.length; i++) {\n    const attrName = attributes[i][0];\n    const attrNameNoNs = splitNsName(attrName)[1];\n    const attrValue = attributes[i][1];\n    cssSelector.addAttribute(attrNameNoNs, attrValue);\n\n    if (attrName.toLowerCase() == CLASS_ATTR) {\n      const classes = splitClasses(attrValue);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  }\n\n  return cssSelector;\n}\n\nconst EMPTY_ELEMENT_CONTEXT = /*#__PURE__*/new ElementContext(true, /*#__PURE__*/new SelectorMatcher(), null, null);\nconst NON_BINDABLE_VISITOR = /*#__PURE__*/new NonBindableVisitor();\n\nfunction _isEmptyTextNode(node) {\n  return node instanceof Text$3 && node.value.trim().length == 0;\n}\n\nfunction removeSummaryDuplicates(items) {\n  const map = new Map();\n  items.forEach(item => {\n    if (!map.get(item.type.reference)) {\n      map.set(item.type.reference, item);\n    }\n  });\n  return Array.from(map.values());\n}\n\nfunction isEmptyExpression(ast) {\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n\n  return ast instanceof EmptyExpr;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Parses string representation of a style and converts it into object literal.\r\n *\r\n * @param value string representation of style as used in the `style` attribute in HTML.\r\n *   Example: `color: red; height: auto`.\r\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\r\n * 'auto']`\r\n */\n\n\nfunction parse(value) {\n  // we use a string array here instead of a string map\n  // because a string-map is not guaranteed to retain the\n  // order of the entries whereas a string array can be\n  // constructed in a [key, value, key, value] format.\n  const styles = [];\n  let i = 0;\n  let parenDepth = 0;\n  let quote = 0\n  /* QuoteNone */\n  ;\n  let valueStart = 0;\n  let propStart = 0;\n  let currentProp = null;\n  let valueHasQuotes = false;\n\n  while (i < value.length) {\n    const token = value.charCodeAt(i++);\n\n    switch (token) {\n      case 40\n      /* OpenParen */\n      :\n        parenDepth++;\n        break;\n\n      case 41\n      /* CloseParen */\n      :\n        parenDepth--;\n        break;\n\n      case 39\n      /* QuoteSingle */\n      :\n        // valueStart needs to be there since prop values don't\n        // have quotes in CSS\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n\n        if (quote === 0\n        /* QuoteNone */\n        ) {\n          quote = 39\n          /* QuoteSingle */\n          ;\n        } else if (quote === 39\n        /* QuoteSingle */\n        && value.charCodeAt(i - 1) !== 92\n        /* BackSlash */\n        ) {\n          quote = 0\n          /* QuoteNone */\n          ;\n        }\n\n        break;\n\n      case 34\n      /* QuoteDouble */\n      :\n        // same logic as above\n        valueHasQuotes = valueHasQuotes || valueStart > 0;\n\n        if (quote === 0\n        /* QuoteNone */\n        ) {\n          quote = 34\n          /* QuoteDouble */\n          ;\n        } else if (quote === 34\n        /* QuoteDouble */\n        && value.charCodeAt(i - 1) !== 92\n        /* BackSlash */\n        ) {\n          quote = 0\n          /* QuoteNone */\n          ;\n        }\n\n        break;\n\n      case 58\n      /* Colon */\n      :\n        if (!currentProp && parenDepth === 0 && quote === 0\n        /* QuoteNone */\n        ) {\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n          valueStart = i;\n        }\n\n        break;\n\n      case 59\n      /* Semicolon */\n      :\n        if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0\n        /* QuoteNone */\n        ) {\n          const styleVal = value.substring(valueStart, i - 1).trim();\n          styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n          propStart = i;\n          valueStart = 0;\n          currentProp = null;\n          valueHasQuotes = false;\n        }\n\n        break;\n    }\n  }\n\n  if (currentProp && valueStart) {\n    const styleVal = value.substr(valueStart).trim();\n    styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n  }\n\n  return styles;\n}\n\nfunction stripUnnecessaryQuotes(value) {\n  const qS = value.charCodeAt(0);\n  const qE = value.charCodeAt(value.length - 1);\n\n  if (qS == qE && (qS == 39\n  /* QuoteSingle */\n  || qS == 34\n  /* QuoteDouble */\n  )) {\n    const tempValue = value.substring(1, value.length - 1); // special case to avoid using a multi-quoted string that was just chomped\n    // (e.g. `font-family: \"Verdana\", \"sans-serif\"`)\n\n    if (tempValue.indexOf('\\'') == -1 && tempValue.indexOf('\"') == -1) {\n      value = tempValue;\n    }\n  }\n\n  return value;\n}\n\nfunction hyphenate(value) {\n  return value.replace(/[a-z][A-Z]/g, v => {\n    return v.charAt(0) + '-' + v.charAt(1);\n  }).toLowerCase();\n}\n\nconst IMPORTANT_FLAG = '!important';\n/**\r\n * Minimum amount of binding slots required in the runtime for style/class bindings.\r\n *\r\n * Styling in Angular uses up two slots in the runtime LView/TData data structures to\r\n * record binding data, property information and metadata.\r\n *\r\n * When a binding is registered it will place the following information in the `LView`:\r\n *\r\n * slot 1) binding value\r\n * slot 2) cached value (all other values collected before it in string form)\r\n *\r\n * When a binding is registered it will place the following information in the `TData`:\r\n *\r\n * slot 1) prop name\r\n * slot 2) binding index that points to the previous style/class binding (and some extra config\r\n * values)\r\n *\r\n * Let's imagine we have a binding that looks like so:\r\n *\r\n * ```\r\n * <div [style.width]=\"x\" [style.height]=\"y\">\r\n * ```\r\n *\r\n * Our `LView` and `TData` data-structures look like so:\r\n *\r\n * ```typescript\r\n * LView = [\r\n *   // ...\r\n *   x, // value of x\r\n *   \"width: x\",\r\n *\r\n *   y, // value of y\r\n *   \"width: x; height: y\",\r\n *   // ...\r\n * ];\r\n *\r\n * TData = [\r\n *   // ...\r\n *   \"width\", // binding slot 20\r\n *   0,\r\n *\r\n *   \"height\",\r\n *   20,\r\n *   // ...\r\n * ];\r\n * ```\r\n *\r\n * */\n\nconst MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;\n/**\r\n * Produces creation/update instructions for all styling bindings (class and style)\r\n *\r\n * It also produces the creation instruction to register all initial styling values\r\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\r\n * on an element within a template).\r\n *\r\n * The builder class below handles producing instructions for the following cases:\r\n *\r\n * - Static style/class attributes (style=\"...\" and class=\"...\")\r\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\r\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\r\n *\r\n * Due to the complex relationship of all of these cases, the instructions generated\r\n * for these attributes/properties/bindings must be done so in the correct order. The\r\n * order which these must be generated is as follows:\r\n *\r\n * if (createMode) {\r\n *   styling(...)\r\n * }\r\n * if (updateMode) {\r\n *   styleMap(...)\r\n *   classMap(...)\r\n *   styleProp(...)\r\n *   classProp(...)\r\n * }\r\n *\r\n * The creation/update methods within the builder class produce these instructions.\r\n */\n\nclass StylingBuilder {\n  constructor(_directiveExpr) {\n    this._directiveExpr = _directiveExpr;\n    /** Whether or not there are any static styling values present */\n\n    this._hasInitialValues = false;\n    /**\r\n     *  Whether or not there are any styling bindings present\r\n     *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\r\n     */\n\n    this.hasBindings = false;\n    this.hasBindingsWithPipes = false;\n    /** the input for [class] (if it exists) */\n\n    this._classMapInput = null;\n    /** the input for [style] (if it exists) */\n\n    this._styleMapInput = null;\n    /** an array of each [style.prop] input */\n\n    this._singleStyleInputs = null;\n    /** an array of each [class.name] input */\n\n    this._singleClassInputs = null;\n    this._lastStylingInput = null;\n    this._firstStylingInput = null; // maps are used instead of hash maps because a Map will\n    // retain the ordering of the keys\n\n    /**\r\n     * Represents the location of each style binding in the template\r\n     * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\r\n     * that `width=0` and `height=1`)\r\n     */\n\n    this._stylesIndex = new Map();\n    /**\r\n     * Represents the location of each class binding in the template\r\n     * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\r\n     * that `big=0` and `hidden=1`)\r\n     */\n\n    this._classesIndex = new Map();\n    this._initialStyleValues = [];\n    this._initialClassValues = [];\n  }\n  /**\r\n   * Registers a given input to the styling builder to be later used when producing AOT code.\r\n   *\r\n   * The code below will only accept the input if it is somehow tied to styling (whether it be\r\n   * style/class bindings or static style/class attributes).\r\n   */\n\n\n  registerBoundInput(input) {\n    // [attr.style] or [attr.class] are skipped in the code below,\n    // they should not be treated as styling-based bindings since\n    // they are intended to be written directly to the attr and\n    // will therefore skip all style/class resolution that is present\n    // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n    // [class.prop]=\"\". [class]=\"\" assignments\n    let binding = null;\n    let name = input.name;\n\n    switch (input.type) {\n      case 0\n      /* Property */\n      :\n        binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n        break;\n\n      case 3\n      /* Style */\n      :\n        binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n        break;\n\n      case 2\n      /* Class */\n      :\n        binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n        break;\n    }\n\n    return binding ? true : false;\n  }\n\n  registerInputBasedOnName(name, expression, sourceSpan) {\n    let binding = null;\n    const prefix = name.substring(0, 6);\n    const isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';\n    const isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');\n\n    if (isStyle || isClass) {\n      const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n\n      const property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1\n\n      if (isStyle) {\n        binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n      } else {\n        binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n      }\n    }\n\n    return binding;\n  }\n\n  registerStyleInput(name, isMapBased, value, sourceSpan, suffix) {\n    if (isEmptyExpression(value)) {\n      return null;\n    } // CSS custom properties are case-sensitive so we shouldn't normalize them.\n    // See: https://www.w3.org/TR/css-variables-1/#defining-variables\n\n\n    if (!isCssCustomProperty(name)) {\n      name = hyphenate(name);\n    }\n\n    const {\n      property,\n      hasOverrideFlag,\n      suffix: bindingSuffix\n    } = parseProperty(name);\n    suffix = typeof suffix === 'string' && suffix.length !== 0 ? suffix : bindingSuffix;\n    const entry = {\n      name: property,\n      suffix: suffix,\n      value,\n      sourceSpan,\n      hasOverrideFlag\n    };\n\n    if (isMapBased) {\n      this._styleMapInput = entry;\n    } else {\n      (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n      registerIntoMap(this._stylesIndex, property);\n    }\n\n    this._lastStylingInput = entry;\n    this._firstStylingInput = this._firstStylingInput || entry;\n\n    this._checkForPipes(value);\n\n    this.hasBindings = true;\n    return entry;\n  }\n\n  registerClassInput(name, isMapBased, value, sourceSpan) {\n    if (isEmptyExpression(value)) {\n      return null;\n    }\n\n    const {\n      property,\n      hasOverrideFlag\n    } = parseProperty(name);\n    const entry = {\n      name: property,\n      value,\n      sourceSpan,\n      hasOverrideFlag,\n      suffix: null\n    };\n\n    if (isMapBased) {\n      this._classMapInput = entry;\n    } else {\n      (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n      registerIntoMap(this._classesIndex, property);\n    }\n\n    this._lastStylingInput = entry;\n    this._firstStylingInput = this._firstStylingInput || entry;\n\n    this._checkForPipes(value);\n\n    this.hasBindings = true;\n    return entry;\n  }\n\n  _checkForPipes(value) {\n    if (value instanceof ASTWithSource && value.ast instanceof BindingPipe) {\n      this.hasBindingsWithPipes = true;\n    }\n  }\n  /**\r\n   * Registers the element's static style string value to the builder.\r\n   *\r\n   * @param value the style string (e.g. `width:100px; height:200px;`)\r\n   */\n\n\n  registerStyleAttr(value) {\n    this._initialStyleValues = parse(value);\n    this._hasInitialValues = true;\n  }\n  /**\r\n   * Registers the element's static class string value to the builder.\r\n   *\r\n   * @param value the className string (e.g. `disabled gold zoom`)\r\n   */\n\n\n  registerClassAttr(value) {\n    this._initialClassValues = value.trim().split(/\\s+/g);\n    this._hasInitialValues = true;\n  }\n  /**\r\n   * Appends all styling-related expressions to the provided attrs array.\r\n   *\r\n   * @param attrs an existing array where each of the styling expressions\r\n   * will be inserted into.\r\n   */\n\n\n  populateInitialStylingAttrs(attrs) {\n    // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n    if (this._initialClassValues.length) {\n      attrs.push(literal(1\n      /* Classes */\n      ));\n\n      for (let i = 0; i < this._initialClassValues.length; i++) {\n        attrs.push(literal(this._initialClassValues[i]));\n      }\n    } // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n\n\n    if (this._initialStyleValues.length) {\n      attrs.push(literal(2\n      /* Styles */\n      ));\n\n      for (let i = 0; i < this._initialStyleValues.length; i += 2) {\n        attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));\n      }\n    }\n  }\n  /**\r\n   * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\r\n   *\r\n   * The instruction generation code below is used for producing the AOT statement code which is\r\n   * responsible for registering initial styles (within a directive hostBindings' creation block),\r\n   * as well as any of the provided attribute values, to the directive host element.\r\n   */\n\n\n  assignHostAttrs(attrs, definitionMap) {\n    if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n      this.populateInitialStylingAttrs(attrs);\n      definitionMap.set('hostAttrs', literalArr(attrs));\n    }\n  }\n  /**\r\n   * Builds an instruction with all the expressions and parameters for `classMap`.\r\n   *\r\n   * The instruction data will contain all expressions for `classMap` to function\r\n   * which includes the `[class]` expression params.\r\n   */\n\n\n  buildClassMapInstruction(valueConverter) {\n    if (this._classMapInput) {\n      return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);\n    }\n\n    return null;\n  }\n  /**\r\n   * Builds an instruction with all the expressions and parameters for `styleMap`.\r\n   *\r\n   * The instruction data will contain all expressions for `styleMap` to function\r\n   * which includes the `[style]` expression params.\r\n   */\n\n\n  buildStyleMapInstruction(valueConverter) {\n    if (this._styleMapInput) {\n      return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);\n    }\n\n    return null;\n  }\n\n  _buildMapBasedInstruction(valueConverter, isClassBased, stylingInput) {\n    // each styling binding value is stored in the LView\n    // map-based bindings allocate two slots: one for the\n    // previous binding value and another for the previous\n    // className or style attribute value.\n    let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED; // these values must be outside of the update block so that they can\n    // be evaluated (the AST visit call) during creation time so that any\n    // pipes can be picked up in time before the template is built\n\n    const mapValue = stylingInput.value.visit(valueConverter);\n    let reference;\n\n    if (mapValue instanceof Interpolation) {\n      totalBindingSlotsRequired += mapValue.expressions.length;\n      reference = isClassBased ? getClassMapInterpolationExpression(mapValue) : getStyleMapInterpolationExpression(mapValue);\n    } else {\n      reference = isClassBased ? Identifiers.classMap : Identifiers.styleMap;\n    }\n\n    return {\n      reference,\n      calls: [{\n        supportsInterpolation: true,\n        sourceSpan: stylingInput.sourceSpan,\n        allocateBindingSlots: totalBindingSlotsRequired,\n        params: convertFn => {\n          const convertResult = convertFn(mapValue);\n          const params = Array.isArray(convertResult) ? convertResult : [convertResult];\n          return params;\n        }\n      }]\n    };\n  }\n\n  _buildSingleInputs(reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {\n    const instructions = [];\n    inputs.forEach(input => {\n      const previousInstruction = instructions[instructions.length - 1];\n      const value = input.value.visit(valueConverter);\n      let referenceForCall = reference; // each styling binding value is stored in the LView\n      // but there are two values stored for each binding:\n      //   1) the value itself\n      //   2) an intermediate value (concatenation of style up to this point).\n      //      We need to store the intermediate value so that we don't allocate\n      //      the strings on each CD.\n\n      let totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;\n\n      if (value instanceof Interpolation) {\n        totalBindingSlotsRequired += value.expressions.length;\n\n        if (getInterpolationExpressionFn) {\n          referenceForCall = getInterpolationExpressionFn(value);\n        }\n      }\n\n      const call = {\n        sourceSpan: input.sourceSpan,\n        allocateBindingSlots: totalBindingSlotsRequired,\n        supportsInterpolation: !!getInterpolationExpressionFn,\n        params: convertFn => {\n          // params => stylingProp(propName, value, suffix)\n          const params = [];\n          params.push(literal(input.name));\n          const convertResult = convertFn(value);\n\n          if (Array.isArray(convertResult)) {\n            params.push(...convertResult);\n          } else {\n            params.push(convertResult);\n          } // [style.prop] bindings may use suffix values (e.g. px, em, etc...), therefore,\n          // if that is detected then we need to pass that in as an optional param.\n\n\n          if (!isClassBased && input.suffix !== null) {\n            params.push(literal(input.suffix));\n          }\n\n          return params;\n        }\n      }; // If we ended up generating a call to the same instruction as the previous styling property\n      // we can chain the calls together safely to save some bytes, otherwise we have to generate\n      // a separate instruction call. This is primarily a concern with interpolation instructions\n      // where we may start off with one `reference`, but end up using another based on the\n      // number of interpolations.\n\n      if (previousInstruction && previousInstruction.reference === referenceForCall) {\n        previousInstruction.calls.push(call);\n      } else {\n        instructions.push({\n          reference: referenceForCall,\n          calls: [call]\n        });\n      }\n    });\n    return instructions;\n  }\n\n  _buildClassInputs(valueConverter) {\n    if (this._singleClassInputs) {\n      return this._buildSingleInputs(Identifiers.classProp, this._singleClassInputs, valueConverter, null, true);\n    }\n\n    return [];\n  }\n\n  _buildStyleInputs(valueConverter) {\n    if (this._singleStyleInputs) {\n      return this._buildSingleInputs(Identifiers.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);\n    }\n\n    return [];\n  }\n  /**\r\n   * Constructs all instructions which contain the expressions that will be placed\r\n   * into the update block of a template function or a directive hostBindings function.\r\n   */\n\n\n  buildUpdateLevelInstructions(valueConverter) {\n    const instructions = [];\n\n    if (this.hasBindings) {\n      const styleMapInstruction = this.buildStyleMapInstruction(valueConverter);\n\n      if (styleMapInstruction) {\n        instructions.push(styleMapInstruction);\n      }\n\n      const classMapInstruction = this.buildClassMapInstruction(valueConverter);\n\n      if (classMapInstruction) {\n        instructions.push(classMapInstruction);\n      }\n\n      instructions.push(...this._buildStyleInputs(valueConverter));\n      instructions.push(...this._buildClassInputs(valueConverter));\n    }\n\n    return instructions;\n  }\n\n}\n\nfunction registerIntoMap(map, key) {\n  if (!map.has(key)) {\n    map.set(key, map.size);\n  }\n}\n\nfunction parseProperty(name) {\n  let hasOverrideFlag = false;\n  const overrideIndex = name.indexOf(IMPORTANT_FLAG);\n\n  if (overrideIndex !== -1) {\n    name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n    hasOverrideFlag = true;\n  }\n\n  let suffix = null;\n  let property = name;\n  const unitIndex = name.lastIndexOf('.');\n\n  if (unitIndex > 0) {\n    suffix = name.substr(unitIndex + 1);\n    property = name.substring(0, unitIndex);\n  }\n\n  return {\n    property,\n    suffix,\n    hasOverrideFlag\n  };\n}\n/**\r\n * Gets the instruction to generate for an interpolated class map.\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getClassMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.classMap;\n\n    case 3:\n      return Identifiers.classMapInterpolate1;\n\n    case 5:\n      return Identifiers.classMapInterpolate2;\n\n    case 7:\n      return Identifiers.classMapInterpolate3;\n\n    case 9:\n      return Identifiers.classMapInterpolate4;\n\n    case 11:\n      return Identifiers.classMapInterpolate5;\n\n    case 13:\n      return Identifiers.classMapInterpolate6;\n\n    case 15:\n      return Identifiers.classMapInterpolate7;\n\n    case 17:\n      return Identifiers.classMapInterpolate8;\n\n    default:\n      return Identifiers.classMapInterpolateV;\n  }\n}\n/**\r\n * Gets the instruction to generate for an interpolated style map.\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getStyleMapInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.styleMap;\n\n    case 3:\n      return Identifiers.styleMapInterpolate1;\n\n    case 5:\n      return Identifiers.styleMapInterpolate2;\n\n    case 7:\n      return Identifiers.styleMapInterpolate3;\n\n    case 9:\n      return Identifiers.styleMapInterpolate4;\n\n    case 11:\n      return Identifiers.styleMapInterpolate5;\n\n    case 13:\n      return Identifiers.styleMapInterpolate6;\n\n    case 15:\n      return Identifiers.styleMapInterpolate7;\n\n    case 17:\n      return Identifiers.styleMapInterpolate8;\n\n    default:\n      return Identifiers.styleMapInterpolateV;\n  }\n}\n/**\r\n * Gets the instruction to generate for an interpolated style prop.\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getStylePropInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.styleProp;\n\n    case 3:\n      return Identifiers.stylePropInterpolate1;\n\n    case 5:\n      return Identifiers.stylePropInterpolate2;\n\n    case 7:\n      return Identifiers.stylePropInterpolate3;\n\n    case 9:\n      return Identifiers.stylePropInterpolate4;\n\n    case 11:\n      return Identifiers.stylePropInterpolate5;\n\n    case 13:\n      return Identifiers.stylePropInterpolate6;\n\n    case 15:\n      return Identifiers.stylePropInterpolate7;\n\n    case 17:\n      return Identifiers.stylePropInterpolate8;\n\n    default:\n      return Identifiers.stylePropInterpolateV;\n  }\n}\n/**\r\n * Checks whether property name is a custom CSS property.\r\n * See: https://www.w3.org/TR/css-variables-1\r\n */\n\n\nfunction isCssCustomProperty(name) {\n  return name.startsWith('--');\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar TokenType = /*#__PURE__*/(() => {\n  TokenType = TokenType || {};\n  TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n  TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n  TokenType[TokenType[\"PrivateIdentifier\"] = 2] = \"PrivateIdentifier\";\n  TokenType[TokenType[\"Keyword\"] = 3] = \"Keyword\";\n  TokenType[TokenType[\"String\"] = 4] = \"String\";\n  TokenType[TokenType[\"Operator\"] = 5] = \"Operator\";\n  TokenType[TokenType[\"Number\"] = 6] = \"Number\";\n  TokenType[TokenType[\"Error\"] = 7] = \"Error\";\n  return TokenType;\n})();\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\n\nclass Lexer {\n  tokenize(text) {\n    const scanner = new _Scanner(text);\n    const tokens = [];\n    let token = scanner.scanToken();\n\n    while (token != null) {\n      tokens.push(token);\n      token = scanner.scanToken();\n    }\n\n    return tokens;\n  }\n\n}\n\nclass Token {\n  constructor(index, end, type, numValue, strValue) {\n    this.index = index;\n    this.end = end;\n    this.type = type;\n    this.numValue = numValue;\n    this.strValue = strValue;\n  }\n\n  isCharacter(code) {\n    return this.type == TokenType.Character && this.numValue == code;\n  }\n\n  isNumber() {\n    return this.type == TokenType.Number;\n  }\n\n  isString() {\n    return this.type == TokenType.String;\n  }\n\n  isOperator(operator) {\n    return this.type == TokenType.Operator && this.strValue == operator;\n  }\n\n  isIdentifier() {\n    return this.type == TokenType.Identifier;\n  }\n\n  isPrivateIdentifier() {\n    return this.type == TokenType.PrivateIdentifier;\n  }\n\n  isKeyword() {\n    return this.type == TokenType.Keyword;\n  }\n\n  isKeywordLet() {\n    return this.type == TokenType.Keyword && this.strValue == 'let';\n  }\n\n  isKeywordAs() {\n    return this.type == TokenType.Keyword && this.strValue == 'as';\n  }\n\n  isKeywordNull() {\n    return this.type == TokenType.Keyword && this.strValue == 'null';\n  }\n\n  isKeywordUndefined() {\n    return this.type == TokenType.Keyword && this.strValue == 'undefined';\n  }\n\n  isKeywordTrue() {\n    return this.type == TokenType.Keyword && this.strValue == 'true';\n  }\n\n  isKeywordFalse() {\n    return this.type == TokenType.Keyword && this.strValue == 'false';\n  }\n\n  isKeywordThis() {\n    return this.type == TokenType.Keyword && this.strValue == 'this';\n  }\n\n  isError() {\n    return this.type == TokenType.Error;\n  }\n\n  toNumber() {\n    return this.type == TokenType.Number ? this.numValue : -1;\n  }\n\n  toString() {\n    switch (this.type) {\n      case TokenType.Character:\n      case TokenType.Identifier:\n      case TokenType.Keyword:\n      case TokenType.Operator:\n      case TokenType.PrivateIdentifier:\n      case TokenType.String:\n      case TokenType.Error:\n        return this.strValue;\n\n      case TokenType.Number:\n        return this.numValue.toString();\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nfunction newCharacterToken(index, end, code) {\n  return new Token(index, end, TokenType.Character, code, String.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.Identifier, 0, text);\n}\n\nfunction newPrivateIdentifierToken(index, end, text) {\n  return new Token(index, end, TokenType.PrivateIdentifier, 0, text);\n}\n\nfunction newKeywordToken(index, end, text) {\n  return new Token(index, end, TokenType.Keyword, 0, text);\n}\n\nfunction newOperatorToken(index, end, text) {\n  return new Token(index, end, TokenType.Operator, 0, text);\n}\n\nfunction newStringToken(index, end, text) {\n  return new Token(index, end, TokenType.String, 0, text);\n}\n\nfunction newNumberToken(index, end, n) {\n  return new Token(index, end, TokenType.Number, n, '');\n}\n\nfunction newErrorToken(index, end, message) {\n  return new Token(index, end, TokenType.Error, 0, message);\n}\n\nconst EOF = /*#__PURE__*/new Token(-1, -1, TokenType.Character, 0, '');\n\nclass _Scanner {\n  constructor(input) {\n    this.input = input;\n    this.peek = 0;\n    this.index = -1;\n    this.length = input.length;\n    this.advance();\n  }\n\n  advance() {\n    this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n  }\n\n  scanToken() {\n    const input = this.input,\n          length = this.length;\n    let peek = this.peek,\n        index = this.index; // Skip whitespace.\n\n    while (peek <= $SPACE) {\n      if (++index >= length) {\n        peek = $EOF;\n        break;\n      } else {\n        peek = input.charCodeAt(index);\n      }\n    }\n\n    this.peek = peek;\n    this.index = index;\n\n    if (index >= length) {\n      return null;\n    } // Handle identifiers and numbers.\n\n\n    if (isIdentifierStart(peek)) return this.scanIdentifier();\n    if (isDigit(peek)) return this.scanNumber(index);\n    const start = index;\n\n    switch (peek) {\n      case $PERIOD:\n        this.advance();\n        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, this.index, $PERIOD);\n\n      case $LPAREN:\n      case $RPAREN:\n      case $LBRACE:\n      case $RBRACE:\n      case $LBRACKET:\n      case $RBRACKET:\n      case $COMMA:\n      case $COLON:\n      case $SEMICOLON:\n        return this.scanCharacter(start, peek);\n\n      case $SQ:\n      case $DQ:\n        return this.scanString();\n\n      case $HASH:\n        return this.scanPrivateIdentifier();\n\n      case $PLUS:\n      case $MINUS:\n      case $STAR:\n      case $SLASH:\n      case $PERCENT:\n      case $CARET:\n        return this.scanOperator(start, String.fromCharCode(peek));\n\n      case $QUESTION:\n        return this.scanQuestion(start);\n\n      case $LT:\n      case $GT:\n        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n\n      case $BANG:\n      case $EQ:\n        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n\n      case $AMPERSAND:\n        return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n\n      case $BAR:\n        return this.scanComplexOperator(start, '|', $BAR, '|');\n\n      case $NBSP:\n        while (isWhitespace(this.peek)) this.advance();\n\n        return this.scanToken();\n    }\n\n    this.advance();\n    return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n  }\n\n  scanCharacter(start, code) {\n    this.advance();\n    return newCharacterToken(start, this.index, code);\n  }\n\n  scanOperator(start, str) {\n    this.advance();\n    return newOperatorToken(start, this.index, str);\n  }\n  /**\r\n   * Tokenize a 2/3 char long operator\r\n   *\r\n   * @param start start index in the expression\r\n   * @param one first symbol (always part of the operator)\r\n   * @param twoCode code point for the second symbol\r\n   * @param two second symbol (part of the operator when the second code point matches)\r\n   * @param threeCode code point for the third symbol\r\n   * @param three third symbol (part of the operator when provided and matches source expression)\r\n   */\n\n\n  scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n    this.advance();\n    let str = one;\n\n    if (this.peek == twoCode) {\n      this.advance();\n      str += two;\n    }\n\n    if (threeCode != null && this.peek == threeCode) {\n      this.advance();\n      str += three;\n    }\n\n    return newOperatorToken(start, this.index, str);\n  }\n\n  scanIdentifier() {\n    const start = this.index;\n    this.advance();\n\n    while (isIdentifierPart(this.peek)) this.advance();\n\n    const str = this.input.substring(start, this.index);\n    return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) : newIdentifierToken(start, this.index, str);\n  }\n  /** Scans an ECMAScript private identifier. */\n\n\n  scanPrivateIdentifier() {\n    const start = this.index;\n    this.advance();\n\n    if (!isIdentifierStart(this.peek)) {\n      return this.error('Invalid character [#]', -1);\n    }\n\n    while (isIdentifierPart(this.peek)) this.advance();\n\n    const identifierName = this.input.substring(start, this.index);\n    return newPrivateIdentifierToken(start, this.index, identifierName);\n  }\n\n  scanNumber(start) {\n    let simple = this.index === start;\n    let hasSeparators = false;\n    this.advance(); // Skip initial digit.\n\n    while (true) {\n      if (isDigit(this.peek)) {// Do nothing.\n      } else if (this.peek === $_) {\n        // Separators are only valid when they're surrounded by digits. E.g. `1_0_1` is\n        // valid while `_101` and `101_` are not. The separator can't be next to the decimal\n        // point or another separator either. Note that it's unlikely that we'll hit a case where\n        // the underscore is at the start, because that's a valid identifier and it will be picked\n        // up earlier in the parsing. We validate for it anyway just in case.\n        if (!isDigit(this.input.charCodeAt(this.index - 1)) || !isDigit(this.input.charCodeAt(this.index + 1))) {\n          return this.error('Invalid numeric separator', 0);\n        }\n\n        hasSeparators = true;\n      } else if (this.peek === $PERIOD) {\n        simple = false;\n      } else if (isExponentStart(this.peek)) {\n        this.advance();\n        if (isExponentSign(this.peek)) this.advance();\n        if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);\n        simple = false;\n      } else {\n        break;\n      }\n\n      this.advance();\n    }\n\n    let str = this.input.substring(start, this.index);\n\n    if (hasSeparators) {\n      str = str.replace(/_/g, '');\n    }\n\n    const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n    return newNumberToken(start, this.index, value);\n  }\n\n  scanString() {\n    const start = this.index;\n    const quote = this.peek;\n    this.advance(); // Skip initial quote.\n\n    let buffer = '';\n    let marker = this.index;\n    const input = this.input;\n\n    while (this.peek != quote) {\n      if (this.peek == $BACKSLASH) {\n        buffer += input.substring(marker, this.index);\n        this.advance();\n        let unescapedCode; // Workaround for TS2.1-introduced type strictness\n\n        this.peek = this.peek;\n\n        if (this.peek == $u) {\n          // 4 character hex code for unicode character.\n          const hex = input.substring(this.index + 1, this.index + 5);\n\n          if (/^[0-9a-f]+$/i.test(hex)) {\n            unescapedCode = parseInt(hex, 16);\n          } else {\n            return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n          }\n\n          for (let i = 0; i < 5; i++) {\n            this.advance();\n          }\n        } else {\n          unescapedCode = unescape(this.peek);\n          this.advance();\n        }\n\n        buffer += String.fromCharCode(unescapedCode);\n        marker = this.index;\n      } else if (this.peek == $EOF) {\n        return this.error('Unterminated quote', 0);\n      } else {\n        this.advance();\n      }\n    }\n\n    const last = input.substring(marker, this.index);\n    this.advance(); // Skip terminating quote.\n\n    return newStringToken(start, this.index, buffer + last);\n  }\n\n  scanQuestion(start) {\n    this.advance();\n    let str = '?'; // Either `a ?? b` or 'a?.b'.\n\n    if (this.peek === $QUESTION || this.peek === $PERIOD) {\n      str += this.peek === $PERIOD ? '.' : '?';\n      this.advance();\n    }\n\n    return newOperatorToken(start, this.index, str);\n  }\n\n  error(message, offset) {\n    const position = this.index + offset;\n    return newErrorToken(position, this.index, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n  }\n\n}\n\nfunction isIdentifierStart(code) {\n  return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;\n}\n\nfunction isIdentifier(input) {\n  if (input.length == 0) return false;\n  const scanner = new _Scanner(input);\n  if (!isIdentifierStart(scanner.peek)) return false;\n  scanner.advance();\n\n  while (scanner.peek !== $EOF) {\n    if (!isIdentifierPart(scanner.peek)) return false;\n    scanner.advance();\n  }\n\n  return true;\n}\n\nfunction isIdentifierPart(code) {\n  return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;\n}\n\nfunction isExponentStart(code) {\n  return code == $e || code == $E;\n}\n\nfunction isExponentSign(code) {\n  return code == $MINUS || code == $PLUS;\n}\n\nfunction unescape(code) {\n  switch (code) {\n    case $n:\n      return $LF;\n\n    case $f:\n      return $FF;\n\n    case $r:\n      return $CR;\n\n    case $t:\n      return $TAB;\n\n    case $v:\n      return $VTAB;\n\n    default:\n      return code;\n  }\n}\n\nfunction parseIntAutoRadix(text) {\n  const result = parseInt(text);\n\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n\n  return result;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass SplitInterpolation {\n  constructor(strings, expressions, offsets) {\n    this.strings = strings;\n    this.expressions = expressions;\n    this.offsets = offsets;\n  }\n\n}\n\nclass TemplateBindingParseResult {\n  constructor(templateBindings, warnings, errors) {\n    this.templateBindings = templateBindings;\n    this.warnings = warnings;\n    this.errors = errors;\n  }\n\n}\n\nclass Parser$1 {\n  constructor(_lexer) {\n    this._lexer = _lexer;\n    this.errors = [];\n    this.simpleExpressionChecker = SimpleExpressionChecker;\n  }\n\n  parseAction(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    this._checkNoInterpolation(input, location, interpolationConfig);\n\n    const sourceToLex = this._stripComments(input);\n\n    const tokens = this._lexer.tokenize(this._stripComments(input));\n\n    const ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n\n  parseBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n\n  checkSimpleExpression(ast) {\n    const checker = new this.simpleExpressionChecker();\n    ast.visit(checker);\n    return checker.errors;\n  }\n\n  parseSimpleBinding(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);\n\n    const errors = this.checkSimpleExpression(ast);\n\n    if (errors.length > 0) {\n      this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n    }\n\n    return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);\n  }\n\n  _reportError(message, input, errLocation, ctxLocation) {\n    this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n  }\n\n  _parseBindingAst(input, location, absoluteOffset, interpolationConfig) {\n    // Quotes expressions use 3rd-party expression language. We don't want to use\n    // our lexer or parser for that, so we check for that ahead of time.\n    const quote = this._parseQuote(input, location, absoluteOffset);\n\n    if (quote != null) {\n      return quote;\n    }\n\n    this._checkNoInterpolation(input, location, interpolationConfig);\n\n    const sourceToLex = this._stripComments(input);\n\n    const tokens = this._lexer.tokenize(sourceToLex);\n\n    return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();\n  }\n\n  _parseQuote(input, location, absoluteOffset) {\n    if (input == null) return null;\n    const prefixSeparatorIndex = input.indexOf(':');\n    if (prefixSeparatorIndex == -1) return null;\n    const prefix = input.substring(0, prefixSeparatorIndex).trim();\n    if (!isIdentifier(prefix)) return null;\n    const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n    const span = new ParseSpan(0, input.length);\n    return new Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);\n  }\n  /**\r\n   * Parse microsyntax template expression and return a list of bindings or\r\n   * parsing errors in case the given expression is invalid.\r\n   *\r\n   * For example,\r\n   * ```\r\n   *   <div *ngFor=\"let item of items\">\r\n   *         ^      ^ absoluteValueOffset for `templateValue`\r\n   *         absoluteKeyOffset for `templateKey`\r\n   * ```\r\n   * contains three bindings:\r\n   * 1. ngFor -> null\r\n   * 2. item -> NgForOfContext.$implicit\r\n   * 3. ngForOf -> items\r\n   *\r\n   * This is apparent from the de-sugared template:\r\n   * ```\r\n   *   <ng-template ngFor let-item [ngForOf]=\"items\">\r\n   * ```\r\n   *\r\n   * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor\r\n   * @param templateValue RHS of the microsyntax attribute\r\n   * @param templateUrl template filename if it's external, component filename if it's inline\r\n   * @param absoluteKeyOffset start of the `templateKey`\r\n   * @param absoluteValueOffset start of the `templateValue`\r\n   */\n\n\n  parseTemplateBindings(templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {\n    const tokens = this._lexer.tokenize(templateValue);\n\n    const parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false\n    /* parseAction */\n    , this.errors, 0\n    /* relative offset */\n    );\n    return parser.parseTemplateBindings({\n      source: templateKey,\n      span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length)\n    });\n  }\n\n  parseInterpolation(input, location, absoluteOffset, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const {\n      strings,\n      expressions,\n      offsets\n    } = this.splitInterpolation(input, location, interpolationConfig);\n    if (expressions.length === 0) return null;\n    const expressionNodes = [];\n\n    for (let i = 0; i < expressions.length; ++i) {\n      const expressionText = expressions[i].text;\n\n      const sourceToLex = this._stripComments(expressionText);\n\n      const tokens = this._lexer.tokenize(sourceToLex);\n\n      const ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();\n      expressionNodes.push(ast);\n    }\n\n    return this.createInterpolationAst(strings.map(s => s.text), expressionNodes, input, location, absoluteOffset);\n  }\n  /**\r\n   * Similar to `parseInterpolation`, but treats the provided string as a single expression\r\n   * element that would normally appear within the interpolation prefix and suffix (`{{` and `}}`).\r\n   * This is used for parsing the switch expression in ICUs.\r\n   */\n\n\n  parseInterpolationExpression(expression, location, absoluteOffset) {\n    const sourceToLex = this._stripComments(expression);\n\n    const tokens = this._lexer.tokenize(sourceToLex);\n\n    const ast = new _ParseAST(expression, location, absoluteOffset, tokens, sourceToLex.length,\n    /* parseAction */\n    false, this.errors, 0).parseChain();\n    const strings = ['', '']; // The prefix and suffix strings are both empty\n\n    return this.createInterpolationAst(strings, [ast], expression, location, absoluteOffset);\n  }\n\n  createInterpolationAst(strings, expressions, input, location, absoluteOffset) {\n    const span = new ParseSpan(0, input.length);\n    const interpolation = new Interpolation(span, span.toAbsolute(absoluteOffset), strings, expressions);\n    return new ASTWithSource(interpolation, input, location, absoluteOffset, this.errors);\n  }\n  /**\r\n   * Splits a string of text into \"raw\" text segments and expressions present in interpolations in\r\n   * the string.\r\n   * Returns `null` if there are no interpolations, otherwise a\r\n   * `SplitInterpolation` with splits that look like\r\n   *   <raw text> <expression> <raw text> ... <raw text> <expression> <raw text>\r\n   */\n\n\n  splitInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    const strings = [];\n    const expressions = [];\n    const offsets = [];\n    let i = 0;\n    let atInterpolation = false;\n    let extendLastString = false;\n    let {\n      start: interpStart,\n      end: interpEnd\n    } = interpolationConfig;\n\n    while (i < input.length) {\n      if (!atInterpolation) {\n        // parse until starting {{\n        const start = i;\n        i = input.indexOf(interpStart, i);\n\n        if (i === -1) {\n          i = input.length;\n        }\n\n        const text = input.substring(start, i);\n        strings.push({\n          text,\n          start,\n          end: i\n        });\n        atInterpolation = true;\n      } else {\n        // parse from starting {{ to ending }} while ignoring content inside quotes.\n        const fullStart = i;\n        const exprStart = fullStart + interpStart.length;\n\n        const exprEnd = this._getInterpolationEndIndex(input, interpEnd, exprStart);\n\n        if (exprEnd === -1) {\n          // Could not find the end of the interpolation; do not parse an expression.\n          // Instead we should extend the content on the last raw string.\n          atInterpolation = false;\n          extendLastString = true;\n          break;\n        }\n\n        const fullEnd = exprEnd + interpEnd.length;\n        const text = input.substring(exprStart, exprEnd);\n\n        if (text.trim().length === 0) {\n          this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${i} in`, location);\n        }\n\n        expressions.push({\n          text,\n          start: fullStart,\n          end: fullEnd\n        });\n        offsets.push(exprStart);\n        i = fullEnd;\n        atInterpolation = false;\n      }\n    }\n\n    if (!atInterpolation) {\n      // If we are now at a text section, add the remaining content as a raw string.\n      if (extendLastString) {\n        const piece = strings[strings.length - 1];\n        piece.text += input.substring(i);\n        piece.end = input.length;\n      } else {\n        strings.push({\n          text: input.substring(i),\n          start: i,\n          end: input.length\n        });\n      }\n    }\n\n    return new SplitInterpolation(strings, expressions, offsets);\n  }\n\n  wrapLiteralPrimitive(input, location, absoluteOffset) {\n    const span = new ParseSpan(0, input == null ? 0 : input.length);\n    return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);\n  }\n\n  _stripComments(input) {\n    const i = this._commentStart(input);\n\n    return i != null ? input.substring(0, i).trim() : input;\n  }\n\n  _commentStart(input) {\n    let outerQuote = null;\n\n    for (let i = 0; i < input.length - 1; i++) {\n      const char = input.charCodeAt(i);\n      const nextChar = input.charCodeAt(i + 1);\n      if (char === $SLASH && nextChar == $SLASH && outerQuote == null) return i;\n\n      if (outerQuote === char) {\n        outerQuote = null;\n      } else if (outerQuote == null && isQuote(char)) {\n        outerQuote = char;\n      }\n    }\n\n    return null;\n  }\n\n  _checkNoInterpolation(input, location, {\n    start,\n    end\n  }) {\n    let startIndex = -1;\n    let endIndex = -1;\n\n    for (const charIndex of this._forEachUnquotedChar(input, 0)) {\n      if (startIndex === -1) {\n        if (input.startsWith(start)) {\n          startIndex = charIndex;\n        }\n      } else {\n        endIndex = this._getInterpolationEndIndex(input, end, charIndex);\n\n        if (endIndex > -1) {\n          break;\n        }\n      }\n    }\n\n    if (startIndex > -1 && endIndex > -1) {\n      this._reportError(`Got interpolation (${start}${end}) where expression was expected`, input, `at column ${startIndex} in`, location);\n    }\n  }\n  /**\r\n   * Finds the index of the end of an interpolation expression\r\n   * while ignoring comments and quoted content.\r\n   */\n\n\n  _getInterpolationEndIndex(input, expressionEnd, start) {\n    for (const charIndex of this._forEachUnquotedChar(input, start)) {\n      if (input.startsWith(expressionEnd, charIndex)) {\n        return charIndex;\n      } // Nothing else in the expression matters after we've\n      // hit a comment so look directly for the end token.\n\n\n      if (input.startsWith('//', charIndex)) {\n        return input.indexOf(expressionEnd, charIndex);\n      }\n    }\n\n    return -1;\n  }\n  /**\r\n   * Generator used to iterate over the character indexes of a string that are outside of quotes.\r\n   * @param input String to loop through.\r\n   * @param start Index within the string at which to start.\r\n   */\n\n\n  *_forEachUnquotedChar(input, start) {\n    let currentQuote = null;\n    let escapeCount = 0;\n\n    for (let i = start; i < input.length; i++) {\n      const char = input[i]; // Skip the characters inside quotes. Note that we only care about the outer-most\n      // quotes matching up and we need to account for escape characters.\n\n      if (isQuote(input.charCodeAt(i)) && (currentQuote === null || currentQuote === char) && escapeCount % 2 === 0) {\n        currentQuote = currentQuote === null ? char : null;\n      } else if (currentQuote === null) {\n        yield i;\n      }\n\n      escapeCount = char === '\\\\' ? escapeCount + 1 : 0;\n    }\n  }\n\n}\n\nclass IvyParser extends Parser$1 {\n  constructor() {\n    super(...arguments);\n    this.simpleExpressionChecker = IvySimpleExpressionChecker;\n  }\n\n}\n/** Describes a stateful context an expression parser is in. */\n\n\nvar ParseContextFlags = /*#__PURE__*/(() => {\n  ParseContextFlags = ParseContextFlags || {};\n  ParseContextFlags[ParseContextFlags[\"None\"] = 0] = \"None\";\n  /**\r\n   * A Writable context is one in which a value may be written to an lvalue.\r\n   * For example, after we see a property access, we may expect a write to the\r\n   * property via the \"=\" operator.\r\n   *   prop\r\n   *        ^ possible \"=\" after\r\n   */\n\n  ParseContextFlags[ParseContextFlags[\"Writable\"] = 1] = \"Writable\";\n  return ParseContextFlags;\n})();\n\nclass _ParseAST {\n  constructor(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {\n    this.input = input;\n    this.location = location;\n    this.absoluteOffset = absoluteOffset;\n    this.tokens = tokens;\n    this.inputLength = inputLength;\n    this.parseAction = parseAction;\n    this.errors = errors;\n    this.offset = offset;\n    this.rparensExpected = 0;\n    this.rbracketsExpected = 0;\n    this.rbracesExpected = 0;\n    this.context = ParseContextFlags.None; // Cache of expression start and input indeces to the absolute source span they map to, used to\n    // prevent creating superfluous source spans in `sourceSpan`.\n    // A serial of the expression start and input index is used for mapping because both are stateful\n    // and may change for subsequent expressions visited by the parser.\n\n    this.sourceSpanCache = new Map();\n    this.index = 0;\n  }\n\n  peek(offset) {\n    const i = this.index + offset;\n    return i < this.tokens.length ? this.tokens[i] : EOF;\n  }\n\n  get next() {\n    return this.peek(0);\n  }\n  /** Whether all the parser input has been processed. */\n\n\n  get atEOF() {\n    return this.index >= this.tokens.length;\n  }\n  /**\r\n   * Index of the next token to be processed, or the end of the last token if all have been\r\n   * processed.\r\n   */\n\n\n  get inputIndex() {\n    return this.atEOF ? this.currentEndIndex : this.next.index + this.offset;\n  }\n  /**\r\n   * End index of the last processed token, or the start of the first token if none have been\r\n   * processed.\r\n   */\n\n\n  get currentEndIndex() {\n    if (this.index > 0) {\n      const curToken = this.peek(-1);\n      return curToken.end + this.offset;\n    } // No tokens have been processed yet; return the next token's start or the length of the input\n    // if there is no token.\n\n\n    if (this.tokens.length === 0) {\n      return this.inputLength + this.offset;\n    }\n\n    return this.next.index + this.offset;\n  }\n  /**\r\n   * Returns the absolute offset of the start of the current token.\r\n   */\n\n\n  get currentAbsoluteOffset() {\n    return this.absoluteOffset + this.inputIndex;\n  }\n  /**\r\n   * Retrieve a `ParseSpan` from `start` to the current position (or to `artificialEndIndex` if\r\n   * provided).\r\n   *\r\n   * @param start Position from which the `ParseSpan` will start.\r\n   * @param artificialEndIndex Optional ending index to be used if provided (and if greater than the\r\n   *     natural ending index)\r\n   */\n\n\n  span(start, artificialEndIndex) {\n    let endIndex = this.currentEndIndex;\n\n    if (artificialEndIndex !== undefined && artificialEndIndex > this.currentEndIndex) {\n      endIndex = artificialEndIndex;\n    } // In some unusual parsing scenarios (like when certain tokens are missing and an `EmptyExpr` is\n    // being created), the current token may already be advanced beyond the `currentEndIndex`. This\n    // appears to be a deep-seated parser bug.\n    //\n    // As a workaround for now, swap the start and end indices to ensure a valid `ParseSpan`.\n    // TODO(alxhub): fix the bug upstream in the parser state, and remove this workaround.\n\n\n    if (start > endIndex) {\n      const tmp = endIndex;\n      endIndex = start;\n      start = tmp;\n    }\n\n    return new ParseSpan(start, endIndex);\n  }\n\n  sourceSpan(start, artificialEndIndex) {\n    const serial = `${start}@${this.inputIndex}:${artificialEndIndex}`;\n\n    if (!this.sourceSpanCache.has(serial)) {\n      this.sourceSpanCache.set(serial, this.span(start, artificialEndIndex).toAbsolute(this.absoluteOffset));\n    }\n\n    return this.sourceSpanCache.get(serial);\n  }\n\n  advance() {\n    this.index++;\n  }\n  /**\r\n   * Executes a callback in the provided context.\r\n   */\n\n\n  withContext(context, cb) {\n    this.context |= context;\n    const ret = cb();\n    this.context ^= context;\n    return ret;\n  }\n\n  consumeOptionalCharacter(code) {\n    if (this.next.isCharacter(code)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  peekKeywordLet() {\n    return this.next.isKeywordLet();\n  }\n\n  peekKeywordAs() {\n    return this.next.isKeywordAs();\n  }\n  /**\r\n   * Consumes an expected character, otherwise emits an error about the missing expected character\r\n   * and skips over the token stream until reaching a recoverable point.\r\n   *\r\n   * See `this.error` and `this.skip` for more details.\r\n   */\n\n\n  expectCharacter(code) {\n    if (this.consumeOptionalCharacter(code)) return;\n    this.error(`Missing expected ${String.fromCharCode(code)}`);\n  }\n\n  consumeOptionalOperator(op) {\n    if (this.next.isOperator(op)) {\n      this.advance();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  expectOperator(operator) {\n    if (this.consumeOptionalOperator(operator)) return;\n    this.error(`Missing expected operator ${operator}`);\n  }\n\n  prettyPrintToken(tok) {\n    return tok === EOF ? 'end of input' : `token ${tok}`;\n  }\n\n  expectIdentifierOrKeyword() {\n    const n = this.next;\n\n    if (!n.isIdentifier() && !n.isKeyword()) {\n      if (n.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(n, 'expected identifier or keyword');\n      } else {\n        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier or keyword`);\n      }\n\n      return null;\n    }\n\n    this.advance();\n    return n.toString();\n  }\n\n  expectIdentifierOrKeywordOrString() {\n    const n = this.next;\n\n    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n      if (n.isPrivateIdentifier()) {\n        this._reportErrorForPrivateIdentifier(n, 'expected identifier, keyword or string');\n      } else {\n        this.error(`Unexpected ${this.prettyPrintToken(n)}, expected identifier, keyword, or string`);\n      }\n\n      return '';\n    }\n\n    this.advance();\n    return n.toString();\n  }\n\n  parseChain() {\n    const exprs = [];\n    const start = this.inputIndex;\n\n    while (this.index < this.tokens.length) {\n      const expr = this.parsePipe();\n      exprs.push(expr);\n\n      if (this.consumeOptionalCharacter($SEMICOLON)) {\n        if (!this.parseAction) {\n          this.error('Binding expression cannot contain chained expression');\n        }\n\n        while (this.consumeOptionalCharacter($SEMICOLON)) {} // read all semicolons\n\n      } else if (this.index < this.tokens.length) {\n        this.error(`Unexpected token '${this.next}'`);\n      }\n    }\n\n    if (exprs.length == 0) {\n      // We have no expressions so create an empty expression that spans the entire input length\n      const artificialStart = this.offset;\n      const artificialEnd = this.offset + this.inputLength;\n      return new EmptyExpr(this.span(artificialStart, artificialEnd), this.sourceSpan(artificialStart, artificialEnd));\n    }\n\n    if (exprs.length == 1) return exprs[0];\n    return new Chain(this.span(start), this.sourceSpan(start), exprs);\n  }\n\n  parsePipe() {\n    const start = this.inputIndex;\n    let result = this.parseExpression();\n\n    if (this.consumeOptionalOperator('|')) {\n      if (this.parseAction) {\n        this.error('Cannot have a pipe in an action expression');\n      }\n\n      do {\n        const nameStart = this.inputIndex;\n        let nameId = this.expectIdentifierOrKeyword();\n        let nameSpan;\n        let fullSpanEnd = undefined;\n\n        if (nameId !== null) {\n          nameSpan = this.sourceSpan(nameStart);\n        } else {\n          // No valid identifier was found, so we'll assume an empty pipe name ('').\n          nameId = ''; // However, there may have been whitespace present between the pipe character and the next\n          // token in the sequence (or the end of input). We want to track this whitespace so that\n          // the `BindingPipe` we produce covers not just the pipe character, but any trailing\n          // whitespace beyond it. Another way of thinking about this is that the zero-length name\n          // is assumed to be at the end of any whitespace beyond the pipe character.\n          //\n          // Therefore, we push the end of the `ParseSpan` for this pipe all the way up to the\n          // beginning of the next token, or until the end of input if the next token is EOF.\n\n          fullSpanEnd = this.next.index !== -1 ? this.next.index : this.inputLength + this.offset; // The `nameSpan` for an empty pipe name is zero-length at the end of any whitespace\n          // beyond the pipe character.\n\n          nameSpan = new ParseSpan(fullSpanEnd, fullSpanEnd).toAbsolute(this.absoluteOffset);\n        }\n\n        const args = [];\n\n        while (this.consumeOptionalCharacter($COLON)) {\n          args.push(this.parseExpression()); // If there are additional expressions beyond the name, then the artificial end for the\n          // name is no longer relevant.\n        }\n\n        result = new BindingPipe(this.span(start), this.sourceSpan(start, fullSpanEnd), result, nameId, args, nameSpan);\n      } while (this.consumeOptionalOperator('|'));\n    }\n\n    return result;\n  }\n\n  parseExpression() {\n    return this.parseConditional();\n  }\n\n  parseConditional() {\n    const start = this.inputIndex;\n    const result = this.parseLogicalOr();\n\n    if (this.consumeOptionalOperator('?')) {\n      const yes = this.parsePipe();\n      let no;\n\n      if (!this.consumeOptionalCharacter($COLON)) {\n        const end = this.inputIndex;\n        const expression = this.input.substring(start, end);\n        this.error(`Conditional expression ${expression} requires all 3 expressions`);\n        no = new EmptyExpr(this.span(start), this.sourceSpan(start));\n      } else {\n        no = this.parsePipe();\n      }\n\n      return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);\n    } else {\n      return result;\n    }\n  }\n\n  parseLogicalOr() {\n    // '||'\n    const start = this.inputIndex;\n    let result = this.parseLogicalAnd();\n\n    while (this.consumeOptionalOperator('||')) {\n      const right = this.parseLogicalAnd();\n      result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);\n    }\n\n    return result;\n  }\n\n  parseLogicalAnd() {\n    // '&&'\n    const start = this.inputIndex;\n    let result = this.parseNullishCoalescing();\n\n    while (this.consumeOptionalOperator('&&')) {\n      const right = this.parseNullishCoalescing();\n      result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);\n    }\n\n    return result;\n  }\n\n  parseNullishCoalescing() {\n    // '??'\n    const start = this.inputIndex;\n    let result = this.parseEquality();\n\n    while (this.consumeOptionalOperator('??')) {\n      const right = this.parseEquality();\n      result = new Binary(this.span(start), this.sourceSpan(start), '??', result, right);\n    }\n\n    return result;\n  }\n\n  parseEquality() {\n    // '==','!=','===','!=='\n    const start = this.inputIndex;\n    let result = this.parseRelational();\n\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n\n      switch (operator) {\n        case '==':\n        case '===':\n        case '!=':\n        case '!==':\n          this.advance();\n          const right = this.parseRelational();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n\n      break;\n    }\n\n    return result;\n  }\n\n  parseRelational() {\n    // '<', '>', '<=', '>='\n    const start = this.inputIndex;\n    let result = this.parseAdditive();\n\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n\n      switch (operator) {\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n          this.advance();\n          const right = this.parseAdditive();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n\n      break;\n    }\n\n    return result;\n  }\n\n  parseAdditive() {\n    // '+', '-'\n    const start = this.inputIndex;\n    let result = this.parseMultiplicative();\n\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n\n      switch (operator) {\n        case '+':\n        case '-':\n          this.advance();\n          let right = this.parseMultiplicative();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n\n      break;\n    }\n\n    return result;\n  }\n\n  parseMultiplicative() {\n    // '*', '%', '/'\n    const start = this.inputIndex;\n    let result = this.parsePrefix();\n\n    while (this.next.type == TokenType.Operator) {\n      const operator = this.next.strValue;\n\n      switch (operator) {\n        case '*':\n        case '%':\n        case '/':\n          this.advance();\n          let right = this.parsePrefix();\n          result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);\n          continue;\n      }\n\n      break;\n    }\n\n    return result;\n  }\n\n  parsePrefix() {\n    if (this.next.type == TokenType.Operator) {\n      const start = this.inputIndex;\n      const operator = this.next.strValue;\n      let result;\n\n      switch (operator) {\n        case '+':\n          this.advance();\n          result = this.parsePrefix();\n          return Unary.createPlus(this.span(start), this.sourceSpan(start), result);\n\n        case '-':\n          this.advance();\n          result = this.parsePrefix();\n          return Unary.createMinus(this.span(start), this.sourceSpan(start), result);\n\n        case '!':\n          this.advance();\n          result = this.parsePrefix();\n          return new PrefixNot(this.span(start), this.sourceSpan(start), result);\n      }\n    }\n\n    return this.parseCallChain();\n  }\n\n  parseCallChain() {\n    const start = this.inputIndex;\n    let result = this.parsePrimary();\n\n    while (true) {\n      if (this.consumeOptionalCharacter($PERIOD)) {\n        result = this.parseAccessMemberOrMethodCall(result, start, false);\n      } else if (this.consumeOptionalOperator('?.')) {\n        result = this.consumeOptionalCharacter($LBRACKET) ? this.parseKeyedReadOrWrite(result, start, true) : this.parseAccessMemberOrMethodCall(result, start, true);\n      } else if (this.consumeOptionalCharacter($LBRACKET)) {\n        result = this.parseKeyedReadOrWrite(result, start, false);\n      } else if (this.consumeOptionalCharacter($LPAREN)) {\n        this.rparensExpected++;\n        const args = this.parseCallArguments();\n        this.rparensExpected--;\n        this.expectCharacter($RPAREN);\n        result = new FunctionCall(this.span(start), this.sourceSpan(start), result, args);\n      } else if (this.consumeOptionalOperator('!')) {\n        result = new NonNullAssert(this.span(start), this.sourceSpan(start), result);\n      } else {\n        return result;\n      }\n    }\n  }\n\n  parsePrimary() {\n    const start = this.inputIndex;\n\n    if (this.consumeOptionalCharacter($LPAREN)) {\n      this.rparensExpected++;\n      const result = this.parsePipe();\n      this.rparensExpected--;\n      this.expectCharacter($RPAREN);\n      return result;\n    } else if (this.next.isKeywordNull()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);\n    } else if (this.next.isKeywordUndefined()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);\n    } else if (this.next.isKeywordTrue()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);\n    } else if (this.next.isKeywordFalse()) {\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);\n    } else if (this.next.isKeywordThis()) {\n      this.advance();\n      return new ThisReceiver(this.span(start), this.sourceSpan(start));\n    } else if (this.consumeOptionalCharacter($LBRACKET)) {\n      this.rbracketsExpected++;\n      const elements = this.parseExpressionList($RBRACKET);\n      this.rbracketsExpected--;\n      this.expectCharacter($RBRACKET);\n      return new LiteralArray(this.span(start), this.sourceSpan(start), elements);\n    } else if (this.next.isCharacter($LBRACE)) {\n      return this.parseLiteralMap();\n    } else if (this.next.isIdentifier()) {\n      return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), start, false);\n    } else if (this.next.isNumber()) {\n      const value = this.next.toNumber();\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);\n    } else if (this.next.isString()) {\n      const literalValue = this.next.toString();\n      this.advance();\n      return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);\n    } else if (this.next.isPrivateIdentifier()) {\n      this._reportErrorForPrivateIdentifier(this.next, null);\n\n      return new EmptyExpr(this.span(start), this.sourceSpan(start));\n    } else if (this.index >= this.tokens.length) {\n      this.error(`Unexpected end of expression: ${this.input}`);\n      return new EmptyExpr(this.span(start), this.sourceSpan(start));\n    } else {\n      this.error(`Unexpected token ${this.next}`);\n      return new EmptyExpr(this.span(start), this.sourceSpan(start));\n    }\n  }\n\n  parseExpressionList(terminator) {\n    const result = [];\n\n    do {\n      if (!this.next.isCharacter(terminator)) {\n        result.push(this.parsePipe());\n      } else {\n        break;\n      }\n    } while (this.consumeOptionalCharacter($COMMA));\n\n    return result;\n  }\n\n  parseLiteralMap() {\n    const keys = [];\n    const values = [];\n    const start = this.inputIndex;\n    this.expectCharacter($LBRACE);\n\n    if (!this.consumeOptionalCharacter($RBRACE)) {\n      this.rbracesExpected++;\n\n      do {\n        const keyStart = this.inputIndex;\n        const quoted = this.next.isString();\n        const key = this.expectIdentifierOrKeywordOrString();\n        keys.push({\n          key,\n          quoted\n        }); // Properties with quoted keys can't use the shorthand syntax.\n\n        if (quoted) {\n          this.expectCharacter($COLON);\n          values.push(this.parsePipe());\n        } else if (this.consumeOptionalCharacter($COLON)) {\n          values.push(this.parsePipe());\n        } else {\n          const span = this.span(keyStart);\n          const sourceSpan = this.sourceSpan(keyStart);\n          values.push(new PropertyRead(span, sourceSpan, sourceSpan, new ImplicitReceiver(span, sourceSpan), key));\n        }\n      } while (this.consumeOptionalCharacter($COMMA));\n\n      this.rbracesExpected--;\n      this.expectCharacter($RBRACE);\n    }\n\n    return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);\n  }\n\n  parseAccessMemberOrMethodCall(receiver, start, isSafe) {\n    const nameStart = this.inputIndex;\n    const id = this.withContext(ParseContextFlags.Writable, () => {\n      var _a;\n\n      const id = (_a = this.expectIdentifierOrKeyword()) !== null && _a !== void 0 ? _a : '';\n\n      if (id.length === 0) {\n        this.error(`Expected identifier for property access`, receiver.span.end);\n      }\n\n      return id;\n    });\n    const nameSpan = this.sourceSpan(nameStart);\n\n    if (this.consumeOptionalCharacter($LPAREN)) {\n      const argumentStart = this.inputIndex;\n      this.rparensExpected++;\n      const args = this.parseCallArguments();\n      const argumentSpan = this.span(argumentStart, this.inputIndex).toAbsolute(this.absoluteOffset);\n      this.expectCharacter($RPAREN);\n      this.rparensExpected--;\n      const span = this.span(start);\n      const sourceSpan = this.sourceSpan(start);\n      return isSafe ? new SafeMethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan) : new MethodCall(span, sourceSpan, nameSpan, receiver, id, args, argumentSpan);\n    } else {\n      if (isSafe) {\n        if (this.consumeOptionalOperator('=')) {\n          this.error('The \\'?.\\' operator cannot be used in the assignment');\n          return new EmptyExpr(this.span(start), this.sourceSpan(start));\n        } else {\n          return new SafePropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n        }\n      } else {\n        if (this.consumeOptionalOperator('=')) {\n          if (!this.parseAction) {\n            this.error('Bindings cannot contain assignments');\n            return new EmptyExpr(this.span(start), this.sourceSpan(start));\n          }\n\n          const value = this.parseConditional();\n          return new PropertyWrite(this.span(start), this.sourceSpan(start), nameSpan, receiver, id, value);\n        } else {\n          return new PropertyRead(this.span(start), this.sourceSpan(start), nameSpan, receiver, id);\n        }\n      }\n    }\n  }\n\n  parseCallArguments() {\n    if (this.next.isCharacter($RPAREN)) return [];\n    const positionals = [];\n\n    do {\n      positionals.push(this.parsePipe());\n    } while (this.consumeOptionalCharacter($COMMA));\n\n    return positionals;\n  }\n  /**\r\n   * Parses an identifier, a keyword, a string with an optional `-` in between,\r\n   * and returns the string along with its absolute source span.\r\n   */\n\n\n  expectTemplateBindingKey() {\n    let result = '';\n    let operatorFound = false;\n    const start = this.currentAbsoluteOffset;\n\n    do {\n      result += this.expectIdentifierOrKeywordOrString();\n      operatorFound = this.consumeOptionalOperator('-');\n\n      if (operatorFound) {\n        result += '-';\n      }\n    } while (operatorFound);\n\n    return {\n      source: result,\n      span: new AbsoluteSourceSpan(start, start + result.length)\n    };\n  }\n  /**\r\n   * Parse microsyntax template expression and return a list of bindings or\r\n   * parsing errors in case the given expression is invalid.\r\n   *\r\n   * For example,\r\n   * ```\r\n   *   <div *ngFor=\"let item of items; index as i; trackBy: func\">\r\n   * ```\r\n   * contains five bindings:\r\n   * 1. ngFor -> null\r\n   * 2. item -> NgForOfContext.$implicit\r\n   * 3. ngForOf -> items\r\n   * 4. i -> NgForOfContext.index\r\n   * 5. ngForTrackBy -> func\r\n   *\r\n   * For a full description of the microsyntax grammar, see\r\n   * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855\r\n   *\r\n   * @param templateKey name of the microsyntax directive, like ngIf, ngFor,\r\n   * without the *, along with its absolute span.\r\n   */\n\n\n  parseTemplateBindings(templateKey) {\n    const bindings = []; // The first binding is for the template key itself\n    // In *ngFor=\"let item of items\", key = \"ngFor\", value = null\n    // In *ngIf=\"cond | pipe\", key = \"ngIf\", value = \"cond | pipe\"\n\n    bindings.push(...this.parseDirectiveKeywordBindings(templateKey));\n\n    while (this.index < this.tokens.length) {\n      // If it starts with 'let', then this must be variable declaration\n      const letBinding = this.parseLetBinding();\n\n      if (letBinding) {\n        bindings.push(letBinding);\n      } else {\n        // Two possible cases here, either `value \"as\" key` or\n        // \"directive-keyword expression\". We don't know which case, but both\n        // \"value\" and \"directive-keyword\" are template binding key, so consume\n        // the key first.\n        const key = this.expectTemplateBindingKey(); // Peek at the next token, if it is \"as\" then this must be variable\n        // declaration.\n\n        const binding = this.parseAsBinding(key);\n\n        if (binding) {\n          bindings.push(binding);\n        } else {\n          // Otherwise the key must be a directive keyword, like \"of\". Transform\n          // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy\n          key.source = templateKey.source + key.source.charAt(0).toUpperCase() + key.source.substring(1);\n          bindings.push(...this.parseDirectiveKeywordBindings(key));\n        }\n      }\n\n      this.consumeStatementTerminator();\n    }\n\n    return new TemplateBindingParseResult(bindings, []\n    /* warnings */\n    , this.errors);\n  }\n\n  parseKeyedReadOrWrite(receiver, start, isSafe) {\n    return this.withContext(ParseContextFlags.Writable, () => {\n      this.rbracketsExpected++;\n      const key = this.parsePipe();\n\n      if (key instanceof EmptyExpr) {\n        this.error(`Key access cannot be empty`);\n      }\n\n      this.rbracketsExpected--;\n      this.expectCharacter($RBRACKET);\n\n      if (this.consumeOptionalOperator('=')) {\n        if (isSafe) {\n          this.error('The \\'?.\\' operator cannot be used in the assignment');\n        } else {\n          const value = this.parseConditional();\n          return new KeyedWrite(this.span(start), this.sourceSpan(start), receiver, key, value);\n        }\n      } else {\n        return isSafe ? new SafeKeyedRead(this.span(start), this.sourceSpan(start), receiver, key) : new KeyedRead(this.span(start), this.sourceSpan(start), receiver, key);\n      }\n\n      return new EmptyExpr(this.span(start), this.sourceSpan(start));\n    });\n  }\n  /**\r\n   * Parse a directive keyword, followed by a mandatory expression.\r\n   * For example, \"of items\", \"trackBy: func\".\r\n   * The bindings are: ngForOf -> items, ngForTrackBy -> func\r\n   * There could be an optional \"as\" binding that follows the expression.\r\n   * For example,\r\n   * ```\r\n   *   *ngFor=\"let item of items | slice:0:1 as collection\".\r\n   *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^\r\n   *               keyword    bound target   optional 'as' binding\r\n   * ```\r\n   *\r\n   * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its\r\n   * absolute span.\r\n   */\n\n\n  parseDirectiveKeywordBindings(key) {\n    const bindings = [];\n    this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction\n\n    const value = this.getDirectiveBoundTarget();\n    let spanEnd = this.currentAbsoluteOffset; // The binding could optionally be followed by \"as\". For example,\n    // *ngIf=\"cond | pipe as x\". In this case, the key in the \"as\" binding\n    // is \"x\" and the value is the template key itself (\"ngIf\"). Note that the\n    // 'key' in the current context now becomes the \"value\" in the next binding.\n\n    const asBinding = this.parseAsBinding(key);\n\n    if (!asBinding) {\n      this.consumeStatementTerminator();\n      spanEnd = this.currentAbsoluteOffset;\n    }\n\n    const sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);\n    bindings.push(new ExpressionBinding(sourceSpan, key, value));\n\n    if (asBinding) {\n      bindings.push(asBinding);\n    }\n\n    return bindings;\n  }\n  /**\r\n   * Return the expression AST for the bound target of a directive keyword\r\n   * binding. For example,\r\n   * ```\r\n   *   *ngIf=\"condition | pipe\"\r\n   *          ^^^^^^^^^^^^^^^^ bound target for \"ngIf\"\r\n   *   *ngFor=\"let item of items\"\r\n   *                       ^^^^^ bound target for \"ngForOf\"\r\n   * ```\r\n   */\n\n\n  getDirectiveBoundTarget() {\n    if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {\n      return null;\n    }\n\n    const ast = this.parsePipe(); // example: \"condition | async\"\n\n    const {\n      start,\n      end\n    } = ast.span;\n    const value = this.input.substring(start, end);\n    return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);\n  }\n  /**\r\n   * Return the binding for a variable declared using `as`. Note that the order\r\n   * of the key-value pair in this declaration is reversed. For example,\r\n   * ```\r\n   *   *ngFor=\"let item of items; index as i\"\r\n   *                              ^^^^^    ^\r\n   *                              value    key\r\n   * ```\r\n   *\r\n   * @param value name of the value in the declaration, \"ngIf\" in the example\r\n   * above, along with its absolute span.\r\n   */\n\n\n  parseAsBinding(value) {\n    if (!this.peekKeywordAs()) {\n      return null;\n    }\n\n    this.advance(); // consume the 'as' keyword\n\n    const key = this.expectTemplateBindingKey();\n    this.consumeStatementTerminator();\n    const sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);\n    return new VariableBinding(sourceSpan, key, value);\n  }\n  /**\r\n   * Return the binding for a variable declared using `let`. For example,\r\n   * ```\r\n   *   *ngFor=\"let item of items; let i=index;\"\r\n   *           ^^^^^^^^           ^^^^^^^^^^^\r\n   * ```\r\n   * In the first binding, `item` is bound to `NgForOfContext.$implicit`.\r\n   * In the second binding, `i` is bound to `NgForOfContext.index`.\r\n   */\n\n\n  parseLetBinding() {\n    if (!this.peekKeywordLet()) {\n      return null;\n    }\n\n    const spanStart = this.currentAbsoluteOffset;\n    this.advance(); // consume the 'let' keyword\n\n    const key = this.expectTemplateBindingKey();\n    let value = null;\n\n    if (this.consumeOptionalOperator('=')) {\n      value = this.expectTemplateBindingKey();\n    }\n\n    this.consumeStatementTerminator();\n    const sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);\n    return new VariableBinding(sourceSpan, key, value);\n  }\n  /**\r\n   * Consume the optional statement terminator: semicolon or comma.\r\n   */\n\n\n  consumeStatementTerminator() {\n    this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);\n  }\n  /**\r\n   * Records an error and skips over the token stream until reaching a recoverable point. See\r\n   * `this.skip` for more details on token skipping.\r\n   */\n\n\n  error(message, index = null) {\n    this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n    this.skip();\n  }\n\n  locationText(index = null) {\n    if (index == null) index = this.index;\n    return index < this.tokens.length ? `at column ${this.tokens[index].index + 1} in` : `at the end of the expression`;\n  }\n  /**\r\n   * Records an error for an unexpected private identifier being discovered.\r\n   * @param token Token representing a private identifier.\r\n   * @param extraMessage Optional additional message being appended to the error.\r\n   */\n\n\n  _reportErrorForPrivateIdentifier(token, extraMessage) {\n    let errorMessage = `Private identifiers are not supported. Unexpected private identifier: ${token}`;\n\n    if (extraMessage !== null) {\n      errorMessage += `, ${extraMessage}`;\n    }\n\n    this.error(errorMessage);\n  }\n  /**\r\n   * Error recovery should skip tokens until it encounters a recovery point.\r\n   *\r\n   * The following are treated as unconditional recovery points:\r\n   *   - end of input\r\n   *   - ';' (parseChain() is always the root production, and it expects a ';')\r\n   *   - '|' (since pipes may be chained and each pipe expression may be treated independently)\r\n   *\r\n   * The following are conditional recovery points:\r\n   *   - ')', '}', ']' if one of calling productions is expecting one of these symbols\r\n   *     - This allows skip() to recover from errors such as '(a.) + 1' allowing more of the AST to\r\n   *       be retained (it doesn't skip any tokens as the ')' is retained because of the '(' begins\r\n   *       an '(' <expr> ')' production).\r\n   *       The recovery points of grouping symbols must be conditional as they must be skipped if\r\n   *       none of the calling productions are not expecting the closing token else we will never\r\n   *       make progress in the case of an extraneous group closing symbol (such as a stray ')').\r\n   *       That is, we skip a closing symbol if we are not in a grouping production.\r\n   *   - '=' in a `Writable` context\r\n   *     - In this context, we are able to recover after seeing the `=` operator, which\r\n   *       signals the presence of an independent rvalue expression following the `=` operator.\r\n   *\r\n   * If a production expects one of these token it increments the corresponding nesting count,\r\n   * and then decrements it just prior to checking if the token is in the input.\r\n   */\n\n\n  skip() {\n    let n = this.next;\n\n    while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && !n.isOperator('|') && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET)) && (!(this.context & ParseContextFlags.Writable) || !n.isOperator('='))) {\n      if (this.next.isError()) {\n        this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n      }\n\n      this.advance();\n      n = this.next;\n    }\n  }\n\n}\n\nclass SimpleExpressionChecker {\n  constructor() {\n    this.errors = [];\n  }\n\n  visitImplicitReceiver(ast, context) {}\n\n  visitThisReceiver(ast, context) {}\n\n  visitInterpolation(ast, context) {}\n\n  visitLiteralPrimitive(ast, context) {}\n\n  visitPropertyRead(ast, context) {}\n\n  visitPropertyWrite(ast, context) {}\n\n  visitSafePropertyRead(ast, context) {}\n\n  visitMethodCall(ast, context) {}\n\n  visitSafeMethodCall(ast, context) {}\n\n  visitFunctionCall(ast, context) {}\n\n  visitLiteralArray(ast, context) {\n    this.visitAll(ast.expressions, context);\n  }\n\n  visitLiteralMap(ast, context) {\n    this.visitAll(ast.values, context);\n  }\n\n  visitUnary(ast, context) {}\n\n  visitBinary(ast, context) {}\n\n  visitPrefixNot(ast, context) {}\n\n  visitNonNullAssert(ast, context) {}\n\n  visitConditional(ast, context) {}\n\n  visitPipe(ast, context) {\n    this.errors.push('pipes');\n  }\n\n  visitKeyedRead(ast, context) {}\n\n  visitKeyedWrite(ast, context) {}\n\n  visitAll(asts, context) {\n    return asts.map(node => node.visit(this, context));\n  }\n\n  visitChain(ast, context) {}\n\n  visitQuote(ast, context) {}\n\n  visitSafeKeyedRead(ast, context) {}\n\n}\n/**\r\n * This class implements SimpleExpressionChecker used in View Engine and performs more strict checks\r\n * to make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is\r\n * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at\r\n * compile time. In order to preserve View Engine behavior, more strict checks are introduced for\r\n * Ivy mode only.\r\n */\n\n\nclass IvySimpleExpressionChecker extends RecursiveAstVisitor$1 {\n  constructor() {\n    super(...arguments);\n    this.errors = [];\n  }\n\n  visitPipe() {\n    this.errors.push('pipes');\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction mapEntry(key, value) {\n  return {\n    key,\n    value,\n    quoted: false\n  };\n}\n\nfunction mapLiteral(obj, quoted = false) {\n  return literalMap(Object.keys(obj).map(key => ({\n    key,\n    quoted,\n    value: obj[key]\n  })));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n\n/** Map from tagName|propertyName to SecurityContext. Properties applying to all tags use '*'. */\n\n\nlet _SECURITY_SCHEMA;\n\nfunction SECURITY_SCHEMA() {\n  if (!_SECURITY_SCHEMA) {\n    _SECURITY_SCHEMA = {}; // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n\n    registerContext(SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);\n    registerContext(SecurityContext.STYLE, ['*|style']); // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n\n    registerContext(SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);\n    registerContext(SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);\n  }\n\n  return _SECURITY_SCHEMA;\n}\n\nfunction registerContext(ctx, specs) {\n  for (const spec of specs) _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass ElementSchemaRegistry {}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n/**\r\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\r\n *\r\n * ## Overview\r\n *\r\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\r\n * using `element_inheritance|properties` syntax.\r\n *\r\n * ## Element Inheritance\r\n *\r\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\r\n * Here the individual elements are separated by `,` (commas). Every element in the list\r\n * has identical properties.\r\n *\r\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\r\n * specified then `\"\"` (blank) element is assumed.\r\n *\r\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\r\n * elements.\r\n *\r\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\r\n *\r\n * ## Properties\r\n *\r\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\r\n * by a special character designating its type:\r\n *\r\n * - (no prefix): property is a string.\r\n * - `*`: property represents an event.\r\n * - `!`: property is a boolean.\r\n * - `#`: property is a number.\r\n * - `%`: property is an object.\r\n *\r\n * ## Query\r\n *\r\n * The class creates an internal squas representation which allows to easily answer the query of\r\n * if a given property exist on a given element.\r\n *\r\n * NOTE: We don't yet support querying for types or events.\r\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\r\n *       see dom_element_schema_registry_spec.ts\r\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\n\nconst SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n/* added manually to avoid breaking changes */\n',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|autocomplete,!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'slot^[HTMLElement]|name', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,autocomplete,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime', ':svg:cursor^:svg:|'];\nconst _ATTR_TO_PROP = {\n  'class': 'className',\n  'for': 'htmlFor',\n  'formaction': 'formAction',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex'\n}; // Invert _ATTR_TO_PROP.\n\nconst _PROP_TO_ATTR = /*#__PURE__*/ /*#__PURE__*/Object.keys(_ATTR_TO_PROP).reduce((inverted, attr) => {\n  inverted[_ATTR_TO_PROP[attr]] = attr;\n  return inverted;\n}, {});\n\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\n  constructor() {\n    super();\n    this._schema = {};\n    SCHEMA.forEach(encodedType => {\n      const type = {};\n      const [strType, strProperties] = encodedType.split('|');\n      const properties = strProperties.split(',');\n      const [typeNames, superName] = strType.split('^');\n      typeNames.split(',').forEach(tag => this._schema[tag.toLowerCase()] = type);\n\n      const superType = superName && this._schema[superName.toLowerCase()];\n\n      if (superType) {\n        Object.keys(superType).forEach(prop => {\n          type[prop] = superType[prop];\n        });\n      }\n\n      properties.forEach(property => {\n        if (property.length > 0) {\n          switch (property[0]) {\n            case '*':\n              // We don't yet support events.\n              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n              // will\n              // almost certainly introduce bad XSS vulnerabilities.\n              // type[property.substring(1)] = EVENT;\n              break;\n\n            case '!':\n              type[property.substring(1)] = BOOLEAN;\n              break;\n\n            case '#':\n              type[property.substring(1)] = NUMBER;\n              break;\n\n            case '%':\n              type[property.substring(1)] = OBJECT;\n              break;\n\n            default:\n              type[property] = STRING;\n          }\n        }\n      });\n    });\n  }\n\n  hasProperty(tagName, propName, schemaMetas) {\n    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {\n      return true;\n    }\n\n    if (tagName.indexOf('-') > -1) {\n      if (isNgContainer(tagName) || isNgContent(tagName)) {\n        return false;\n      }\n\n      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n        // Can't tell now as we don't know which properties a custom element will get\n        // once it is instantiated\n        return true;\n      }\n    }\n\n    const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n\n    return !!elementProperties[propName];\n  }\n\n  hasElement(tagName, schemaMetas) {\n    if (schemaMetas.some(schema => schema.name === NO_ERRORS_SCHEMA.name)) {\n      return true;\n    }\n\n    if (tagName.indexOf('-') > -1) {\n      if (isNgContainer(tagName) || isNgContent(tagName)) {\n        return true;\n      }\n\n      if (schemaMetas.some(schema => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n        // Allow any custom elements\n        return true;\n      }\n    }\n\n    return !!this._schema[tagName.toLowerCase()];\n  }\n  /**\r\n   * securityContext returns the security context for the given property on the given DOM tag.\r\n   *\r\n   * Tag and property name are statically known and cannot change at runtime, i.e. it is not\r\n   * possible to bind a value into a changing attribute or tag name.\r\n   *\r\n   * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\r\n   * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\r\n   * string values. Only specific well known attack vectors are assigned their appropriate context.\r\n   */\n\n\n  securityContext(tagName, propName, isAttribute) {\n    if (isAttribute) {\n      // NB: For security purposes, use the mapped property name, not the attribute name.\n      propName = this.getMappedPropName(propName);\n    } // Make sure comparisons are case insensitive, so that case differences between attribute and\n    // property names do not have a security impact.\n\n\n    tagName = tagName.toLowerCase();\n    propName = propName.toLowerCase();\n    let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n\n    if (ctx) {\n      return ctx;\n    }\n\n    ctx = SECURITY_SCHEMA()['*|' + propName];\n    return ctx ? ctx : SecurityContext.NONE;\n  }\n\n  getMappedPropName(propName) {\n    return _ATTR_TO_PROP[propName] || propName;\n  }\n\n  getDefaultComponentElementName() {\n    return 'ng-component';\n  }\n\n  validateProperty(name) {\n    if (name.toLowerCase().startsWith('on')) {\n      const msg = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n      return {\n        error: true,\n        msg: msg\n      };\n    } else {\n      return {\n        error: false\n      };\n    }\n  }\n\n  validateAttribute(name) {\n    if (name.toLowerCase().startsWith('on')) {\n      const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n      return {\n        error: true,\n        msg: msg\n      };\n    } else {\n      return {\n        error: false\n      };\n    }\n  }\n\n  allKnownElementNames() {\n    return Object.keys(this._schema);\n  }\n\n  allKnownAttributesOfElement(tagName) {\n    const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown']; // Convert properties to attributes.\n\n\n    return Object.keys(elementProperties).map(prop => {\n      var _a;\n\n      return (_a = _PROP_TO_ATTR[prop]) !== null && _a !== void 0 ? _a : prop;\n    });\n  }\n\n  normalizeAnimationStyleProperty(propName) {\n    return dashCaseToCamelCase(propName);\n  }\n\n  normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n    let unit = '';\n    const strVal = val.toString().trim();\n    let errorMsg = null;\n\n    if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n      if (typeof val === 'number') {\n        unit = 'px';\n      } else {\n        const valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\n        }\n      }\n    }\n\n    return {\n      error: errorMsg,\n      value: strVal + unit\n    };\n  }\n\n}\n\nfunction _isPixelDimensionStyle(prop) {\n  switch (prop) {\n    case 'width':\n    case 'height':\n    case 'minWidth':\n    case 'minHeight':\n    case 'maxWidth':\n    case 'maxHeight':\n    case 'left':\n    case 'top':\n    case 'bottom':\n    case 'right':\n    case 'fontSize':\n    case 'outlineWidth':\n    case 'outlineOffset':\n    case 'paddingTop':\n    case 'paddingLeft':\n    case 'paddingBottom':\n    case 'paddingRight':\n    case 'marginTop':\n    case 'marginLeft':\n    case 'marginBottom':\n    case 'marginRight':\n    case 'borderRadius':\n    case 'borderWidth':\n    case 'borderTopWidth':\n    case 'borderLeftWidth':\n    case 'borderRightWidth':\n    case 'borderBottomWidth':\n    case 'textIndent':\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Set of tagName|propertyName corresponding to Trusted Types sinks. Properties applying to all\r\n * tags use '*'.\r\n *\r\n * Extracted from, and should be kept in sync with\r\n * https://w3c.github.io/webappsec-trusted-types/dist/spec/#integrations\r\n */\n\n\nconst TRUSTED_TYPES_SINKS = /*#__PURE__*/new Set([// NOTE: All strings in this set *must* be lowercase!\n// TrustedHTML\n'iframe|srcdoc', '*|innerhtml', '*|outerhtml', // NB: no TrustedScript here, as the corresponding tags are stripped by the compiler.\n// TrustedScriptURL\n'embed|src', 'object|codebase', 'object|data']);\n/**\r\n * isTrustedTypesSink returns true if the given property on the given DOM tag is a Trusted Types\r\n * sink. In that case, use `ElementSchemaRegistry.securityContext` to determine which particular\r\n * Trusted Type is required for values passed to the sink:\r\n * - SecurityContext.HTML corresponds to TrustedHTML\r\n * - SecurityContext.RESOURCE_URL corresponds to TrustedScriptURL\r\n */\n\nfunction isTrustedTypesSink(tagName, propName) {\n  // Make sure comparisons are case insensitive, so that case differences between attribute and\n  // property names do not have a security impact.\n  tagName = tagName.toLowerCase();\n  propName = propName.toLowerCase();\n  return TRUSTED_TYPES_SINKS.has(tagName + '|' + propName) || TRUSTED_TYPES_SINKS.has('*|' + propName);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst BIND_NAME_REGEXP$1 = /^(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*)$/; // Group 1 = \"bind-\"\n\nconst KW_BIND_IDX$1 = 1; // Group 2 = \"let-\"\n\nconst KW_LET_IDX$1 = 2; // Group 3 = \"ref-/#\"\n\nconst KW_REF_IDX$1 = 3; // Group 4 = \"on-\"\n\nconst KW_ON_IDX$1 = 4; // Group 5 = \"bindon-\"\n\nconst KW_BINDON_IDX$1 = 5; // Group 6 = \"@\"\n\nconst KW_AT_IDX$1 = 6; // Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\n\nconst IDENT_KW_IDX$1 = 7;\nconst BINDING_DELIMS = {\n  BANANA_BOX: {\n    start: '[(',\n    end: ')]'\n  },\n  PROPERTY: {\n    start: '[',\n    end: ']'\n  },\n  EVENT: {\n    start: '(',\n    end: ')'\n  }\n};\nconst TEMPLATE_ATTR_PREFIX$2 = '*';\n\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser, options) {\n  const transformer = new HtmlAstToIvyAst(bindingParser, options);\n  const ivyNodes = visitAll$1(transformer, htmlNodes); // Errors might originate in either the binding parser or the html to ivy transformer\n\n  const allErrors = bindingParser.errors.concat(transformer.errors);\n  const result = {\n    nodes: ivyNodes,\n    errors: allErrors,\n    styleUrls: transformer.styleUrls,\n    styles: transformer.styles,\n    ngContentSelectors: transformer.ngContentSelectors\n  };\n\n  if (options.collectCommentNodes) {\n    result.commentNodes = transformer.commentNodes;\n  }\n\n  return result;\n}\n\nclass HtmlAstToIvyAst {\n  constructor(bindingParser, options) {\n    this.bindingParser = bindingParser;\n    this.options = options;\n    this.errors = [];\n    this.styles = [];\n    this.styleUrls = [];\n    this.ngContentSelectors = []; // This array will be populated if `Render3ParseOptions['collectCommentNodes']` is true\n\n    this.commentNodes = [];\n    this.inI18nBlock = false;\n  } // HTML visitor\n\n\n  visitElement(element) {\n    const isI18nRootElement = isI18nRootNode(element.i18n);\n\n    if (isI18nRootElement) {\n      if (this.inI18nBlock) {\n        this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);\n      }\n\n      this.inI18nBlock = true;\n    }\n\n    const preparsedElement = preparseElement(element);\n\n    if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n      return null;\n    } else if (preparsedElement.type === PreparsedElementType.STYLE) {\n      const contents = textContents(element);\n\n      if (contents !== null) {\n        this.styles.push(contents);\n      }\n\n      return null;\n    } else if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      this.styleUrls.push(preparsedElement.hrefAttr);\n      return null;\n    } // Whether the element is a `<ng-template>`\n\n\n    const isTemplateElement = isNgTemplate(element.name);\n    const parsedProperties = [];\n    const boundEvents = [];\n    const variables = [];\n    const references = [];\n    const attributes = [];\n    const i18nAttrsMeta = {};\n    const templateParsedProperties = [];\n    const templateVariables = []; // Whether the element has any *-attribute\n\n    let elementHasInlineTemplate = false;\n\n    for (const attribute of element.attrs) {\n      let hasBinding = false;\n      const normalizedName = normalizeAttributeName(attribute.name); // `*attr` defines template bindings\n\n      let isTemplateBinding = false;\n\n      if (attribute.i18n) {\n        i18nAttrsMeta[attribute.name] = attribute.i18n;\n      }\n\n      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$2)) {\n        // *-attributes\n        if (elementHasInlineTemplate) {\n          this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);\n        }\n\n        isTemplateBinding = true;\n        elementHasInlineTemplate = true;\n        const templateValue = attribute.value;\n        const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$2.length);\n        const parsedVariables = [];\n        const absoluteValueOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : // If there is no value span the attribute does not have a value, like `attr` in\n        //`<div attr></div>`. In this case, point to one character beyond the last character of\n        // the attribute name.\n        attribute.sourceSpan.start.offset + attribute.name.length;\n        this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables, true\n        /* isIvyAst */\n        );\n        templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan, v.keySpan, v.valueSpan)));\n      } else {\n        // Check for variables, events, property bindings, interpolation\n        hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n      }\n\n      if (!hasBinding && !isTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attributes.push(this.visitAttribute(attribute));\n      }\n    }\n\n    const children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR$1 : this, element.children);\n    let parsedElement;\n\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      // `<ng-content>`\n      if (element.children && !element.children.every(node => isEmptyTextNode(node) || isCommentNode(node))) {\n        this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n      }\n\n      const selector = preparsedElement.selectAttr;\n      const attrs = element.attrs.map(attr => this.visitAttribute(attr));\n      parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n      this.ngContentSelectors.push(selector);\n    } else if (isTemplateElement) {\n      // `<ng-template>`\n      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n      parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [\n        /* no template attributes */\n      ], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    } else {\n      const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n      parsedElement = new Element(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n\n    if (elementHasInlineTemplate) {\n      // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n      // node that contains this node.\n      // Moreover, if the node is an element, then we need to hoist its attributes to the template\n      // node for matching against content projection selectors.\n      const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n      const templateAttrs = [];\n      attrs.literal.forEach(attr => templateAttrs.push(attr));\n      attrs.bound.forEach(attr => templateAttrs.push(attr));\n      const hoistedAttrs = parsedElement instanceof Element ? {\n        attributes: parsedElement.attributes,\n        inputs: parsedElement.inputs,\n        outputs: parsedElement.outputs\n      } : {\n        attributes: [],\n        inputs: [],\n        outputs: []\n      }; // For <ng-template>s with structural directives on them, avoid passing i18n information to\n      // the wrapping template to prevent unnecessary i18n instructions from being generated. The\n      // necessary i18n meta information will be extracted from child elements.\n\n      const i18n = isTemplateElement && isI18nRootElement ? undefined : element.i18n; // TODO(pk): test for this case\n\n      parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [\n        /* no references */\n      ], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n);\n    }\n\n    if (isI18nRootElement) {\n      this.inI18nBlock = false;\n    }\n\n    return parsedElement;\n  }\n\n  visitAttribute(attribute) {\n    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n  }\n\n  visitText(text) {\n    return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);\n  }\n\n  visitExpansion(expansion) {\n    if (!expansion.i18n) {\n      // do not generate Icu in case it was created\n      // outside of i18n block in a template\n      return null;\n    }\n\n    if (!isI18nRootNode(expansion.i18n)) {\n      throw new Error(`Invalid type \"${expansion.i18n.constructor}\" for \"i18n\" property of ${expansion.sourceSpan.toString()}. Expected a \"Message\"`);\n    }\n\n    const message = expansion.i18n;\n    const vars = {};\n    const placeholders = {}; // extract VARs from ICUs - we process them separately while\n    // assembling resulting message via goog.getMsg function, since\n    // we need to pass them to top-level goog.getMsg call\n\n    Object.keys(message.placeholders).forEach(key => {\n      const value = message.placeholders[key];\n\n      if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n        // Currently when the `plural` or `select` keywords in an ICU contain trailing spaces (e.g.\n        // `{count, select , ...}`), these spaces are also included into the key names in ICU vars\n        // (e.g. \"VAR_SELECT \"). These trailing spaces are not desirable, since they will later be\n        // converted into `_` symbols while normalizing placeholder names, which might lead to\n        // mismatches at runtime (i.e. placeholder will not be replaced with the correct value).\n        const formattedKey = key.trim();\n        const ast = this.bindingParser.parseInterpolationExpression(value.text, value.sourceSpan);\n        vars[formattedKey] = new BoundText(ast, value.sourceSpan);\n      } else {\n        placeholders[key] = this._visitTextWithInterpolation(value.text, value.sourceSpan);\n      }\n    });\n    return new Icu(vars, placeholders, expansion.sourceSpan, message);\n  }\n\n  visitExpansionCase(expansionCase) {\n    return null;\n  }\n\n  visitComment(comment) {\n    if (this.options.collectCommentNodes) {\n      this.commentNodes.push(new Comment(comment.value || '', comment.sourceSpan));\n    }\n\n    return null;\n  } // convert view engine `ParsedProperty` to a format suitable for IVY\n\n\n  extractAttributes(elementName, properties, i18nPropsMeta) {\n    const bound = [];\n    const literal = [];\n    properties.forEach(prop => {\n      const i18n = i18nPropsMeta[prop.name];\n\n      if (prop.isLiteral) {\n        literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, prop.keySpan, prop.valueSpan, i18n));\n      } else {\n        // Note that validation is skipped and property mapping is disabled\n        // due to the fact that we need to make sure a given prop is not an\n        // input of a directive and directive matching happens at runtime.\n        const bep = this.bindingParser.createBoundElementProperty(elementName, prop,\n        /* skipValidation */\n        true,\n        /* mapPropertyName */\n        false);\n        bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n      }\n    });\n    return {\n      bound,\n      literal\n    };\n  }\n\n  parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n    const name = normalizeAttributeName(attribute.name);\n    const value = attribute.value;\n    const srcSpan = attribute.sourceSpan;\n    const absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;\n\n    function createKeySpan(srcSpan, prefix, identifier) {\n      // We need to adjust the start location for the keySpan to account for the removed 'data-'\n      // prefix from `normalizeAttributeName`.\n      const normalizationAdjustment = attribute.name.length - name.length;\n      const keySpanStart = srcSpan.start.moveBy(prefix.length + normalizationAdjustment);\n      const keySpanEnd = keySpanStart.moveBy(identifier.length);\n      return new ParseSourceSpan(keySpanStart, keySpanEnd, keySpanStart, identifier);\n    }\n\n    const bindParts = name.match(BIND_NAME_REGEXP$1);\n\n    if (bindParts) {\n      if (bindParts[KW_BIND_IDX$1] != null) {\n        const identifier = bindParts[IDENT_KW_IDX$1];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_BIND_IDX$1], identifier);\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      } else if (bindParts[KW_LET_IDX$1]) {\n        if (isTemplateElement) {\n          const identifier = bindParts[IDENT_KW_IDX$1];\n          const keySpan = createKeySpan(srcSpan, bindParts[KW_LET_IDX$1], identifier);\n          this.parseVariable(identifier, value, srcSpan, keySpan, attribute.valueSpan, variables);\n        } else {\n          this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n        }\n      } else if (bindParts[KW_REF_IDX$1]) {\n        const identifier = bindParts[IDENT_KW_IDX$1];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_REF_IDX$1], identifier);\n        this.parseReference(identifier, value, srcSpan, keySpan, attribute.valueSpan, references);\n      } else if (bindParts[KW_ON_IDX$1]) {\n        const events = [];\n        const identifier = bindParts[IDENT_KW_IDX$1];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_ON_IDX$1], identifier);\n        this.bindingParser.parseEvent(identifier, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n        addEvents(events, boundEvents);\n      } else if (bindParts[KW_BINDON_IDX$1]) {\n        const identifier = bindParts[IDENT_KW_IDX$1];\n        const keySpan = createKeySpan(srcSpan, bindParts[KW_BINDON_IDX$1], identifier);\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n      } else if (bindParts[KW_AT_IDX$1]) {\n        const keySpan = createKeySpan(srcSpan, '', name);\n        this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      }\n\n      return true;\n    } // We didn't see a kw-prefixed property binding, but we have not yet checked\n    // for the []/()/[()] syntax.\n\n\n    let delims = null;\n\n    if (name.startsWith(BINDING_DELIMS.BANANA_BOX.start)) {\n      delims = BINDING_DELIMS.BANANA_BOX;\n    } else if (name.startsWith(BINDING_DELIMS.PROPERTY.start)) {\n      delims = BINDING_DELIMS.PROPERTY;\n    } else if (name.startsWith(BINDING_DELIMS.EVENT.start)) {\n      delims = BINDING_DELIMS.EVENT;\n    }\n\n    if (delims !== null && // NOTE: older versions of the parser would match a start/end delimited\n    // binding iff the property name was terminated by the ending delimiter\n    // and the identifier in the binding was non-empty.\n    // TODO(ayazhafiz): update this to handle malformed bindings.\n    name.endsWith(delims.end) && name.length > delims.start.length + delims.end.length) {\n      const identifier = name.substring(delims.start.length, name.length - delims.end.length);\n      const keySpan = createKeySpan(srcSpan, delims.start, identifier);\n\n      if (delims.start === BINDING_DELIMS.BANANA_BOX.start) {\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n        this.parseAssignmentEvent(identifier, value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents, keySpan);\n      } else if (delims.start === BINDING_DELIMS.PROPERTY.start) {\n        this.bindingParser.parsePropertyBinding(identifier, value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n      } else {\n        const events = [];\n        this.bindingParser.parseEvent(identifier, value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events, keySpan);\n        addEvents(events, boundEvents);\n      }\n\n      return true;\n    } // No explicit binding found.\n\n\n    const keySpan = createKeySpan(srcSpan, ''\n    /* prefix */\n    , name);\n    const hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties, keySpan);\n    return hasBinding;\n  }\n\n  _visitTextWithInterpolation(value, sourceSpan, i18n) {\n    const valueNoNgsp = replaceNgsp(value);\n    const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);\n    return expr ? new BoundText(expr, sourceSpan, i18n) : new Text(valueNoNgsp, sourceSpan);\n  }\n\n  parseVariable(identifier, value, sourceSpan, keySpan, valueSpan, variables) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this.reportError(`Variable does not have a name`, sourceSpan);\n    }\n\n    variables.push(new Variable(identifier, value, sourceSpan, keySpan, valueSpan));\n  }\n\n  parseReference(identifier, value, sourceSpan, keySpan, valueSpan, references) {\n    if (identifier.indexOf('-') > -1) {\n      this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    } else if (identifier.length === 0) {\n      this.reportError(`Reference does not have a name`, sourceSpan);\n    } else if (references.some(reference => reference.name === identifier)) {\n      this.reportError(`Reference \"#${identifier}\" is defined more than once`, sourceSpan);\n    }\n\n    references.push(new Reference(identifier, value, sourceSpan, keySpan, valueSpan));\n  }\n\n  parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents, keySpan) {\n    const events = [];\n    this.bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events, keySpan);\n    addEvents(events, boundEvents);\n  }\n\n  reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n    this.errors.push(new ParseError(sourceSpan, message, level));\n  }\n\n}\n\nclass NonBindableVisitor$1 {\n  visitElement(ast) {\n    const preparsedElement = preparseElement(ast);\n\n    if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    const children = visitAll$1(this, ast.children, null);\n    return new Element(ast.name, visitAll$1(this, ast.attrs),\n    /* inputs */\n    [],\n    /* outputs */\n    [], children,\n    /* references */\n    [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n  }\n\n  visitComment(comment) {\n    return null;\n  }\n\n  visitAttribute(attribute) {\n    return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.keySpan, attribute.valueSpan, attribute.i18n);\n  }\n\n  visitText(text) {\n    return new Text(text.value, text.sourceSpan);\n  }\n\n  visitExpansion(expansion) {\n    return null;\n  }\n\n  visitExpansionCase(expansionCase) {\n    return null;\n  }\n\n}\n\nconst NON_BINDABLE_VISITOR$1 = /*#__PURE__*/new NonBindableVisitor$1();\n\nfunction normalizeAttributeName(attrName) {\n  return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\n\nfunction addEvents(events, boundEvents) {\n  boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));\n}\n\nfunction isEmptyTextNode(node) {\n  return node instanceof Text$3 && node.value.trim().length == 0;\n}\n\nfunction isCommentNode(node) {\n  return node instanceof Comment$1;\n}\n\nfunction textContents(node) {\n  if (node.children.length !== 1 || !(node.children[0] instanceof Text$3)) {\n    return null;\n  } else {\n    return node.children[0].value;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar TagType = /*#__PURE__*/(() => {\n  TagType = TagType || {};\n  TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n  TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n  return TagType;\n})();\n\n/**\r\n * Generates an object that is used as a shared state between parent and all child contexts.\r\n */\nfunction setupRegistry() {\n  return {\n    getUniqueId: getSeqNumberGenerator(),\n    icus: new Map()\n  };\n}\n/**\r\n * I18nContext is a helper class which keeps track of all i18n-related aspects\r\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\r\n *\r\n * When we enter a nested template, the top-level context is being passed down\r\n * to the nested component, which uses this context to generate a child instance\r\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\r\n * with the parent context.\r\n *\r\n * @param index Instruction index of i18nStart, which initiates this context\r\n * @param ref Reference to a translation const that represents the content if thus context\r\n * @param level Nestng level defined for child contexts\r\n * @param templateIndex Instruction index of a template which this context belongs to\r\n * @param meta Meta information (id, meaning, description, etc) associated with this context\r\n */\n\n\nclass I18nContext {\n  constructor(index, ref, level = 0, templateIndex = null, meta, registry) {\n    this.index = index;\n    this.ref = ref;\n    this.level = level;\n    this.templateIndex = templateIndex;\n    this.meta = meta;\n    this.registry = registry;\n    this.bindings = new Set();\n    this.placeholders = new Map();\n    this.isEmitted = false;\n    this._unresolvedCtxCount = 0;\n    this._registry = registry || setupRegistry();\n    this.id = this._registry.getUniqueId();\n  }\n\n  appendTag(type, node, index, closed) {\n    if (node.isVoid && closed) {\n      return; // ignore \"close\" for void tags\n    }\n\n    const ph = node.isVoid || !closed ? node.startName : node.closeName;\n    const content = {\n      type,\n      index,\n      ctx: this.id,\n      isVoid: node.isVoid,\n      closed\n    };\n    updatePlaceholderMap(this.placeholders, ph, content);\n  }\n\n  get icus() {\n    return this._registry.icus;\n  }\n\n  get isRoot() {\n    return this.level === 0;\n  }\n\n  get isResolved() {\n    return this._unresolvedCtxCount === 0;\n  }\n\n  getSerializedPlaceholders() {\n    const result = new Map();\n    this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));\n    return result;\n  } // public API to accumulate i18n-related content\n\n\n  appendBinding(binding) {\n    this.bindings.add(binding);\n  }\n\n  appendIcu(name, ref) {\n    updatePlaceholderMap(this._registry.icus, name, ref);\n  }\n\n  appendBoundText(node) {\n    const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n    phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));\n  }\n\n  appendTemplate(node, index) {\n    // add open and close tags at the same time,\n    // since we process nested templates separately\n    this.appendTag(TagType.TEMPLATE, node, index, false);\n    this.appendTag(TagType.TEMPLATE, node, index, true);\n    this._unresolvedCtxCount++;\n  }\n\n  appendElement(node, index, closed) {\n    this.appendTag(TagType.ELEMENT, node, index, closed);\n  }\n\n  appendProjection(node, index) {\n    // Add open and close tags at the same time, since `<ng-content>` has no content,\n    // so when we come across `<ng-content>` we can register both open and close tags.\n    // Note: runtime i18n logic doesn't distinguish `<ng-content>` tag placeholders and\n    // regular element tag placeholders, so we generate element placeholders for both types.\n    this.appendTag(TagType.ELEMENT, node, index, false);\n    this.appendTag(TagType.ELEMENT, node, index, true);\n  }\n  /**\r\n   * Generates an instance of a child context based on the root one,\r\n   * when we enter a nested template within I18n section.\r\n   *\r\n   * @param index Instruction index of corresponding i18nStart, which initiates this context\r\n   * @param templateIndex Instruction index of a template which this context belongs to\r\n   * @param meta Meta information (id, meaning, description, etc) associated with this context\r\n   *\r\n   * @returns I18nContext instance\r\n   */\n\n\n  forkChildContext(index, templateIndex, meta) {\n    return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n  }\n  /**\r\n   * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\r\n   *\r\n   * @param context Child I18nContext instance to be reconciled with parent context.\r\n   */\n\n\n  reconcileChildContext(context) {\n    // set the right context id for open and close\n    // template tags, so we can use it as sub-block ids\n    ['start', 'close'].forEach(op => {\n      const key = context.meta[`${op}Name`];\n      const phs = this.placeholders.get(key) || [];\n      const tag = phs.find(findTemplateFn(this.id, context.templateIndex));\n\n      if (tag) {\n        tag.ctx = context.id;\n      }\n    }); // reconcile placeholders\n\n    const childPhs = context.placeholders;\n    childPhs.forEach((values, key) => {\n      const phs = this.placeholders.get(key);\n\n      if (!phs) {\n        this.placeholders.set(key, values);\n        return;\n      } // try to find matching template...\n\n\n      const tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));\n\n      if (tmplIdx >= 0) {\n        // ... if found - replace it with nested template content\n        const isCloseTag = key.startsWith('CLOSE');\n        const isTemplateTag = key.endsWith('NG-TEMPLATE');\n\n        if (isTemplateTag) {\n          // current template's content is placed before or after\n          // parent template tag, depending on the open/close atrribute\n          phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);\n        } else {\n          const idx = isCloseTag ? values.length - 1 : 0;\n          values[idx].tmpl = phs[tmplIdx];\n          phs.splice(tmplIdx, 1, ...values);\n        }\n      } else {\n        // ... otherwise just append content to placeholder value\n        phs.push(...values);\n      }\n\n      this.placeholders.set(key, phs);\n    });\n    this._unresolvedCtxCount--;\n  }\n\n} //\n// Helper methods\n//\n\n\nfunction wrap(symbol, index, contextId, closed) {\n  const state = closed ? '/' : '';\n  return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);\n}\n\nfunction wrapTag(symbol, {\n  index,\n  ctx,\n  isVoid\n}, closed) {\n  return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) : wrap(symbol, index, ctx, closed);\n}\n\nfunction findTemplateFn(ctx, templateIndex) {\n  return token => typeof token === 'object' && token.type === TagType.TEMPLATE && token.index === templateIndex && token.ctx === ctx;\n}\n\nfunction serializePlaceholderValue(value) {\n  const element = (data, closed) => wrapTag('#', data, closed);\n\n  const template = (data, closed) => wrapTag('*', data, closed);\n\n  const projection = (data, closed) => wrapTag('!', data, closed);\n\n  switch (value.type) {\n    case TagType.ELEMENT:\n      // close element tag\n      if (value.closed) {\n        return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n      } // open element tag that also initiates a template\n\n\n      if (value.tmpl) {\n        return template(value.tmpl) + element(value) + (value.isVoid ? template(value.tmpl, true) : '');\n      }\n\n      return element(value);\n\n    case TagType.TEMPLATE:\n      return template(value, value.closed);\n\n    default:\n      return value;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass IcuSerializerVisitor {\n  visitText(text) {\n    return text.value;\n  }\n\n  visitContainer(container) {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n\n  visitIcu(icu) {\n    const strCases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n    const result = `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    return result;\n  }\n\n  visitTagPlaceholder(ph) {\n    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n\n  visitPlaceholder(ph) {\n    return this.formatPh(ph.name);\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    return this.formatPh(ph.name);\n  }\n\n  formatPh(value) {\n    return `{${formatI18nPlaceholderName(value,\n    /* useCamelCase */\n    false)}}`;\n  }\n\n}\n\nconst serializer = /*#__PURE__*/new IcuSerializerVisitor();\n\nfunction serializeIcuNode(icu) {\n  return icu.visit(serializer);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst TAG_TO_PLACEHOLDER_NAMES = {\n  'A': 'LINK',\n  'B': 'BOLD_TEXT',\n  'BR': 'LINE_BREAK',\n  'EM': 'EMPHASISED_TEXT',\n  'H1': 'HEADING_LEVEL1',\n  'H2': 'HEADING_LEVEL2',\n  'H3': 'HEADING_LEVEL3',\n  'H4': 'HEADING_LEVEL4',\n  'H5': 'HEADING_LEVEL5',\n  'H6': 'HEADING_LEVEL6',\n  'HR': 'HORIZONTAL_RULE',\n  'I': 'ITALIC_TEXT',\n  'LI': 'LIST_ITEM',\n  'LINK': 'MEDIA_LINK',\n  'OL': 'ORDERED_LIST',\n  'P': 'PARAGRAPH',\n  'Q': 'QUOTATION',\n  'S': 'STRIKETHROUGH_TEXT',\n  'SMALL': 'SMALL_TEXT',\n  'SUB': 'SUBSTRIPT',\n  'SUP': 'SUPERSCRIPT',\n  'TBODY': 'TABLE_BODY',\n  'TD': 'TABLE_CELL',\n  'TFOOT': 'TABLE_FOOTER',\n  'TH': 'TABLE_HEADER_CELL',\n  'THEAD': 'TABLE_HEADER',\n  'TR': 'TABLE_ROW',\n  'TT': 'MONOSPACED_TEXT',\n  'U': 'UNDERLINED_TEXT',\n  'UL': 'UNORDERED_LIST'\n};\n/**\r\n * Creates unique names for placeholder with different content.\r\n *\r\n * Returns the same placeholder name when the content is identical.\r\n */\n\nclass PlaceholderRegistry {\n  constructor() {\n    // Count the occurrence of the base name top generate a unique name\n    this._placeHolderNameCounts = {}; // Maps signature to placeholder names\n\n    this._signatureToName = {};\n  }\n\n  getStartTagPlaceholderName(tag, attrs, isVoid) {\n    const signature = this._hashTag(tag, attrs, isVoid);\n\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n\n    const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n\n    this._signatureToName[signature] = name;\n    return name;\n  }\n\n  getCloseTagPlaceholderName(tag) {\n    const signature = this._hashClosingTag(tag);\n\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const upperTag = tag.toUpperCase();\n    const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n\n    const name = this._generateUniqueName(`CLOSE_${baseName}`);\n\n    this._signatureToName[signature] = name;\n    return name;\n  }\n\n  getPlaceholderName(name, content) {\n    const upperName = name.toUpperCase();\n    const signature = `PH: ${upperName}=${content}`;\n\n    if (this._signatureToName[signature]) {\n      return this._signatureToName[signature];\n    }\n\n    const uniqueName = this._generateUniqueName(upperName);\n\n    this._signatureToName[signature] = uniqueName;\n    return uniqueName;\n  }\n\n  getUniquePlaceholder(name) {\n    return this._generateUniqueName(name.toUpperCase());\n  } // Generate a hash for a tag - does not take attribute order into account\n\n\n  _hashTag(tag, attrs, isVoid) {\n    const start = `<${tag}`;\n    const strAttrs = Object.keys(attrs).sort().map(name => ` ${name}=${attrs[name]}`).join('');\n    const end = isVoid ? '/>' : `></${tag}>`;\n    return start + strAttrs + end;\n  }\n\n  _hashClosingTag(tag) {\n    return this._hashTag(`/${tag}`, {}, false);\n  }\n\n  _generateUniqueName(base) {\n    const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n\n    if (!seen) {\n      this._placeHolderNameCounts[base] = 1;\n      return base;\n    }\n\n    const id = this._placeHolderNameCounts[base];\n    this._placeHolderNameCounts[base] = id + 1;\n    return `${base}_${id}`;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _expParser = /*#__PURE__*/new Parser$1( /*#__PURE__*/new Lexer());\n/**\r\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\r\n */\n\n\nfunction createI18nMessageFactory(interpolationConfig) {\n  const visitor = new _I18nVisitor(_expParser, interpolationConfig);\n  return (nodes, meaning, description, customId, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n}\n\nfunction noopVisitNodeFn(_html, i18n) {\n  return i18n;\n}\n\nclass _I18nVisitor {\n  constructor(_expressionParser, _interpolationConfig) {\n    this._expressionParser = _expressionParser;\n    this._interpolationConfig = _interpolationConfig;\n  }\n\n  toI18nMessage(nodes, meaning = '', description = '', customId = '', visitNodeFn) {\n    const context = {\n      isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,\n      icuDepth: 0,\n      placeholderRegistry: new PlaceholderRegistry(),\n      placeholderToContent: {},\n      placeholderToMessage: {},\n      visitNodeFn: visitNodeFn || noopVisitNodeFn\n    };\n    const i18nodes = visitAll$1(this, nodes, context);\n    return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);\n  }\n\n  visitElement(el, context) {\n    var _a;\n\n    const children = visitAll$1(this, el.children, context);\n    const attrs = {};\n    el.attrs.forEach(attr => {\n      // Do not visit the attributes, translatable ones are top-level ASTs\n      attrs[attr.name] = attr.value;\n    });\n    const isVoid = getHtmlTagDefinition(el.name).isVoid;\n    const startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n    context.placeholderToContent[startPhName] = {\n      text: el.startSourceSpan.toString(),\n      sourceSpan: el.startSourceSpan\n    };\n    let closePhName = '';\n\n    if (!isVoid) {\n      closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);\n      context.placeholderToContent[closePhName] = {\n        text: `</${el.name}>`,\n        sourceSpan: (_a = el.endSourceSpan) !== null && _a !== void 0 ? _a : el.sourceSpan\n      };\n    }\n\n    const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n    return context.visitNodeFn(el, node);\n  }\n\n  visitAttribute(attribute, context) {\n    const node = attribute.valueTokens === undefined || attribute.valueTokens.length === 1 ? new Text$1(attribute.value, attribute.valueSpan || attribute.sourceSpan) : this._visitTextWithInterpolation(attribute.valueTokens, attribute.valueSpan || attribute.sourceSpan, context, attribute.i18n);\n    return context.visitNodeFn(attribute, node);\n  }\n\n  visitText(text, context) {\n    const node = text.tokens.length === 1 ? new Text$1(text.value, text.sourceSpan) : this._visitTextWithInterpolation(text.tokens, text.sourceSpan, context, text.i18n);\n    return context.visitNodeFn(text, node);\n  }\n\n  visitComment(comment, context) {\n    return null;\n  }\n\n  visitExpansion(icu, context) {\n    context.icuDepth++;\n    const i18nIcuCases = {};\n    const i18nIcu = new Icu$1(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n    icu.cases.forEach(caze => {\n      i18nIcuCases[caze.value] = new Container(caze.expression.map(node => node.visit(this, context)), caze.expSourceSpan);\n    });\n    context.icuDepth--;\n\n    if (context.isIcu || context.icuDepth > 0) {\n      // Returns an ICU node when:\n      // - the message (vs a part of the message) is an ICU message, or\n      // - the ICU message is nested.\n      const expPh = context.placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n      i18nIcu.expressionPlaceholder = expPh;\n      context.placeholderToContent[expPh] = {\n        text: icu.switchValue,\n        sourceSpan: icu.switchValueSourceSpan\n      };\n      return context.visitNodeFn(icu, i18nIcu);\n    } // Else returns a placeholder\n    // ICU placeholders should not be replaced with their original content but with the their\n    // translations.\n    // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n\n\n    const phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n    context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);\n    const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n    return context.visitNodeFn(icu, node);\n  }\n\n  visitExpansionCase(_icuCase, _context) {\n    throw new Error('Unreachable code');\n  }\n  /**\r\n   * Convert, text and interpolated tokens up into text and placeholder pieces.\r\n   *\r\n   * @param tokens The text and interpolated tokens.\r\n   * @param sourceSpan The span of the whole of the `text` string.\r\n   * @param context The current context of the visitor, used to compute and store placeholders.\r\n   * @param previousI18n Any i18n metadata associated with this `text` from a previous pass.\r\n   */\n\n\n  _visitTextWithInterpolation(tokens, sourceSpan, context, previousI18n) {\n    // Return a sequence of `Text` and `Placeholder` nodes grouped in a `Container`.\n    const nodes = []; // We will only create a container if there are actually interpolations,\n    // so this flag tracks that.\n\n    let hasInterpolation = false;\n\n    for (const token of tokens) {\n      switch (token.type) {\n        case 8\n        /* INTERPOLATION */\n        :\n        case 17\n        /* ATTR_VALUE_INTERPOLATION */\n        :\n          hasInterpolation = true;\n          const expression = token.parts[1];\n          const baseName = extractPlaceholderName(expression) || 'INTERPOLATION';\n          const phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);\n          context.placeholderToContent[phName] = {\n            text: token.parts.join(''),\n            sourceSpan: token.sourceSpan\n          };\n          nodes.push(new Placeholder(expression, phName, token.sourceSpan));\n          break;\n\n        default:\n          if (token.parts[0].length > 0) {\n            // This token is text or an encoded entity.\n            // If it is following on from a previous text node then merge it into that node\n            // Otherwise, if it is following an interpolation, then add a new node.\n            const previous = nodes[nodes.length - 1];\n\n            if (previous instanceof Text$1) {\n              previous.value += token.parts[0];\n              previous.sourceSpan = new ParseSourceSpan(previous.sourceSpan.start, token.sourceSpan.end, previous.sourceSpan.fullStart, previous.sourceSpan.details);\n            } else {\n              nodes.push(new Text$1(token.parts[0], token.sourceSpan));\n            }\n          }\n\n          break;\n      }\n    }\n\n    if (hasInterpolation) {\n      // Whitespace removal may have invalidated the interpolation source-spans.\n      reusePreviousSourceSpans(nodes, previousI18n);\n      return new Container(nodes, sourceSpan);\n    } else {\n      return nodes[0];\n    }\n  }\n\n}\n/**\r\n * Re-use the source-spans from `previousI18n` metadata for the `nodes`.\r\n *\r\n * Whitespace removal can invalidate the source-spans of interpolation nodes, so we\r\n * reuse the source-span stored from a previous pass before the whitespace was removed.\r\n *\r\n * @param nodes The `Text` and `Placeholder` nodes to be processed.\r\n * @param previousI18n Any i18n metadata for these `nodes` stored from a previous pass.\r\n */\n\n\nfunction reusePreviousSourceSpans(nodes, previousI18n) {\n  if (previousI18n instanceof Message) {\n    // The `previousI18n` is an i18n `Message`, so we are processing an `Attribute` with i18n\n    // metadata. The `Message` should consist only of a single `Container` that contains the\n    // parts (`Text` and `Placeholder`) to process.\n    assertSingleContainerMessage(previousI18n);\n    previousI18n = previousI18n.nodes[0];\n  }\n\n  if (previousI18n instanceof Container) {\n    // The `previousI18n` is a `Container`, which means that this is a second i18n extraction pass\n    // after whitespace has been removed from the AST nodes.\n    assertEquivalentNodes(previousI18n.children, nodes); // Reuse the source-spans from the first pass.\n\n    for (let i = 0; i < nodes.length; i++) {\n      nodes[i].sourceSpan = previousI18n.children[i].sourceSpan;\n    }\n  }\n}\n/**\r\n * Asserts that the `message` contains exactly one `Container` node.\r\n */\n\n\nfunction assertSingleContainerMessage(message) {\n  const nodes = message.nodes;\n\n  if (nodes.length !== 1 || !(nodes[0] instanceof Container)) {\n    throw new Error('Unexpected previous i18n message - expected it to consist of only a single `Container` node.');\n  }\n}\n/**\r\n * Asserts that the `previousNodes` and `node` collections have the same number of elements and\r\n * corresponding elements have the same node type.\r\n */\n\n\nfunction assertEquivalentNodes(previousNodes, nodes) {\n  if (previousNodes.length !== nodes.length) {\n    throw new Error('The number of i18n message children changed between first and second pass.');\n  }\n\n  if (previousNodes.some((node, i) => nodes[i].constructor !== node.constructor)) {\n    throw new Error('The types of the i18n message children changed between first and second pass.');\n  }\n}\n\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n\nfunction extractPlaceholderName(input) {\n  return input.split(_CUSTOM_PH_EXP)[2];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * An i18n error.\r\n */\n\n\nclass I18nError extends ParseError {\n  constructor(span, msg) {\n    super(span, msg);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst setI18nRefs = (htmlNode, i18nNode) => {\n  if (htmlNode instanceof NodeWithI18n) {\n    if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {\n      // This html node represents an ICU but this is a second processing pass, and the legacy id\n      // was computed in the previous pass and stored in the `i18n` property as a message.\n      // We are about to wipe out that property so capture the previous message to be reused when\n      // generating the message for this ICU later. See `_generateI18nMessage()`.\n      i18nNode.previousMessage = htmlNode.i18n;\n    }\n\n    htmlNode.i18n = i18nNode;\n  }\n\n  return i18nNode;\n};\n/**\r\n * This visitor walks over HTML parse tree and converts information stored in\r\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\r\n * stored with other element's and attribute's information.\r\n */\n\n\nclass I18nMetaVisitor {\n  constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false, enableI18nLegacyMessageIdFormat = false) {\n    this.interpolationConfig = interpolationConfig;\n    this.keepI18nAttrs = keepI18nAttrs;\n    this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat; // whether visited nodes contain i18n information\n\n    this.hasI18nMeta = false;\n    this._errors = []; // i18n message generation factory\n\n    this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);\n  }\n\n  _generateI18nMessage(nodes, meta = '', visitNodeFn) {\n    const {\n      meaning,\n      description,\n      customId\n    } = this._parseMetadata(meta);\n\n    const message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);\n\n    this._setMessageId(message, meta);\n\n    this._setLegacyIds(message, meta);\n\n    return message;\n  }\n\n  visitAllWithErrors(nodes) {\n    const result = nodes.map(node => node.visit(this, null));\n    return new ParseTreeResult(result, this._errors);\n  }\n\n  visitElement(element) {\n    if (hasI18nAttrs(element)) {\n      this.hasI18nMeta = true;\n      const attrs = [];\n      const attrsMeta = {};\n\n      for (const attr of element.attrs) {\n        if (attr.name === I18N_ATTR) {\n          // root 'i18n' node attribute\n          const i18n = element.i18n || attr.value;\n\n          const message = this._generateI18nMessage(element.children, i18n, setI18nRefs); // do not assign empty i18n meta\n\n\n          if (message.nodes.length) {\n            element.i18n = message;\n          }\n        } else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n          // 'i18n-*' attributes\n          const name = attr.name.slice(I18N_ATTR_PREFIX.length);\n\n          if (isTrustedTypesSink(element.name, name)) {\n            this._reportError(attr, `Translating attribute '${name}' is disallowed for security reasons.`);\n          } else {\n            attrsMeta[name] = attr.value;\n          }\n        } else {\n          // non-i18n attributes\n          attrs.push(attr);\n        }\n      } // set i18n meta for attributes\n\n\n      if (Object.keys(attrsMeta).length) {\n        for (const attr of attrs) {\n          const meta = attrsMeta[attr.name]; // do not create translation for empty attributes\n\n          if (meta !== undefined && attr.value) {\n            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n          }\n        }\n      }\n\n      if (!this.keepI18nAttrs) {\n        // update element's attributes,\n        // keeping only non-i18n related ones\n        element.attrs = attrs;\n      }\n    }\n\n    visitAll$1(this, element.children, element.i18n);\n    return element;\n  }\n\n  visitExpansion(expansion, currentMessage) {\n    let message;\n    const meta = expansion.i18n;\n    this.hasI18nMeta = true;\n\n    if (meta instanceof IcuPlaceholder) {\n      // set ICU placeholder name (e.g. \"ICU_1\"),\n      // generated while processing root element contents,\n      // so we can reference it when we output translation\n      const name = meta.name;\n      message = this._generateI18nMessage([expansion], meta);\n      const icu = icuFromI18nMessage(message);\n      icu.name = name;\n    } else {\n      // ICU is a top level message, try to use metadata from container element if provided via\n      // `context` argument. Note: context may not be available for standalone ICUs (without\n      // wrapping element), so fallback to ICU metadata in this case.\n      message = this._generateI18nMessage([expansion], currentMessage || meta);\n    }\n\n    expansion.i18n = message;\n    return expansion;\n  }\n\n  visitText(text) {\n    return text;\n  }\n\n  visitAttribute(attribute) {\n    return attribute;\n  }\n\n  visitComment(comment) {\n    return comment;\n  }\n\n  visitExpansionCase(expansionCase) {\n    return expansionCase;\n  }\n  /**\r\n   * Parse the general form `meta` passed into extract the explicit metadata needed to create a\r\n   * `Message`.\r\n   *\r\n   * There are three possibilities for the `meta` variable\r\n   * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.\r\n   * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.\r\n   * 4) other: ignore this and just process the message metadata as normal\r\n   *\r\n   * @param meta the bucket that holds information about the message\r\n   * @returns the parsed metadata.\r\n   */\n\n\n  _parseMetadata(meta) {\n    return typeof meta === 'string' ? parseI18nMeta(meta) : meta instanceof Message ? meta : {};\n  }\n  /**\r\n   * Generate (or restore) message id if not specified already.\r\n   */\n\n\n  _setMessageId(message, meta) {\n    if (!message.id) {\n      message.id = meta instanceof Message && meta.id || decimalDigest(message);\n    }\n  }\n  /**\r\n   * Update the `message` with a `legacyId` if necessary.\r\n   *\r\n   * @param message the message whose legacy id should be set\r\n   * @param meta information about the message being processed\r\n   */\n\n\n  _setLegacyIds(message, meta) {\n    if (this.enableI18nLegacyMessageIdFormat) {\n      message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];\n    } else if (typeof meta !== 'string') {\n      // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in\n      // `packages/compiler/src/render3/view/template.ts`).\n      // In that case we want to reuse the legacy message generated in the 1st pass (see\n      // `setI18nRefs()`).\n      const previousMessage = meta instanceof Message ? meta : meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;\n      message.legacyIds = previousMessage ? previousMessage.legacyIds : [];\n    }\n  }\n\n  _reportError(node, msg) {\n    this._errors.push(new I18nError(node.sourceSpan, msg));\n  }\n\n}\n/** I18n separators for metadata **/\n\n\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n/**\r\n * Parses i18n metas like:\r\n *  - \"@@id\",\r\n *  - \"description[@@id]\",\r\n *  - \"meaning|description[@@id]\"\r\n * and returns an object with parsed output.\r\n *\r\n * @param meta String that represents i18n meta\r\n * @returns Object with id, meaning and description fields\r\n */\n\nfunction parseI18nMeta(meta = '') {\n  let customId;\n  let meaning;\n  let description;\n  meta = meta.trim();\n\n  if (meta) {\n    const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n    const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n    let meaningAndDesc;\n    [meaningAndDesc, customId] = idIndex > -1 ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n    [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];\n  }\n\n  return {\n    customId,\n    meaning,\n    description\n  };\n} // Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\n\n\nfunction i18nMetaToJSDoc(meta) {\n  const tags = [];\n\n  if (meta.description) {\n    tags.push({\n      tagName: \"desc\"\n      /* Desc */\n      ,\n      text: meta.description\n    });\n  }\n\n  if (meta.meaning) {\n    tags.push({\n      tagName: \"meaning\"\n      /* Meaning */\n      ,\n      text: meta.meaning\n    });\n  }\n\n  return tags.length == 0 ? null : jsDocComment(tags);\n}\n/** Closure uses `goog.getMsg(message)` to lookup translations */\n\n\nconst GOOG_GET_MSG = 'goog.getMsg';\n\nfunction createGoogleGetMsgStatements(variable$1, message, closureVar, params) {\n  const messageString = serializeI18nMessageForGetMsg(message);\n  const args = [literal(messageString)];\n\n  if (Object.keys(params).length) {\n    args.push(mapLiteral(params, true));\n  } // /**\n  //  * @desc description of message\n  //  * @meaning meaning of message\n  //  */\n  // const MSG_... = goog.getMsg(..);\n  // I18N_X = MSG_...;\n\n\n  const googGetMsgStmt = closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl();\n  const metaComment = i18nMetaToJSDoc(message);\n\n  if (metaComment !== null) {\n    googGetMsgStmt.addLeadingComment(metaComment);\n  }\n\n  const i18nAssignmentStmt = new ExpressionStatement(variable$1.set(closureVar));\n  return [googGetMsgStmt, i18nAssignmentStmt];\n}\n/**\r\n * This visitor walks over i18n tree and generates its string representation, including ICUs and\r\n * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.\r\n */\n\n\nclass GetMsgSerializerVisitor {\n  formatPh(value) {\n    return `{$${formatI18nPlaceholderName(value)}}`;\n  }\n\n  visitText(text) {\n    return text.value;\n  }\n\n  visitContainer(container) {\n    return container.children.map(child => child.visit(this)).join('');\n  }\n\n  visitIcu(icu) {\n    return serializeIcuNode(icu);\n  }\n\n  visitTagPlaceholder(ph) {\n    return ph.isVoid ? this.formatPh(ph.startName) : `${this.formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${this.formatPh(ph.closeName)}`;\n  }\n\n  visitPlaceholder(ph) {\n    return this.formatPh(ph.name);\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    return this.formatPh(ph.name);\n  }\n\n}\n\nconst serializerVisitor$1 = /*#__PURE__*/new GetMsgSerializerVisitor();\n\nfunction serializeI18nMessageForGetMsg(message) {\n  return message.nodes.map(node => node.visit(serializerVisitor$1, null)).join('');\n}\n\nfunction createLocalizeStatements(variable, message, params) {\n  const {\n    messageParts,\n    placeHolders\n  } = serializeI18nMessageForLocalize(message);\n  const sourceSpan = getSourceSpan(message);\n  const expressions = placeHolders.map(ph => params[ph.text]);\n  const localizedString$1 = localizedString(message, messageParts, placeHolders, expressions, sourceSpan);\n  const variableInitialization = variable.set(localizedString$1);\n  return [new ExpressionStatement(variableInitialization)];\n}\n/**\r\n * This visitor walks over an i18n tree, capturing literal strings and placeholders.\r\n *\r\n * The result can be used for generating the `$localize` tagged template literals.\r\n */\n\n\nclass LocalizeSerializerVisitor {\n  visitText(text, context) {\n    if (context[context.length - 1] instanceof LiteralPiece) {\n      // Two literal pieces in a row means that there was some comment node in-between.\n      context[context.length - 1].text += text.value;\n    } else {\n      const sourceSpan = new ParseSourceSpan(text.sourceSpan.fullStart, text.sourceSpan.end, text.sourceSpan.fullStart, text.sourceSpan.details);\n      context.push(new LiteralPiece(text.value, sourceSpan));\n    }\n  }\n\n  visitContainer(container, context) {\n    container.children.forEach(child => child.visit(this, context));\n  }\n\n  visitIcu(icu, context) {\n    context.push(new LiteralPiece(serializeIcuNode(icu), icu.sourceSpan));\n  }\n\n  visitTagPlaceholder(ph, context) {\n    var _a, _b;\n\n    context.push(this.createPlaceholderPiece(ph.startName, (_a = ph.startSourceSpan) !== null && _a !== void 0 ? _a : ph.sourceSpan));\n\n    if (!ph.isVoid) {\n      ph.children.forEach(child => child.visit(this, context));\n      context.push(this.createPlaceholderPiece(ph.closeName, (_b = ph.endSourceSpan) !== null && _b !== void 0 ? _b : ph.sourceSpan));\n    }\n  }\n\n  visitPlaceholder(ph, context) {\n    context.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    context.push(this.createPlaceholderPiece(ph.name, ph.sourceSpan));\n  }\n\n  createPlaceholderPiece(name, sourceSpan) {\n    return new PlaceholderPiece(formatI18nPlaceholderName(name,\n    /* useCamelCase */\n    false), sourceSpan);\n  }\n\n}\n\nconst serializerVisitor$2 = /*#__PURE__*/new LocalizeSerializerVisitor();\n/**\r\n * Serialize an i18n message into two arrays: messageParts and placeholders.\r\n *\r\n * These arrays will be used to generate `$localize` tagged template literals.\r\n *\r\n * @param message The message to be serialized.\r\n * @returns an object containing the messageParts and placeholders.\r\n */\n\nfunction serializeI18nMessageForLocalize(message) {\n  const pieces = [];\n  message.nodes.forEach(node => node.visit(serializerVisitor$2, pieces));\n  return processMessagePieces(pieces);\n}\n\nfunction getSourceSpan(message) {\n  const startNode = message.nodes[0];\n  const endNode = message.nodes[message.nodes.length - 1];\n  return new ParseSourceSpan(startNode.sourceSpan.fullStart, endNode.sourceSpan.end, startNode.sourceSpan.fullStart, startNode.sourceSpan.details);\n}\n/**\r\n * Convert the list of serialized MessagePieces into two arrays.\r\n *\r\n * One contains the literal string pieces and the other the placeholders that will be replaced by\r\n * expressions when rendering `$localize` tagged template literals.\r\n *\r\n * @param pieces The pieces to process.\r\n * @returns an object containing the messageParts and placeholders.\r\n */\n\n\nfunction processMessagePieces(pieces) {\n  const messageParts = [];\n  const placeHolders = [];\n\n  if (pieces[0] instanceof PlaceholderPiece) {\n    // The first piece was a placeholder so we need to add an initial empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[0].sourceSpan.start));\n  }\n\n  for (let i = 0; i < pieces.length; i++) {\n    const part = pieces[i];\n\n    if (part instanceof LiteralPiece) {\n      messageParts.push(part);\n    } else {\n      placeHolders.push(part);\n\n      if (pieces[i - 1] instanceof PlaceholderPiece) {\n        // There were two placeholders in a row, so we need to add an empty message part.\n        messageParts.push(createEmptyMessagePart(pieces[i - 1].sourceSpan.end));\n      }\n    }\n  }\n\n  if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {\n    // The last piece was a placeholder so we need to add a final empty message part.\n    messageParts.push(createEmptyMessagePart(pieces[pieces.length - 1].sourceSpan.end));\n  }\n\n  return {\n    messageParts,\n    placeHolders\n  };\n}\n\nfunction createEmptyMessagePart(location) {\n  return new LiteralPiece('', new ParseSourceSpan(location, location));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Selector attribute name of `<ng-content>`\n\n\nconst NG_CONTENT_SELECT_ATTR$1 = 'select'; // Attribute name of `ngProjectAs`.\n\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs'; // Global symbols available only inside event bindings.\n\nconst EVENT_BINDING_SCOPE_GLOBALS = /*#__PURE__*/new Set(['$event']); // List of supported global targets for event listeners\n\nconst GLOBAL_TARGET_RESOLVERS = /*#__PURE__*/new Map([['window', Identifiers.resolveWindow], ['document', Identifiers.resolveDocument], ['body', Identifiers.resolveBody]]);\nconst LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t']; //  if (rf & flags) { .. }\n\nfunction renderFlagCheckIfStmt(flags, statements) {\n  return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\n\nfunction prepareEventListenerParameters(eventAst, handlerName = null, scope = null) {\n  const {\n    type,\n    name,\n    target,\n    phase,\n    handler\n  } = eventAst;\n\n  if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n    throw new Error(`Unexpected global target '${target}' defined for '${name}' event.\n        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);\n  }\n\n  const eventArgumentName = '$event';\n  const implicitReceiverAccesses = new Set();\n  const implicitReceiverExpr = scope === null || scope.bindingLevel === 0 ? variable(CONTEXT_NAME) : scope.getOrCreateSharedContextVar(0);\n  const bindingExpr = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', () => error('Unexpected interpolation'), eventAst.handlerSpan, implicitReceiverAccesses, EVENT_BINDING_SCOPE_GLOBALS);\n  const statements = [];\n\n  if (scope) {\n    // `variableDeclarations` needs to run first, because\n    // `restoreViewStatement` depends on the result.\n    statements.push(...scope.variableDeclarations());\n    statements.unshift(...scope.restoreViewStatement());\n  }\n\n  statements.push(...bindingExpr.render3Stmts);\n  const eventName = type === 1\n  /* Animation */\n  ? prepareSyntheticListenerName(name, phase) : name;\n  const fnName = handlerName && sanitizeIdentifier(handlerName);\n  const fnArgs = [];\n\n  if (implicitReceiverAccesses.has(eventArgumentName)) {\n    fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));\n  }\n\n  const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n  const params = [literal(eventName), handlerFn];\n\n  if (target) {\n    params.push(literal(false), // `useCapture` flag, defaults to `false`\n    importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n  }\n\n  return params;\n}\n\nfunction createComponentDefConsts() {\n  return {\n    prepareStatements: [],\n    constExpressions: [],\n    i18nVarRefsCache: new Map()\n  };\n}\n\nclass TemplateDefinitionBuilder {\n  constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, directiveMatcher, directives, pipeTypeByName, pipes, _namespace, relativeContextFilePath, i18nUseExternalIds, _constants = createComponentDefConsts()) {\n    this.constantPool = constantPool;\n    this.level = level;\n    this.contextName = contextName;\n    this.i18nContext = i18nContext;\n    this.templateIndex = templateIndex;\n    this.templateName = templateName;\n    this.directiveMatcher = directiveMatcher;\n    this.directives = directives;\n    this.pipeTypeByName = pipeTypeByName;\n    this.pipes = pipes;\n    this._namespace = _namespace;\n    this.i18nUseExternalIds = i18nUseExternalIds;\n    this._constants = _constants;\n    this._dataIndex = 0;\n    this._bindingContext = 0;\n    this._prefixCode = [];\n    /**\r\n     * List of callbacks to generate creation mode instructions. We store them here as we process\r\n     * the template so bindings in listeners are resolved only once all nodes have been visited.\r\n     * This ensures all local refs and context variables are available for matching.\r\n     */\n\n    this._creationCodeFns = [];\n    /**\r\n     * List of callbacks to generate update mode instructions. We store them here as we process\r\n     * the template so bindings are resolved only once all nodes have been visited. This ensures\r\n     * all local refs and context variables are available for matching.\r\n     */\n\n    this._updateCodeFns = [];\n    /** Index of the currently-selected node. */\n\n    this._currentIndex = 0;\n    /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n\n    this._tempVariables = [];\n    /**\r\n     * List of callbacks to build nested templates. Nested templates must not be visited until\r\n     * after the parent template has finished visiting all of its nodes. This ensures that all\r\n     * local ref bindings in nested templates are able to find local ref values if the refs\r\n     * are defined after the template declaration.\r\n     */\n\n    this._nestedTemplateFns = [];\n    this._unsupported = unsupported; // i18n context local to this template\n\n    this.i18n = null; // Number of slots to reserve for pureFunctions\n\n    this._pureFunctionSlots = 0; // Number of binding slots\n\n    this._bindingSlots = 0; // Projection slots found in the template. Projection slots can distribute projected\n    // nodes based on a selector, or can just use the wildcard selector to match\n    // all nodes which aren't matching any selector.\n\n    this._ngContentReservedSlots = []; // Number of non-default selectors found in all parent templates of this template. We need to\n    // track it to properly adjust projection slot index in the `projection` instruction.\n\n    this._ngContentSelectorsOffset = 0; // Expression that should be used as implicit receiver when converting template\n    // expressions to output AST.\n\n    this._implicitReceiverExpr = null; // These should be handled in the template or element directly.\n\n    this.visitReference = invalid$1;\n    this.visitVariable = invalid$1;\n    this.visitTextAttribute = invalid$1;\n    this.visitBoundAttribute = invalid$1;\n    this.visitBoundEvent = invalid$1;\n    this._bindingScope = parentBindingScope.nestedScope(level); // Turn the relative context file path into an identifier by replacing non-alphanumeric\n    // characters with underscores.\n\n    this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n    this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), numSlots => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {\n      const pipeType = pipeTypeByName.get(name);\n\n      if (pipeType) {\n        this.pipes.add(pipeType);\n      }\n\n      this._bindingScope.set(this.level, localName, value);\n\n      this.creationInstruction(null, Identifiers.pipe, [literal(slot), literal(name)]);\n    });\n  }\n\n  buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n) {\n    this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n\n    if (this._namespace !== Identifiers.namespaceHTML) {\n      this.creationInstruction(null, this._namespace);\n    } // Create variable bindings\n\n\n    variables.forEach(v => this.registerContextVariables(v)); // Initiate i18n context in case:\n    // - this template has parent i18n context\n    // - or the template has i18n meta associated with it,\n    //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n\n    const initI18nContext = this.i18nContext || isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) && !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n);\n    const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n\n    if (initI18nContext) {\n      this.i18nStart(null, i18n, selfClosingI18nInstruction);\n    } // This is the initial pass through the nodes of this template. In this pass, we\n    // queue all creation mode and update mode instructions for generation in the second\n    // pass. It's necessary to separate the passes to ensure local refs are defined before\n    // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n\n\n    visitAll(this, nodes); // Add total binding count to pure function count so pure function instructions are\n    // generated with the correct slot offset when update instructions are processed.\n\n    this._pureFunctionSlots += this._bindingSlots; // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n    // `pipeBind` update instructions), so we have to update the slot offsets manually\n    // to account for bindings.\n\n    this._valueConverter.updatePipeSlotOffsets(this._bindingSlots); // Nested templates must be processed before creation instructions so template()\n    // instructions can be generated with the correct internal const count.\n\n\n    this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn()); // Output the `projectionDef` instruction when some `<ng-content>` tags are present.\n    // The `projectionDef` instruction is only emitted for the component template and\n    // is skipped for nested templates (<ng-template> tags).\n\n\n    if (this.level === 0 && this._ngContentReservedSlots.length) {\n      const parameters = []; // By default the `projectionDef` instructions creates one slot for the wildcard\n      // selector if no parameters are passed. Therefore we only want to allocate a new\n      // array for the projection slots if the default projection slot is not sufficient.\n\n      if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {\n        const r3ReservedSlots = this._ngContentReservedSlots.map(s => s !== '*' ? parseSelectorToR3Selector(s) : s);\n\n        parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));\n      } // Since we accumulate ngContent selectors while processing template elements,\n      // we *prepend* `projectionDef` to creation instructions block, to put it before\n      // any `projection` instructions\n\n\n      this.creationInstruction(null, Identifiers.projectionDef, parameters,\n      /* prepend */\n      true);\n    }\n\n    if (initI18nContext) {\n      this.i18nEnd(null, selfClosingI18nInstruction);\n    } // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n\n\n    const creationStatements = this._creationCodeFns.map(fn => fn()); // Generate all the update mode instructions (e.g. resolve property or text bindings)\n\n\n    const updateStatements = this._updateCodeFns.map(fn => fn()); //  Variable declaration must occur after binding resolution so we can generate context\n    //  instructions that build on each other.\n    // e.g. const b = nextContext().$implicit(); const b = nextContext();\n\n\n    const creationVariables = this._bindingScope.viewSnapshotStatements();\n\n    const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n\n    const creationBlock = creationStatements.length > 0 ? [renderFlagCheckIfStmt(1\n    /* Create */\n    , creationVariables.concat(creationStatements))] : [];\n    const updateBlock = updateStatements.length > 0 ? [renderFlagCheckIfStmt(2\n    /* Update */\n    , updateVariables.concat(updateStatements))] : [];\n    return fn( // i.e. (rf: RenderFlags, ctx: any)\n    [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [// Temporary variable declarations for query refresh (i.e. let _t: any;)\n    ...this._prefixCode, // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })\n    ...creationBlock, // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})\n    ...updateBlock], INFERRED_TYPE, null, this.templateName);\n  } // LocalResolver\n\n\n  getLocal(name) {\n    return this._bindingScope.get(name);\n  } // LocalResolver\n\n\n  notifyImplicitReceiverUse() {\n    this._bindingScope.notifyImplicitReceiverUse();\n  } // LocalResolver\n\n\n  maybeRestoreView() {\n    this._bindingScope.maybeRestoreView();\n  }\n\n  i18nTranslate(message, params = {}, ref, transformFn) {\n    const _ref = ref || this.i18nGenerateMainBlockVar(); // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n    // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n\n\n    const closureVar = this.i18nGenerateClosureVar(message.id);\n    const statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);\n\n    this._constants.prepareStatements.push(...statements);\n\n    return _ref;\n  }\n\n  registerContextVariables(variable$1) {\n    const scopedName = this._bindingScope.freshReferenceName();\n\n    const retrievalLevel = this.level;\n    const lhs = variable(variable$1.name + scopedName);\n\n    this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1\n    /* CONTEXT */\n    , (scope, relativeLevel) => {\n      let rhs;\n\n      if (scope.bindingLevel === retrievalLevel) {\n        if (scope.isListenerScope() && scope.hasRestoreViewVariable()) {\n          // e.g. restoredCtx.\n          // We have to get the context from a view reference, if one is available, because\n          // the context that was passed in during creation may not be correct anymore.\n          // For more information see: https://github.com/angular/angular/pull/40360.\n          rhs = variable(RESTORED_VIEW_CONTEXT_NAME);\n          scope.notifyRestoredViewContextUse();\n        } else {\n          // e.g. ctx\n          rhs = variable(CONTEXT_NAME);\n        }\n      } else {\n        const sharedCtxVar = scope.getSharedContextName(retrievalLevel); // e.g. ctx_r0   OR  x(2);\n\n        rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n      } // e.g. const $item$ = x(2).$implicit;\n\n\n      return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];\n    });\n  }\n\n  i18nAppendBindings(expressions) {\n    if (expressions.length > 0) {\n      expressions.forEach(expression => this.i18n.appendBinding(expression));\n    }\n  }\n\n  i18nBindProps(props) {\n    const bound = {};\n    Object.keys(props).forEach(key => {\n      const prop = props[key];\n\n      if (prop instanceof Text) {\n        bound[key] = literal(prop.value);\n      } else {\n        const value = prop.value.visit(this._valueConverter);\n        this.allocateBindingSlots(value);\n\n        if (value instanceof Interpolation) {\n          const {\n            strings,\n            expressions\n          } = value;\n          const {\n            id,\n            bindings\n          } = this.i18n;\n          const label = assembleI18nBoundString(strings, bindings.size, id);\n          this.i18nAppendBindings(expressions);\n          bound[key] = literal(label);\n        }\n      }\n    });\n    return bound;\n  } // Generates top level vars for i18n blocks (i.e. `i18n_N`).\n\n\n  i18nGenerateMainBlockVar() {\n    return variable(this.constantPool.uniqueName(TRANSLATION_VAR_PREFIX));\n  } // Generates vars with Closure-specific names for i18n blocks (i.e. `MSG_XXX`).\n\n\n  i18nGenerateClosureVar(messageId) {\n    let name;\n    const suffix = this.fileBasedI18nSuffix.toUpperCase();\n\n    if (this.i18nUseExternalIds) {\n      const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n      const uniqueSuffix = this.constantPool.uniqueName(suffix);\n      name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n    } else {\n      const prefix = getTranslationConstPrefix(suffix);\n      name = this.constantPool.uniqueName(prefix);\n    }\n\n    return variable(name);\n  }\n\n  i18nUpdateRef(context) {\n    const {\n      icus,\n      meta,\n      isRoot,\n      isResolved,\n      isEmitted\n    } = context;\n\n    if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n      context.isEmitted = true;\n      const placeholders = context.getSerializedPlaceholders();\n      let icuMapping = {};\n      let params = placeholders.size ? placeholdersToParams(placeholders) : {};\n\n      if (icus.size) {\n        icus.forEach((refs, key) => {\n          if (refs.length === 1) {\n            // if we have one ICU defined for a given\n            // placeholder - just output its reference\n            params[key] = refs[0];\n          } else {\n            // ... otherwise we need to activate post-processing\n            // to replace ICU placeholders with proper values\n            const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX}${key}`);\n            params[key] = literal(placeholder);\n            icuMapping[key] = literalArr(refs);\n          }\n        });\n      } // translation requires post processing in 2 cases:\n      // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n      // - if we have multiple ICUs that refer to the same placeholder name\n\n\n      const needsPostprocessing = Array.from(placeholders.values()).some(value => value.length > 1) || Object.keys(icuMapping).length;\n      let transformFn;\n\n      if (needsPostprocessing) {\n        transformFn = raw => {\n          const args = [raw];\n\n          if (Object.keys(icuMapping).length) {\n            args.push(mapLiteral(icuMapping, true));\n          }\n\n          return instruction(null, Identifiers.i18nPostprocess, args);\n        };\n      }\n\n      this.i18nTranslate(meta, params, context.ref, transformFn);\n    }\n  }\n\n  i18nStart(span = null, meta, selfClosing) {\n    const index = this.allocateDataSlot();\n    this.i18n = this.i18nContext ? this.i18nContext.forkChildContext(index, this.templateIndex, meta) : new I18nContext(index, this.i18nGenerateMainBlockVar(), 0, this.templateIndex, meta); // generate i18nStart instruction\n\n    const {\n      id,\n      ref\n    } = this.i18n;\n    const params = [literal(index), this.addToConsts(ref)];\n\n    if (id > 0) {\n      // do not push 3rd argument (sub-block id)\n      // into i18nStart call for top level i18n context\n      params.push(literal(id));\n    }\n\n    this.creationInstruction(span, selfClosing ? Identifiers.i18n : Identifiers.i18nStart, params);\n  }\n\n  i18nEnd(span = null, selfClosing) {\n    if (!this.i18n) {\n      throw new Error('i18nEnd is executed with no i18n context present');\n    }\n\n    if (this.i18nContext) {\n      this.i18nContext.reconcileChildContext(this.i18n);\n      this.i18nUpdateRef(this.i18nContext);\n    } else {\n      this.i18nUpdateRef(this.i18n);\n    } // setup accumulated bindings\n\n\n    const {\n      index,\n      bindings\n    } = this.i18n;\n\n    if (bindings.size) {\n      const chainBindings = [];\n      bindings.forEach(binding => {\n        chainBindings.push({\n          sourceSpan: span,\n          value: () => this.convertPropertyBinding(binding)\n        });\n      }); // for i18n block, advance to the most recent element index (by taking the current number of\n      // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the\n      // necessary lifecycle hooks of components/directives are properly flushed.\n\n      this.updateInstructionChainWithAdvance(this.getConstCount() - 1, Identifiers.i18nExp, chainBindings);\n      this.updateInstruction(span, Identifiers.i18nApply, [literal(index)]);\n    }\n\n    if (!selfClosing) {\n      this.creationInstruction(span, Identifiers.i18nEnd);\n    }\n\n    this.i18n = null; // reset local i18n context\n  }\n\n  i18nAttributesInstruction(nodeIndex, attrs, sourceSpan) {\n    let hasBindings = false;\n    const i18nAttrArgs = [];\n    const bindings = [];\n    attrs.forEach(attr => {\n      const message = attr.i18n;\n      const converted = attr.value.visit(this._valueConverter);\n      this.allocateBindingSlots(converted);\n\n      if (converted instanceof Interpolation) {\n        const placeholders = assembleBoundTextPlaceholders(message);\n        const params = placeholdersToParams(placeholders);\n        i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));\n        converted.expressions.forEach(expression => {\n          hasBindings = true;\n          bindings.push({\n            sourceSpan,\n            value: () => this.convertPropertyBinding(expression)\n          });\n        });\n      }\n    });\n\n    if (bindings.length > 0) {\n      this.updateInstructionChainWithAdvance(nodeIndex, Identifiers.i18nExp, bindings);\n    }\n\n    if (i18nAttrArgs.length > 0) {\n      const index = literal(this.allocateDataSlot());\n      const constIndex = this.addToConsts(literalArr(i18nAttrArgs));\n      this.creationInstruction(sourceSpan, Identifiers.i18nAttributes, [index, constIndex]);\n\n      if (hasBindings) {\n        this.updateInstruction(sourceSpan, Identifiers.i18nApply, [index]);\n      }\n    }\n  }\n\n  getNamespaceInstruction(namespaceKey) {\n    switch (namespaceKey) {\n      case 'math':\n        return Identifiers.namespaceMathML;\n\n      case 'svg':\n        return Identifiers.namespaceSVG;\n\n      default:\n        return Identifiers.namespaceHTML;\n    }\n  }\n\n  addNamespaceInstruction(nsInstruction, element) {\n    this._namespace = nsInstruction;\n    this.creationInstruction(element.startSourceSpan, nsInstruction);\n  }\n  /**\r\n   * Adds an update instruction for an interpolated property or attribute, such as\r\n   * `prop=\"{{value}}\"` or `attr.title=\"{{value}}\"`\r\n   */\n\n\n  interpolatedUpdateInstruction(instruction, elementIndex, attrName, input, value, params) {\n    this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, () => [literal(attrName), ...this.getUpdateInstructionArguments(value), ...params]);\n  }\n\n  visitContent(ngContent) {\n    const slot = this.allocateDataSlot();\n    const projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;\n    const parameters = [literal(slot)];\n\n    this._ngContentReservedSlots.push(ngContent.selector);\n\n    const nonContentSelectAttributes = ngContent.attributes.filter(attr => attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR$1);\n    const attributes = this.getAttributeExpressions(ngContent.name, nonContentSelectAttributes, [], []);\n\n    if (attributes.length > 0) {\n      parameters.push(literal(projectionSlotIdx), literalArr(attributes));\n    } else if (projectionSlotIdx !== 0) {\n      parameters.push(literal(projectionSlotIdx));\n    }\n\n    this.creationInstruction(ngContent.sourceSpan, Identifiers.projection, parameters);\n\n    if (this.i18n) {\n      this.i18n.appendProjection(ngContent.i18n, slot);\n    }\n  }\n\n  visitElement(element) {\n    var _a, _b;\n\n    const elementIndex = this.allocateDataSlot();\n    const stylingBuilder = new StylingBuilder(null);\n    let isNonBindableMode = false;\n    const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n    const outputAttrs = [];\n    const [namespaceKey, elementName] = splitNsName(element.name);\n    const isNgContainer$1 = isNgContainer(element.name); // Handle styling, i18n, ngNonBindable attributes\n\n    for (const attr of element.attributes) {\n      const {\n        name,\n        value\n      } = attr;\n\n      if (name === NON_BINDABLE_ATTR) {\n        isNonBindableMode = true;\n      } else if (name === 'style') {\n        stylingBuilder.registerStyleAttr(value);\n      } else if (name === 'class') {\n        stylingBuilder.registerClassAttr(value);\n      } else {\n        outputAttrs.push(attr);\n      }\n    } // Match directives on non i18n attributes\n\n\n    this.matchDirectives(element.name, element); // Regular element or ng-container creation mode\n\n    const parameters = [literal(elementIndex)];\n\n    if (!isNgContainer$1) {\n      parameters.push(literal(elementName));\n    } // Add the attributes\n\n\n    const allOtherInputs = [];\n    const boundI18nAttrs = [];\n    element.inputs.forEach(input => {\n      const stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n\n      if (!stylingInputWasSet) {\n        if (input.type === 0\n        /* Property */\n        && input.i18n) {\n          boundI18nAttrs.push(input);\n        } else {\n          allOtherInputs.push(input);\n        }\n      }\n    }); // add attributes for directive and projection matching purposes\n\n    const attributes = this.getAttributeExpressions(element.name, outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], boundI18nAttrs);\n    parameters.push(this.addAttrsToConsts(attributes)); // local refs (ex.: <div #foo #bar=\"baz\">)\n\n    const refs = this.prepareRefsArray(element.references);\n    parameters.push(this.addToConsts(refs));\n    const wasInNamespace = this._namespace;\n    const currentNamespace = this.getNamespaceInstruction(namespaceKey); // If the namespace is changing now, include an instruction to change it\n    // during element creation.\n\n    if (currentNamespace !== wasInNamespace) {\n      this.addNamespaceInstruction(currentNamespace, element);\n    }\n\n    if (this.i18n) {\n      this.i18n.appendElement(element.i18n, elementIndex);\n    } // Note that we do not append text node instructions and ICUs inside i18n section,\n    // so we exclude them while calculating whether current element has children\n\n\n    const hasChildren = !isI18nRootElement && this.i18n ? !hasTextChildrenOnly(element.children) : element.children.length > 0;\n    const createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes && element.outputs.length === 0 && boundI18nAttrs.length === 0 && !hasChildren;\n    const createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);\n\n    if (createSelfClosingInstruction) {\n      this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers.elementContainer : Identifiers.element, trimTrailingNulls(parameters));\n    } else {\n      this.creationInstruction(element.startSourceSpan, isNgContainer$1 ? Identifiers.elementContainerStart : Identifiers.elementStart, trimTrailingNulls(parameters));\n\n      if (isNonBindableMode) {\n        this.creationInstruction(element.startSourceSpan, Identifiers.disableBindings);\n      }\n\n      if (boundI18nAttrs.length > 0) {\n        this.i18nAttributesInstruction(elementIndex, boundI18nAttrs, (_a = element.startSourceSpan) !== null && _a !== void 0 ? _a : element.sourceSpan);\n      } // Generate Listeners (outputs)\n\n\n      if (element.outputs.length > 0) {\n        const listeners = element.outputs.map(outputAst => ({\n          sourceSpan: outputAst.sourceSpan,\n          params: this.prepareListenerParameter(element.name, outputAst, elementIndex)\n        }));\n        this.creationInstructionChain(Identifiers.listener, listeners);\n      } // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n      // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n\n\n      if (isI18nRootElement) {\n        this.i18nStart(element.startSourceSpan, element.i18n, createSelfClosingI18nInstruction);\n      }\n    } // the code here will collect all update-level styling instructions and add them to the\n    // update block of the template function AOT code. Instructions like `styleProp`,\n    // `styleMap`, `classMap`, `classProp`\n    // are all generated and assigned in the code below.\n\n\n    const stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);\n    const limit = stylingInstructions.length - 1;\n\n    for (let i = 0; i <= limit; i++) {\n      const instruction = stylingInstructions[i];\n      this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction);\n    } // the reason why `undefined` is used is because the renderer understands this as a\n    // special value to symbolize that there is no RHS to this binding\n    // TODO (matsko): revisit this once FW-959 is approached\n\n\n    const emptyValueBindInstruction = literal(undefined);\n    const propertyBindings = [];\n    const attributeBindings = []; // Generate element input bindings\n\n    allOtherInputs.forEach(input => {\n      const inputType = input.type;\n\n      if (inputType === 4\n      /* Animation */\n      ) {\n        const value = input.value.visit(this._valueConverter); // animation bindings can be presented in the following formats:\n        // 1. [@binding]=\"fooExp\"\n        // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n        // 3. [@binding]\n        // 4. @binding\n        // All formats will be valid for when a synthetic binding is created.\n        // The reasoning for this is because the renderer should get each\n        // synthetic binding value in the order of the array that they are\n        // defined in...\n\n        const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;\n        this.allocateBindingSlots(value);\n        propertyBindings.push({\n          name: prepareSyntheticPropertyName(input.name),\n          sourceSpan: input.sourceSpan,\n          value: () => hasValue ? this.convertPropertyBinding(value) : emptyValueBindInstruction\n        });\n      } else {\n        // we must skip attributes with associated i18n context, since these attributes are handled\n        // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n        if (input.i18n) return;\n        const value = input.value.visit(this._valueConverter);\n\n        if (value !== undefined) {\n          const params = [];\n          const [attrNamespace, attrName] = splitNsName(input.name);\n          const isAttributeBinding = inputType === 1\n          /* Attribute */\n          ;\n          const sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n          if (sanitizationRef) params.push(sanitizationRef);\n\n          if (attrNamespace) {\n            const namespaceLiteral = literal(attrNamespace);\n\n            if (sanitizationRef) {\n              params.push(namespaceLiteral);\n            } else {\n              // If there wasn't a sanitization ref, we need to add\n              // an extra param so that we can pass in the namespace.\n              params.push(literal(null), namespaceLiteral);\n            }\n          }\n\n          this.allocateBindingSlots(value);\n\n          if (inputType === 0\n          /* Property */\n          ) {\n            if (value instanceof Interpolation) {\n              // prop=\"{{value}}\" and friends\n              this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), elementIndex, attrName, input, value, params);\n            } else {\n              // [prop]=\"value\"\n              // Collect all the properties so that we can chain into a single function at the end.\n              propertyBindings.push({\n                name: attrName,\n                sourceSpan: input.sourceSpan,\n                value: () => this.convertPropertyBinding(value),\n                params\n              });\n            }\n          } else if (inputType === 1\n          /* Attribute */\n          ) {\n            if (value instanceof Interpolation && getInterpolationArgsLength(value) > 1) {\n              // attr.name=\"text{{value}}\" and friends\n              this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value), elementIndex, attrName, input, value, params);\n            } else {\n              const boundValue = value instanceof Interpolation ? value.expressions[0] : value; // [attr.name]=\"value\" or attr.name=\"{{value}}\"\n              // Collect the attribute bindings so that they can be chained at the end.\n\n              attributeBindings.push({\n                name: attrName,\n                sourceSpan: input.sourceSpan,\n                value: () => this.convertPropertyBinding(boundValue),\n                params\n              });\n            }\n          } else {\n            // class prop\n            this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers.classProp, () => {\n              return [literal(elementIndex), literal(attrName), this.convertPropertyBinding(value), ...params];\n            });\n          }\n        }\n      }\n    });\n\n    if (propertyBindings.length > 0) {\n      this.updateInstructionChainWithAdvance(elementIndex, Identifiers.property, propertyBindings);\n    }\n\n    if (attributeBindings.length > 0) {\n      this.updateInstructionChainWithAdvance(elementIndex, Identifiers.attribute, attributeBindings);\n    } // Traverse element child nodes\n\n\n    visitAll(this, element.children);\n\n    if (!isI18nRootElement && this.i18n) {\n      this.i18n.appendElement(element.i18n, elementIndex, true);\n    }\n\n    if (!createSelfClosingInstruction) {\n      // Finish element construction mode.\n      const span = (_b = element.endSourceSpan) !== null && _b !== void 0 ? _b : element.sourceSpan;\n\n      if (isI18nRootElement) {\n        this.i18nEnd(span, createSelfClosingI18nInstruction);\n      }\n\n      if (isNonBindableMode) {\n        this.creationInstruction(span, Identifiers.enableBindings);\n      }\n\n      this.creationInstruction(span, isNgContainer$1 ? Identifiers.elementContainerEnd : Identifiers.elementEnd);\n    }\n  }\n\n  visitTemplate(template) {\n    var _a;\n\n    const NG_TEMPLATE_TAG_NAME = 'ng-template';\n    const templateIndex = this.allocateDataSlot();\n\n    if (this.i18n) {\n      this.i18n.appendTemplate(template.i18n, templateIndex);\n    }\n\n    const tagNameWithoutNamespace = template.tagName ? splitNsName(template.tagName)[1] : template.tagName;\n    const contextName = `${this.contextName}${template.tagName ? '_' + sanitizeIdentifier(template.tagName) : ''}_${templateIndex}`;\n    const templateName = `${contextName}_Template`;\n    const parameters = [literal(templateIndex), variable(templateName), // We don't care about the tag's namespace here, because we infer\n    // it based on the parent nodes inside the template instruction.\n    literal(tagNameWithoutNamespace)]; // find directives matching on a given <ng-template> node\n\n    this.matchDirectives(NG_TEMPLATE_TAG_NAME, template); // prepare attributes parameter (including attributes used for directive matching)\n\n    const attrsExprs = this.getAttributeExpressions(NG_TEMPLATE_TAG_NAME, template.attributes, template.inputs, template.outputs, undefined\n    /* styles */\n    , template.templateAttrs);\n    parameters.push(this.addAttrsToConsts(attrsExprs)); // local refs (ex.: <ng-template #foo>)\n\n    if (template.references && template.references.length) {\n      const refs = this.prepareRefsArray(template.references);\n      parameters.push(this.addToConsts(refs));\n      parameters.push(importExpr(Identifiers.templateRefExtractor));\n    } // Create the template function\n\n\n    const templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants); // Nested templates must not be visited until after their parent templates have completed\n    // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n    // be able to support bindings in nested templates to local refs that occur after the\n    // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n\n    this._nestedTemplateFns.push(() => {\n      const templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, this._ngContentReservedSlots.length + this._ngContentSelectorsOffset, template.i18n);\n      this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName));\n\n      if (templateVisitor._ngContentReservedSlots.length) {\n        this._ngContentReservedSlots.push(...templateVisitor._ngContentReservedSlots);\n      }\n    }); // e.g. template(1, MyComp_Template_1)\n\n\n    this.creationInstruction(template.sourceSpan, Identifiers.templateCreate, () => {\n      parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));\n      return trimTrailingNulls(parameters);\n    }); // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n\n    this.templatePropertyBindings(templateIndex, template.templateAttrs); // Only add normal input/output binding instructions on explicit <ng-template> elements.\n\n    if (tagNameWithoutNamespace === NG_TEMPLATE_TAG_NAME) {\n      const [i18nInputs, inputs] = partitionArray(template.inputs, hasI18nMeta); // Add i18n attributes that may act as inputs to directives. If such attributes are present,\n      // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>\n      // elements, in case of inline templates, corresponding instructions will be generated in the\n      // nested template function.\n\n      if (i18nInputs.length > 0) {\n        this.i18nAttributesInstruction(templateIndex, i18nInputs, (_a = template.startSourceSpan) !== null && _a !== void 0 ? _a : template.sourceSpan);\n      } // Add the input bindings\n\n\n      if (inputs.length > 0) {\n        this.templatePropertyBindings(templateIndex, inputs);\n      } // Generate listeners for directive output\n\n\n      if (template.outputs.length > 0) {\n        const listeners = template.outputs.map(outputAst => ({\n          sourceSpan: outputAst.sourceSpan,\n          params: this.prepareListenerParameter('ng_template', outputAst, templateIndex)\n        }));\n        this.creationInstructionChain(Identifiers.listener, listeners);\n      }\n    }\n  }\n\n  visitBoundText(text) {\n    if (this.i18n) {\n      const value = text.value.visit(this._valueConverter);\n      this.allocateBindingSlots(value);\n\n      if (value instanceof Interpolation) {\n        this.i18n.appendBoundText(text.i18n);\n        this.i18nAppendBindings(value.expressions);\n      }\n\n      return;\n    }\n\n    const nodeIndex = this.allocateDataSlot();\n    this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(nodeIndex)]);\n    const value = text.value.visit(this._valueConverter);\n    this.allocateBindingSlots(value);\n\n    if (value instanceof Interpolation) {\n      this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), () => this.getUpdateInstructionArguments(value));\n    } else {\n      error('Text nodes should be interpolated and never bound directly.');\n    }\n  }\n\n  visitText(text) {\n    // when a text element is located within a translatable\n    // block, we exclude this text element from instructions set,\n    // since it will be captured in i18n content and processed at runtime\n    if (!this.i18n) {\n      this.creationInstruction(text.sourceSpan, Identifiers.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n    }\n  }\n\n  visitIcu(icu) {\n    let initWasInvoked = false; // if an ICU was created outside of i18n block, we still treat\n    // it as a translatable entity and invoke i18nStart and i18nEnd\n    // to generate i18n context and the necessary instructions\n\n    if (!this.i18n) {\n      initWasInvoked = true;\n      this.i18nStart(null, icu.i18n, true);\n    }\n\n    const i18n = this.i18n;\n    const vars = this.i18nBindProps(icu.vars);\n    const placeholders = this.i18nBindProps(icu.placeholders); // output ICU directly and keep ICU reference in context\n\n    const message = icu.i18n; // we always need post-processing function for ICUs, to make sure that:\n    // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:\n    // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders\n    // inside ICUs)\n    // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values\n\n    const transformFn = raw => {\n      const params = Object.assign(Object.assign({}, vars), placeholders);\n      const formatted = i18nFormatPlaceholderNames(params,\n      /* useCamelCase */\n      false);\n      return instruction(null, Identifiers.i18nPostprocess, [raw, mapLiteral(formatted, true)]);\n    }; // in case the whole i18n message is a single ICU - we do not need to\n    // create a separate top-level translation, we can use the root ref instead\n    // and make this ICU a top-level translation\n    // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function\n    // separately, so we do not pass placeholders into `i18nTranslate` function.\n\n\n    if (isSingleI18nIcu(i18n.meta)) {\n      this.i18nTranslate(message,\n      /* placeholders */\n      {}, i18n.ref, transformFn);\n    } else {\n      // output ICU directly and keep ICU reference in context\n      const ref = this.i18nTranslate(message,\n      /* placeholders */\n      {},\n      /* ref */\n      undefined, transformFn);\n      i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n    }\n\n    if (initWasInvoked) {\n      this.i18nEnd(null, true);\n    }\n\n    return null;\n  }\n\n  allocateDataSlot() {\n    return this._dataIndex++;\n  }\n\n  getConstCount() {\n    return this._dataIndex;\n  }\n\n  getVarCount() {\n    return this._pureFunctionSlots;\n  }\n\n  getConsts() {\n    return this._constants;\n  }\n\n  getNgContentSelectors() {\n    return this._ngContentReservedSlots.length ? this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) : null;\n  }\n\n  bindingContext() {\n    return `${this._bindingContext++}`;\n  }\n\n  templatePropertyBindings(templateIndex, attrs) {\n    const propertyBindings = [];\n    attrs.forEach(input => {\n      if (input instanceof BoundAttribute) {\n        const value = input.value.visit(this._valueConverter);\n\n        if (value !== undefined) {\n          this.allocateBindingSlots(value);\n\n          if (value instanceof Interpolation) {\n            // Params typically contain attribute namespace and value sanitizer, which is applicable\n            // for regular HTML elements, but not applicable for <ng-template> (since props act as\n            // inputs to directives), so keep params array empty.\n            const params = []; // prop=\"{{value}}\" case\n\n            this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value), templateIndex, input.name, input, value, params);\n          } else {\n            // [prop]=\"value\" case\n            propertyBindings.push({\n              name: input.name,\n              sourceSpan: input.sourceSpan,\n              value: () => this.convertPropertyBinding(value)\n            });\n          }\n        }\n      }\n    });\n\n    if (propertyBindings.length > 0) {\n      this.updateInstructionChainWithAdvance(templateIndex, Identifiers.property, propertyBindings);\n    }\n  } // Bindings must only be resolved after all local refs have been visited, so all\n  // instructions are queued in callbacks that execute once the initial pass has completed.\n  // Otherwise, we wouldn't be able to support local refs that are defined after their\n  // bindings. e.g. {{ foo }} <div #foo></div>\n\n\n  instructionFn(fns, span, reference, paramsOrFn, prepend = false) {\n    fns[prepend ? 'unshift' : 'push'](() => {\n      const params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();\n      return instruction(span, reference, params).toStmt();\n    });\n  }\n\n  processStylingUpdateInstruction(elementIndex, instruction) {\n    let allocateBindingSlots = 0;\n\n    if (instruction) {\n      const calls = [];\n      instruction.calls.forEach(call => {\n        allocateBindingSlots += call.allocateBindingSlots;\n        calls.push({\n          sourceSpan: call.sourceSpan,\n          value: () => {\n            return call.params(value => call.supportsInterpolation && value instanceof Interpolation ? this.getUpdateInstructionArguments(value) : this.convertPropertyBinding(value));\n          }\n        });\n      });\n      this.updateInstructionChainWithAdvance(elementIndex, instruction.reference, calls);\n    }\n\n    return allocateBindingSlots;\n  }\n\n  creationInstruction(span, reference, paramsOrFn, prepend) {\n    this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n  }\n\n  creationInstructionChain(reference, calls) {\n    const span = calls.length ? calls[0].sourceSpan : null;\n\n    this._creationCodeFns.push(() => {\n      return chainedInstruction(reference, calls.map(call => call.params()), span).toStmt();\n    });\n  }\n\n  updateInstructionWithAdvance(nodeIndex, span, reference, paramsOrFn) {\n    this.addAdvanceInstructionIfNecessary(nodeIndex, span);\n    this.updateInstruction(span, reference, paramsOrFn);\n  }\n\n  updateInstruction(span, reference, paramsOrFn) {\n    this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n  }\n\n  updateInstructionChain(reference, bindings) {\n    const span = bindings.length ? bindings[0].sourceSpan : null;\n\n    this._updateCodeFns.push(() => {\n      const calls = bindings.map(property => {\n        const value = property.value();\n        const fnParams = Array.isArray(value) ? value : [value];\n\n        if (property.params) {\n          fnParams.push(...property.params);\n        }\n\n        if (property.name) {\n          // We want the property name to always be the first function parameter.\n          fnParams.unshift(literal(property.name));\n        }\n\n        return fnParams;\n      });\n      return chainedInstruction(reference, calls, span).toStmt();\n    });\n  }\n\n  updateInstructionChainWithAdvance(nodeIndex, reference, bindings) {\n    this.addAdvanceInstructionIfNecessary(nodeIndex, bindings.length ? bindings[0].sourceSpan : null);\n    this.updateInstructionChain(reference, bindings);\n  }\n\n  addAdvanceInstructionIfNecessary(nodeIndex, span) {\n    if (nodeIndex !== this._currentIndex) {\n      const delta = nodeIndex - this._currentIndex;\n\n      if (delta < 1) {\n        throw new Error('advance instruction can only go forwards');\n      }\n\n      this.instructionFn(this._updateCodeFns, span, Identifiers.advance, [literal(delta)]);\n      this._currentIndex = nodeIndex;\n    }\n  }\n\n  allocatePureFunctionSlots(numSlots) {\n    const originalSlots = this._pureFunctionSlots;\n    this._pureFunctionSlots += numSlots;\n    return originalSlots;\n  }\n\n  allocateBindingSlots(value) {\n    this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;\n  }\n  /**\r\n   * Gets an expression that refers to the implicit receiver. The implicit\r\n   * receiver is always the root level context.\r\n   */\n\n\n  getImplicitReceiverExpr() {\n    if (this._implicitReceiverExpr) {\n      return this._implicitReceiverExpr;\n    }\n\n    return this._implicitReceiverExpr = this.level === 0 ? variable(CONTEXT_NAME) : this._bindingScope.getOrCreateSharedContextVar(0);\n  }\n\n  convertPropertyBinding(value) {\n    const convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext(), BindingForm.Expression, () => error('Unexpected interpolation'));\n    const valExpr = convertedPropertyBinding.currValExpr;\n\n    this._tempVariables.push(...convertedPropertyBinding.stmts);\n\n    return valExpr;\n  }\n  /**\r\n   * Gets a list of argument expressions to pass to an update instruction expression. Also updates\r\n   * the temp variables state with temp variables that were identified as needing to be created\r\n   * while visiting the arguments.\r\n   * @param value The original expression we will be resolving an arguments list from.\r\n   */\n\n\n  getUpdateInstructionArguments(value) {\n    const {\n      args,\n      stmts\n    } = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext());\n\n    this._tempVariables.push(...stmts);\n\n    return args;\n  }\n\n  matchDirectives(elementName, elOrTpl) {\n    if (this.directiveMatcher) {\n      const selector = createCssSelector(elementName, getAttrsForDirectiveMatching(elOrTpl));\n      this.directiveMatcher.match(selector, (cssSelector, staticType) => {\n        this.directives.add(staticType);\n      });\n    }\n  }\n  /**\r\n   * Prepares all attribute expression values for the `TAttributes` array.\r\n   *\r\n   * The purpose of this function is to properly construct an attributes array that\r\n   * is passed into the `elementStart` (or just `element`) functions. Because there\r\n   * are many different types of attributes, the array needs to be constructed in a\r\n   * special way so that `elementStart` can properly evaluate them.\r\n   *\r\n   * The format looks like this:\r\n   *\r\n   * ```\r\n   * attrs = [prop, value, prop2, value2,\r\n   *   PROJECT_AS, selector,\r\n   *   CLASSES, class1, class2,\r\n   *   STYLES, style1, value1, style2, value2,\r\n   *   BINDINGS, name1, name2, name3,\r\n   *   TEMPLATE, name4, name5, name6,\r\n   *   I18N, name7, name8, ...]\r\n   * ```\r\n   *\r\n   * Note that this function will fully ignore all synthetic (@foo) attribute values\r\n   * because those values are intended to always be generated as property instructions.\r\n   */\n\n\n  getAttributeExpressions(elementName, renderAttributes, inputs, outputs, styles, templateAttrs = [], boundI18nAttrs = []) {\n    const alreadySeen = new Set();\n    const attrExprs = [];\n    let ngProjectAsAttr;\n\n    for (const attr of renderAttributes) {\n      if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n        ngProjectAsAttr = attr;\n      } // Note that static i18n attributes aren't in the i18n array,\n      // because they're treated in the same way as regular attributes.\n\n\n      if (attr.i18n) {\n        // When i18n attributes are present on elements with structural directives\n        // (e.g. `<div *ngIf title=\"Hello\" i18n-title>`), we want to avoid generating\n        // duplicate i18n translation blocks for `ɵɵtemplate` and `ɵɵelement` instruction\n        // attributes. So we do a cache lookup to see if suitable i18n translation block\n        // already exists.\n        const {\n          i18nVarRefsCache\n        } = this._constants;\n        let i18nVarRef;\n\n        if (i18nVarRefsCache.has(attr.i18n)) {\n          i18nVarRef = i18nVarRefsCache.get(attr.i18n);\n        } else {\n          i18nVarRef = this.i18nTranslate(attr.i18n);\n          i18nVarRefsCache.set(attr.i18n, i18nVarRef);\n        }\n\n        attrExprs.push(literal(attr.name), i18nVarRef);\n      } else {\n        attrExprs.push(...getAttributeNameLiterals(attr.name), trustedConstAttribute(elementName, attr));\n      }\n    } // Keep ngProjectAs next to the other name, value pairs so we can verify that we match\n    // ngProjectAs marker in the attribute name slot.\n\n\n    if (ngProjectAsAttr) {\n      attrExprs.push(...getNgProjectAsLiteral(ngProjectAsAttr));\n    }\n\n    function addAttrExpr(key, value) {\n      if (typeof key === 'string') {\n        if (!alreadySeen.has(key)) {\n          attrExprs.push(...getAttributeNameLiterals(key));\n          value !== undefined && attrExprs.push(value);\n          alreadySeen.add(key);\n        }\n      } else {\n        attrExprs.push(literal(key));\n      }\n    } // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n    // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n    // as single property value cell by cell.\n\n\n    if (styles) {\n      styles.populateInitialStylingAttrs(attrExprs);\n    }\n\n    if (inputs.length || outputs.length) {\n      const attrsLengthBeforeInputs = attrExprs.length;\n\n      for (let i = 0; i < inputs.length; i++) {\n        const input = inputs[i]; // We don't want the animation and attribute bindings in the\n        // attributes array since they aren't used for directive matching.\n\n        if (input.type !== 4\n        /* Animation */\n        && input.type !== 1\n        /* Attribute */\n        ) {\n          addAttrExpr(input.name);\n        }\n      }\n\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n\n        if (output.type !== 1\n        /* Animation */\n        ) {\n          addAttrExpr(output.name);\n        }\n      } // this is a cheap way of adding the marker only after all the input/output\n      // values have been filtered (by not including the animation ones) and added\n      // to the expressions. The marker is important because it tells the runtime\n      // code that this is where attributes without values start...\n\n\n      if (attrExprs.length !== attrsLengthBeforeInputs) {\n        attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3\n        /* Bindings */\n        ));\n      }\n    }\n\n    if (templateAttrs.length) {\n      attrExprs.push(literal(4\n      /* Template */\n      ));\n      templateAttrs.forEach(attr => addAttrExpr(attr.name));\n    }\n\n    if (boundI18nAttrs.length) {\n      attrExprs.push(literal(6\n      /* I18n */\n      ));\n      boundI18nAttrs.forEach(attr => addAttrExpr(attr.name));\n    }\n\n    return attrExprs;\n  }\n\n  addToConsts(expression) {\n    if (isNull(expression)) {\n      return TYPED_NULL_EXPR;\n    }\n\n    const consts = this._constants.constExpressions; // Try to reuse a literal that's already in the array, if possible.\n\n    for (let i = 0; i < consts.length; i++) {\n      if (consts[i].isEquivalent(expression)) {\n        return literal(i);\n      }\n    }\n\n    return literal(consts.push(expression) - 1);\n  }\n\n  addAttrsToConsts(attrs) {\n    return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;\n  }\n\n  prepareRefsArray(references) {\n    if (!references || references.length === 0) {\n      return TYPED_NULL_EXPR;\n    }\n\n    const refsParam = flatten(references.map(reference => {\n      const slot = this.allocateDataSlot(); // Generate the update temporary.\n\n      const variableName = this._bindingScope.freshReferenceName();\n\n      const retrievalLevel = this.level;\n      const lhs = variable(variableName);\n\n      this._bindingScope.set(retrievalLevel, reference.name, lhs, 0\n      /* DEFAULT */\n      , (scope, relativeLevel) => {\n        // e.g. nextContext(2);\n        const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : []; // e.g. const $foo$ = reference(1);\n\n        const refExpr = lhs.set(importExpr(Identifiers.reference).callFn([literal(slot)]));\n        return nextContextStmt.concat(refExpr.toConstDecl());\n      }, true);\n\n      return [reference.name, reference.value];\n    }));\n    return asLiteral(refsParam);\n  }\n\n  prepareListenerParameter(tagName, outputAst, index) {\n    return () => {\n      const eventName = outputAst.name;\n      const bindingFnName = outputAst.type === 1\n      /* Animation */\n      ? // synthetic @listener.foo values are treated the exact same as are standard listeners\n      prepareSyntheticListenerFunctionName(eventName, outputAst.phase) : sanitizeIdentifier(eventName);\n      const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;\n\n      const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel, EVENT_BINDING_SCOPE_GLOBALS);\n\n      return prepareEventListenerParameters(outputAst, handlerName, scope);\n    };\n  }\n\n}\n\nclass ValueConverter extends AstMemoryEfficientTransformer {\n  constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n    super();\n    this.constantPool = constantPool;\n    this.allocateSlot = allocateSlot;\n    this.allocatePureFunctionSlots = allocatePureFunctionSlots;\n    this.definePipe = definePipe;\n    this._pipeBindExprs = [];\n  } // AstMemoryEfficientTransformer\n\n\n  visitPipe(pipe, context) {\n    // Allocate a slot to create the pipe\n    const slot = this.allocateSlot();\n    const slotPseudoLocal = `PIPE:${slot}`; // Allocate one slot for the result plus one slot per pipe argument\n\n    const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n    const target = new PropertyRead(pipe.span, pipe.sourceSpan, pipe.nameSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);\n    const {\n      identifier,\n      isVarLength\n    } = pipeBindingCallInfo(pipe.args);\n    this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n    const args = [pipe.exp, ...pipe.args];\n    const convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) : this.visitAll(args);\n    const pipeBindExpr = new FunctionCall(pipe.span, pipe.sourceSpan, target, [new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot), new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot), ...convertedArgs]);\n\n    this._pipeBindExprs.push(pipeBindExpr);\n\n    return pipeBindExpr;\n  }\n\n  updatePipeSlotOffsets(bindingSlots) {\n    this._pipeBindExprs.forEach(pipe => {\n      // update the slot offset arg (index 1) to account for binding slots\n      const slotOffset = pipe.args[1];\n      slotOffset.value += bindingSlots;\n    });\n  }\n\n  visitLiteralArray(array, context) {\n    return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), values => {\n      // If the literal has calculated (non-literal) elements transform it into\n      // calls to literal factories that compose the literal and will cache intermediate\n      // values.\n      const literal = literalArr(values);\n      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n    });\n  }\n\n  visitLiteralMap(map, context) {\n    return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), values => {\n      // If the literal has calculated (non-literal) elements  transform it into\n      // calls to literal factories that compose the literal and will cache intermediate\n      // values.\n      const literal = literalMap(values.map((value, index) => ({\n        key: map.keys[index].key,\n        value,\n        quoted: map.keys[index].quoted\n      })));\n      return getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n    });\n  }\n\n} // Pipes always have at least one parameter, the value they operate on\n\n\nconst pipeBindingIdentifiers = [Identifiers.pipeBind1, Identifiers.pipeBind2, Identifiers.pipeBind3, Identifiers.pipeBind4];\n\nfunction pipeBindingCallInfo(args) {\n  const identifier = pipeBindingIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers.pipeBindV,\n    isVarLength: !identifier\n  };\n}\n\nconst pureFunctionIdentifiers = [Identifiers.pureFunction0, Identifiers.pureFunction1, Identifiers.pureFunction2, Identifiers.pureFunction3, Identifiers.pureFunction4, Identifiers.pureFunction5, Identifiers.pureFunction6, Identifiers.pureFunction7, Identifiers.pureFunction8];\n\nfunction pureFunctionCallInfo(args) {\n  const identifier = pureFunctionIdentifiers[args.length];\n  return {\n    identifier: identifier || Identifiers.pureFunctionV,\n    isVarLength: !identifier\n  };\n}\n\nfunction instruction(span, reference, params) {\n  return importExpr(reference, null, span).callFn(params, span);\n} // e.g. x(2);\n\n\nfunction generateNextContextExpr(relativeLevelDiff) {\n  return importExpr(Identifiers.nextContext).callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\n\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n  const {\n    literalFactory,\n    literalFactoryArguments\n  } = constantPool.getLiteralFactory(literal$1); // Allocate 1 slot for the result plus 1 per argument\n\n  const startSlot = allocateSlots(1 + literalFactoryArguments.length);\n  const {\n    identifier,\n    isVarLength\n  } = pureFunctionCallInfo(literalFactoryArguments); // Literal factories are pure functions that only need to be re-invoked when the parameters\n  // change.\n\n  const args = [literal(startSlot), literalFactory];\n\n  if (isVarLength) {\n    args.push(literalArr(literalFactoryArguments));\n  } else {\n    args.push(...literalFactoryArguments);\n  }\n\n  return importExpr(identifier).callFn(args);\n}\n/**\r\n * Gets an array of literals that can be added to an expression\r\n * to represent the name and namespace of an attribute. E.g.\r\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\r\n *\r\n * @param name Name of the attribute, including the namespace.\r\n */\n\n\nfunction getAttributeNameLiterals(name) {\n  const [attributeNamespace, attributeName] = splitNsName(name);\n  const nameLiteral = literal(attributeName);\n\n  if (attributeNamespace) {\n    return [literal(0\n    /* NamespaceURI */\n    ), literal(attributeNamespace), nameLiteral];\n  }\n\n  return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\n\n\nconst SHARED_CONTEXT_KEY = '$$shared_ctx$$';\n\nclass BindingScope {\n  constructor(bindingLevel = 0, parent = null, globals) {\n    this.bindingLevel = bindingLevel;\n    this.parent = parent;\n    this.globals = globals;\n    /** Keeps a map from local variables to their BindingData. */\n\n    this.map = new Map();\n    this.referenceNameIndex = 0;\n    this.restoreViewVariable = null;\n    this.usesRestoredViewContext = false;\n\n    if (globals !== undefined) {\n      for (const name of globals) {\n        this.set(0, name, variable(name));\n      }\n    }\n  }\n\n  static createRootScope() {\n    return new BindingScope();\n  }\n\n  get(name) {\n    let current = this;\n\n    while (current) {\n      let value = current.map.get(name);\n\n      if (value != null) {\n        if (current !== this) {\n          // make a local copy and reset the `declare` state\n          value = {\n            retrievalLevel: value.retrievalLevel,\n            lhs: value.lhs,\n            declareLocalCallback: value.declareLocalCallback,\n            declare: false,\n            priority: value.priority\n          }; // Cache the value locally.\n\n          this.map.set(name, value); // Possibly generate a shared context var\n\n          this.maybeGenerateSharedContextVar(value);\n          this.maybeRestoreView();\n        }\n\n        if (value.declareLocalCallback && !value.declare) {\n          value.declare = true;\n        }\n\n        return value.lhs;\n      }\n\n      current = current.parent;\n    } // If we get to this point, we are looking for a property on the top level component\n    // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n    // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n    // local var we used to store the component context, e.g. const $comp$ = x();\n\n\n    return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n  }\n  /**\r\n   * Create a local variable for later reference.\r\n   *\r\n   * @param retrievalLevel The level from which this value can be retrieved\r\n   * @param name Name of the variable.\r\n   * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\r\n   * @param priority The sorting priority of this var\r\n   * @param declareLocalCallback The callback to invoke when declaring this local var\r\n   * @param localRef Whether or not this is a local ref\r\n   */\n\n\n  set(retrievalLevel, name, lhs, priority = 0\n  /* DEFAULT */\n  , declareLocalCallback, localRef) {\n    if (this.map.has(name)) {\n      if (localRef) {\n        // Do not throw an error if it's a local ref and do not update existing value,\n        // so the first defined ref is always returned.\n        return this;\n      }\n\n      error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);\n    }\n\n    this.map.set(name, {\n      retrievalLevel: retrievalLevel,\n      lhs: lhs,\n      declare: false,\n      declareLocalCallback: declareLocalCallback,\n      priority: priority\n    });\n    return this;\n  } // Implemented as part of LocalResolver.\n\n\n  getLocal(name) {\n    return this.get(name);\n  } // Implemented as part of LocalResolver.\n\n\n  notifyImplicitReceiverUse() {\n    if (this.bindingLevel !== 0) {\n      // Since the implicit receiver is accessed in an embedded view, we need to\n      // ensure that we declare a shared context variable for the current template\n      // in the update variables.\n      this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;\n    }\n  }\n\n  nestedScope(level, globals) {\n    const newScope = new BindingScope(level, this, globals);\n    if (level > 0) newScope.generateSharedContextVar(0);\n    return newScope;\n  }\n  /**\r\n   * Gets or creates a shared context variable and returns its expression. Note that\r\n   * this does not mean that the shared variable will be declared. Variables in the\r\n   * binding scope will be only declared if they are used.\r\n   */\n\n\n  getOrCreateSharedContextVar(retrievalLevel) {\n    const bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;\n\n    if (!this.map.has(bindingKey)) {\n      this.generateSharedContextVar(retrievalLevel);\n    } // Shared context variables are always generated as \"ReadVarExpr\".\n\n\n    return this.map.get(bindingKey).lhs;\n  }\n\n  getSharedContextName(retrievalLevel) {\n    const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel); // Shared context variables are always generated as \"ReadVarExpr\".\n\n    return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n  }\n\n  maybeGenerateSharedContextVar(value) {\n    if (value.priority === 1\n    /* CONTEXT */\n    && value.retrievalLevel < this.bindingLevel) {\n      const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n\n      if (sharedCtxObj) {\n        sharedCtxObj.declare = true;\n      } else {\n        this.generateSharedContextVar(value.retrievalLevel);\n      }\n    }\n  }\n\n  generateSharedContextVar(retrievalLevel) {\n    const lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n    this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n      retrievalLevel: retrievalLevel,\n      lhs: lhs,\n      declareLocalCallback: (scope, relativeLevel) => {\n        // const ctx_r0 = nextContext(2);\n        return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n      },\n      declare: false,\n      priority: 2\n      /* SHARED_CONTEXT */\n\n    });\n  }\n\n  getComponentProperty(name) {\n    const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n    componentValue.declare = true;\n    this.maybeRestoreView();\n    return componentValue.lhs.prop(name);\n  }\n\n  maybeRestoreView() {\n    // View restoration is required for listener instructions inside embedded views, because\n    // they only run in creation mode and they can have references to the context object.\n    // If the context object changes in update mode, the reference will be incorrect, because\n    // it was established during creation.\n    if (this.isListenerScope()) {\n      if (!this.parent.restoreViewVariable) {\n        // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n        this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n      }\n\n      this.restoreViewVariable = this.parent.restoreViewVariable;\n    }\n  }\n\n  restoreViewStatement() {\n    const statements = [];\n\n    if (this.restoreViewVariable) {\n      const restoreCall = instruction(null, Identifiers.restoreView, [this.restoreViewVariable]); // Either `const restoredCtx = restoreView($state$);` or `restoreView($state$);`\n      // depending on whether it is being used.\n\n      statements.push(this.usesRestoredViewContext ? variable(RESTORED_VIEW_CONTEXT_NAME).set(restoreCall).toConstDecl() : restoreCall.toStmt());\n    }\n\n    return statements;\n  }\n\n  viewSnapshotStatements() {\n    // const $state$ = getCurrentView();\n    return this.restoreViewVariable ? [this.restoreViewVariable.set(instruction(null, Identifiers.getCurrentView, [])).toConstDecl()] : [];\n  }\n\n  isListenerScope() {\n    return this.parent && this.parent.bindingLevel === this.bindingLevel;\n  }\n\n  variableDeclarations() {\n    let currentContextLevel = 0;\n    return Array.from(this.map.values()).filter(value => value.declare).sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority).reduce((stmts, value) => {\n      const levelDiff = this.bindingLevel - value.retrievalLevel;\n      const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);\n      currentContextLevel = levelDiff;\n      return stmts.concat(currStmts);\n    }, []);\n  }\n\n  freshReferenceName() {\n    let current = this; // Find the top scope as it maintains the global reference count\n\n    while (current.parent) current = current.parent;\n\n    const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;\n    return ref;\n  }\n\n  hasRestoreViewVariable() {\n    return !!this.restoreViewVariable;\n  }\n\n  notifyRestoredViewContextUse() {\n    this.usesRestoredViewContext = true;\n  }\n\n}\n/**\r\n * Creates a `CssSelector` given a tag name and a map of attributes\r\n */\n\n\nfunction createCssSelector(elementName, attributes) {\n  const cssSelector = new CssSelector();\n  const elementNameNoNs = splitNsName(elementName)[1];\n  cssSelector.setElement(elementNameNoNs);\n  Object.getOwnPropertyNames(attributes).forEach(name => {\n    const nameNoNs = splitNsName(name)[1];\n    const value = attributes[name];\n    cssSelector.addAttribute(nameNoNs, value);\n\n    if (name.toLowerCase() === 'class') {\n      const classes = value.trim().split(/\\s+/);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  });\n  return cssSelector;\n}\n/**\r\n * Creates an array of expressions out of an `ngProjectAs` attributes\r\n * which can be added to the instruction parameters.\r\n */\n\n\nfunction getNgProjectAsLiteral(attribute) {\n  // Parse the attribute value into a CssSelectorList. Note that we only take the\n  // first selector, because we don't support multiple selectors in ngProjectAs.\n  const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n  return [literal(5\n  /* ProjectAs */\n  ), asLiteral(parsedR3Selector)];\n}\n/**\r\n * Gets the instruction to generate for an interpolated property\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getPropertyInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.propertyInterpolate;\n\n    case 3:\n      return Identifiers.propertyInterpolate1;\n\n    case 5:\n      return Identifiers.propertyInterpolate2;\n\n    case 7:\n      return Identifiers.propertyInterpolate3;\n\n    case 9:\n      return Identifiers.propertyInterpolate4;\n\n    case 11:\n      return Identifiers.propertyInterpolate5;\n\n    case 13:\n      return Identifiers.propertyInterpolate6;\n\n    case 15:\n      return Identifiers.propertyInterpolate7;\n\n    case 17:\n      return Identifiers.propertyInterpolate8;\n\n    default:\n      return Identifiers.propertyInterpolateV;\n  }\n}\n/**\r\n * Gets the instruction to generate for an interpolated attribute\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getAttributeInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 3:\n      return Identifiers.attributeInterpolate1;\n\n    case 5:\n      return Identifiers.attributeInterpolate2;\n\n    case 7:\n      return Identifiers.attributeInterpolate3;\n\n    case 9:\n      return Identifiers.attributeInterpolate4;\n\n    case 11:\n      return Identifiers.attributeInterpolate5;\n\n    case 13:\n      return Identifiers.attributeInterpolate6;\n\n    case 15:\n      return Identifiers.attributeInterpolate7;\n\n    case 17:\n      return Identifiers.attributeInterpolate8;\n\n    default:\n      return Identifiers.attributeInterpolateV;\n  }\n}\n/**\r\n * Gets the instruction to generate for interpolated text.\r\n * @param interpolation An Interpolation AST\r\n */\n\n\nfunction getTextInterpolationExpression(interpolation) {\n  switch (getInterpolationArgsLength(interpolation)) {\n    case 1:\n      return Identifiers.textInterpolate;\n\n    case 3:\n      return Identifiers.textInterpolate1;\n\n    case 5:\n      return Identifiers.textInterpolate2;\n\n    case 7:\n      return Identifiers.textInterpolate3;\n\n    case 9:\n      return Identifiers.textInterpolate4;\n\n    case 11:\n      return Identifiers.textInterpolate5;\n\n    case 13:\n      return Identifiers.textInterpolate6;\n\n    case 15:\n      return Identifiers.textInterpolate7;\n\n    case 17:\n      return Identifiers.textInterpolate8;\n\n    default:\n      return Identifiers.textInterpolateV;\n  }\n}\n/**\r\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\r\n *\r\n * @param template text of the template to parse\r\n * @param templateUrl URL to use for source mapping of the parsed template\r\n * @param options options to modify how the template is parsed\r\n */\n\n\nfunction parseTemplate(template, templateUrl, options = {}) {\n  const {\n    interpolationConfig,\n    preserveWhitespaces,\n    enableI18nLegacyMessageIdFormat\n  } = options;\n  const bindingParser = makeBindingParser(interpolationConfig);\n  const htmlParser = new HtmlParser();\n  const parseResult = htmlParser.parse(template, templateUrl, Object.assign(Object.assign({\n    leadingTriviaChars: LEADING_TRIVIA_CHARS\n  }, options), {\n    tokenizeExpansionForms: true\n  }));\n\n  if (!options.alwaysAttemptHtmlToR3AstConversion && parseResult.errors && parseResult.errors.length > 0) {\n    const parsedTemplate = {\n      interpolationConfig,\n      preserveWhitespaces,\n      errors: parseResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n\n    if (options.collectCommentNodes) {\n      parsedTemplate.commentNodes = [];\n    }\n\n    return parsedTemplate;\n  }\n\n  let rootNodes = parseResult.rootNodes; // process i18n meta information (scan attributes, generate ids)\n  // before we run whitespace removal process, because existing i18n\n  // extraction process (ng extract-i18n) relies on a raw content to generate\n  // message ids\n\n  const i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig,\n  /* keepI18nAttrs */\n  !preserveWhitespaces, enableI18nLegacyMessageIdFormat);\n  const i18nMetaResult = i18nMetaVisitor.visitAllWithErrors(rootNodes);\n\n  if (!options.alwaysAttemptHtmlToR3AstConversion && i18nMetaResult.errors && i18nMetaResult.errors.length > 0) {\n    const parsedTemplate = {\n      interpolationConfig,\n      preserveWhitespaces,\n      errors: i18nMetaResult.errors,\n      nodes: [],\n      styleUrls: [],\n      styles: [],\n      ngContentSelectors: []\n    };\n\n    if (options.collectCommentNodes) {\n      parsedTemplate.commentNodes = [];\n    }\n\n    return parsedTemplate;\n  }\n\n  rootNodes = i18nMetaResult.rootNodes;\n\n  if (!preserveWhitespaces) {\n    rootNodes = visitAll$1(new WhitespaceVisitor(), rootNodes); // run i18n meta visitor again in case whitespaces are removed (because that might affect\n    // generated i18n message content) and first pass indicated that i18n content is present in a\n    // template. During this pass i18n IDs generated at the first pass will be preserved, so we can\n    // mimic existing extraction process (ng extract-i18n)\n\n    if (i18nMetaVisitor.hasI18nMeta) {\n      rootNodes = visitAll$1(new I18nMetaVisitor(interpolationConfig,\n      /* keepI18nAttrs */\n      false), rootNodes);\n    }\n  }\n\n  const {\n    nodes,\n    errors,\n    styleUrls,\n    styles,\n    ngContentSelectors,\n    commentNodes\n  } = htmlAstToRender3Ast(rootNodes, bindingParser, {\n    collectCommentNodes: !!options.collectCommentNodes\n  });\n  errors.push(...parseResult.errors, ...i18nMetaResult.errors);\n  const parsedTemplate = {\n    interpolationConfig,\n    preserveWhitespaces,\n    errors: errors.length > 0 ? errors : null,\n    nodes,\n    styleUrls,\n    styles,\n    ngContentSelectors\n  };\n\n  if (options.collectCommentNodes) {\n    parsedTemplate.commentNodes = commentNodes;\n  }\n\n  return parsedTemplate;\n}\n\nconst elementRegistry = /*#__PURE__*/new DomElementSchemaRegistry();\n/**\r\n * Construct a `BindingParser` with a default configuration.\r\n */\n\nfunction makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n  return new BindingParser(new IvyParser(new Lexer()), interpolationConfig, elementRegistry, null, []);\n}\n\nfunction resolveSanitizationFn(context, isAttribute) {\n  switch (context) {\n    case SecurityContext.HTML:\n      return importExpr(Identifiers.sanitizeHtml);\n\n    case SecurityContext.SCRIPT:\n      return importExpr(Identifiers.sanitizeScript);\n\n    case SecurityContext.STYLE:\n      // the compiler does not fill in an instruction for [style.prop?] binding\n      // values because the style algorithm knows internally what props are subject\n      // to sanitization (only [attr.style] values are explicitly sanitized)\n      return isAttribute ? importExpr(Identifiers.sanitizeStyle) : null;\n\n    case SecurityContext.URL:\n      return importExpr(Identifiers.sanitizeUrl);\n\n    case SecurityContext.RESOURCE_URL:\n      return importExpr(Identifiers.sanitizeResourceUrl);\n\n    default:\n      return null;\n  }\n}\n\nfunction trustedConstAttribute(tagName, attr) {\n  const value = asLiteral(attr.value);\n\n  if (isTrustedTypesSink(tagName, attr.name)) {\n    switch (elementRegistry.securityContext(tagName, attr.name,\n    /* isAttribute */\n    true)) {\n      case SecurityContext.HTML:\n        return taggedTemplate(importExpr(Identifiers.trustConstantHtml), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n      // NB: no SecurityContext.SCRIPT here, as the corresponding tags are stripped by the compiler.\n\n      case SecurityContext.RESOURCE_URL:\n        return taggedTemplate(importExpr(Identifiers.trustConstantResourceUrl), new TemplateLiteral([new TemplateLiteralElement(attr.value)], []), undefined, attr.valueSpan);\n\n      default:\n        return value;\n    }\n  } else {\n    return value;\n  }\n}\n\nfunction isSingleElementTemplate(children) {\n  return children.length === 1 && children[0] instanceof Element;\n}\n\nfunction isTextNode(node) {\n  return node instanceof Text || node instanceof BoundText || node instanceof Icu;\n}\n\nfunction hasTextChildrenOnly(children) {\n  return children.every(isTextNode);\n}\n/** Name of the global variable that is used to determine if we use Closure translations or not */\n\n\nconst NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/**\r\n * Generate statements that define a given translation message.\r\n *\r\n * ```\r\n * var I18N_1;\r\n * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {\r\n *     var MSG_EXTERNAL_XXX = goog.getMsg(\r\n *          \"Some message with {$interpolation}!\",\r\n *          { \"interpolation\": \"\\uFFFD0\\uFFFD\" }\r\n *     );\r\n *     I18N_1 = MSG_EXTERNAL_XXX;\r\n * }\r\n * else {\r\n *     I18N_1 = $localize`Some message with ${'\\uFFFD0\\uFFFD'}!`;\r\n * }\r\n * ```\r\n *\r\n * @param message The original i18n AST message node\r\n * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.\r\n * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.\r\n * @param params Object mapping placeholder names to their values (e.g.\r\n * `{ \"interpolation\": \"\\uFFFD0\\uFFFD\" }`).\r\n * @param transformFn Optional transformation function that will be applied to the translation (e.g.\r\n * post-processing).\r\n * @returns An array of statements that defined a given translation.\r\n */\n\nfunction getTranslationDeclStmts(message, variable, closureVar, params = {}, transformFn) {\n  const statements = [declareI18nVariable(variable), ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, i18nFormatPlaceholderNames(params,\n  /* useCamelCase */\n  true)), createLocalizeStatements(variable, message, i18nFormatPlaceholderNames(params,\n  /* useCamelCase */\n  false)))];\n\n  if (transformFn) {\n    statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n  }\n\n  return statements;\n}\n/**\r\n * Create the expression that will be used to guard the closure mode block\r\n * It is equivalent to:\r\n *\r\n * ```\r\n * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode\r\n * ```\r\n */\n\n\nfunction createClosureModeGuard() {\n  return typeofExpr(variable(NG_I18N_CLOSURE_MODE)).notIdentical(literal('undefined', STRING_TYPE)).and(variable(NG_I18N_CLOSURE_MODE));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\n\n\nconst ATTR_REGEX = /attr\\.([^\\]]+)/;\n\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n  const definitionMap = new DefinitionMap();\n  const selectors = parseSelectorToR3Selector(meta.selector); // e.g. `type: MyDirective`\n\n  definitionMap.set('type', meta.internalType); // e.g. `selectors: [['', 'someDir', '']]`\n\n  if (selectors.length > 0) {\n    definitionMap.set('selectors', asLiteral(selectors));\n  }\n\n  if (meta.queries.length > 0) {\n    // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n    definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n  }\n\n  if (meta.viewQueries.length) {\n    definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n  } // e.g. `hostBindings: (rf, ctx) => { ... }\n\n\n  definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap)); // e.g 'inputs: {a: 'a'}`\n\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true)); // e.g 'outputs: {a: 'a'}`\n\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));\n  }\n\n  return definitionMap;\n}\n/**\r\n * Add features to the definition map.\r\n */\n\n\nfunction addFeatures(definitionMap, meta) {\n  // e.g. `features: [NgOnChangesFeature]`\n  const features = [];\n  const providers = meta.providers;\n  const viewProviders = meta.viewProviders;\n\n  if (providers || viewProviders) {\n    const args = [providers || new LiteralArrayExpr([])];\n\n    if (viewProviders) {\n      args.push(viewProviders);\n    }\n\n    features.push(importExpr(Identifiers.ProvidersFeature).callFn(args));\n  }\n\n  if (meta.usesInheritance) {\n    features.push(importExpr(Identifiers.InheritDefinitionFeature));\n  }\n\n  if (meta.fullInheritance) {\n    features.push(importExpr(Identifiers.CopyDefinitionFeature));\n  }\n\n  if (meta.lifecycle.usesOnChanges) {\n    features.push(importExpr(Identifiers.NgOnChangesFeature));\n  }\n\n  if (features.length) {\n    definitionMap.set('features', literalArr(features));\n  }\n}\n/**\r\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\r\n */\n\n\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  const expression = importExpr(Identifiers.defineDirective).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createDirectiveType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\r\n */\n\n\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n  const definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);\n  addFeatures(definitionMap, meta);\n  const selector = meta.selector && CssSelector.parse(meta.selector);\n  const firstSelector = selector && selector[0]; // e.g. `attr: [\"class\", \".my.app\"]`\n  // This is optional an only included if the first selector of a component specifies attributes.\n\n  if (firstSelector) {\n    const selectorAttributes = firstSelector.getAttrs();\n\n    if (selectorAttributes.length) {\n      definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))),\n      /* forceShared */\n      true));\n    }\n  } // Generate the CSS matcher that recognize directive\n\n\n  let directiveMatcher = null;\n\n  if (meta.directives.length > 0) {\n    const matcher = new SelectorMatcher();\n\n    for (const {\n      selector,\n      type\n    } of meta.directives) {\n      matcher.addSelectables(CssSelector.parse(selector), type);\n    }\n\n    directiveMatcher = matcher;\n  } // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n\n\n  const templateTypeName = meta.name;\n  const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n  const directivesUsed = new Set();\n  const pipesUsed = new Set();\n  const changeDetection = meta.changeDetection;\n  const template = meta.template;\n  const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);\n  const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []); // We need to provide this so that dynamically generated components know what\n  // projected content blocks to pass through to the component when it is instantiated.\n\n  const ngContentSelectors = templateBuilder.getNgContentSelectors();\n\n  if (ngContentSelectors) {\n    definitionMap.set('ngContentSelectors', ngContentSelectors);\n  } // e.g. `decls: 2`\n\n\n  definitionMap.set('decls', literal(templateBuilder.getConstCount())); // e.g. `vars: 2`\n\n  definitionMap.set('vars', literal(templateBuilder.getVarCount())); // Generate `consts` section of ComponentDef:\n  // - either as an array:\n  //   `consts: [['one', 'two'], ['three', 'four']]`\n  // - or as a factory function in case additional statements are present (to support i18n):\n  //   `consts: function() { var i18n_0; if (ngI18nClosureMode) {...} else {...} return [i18n_0]; }`\n\n  const {\n    constExpressions,\n    prepareStatements\n  } = templateBuilder.getConsts();\n\n  if (constExpressions.length > 0) {\n    let constsExpr = literalArr(constExpressions); // Prepare statements are present - turn `consts` into a function.\n\n    if (prepareStatements.length > 0) {\n      constsExpr = fn([], [...prepareStatements, new ReturnStatement(constsExpr)]);\n    }\n\n    definitionMap.set('consts', constsExpr);\n  }\n\n  definitionMap.set('template', templateFunctionExpression); // e.g. `directives: [MyDirective]`\n\n  if (directivesUsed.size) {\n    const directivesList = literalArr(Array.from(directivesUsed));\n    const directivesExpr = compileDeclarationList(directivesList, meta.declarationListEmitMode);\n    definitionMap.set('directives', directivesExpr);\n  } // e.g. `pipes: [MyPipe]`\n\n\n  if (pipesUsed.size) {\n    const pipesList = literalArr(Array.from(pipesUsed));\n    const pipesExpr = compileDeclarationList(pipesList, meta.declarationListEmitMode);\n    definitionMap.set('pipes', pipesExpr);\n  }\n\n  if (meta.encapsulation === null) {\n    meta.encapsulation = ViewEncapsulation.Emulated;\n  } // e.g. `styles: [str1, str2]`\n\n\n  if (meta.styles && meta.styles.length) {\n    const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ? compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) : meta.styles;\n    const strings = styleValues.map(str => constantPool.getConstLiteral(literal(str)));\n    definitionMap.set('styles', literalArr(strings));\n  } else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n    // If there is no style, don't generate css selectors on elements\n    meta.encapsulation = ViewEncapsulation.None;\n  } // Only set view encapsulation if it's not the default value\n\n\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', literal(meta.encapsulation));\n  } // e.g. `animation: [trigger('123', [])]`\n\n\n  if (meta.animations !== null) {\n    definitionMap.set('data', literalMap([{\n      key: 'animation',\n      value: meta.animations,\n      quoted: false\n    }]));\n  } // Only set the change detection flag if it's defined and it's not the default.\n\n\n  if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {\n    definitionMap.set('changeDetection', literal(changeDetection));\n  }\n\n  const expression = importExpr(Identifiers.defineComponent).callFn([definitionMap.toLiteralMap()], undefined, true);\n  const type = createComponentType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Creates the type specification from the component meta. This type is inserted into .d.ts files\r\n * to be consumed by upstream compilations.\r\n */\n\n\nfunction createComponentType(meta) {\n  const typeParams = createDirectiveTypeParams(meta);\n  typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));\n  return expressionType(importExpr(Identifiers.ComponentDeclaration, typeParams));\n}\n/**\r\n * Compiles the array literal of declarations into an expression according to the provided emit\r\n * mode.\r\n */\n\n\nfunction compileDeclarationList(list, mode) {\n  switch (mode) {\n    case 0\n    /* Direct */\n    :\n      // directives: [MyDir],\n      return list;\n\n    case 1\n    /* Closure */\n    :\n      // directives: function () { return [MyDir]; }\n      return fn([], [new ReturnStatement(list)]);\n\n    case 2\n    /* ClosureResolved */\n    :\n      // directives: function () { return [MyDir].map(ng.resolveForwardRef); }\n      const resolvedList = list.callMethod('map', [importExpr(Identifiers.resolveForwardRef)]);\n      return fn([], [new ReturnStatement(resolvedList)]);\n  }\n}\n\nfunction prepareQueryParams(query, constantPool) {\n  const parameters = [getQueryPredicate(query, constantPool), literal(toQueryFlags(query))];\n\n  if (query.read) {\n    parameters.push(query.read);\n  }\n\n  return parameters;\n}\n/**\r\n * Translates query flags into `TQueryFlags` type in packages/core/src/render3/interfaces/query.ts\r\n * @param query\r\n */\n\n\nfunction toQueryFlags(query) {\n  return (query.descendants ? 1\n  /* descendants */\n  : 0\n  /* none */\n  ) | (query.static ? 2\n  /* isStatic */\n  : 0\n  /* none */\n  ) | (query.emitDistinctChangesOnly ? 4\n  /* emitDistinctChangesOnly */\n  : 0\n  /* none */\n  );\n}\n\nfunction convertAttributesToExpressions(attributes) {\n  const values = [];\n\n  for (let key of Object.getOwnPropertyNames(attributes)) {\n    const value = attributes[key];\n    values.push(literal(key), value);\n  }\n\n  return values;\n} // Define and update any content queries\n\n\nfunction createContentQueriesFunction(queries, constantPool, name) {\n  const createStatements = [];\n  const updateStatements = [];\n  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n\n  for (const query of queries) {\n    // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n    createStatements.push(importExpr(Identifiers.contentQuery).callFn([variable('dirIndex'), ...prepareQueryParams(query, constantPool)]).toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n\n    const temporary = tempAllocator();\n    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  }\n\n  const contentQueriesFnName = name ? `${name}_ContentQueries` : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null), new FnParam('dirIndex', null)], [renderFlagCheckIfStmt(1\n  /* Create */\n  , createStatements), renderFlagCheckIfStmt(2\n  /* Update */\n  , updateStatements)], INFERRED_TYPE, null, contentQueriesFnName);\n}\n\nfunction stringAsType(str) {\n  return expressionType(literal(str));\n}\n\nfunction stringMapAsType(map) {\n  const mapValues = Object.keys(map).map(key => {\n    const value = Array.isArray(map[key]) ? map[key][0] : map[key];\n    return {\n      key,\n      value: literal(value),\n      quoted: true\n    };\n  });\n  return expressionType(literalMap(mapValues));\n}\n\nfunction stringArrayAsType(arr) {\n  return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) : NONE_TYPE;\n}\n\nfunction createDirectiveTypeParams(meta) {\n  // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n  // string literal, which must be on one line.\n  const selectorForType = meta.selector !== null ? meta.selector.replace(/\\n/g, '') : null;\n  return [typeWithParameters(meta.type.type, meta.typeArgumentCount), selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE, meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE, stringMapAsType(meta.inputs), stringMapAsType(meta.outputs), stringArrayAsType(meta.queries.map(q => q.propertyName))];\n}\n/**\r\n * Creates the type specification from the directive meta. This type is inserted into .d.ts files\r\n * to be consumed by upstream compilations.\r\n */\n\n\nfunction createDirectiveType(meta) {\n  const typeParams = createDirectiveTypeParams(meta);\n  return expressionType(importExpr(Identifiers.DirectiveDeclaration, typeParams));\n} // Define and update any view queries\n\n\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n  const createStatements = [];\n  const updateStatements = [];\n  const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n  viewQueries.forEach(query => {\n    // creation, e.g. r3.viewQuery(somePredicate, true);\n    const queryDefinition = importExpr(Identifiers.viewQuery).callFn(prepareQueryParams(query, constantPool));\n    createStatements.push(queryDefinition.toStmt()); // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));\n\n    const temporary = tempAllocator();\n    const getQueryList = importExpr(Identifiers.loadQuery).callFn([]);\n    const refresh = importExpr(Identifiers.queryRefresh).callFn([temporary.set(getQueryList)]);\n    const updateDirective = variable(CONTEXT_NAME).prop(query.propertyName).set(query.first ? temporary.prop('first') : temporary);\n    updateStatements.push(refresh.and(updateDirective).toStmt());\n  });\n  const viewQueryFnName = name ? `${name}_Query` : null;\n  return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [renderFlagCheckIfStmt(1\n  /* Create */\n  , createStatements), renderFlagCheckIfStmt(2\n  /* Update */\n  , updateStatements)], INFERRED_TYPE, null, viewQueryFnName);\n} // Return a host binding function or null if one is not necessary.\n\n\nfunction createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {\n  const bindingContext = variable(CONTEXT_NAME);\n  const styleBuilder = new StylingBuilder(bindingContext);\n  const {\n    styleAttr,\n    classAttr\n  } = hostBindingsMetadata.specialAttributes;\n\n  if (styleAttr !== undefined) {\n    styleBuilder.registerStyleAttr(styleAttr);\n  }\n\n  if (classAttr !== undefined) {\n    styleBuilder.registerClassAttr(classAttr);\n  }\n\n  const createStatements = [];\n  const updateStatements = [];\n  const hostBindingSourceSpan = typeSourceSpan;\n  const directiveSummary = metadataAsSummary(hostBindingsMetadata); // Calculate host event bindings\n\n  const eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);\n\n  if (eventBindings && eventBindings.length) {\n    const listeners = createHostListeners(eventBindings, name);\n    createStatements.push(...listeners);\n  } // Calculate the host property bindings\n\n\n  const bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);\n  const allOtherBindings = []; // We need to calculate the total amount of binding slots required by\n  // all the instructions together before any value conversions happen.\n  // Value conversions may require additional slots for interpolation and\n  // bindings with pipes. These calculates happen after this block.\n\n  let totalHostVarsCount = 0;\n  bindings && bindings.forEach(binding => {\n    const stylingInputWasSet = styleBuilder.registerInputBasedOnName(binding.name, binding.expression, hostBindingSourceSpan);\n\n    if (stylingInputWasSet) {\n      totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;\n    } else {\n      allOtherBindings.push(binding);\n      totalHostVarsCount++;\n    }\n  });\n  let valueConverter;\n\n  const getValueConverter = () => {\n    if (!valueConverter) {\n      const hostVarsCountFn = numSlots => {\n        const originalVarsCount = totalHostVarsCount;\n        totalHostVarsCount += numSlots;\n        return originalVarsCount;\n      };\n\n      valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'), // new nodes are illegal here\n      hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here\n    }\n\n    return valueConverter;\n  };\n\n  const propertyBindings = [];\n  const attributeBindings = [];\n  const syntheticHostBindings = [];\n  allOtherBindings.forEach(binding => {\n    // resolve literal arrays and literal objects\n    const value = binding.expression.visit(getValueConverter());\n    const bindingExpr = bindingFn(bindingContext, value);\n    const {\n      bindingName,\n      instruction,\n      isAttribute\n    } = getBindingNameAndInstruction(binding);\n    const securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute).filter(context => context !== SecurityContext.NONE);\n    let sanitizerFn = null;\n\n    if (securityContexts.length) {\n      if (securityContexts.length === 2 && securityContexts.indexOf(SecurityContext.URL) > -1 && securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n        // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n        // of different security contexts. In this case we use special sanitization function and\n        // select the actual sanitizer at runtime based on a tag name that is provided while\n        // invoking sanitization function.\n        sanitizerFn = importExpr(Identifiers.sanitizeUrlOrResourceUrl);\n      } else {\n        sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n      }\n    }\n\n    const instructionParams = [literal(bindingName), bindingExpr.currValExpr];\n\n    if (sanitizerFn) {\n      instructionParams.push(sanitizerFn);\n    }\n\n    updateStatements.push(...bindingExpr.stmts);\n\n    if (instruction === Identifiers.hostProperty) {\n      propertyBindings.push(instructionParams);\n    } else if (instruction === Identifiers.attribute) {\n      attributeBindings.push(instructionParams);\n    } else if (instruction === Identifiers.syntheticHostProperty) {\n      syntheticHostBindings.push(instructionParams);\n    } else {\n      updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());\n    }\n  });\n\n  if (propertyBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers.hostProperty, propertyBindings).toStmt());\n  }\n\n  if (attributeBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers.attribute, attributeBindings).toStmt());\n  }\n\n  if (syntheticHostBindings.length > 0) {\n    updateStatements.push(chainedInstruction(Identifiers.syntheticHostProperty, syntheticHostBindings).toStmt());\n  } // since we're dealing with directives/components and both have hostBinding\n  // functions, we need to generate a special hostAttrs instruction that deals\n  // with both the assignment of styling as well as static attributes to the host\n  // element. The instruction below will instruct all initial styling (styling\n  // that is inside of a host binding within a directive/component) to be attached\n  // to the host element alongside any of the provided host attributes that were\n  // collected earlier.\n\n\n  const hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);\n  styleBuilder.assignHostAttrs(hostAttrs, definitionMap);\n\n  if (styleBuilder.hasBindings) {\n    // finally each binding that was registered in the statement above will need to be added to\n    // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n    // are evaluated and updated for the element.\n    styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {\n      if (instruction.calls.length > 0) {\n        const calls = [];\n        instruction.calls.forEach(call => {\n          // we subtract a value of `1` here because the binding slot was already allocated\n          // at the top of this method when all the input bindings were counted.\n          totalHostVarsCount += Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);\n          calls.push(convertStylingCall(call, bindingContext, bindingFn));\n        });\n        updateStatements.push(chainedInstruction(instruction.reference, calls).toStmt());\n      }\n    });\n  }\n\n  if (totalHostVarsCount) {\n    definitionMap.set('hostVars', literal(totalHostVarsCount));\n  }\n\n  if (createStatements.length > 0 || updateStatements.length > 0) {\n    const hostBindingsFnName = name ? `${name}_HostBindings` : null;\n    const statements = [];\n\n    if (createStatements.length > 0) {\n      statements.push(renderFlagCheckIfStmt(1\n      /* Create */\n      , createStatements));\n    }\n\n    if (updateStatements.length > 0) {\n      statements.push(renderFlagCheckIfStmt(2\n      /* Update */\n      , updateStatements));\n    }\n\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);\n  }\n\n  return null;\n}\n\nfunction bindingFn(implicit, value) {\n  return convertPropertyBinding(null, implicit, value, 'b', BindingForm.Expression, () => error('Unexpected interpolation'));\n}\n\nfunction convertStylingCall(call, bindingContext, bindingFn) {\n  return call.params(value => bindingFn(bindingContext, value).currValExpr);\n}\n\nfunction getBindingNameAndInstruction(binding) {\n  let bindingName = binding.name;\n  let instruction; // Check to see if this is an attr binding or a property binding\n\n  const attrMatches = bindingName.match(ATTR_REGEX);\n\n  if (attrMatches) {\n    bindingName = attrMatches[1];\n    instruction = Identifiers.attribute;\n  } else {\n    if (binding.isAnimation) {\n      bindingName = prepareSyntheticPropertyName(bindingName); // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n      // in the context of the component and not the parent. Therefore there is a special\n      // compatibility instruction available for this purpose.\n\n      instruction = Identifiers.syntheticHostProperty;\n    } else {\n      instruction = Identifiers.hostProperty;\n    }\n  }\n\n  return {\n    bindingName,\n    instruction,\n    isAttribute: !!attrMatches\n  };\n}\n\nfunction createHostListeners(eventBindings, name) {\n  const listeners = [];\n  const syntheticListeners = [];\n  const instructions = [];\n  eventBindings.forEach(binding => {\n    let bindingName = binding.name && sanitizeIdentifier(binding.name);\n    const bindingFnName = binding.type === 1\n    /* Animation */\n    ? prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) : bindingName;\n    const handlerName = name && bindingName ? `${name}_${bindingFnName}_HostBindingHandler` : null;\n    const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);\n\n    if (binding.type == 1\n    /* Animation */\n    ) {\n      syntheticListeners.push(params);\n    } else {\n      listeners.push(params);\n    }\n  });\n\n  if (syntheticListeners.length > 0) {\n    instructions.push(chainedInstruction(Identifiers.syntheticHostListener, syntheticListeners).toStmt());\n  }\n\n  if (listeners.length > 0) {\n    instructions.push(chainedInstruction(Identifiers.listener, listeners).toStmt());\n  }\n\n  return instructions;\n}\n\nfunction metadataAsSummary(meta) {\n  // clang-format off\n  return {\n    // This is used by the BindingParser, which only deals with listeners and properties. There's no\n    // need to pass attributes to it.\n    hostAttributes: {},\n    hostListeners: meta.listeners,\n    hostProperties: meta.properties\n  }; // clang-format on\n}\n\nconst HOST_REG_EXP$1 = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\n\nfunction parseHostBindings(host) {\n  const attributes = {};\n  const listeners = {};\n  const properties = {};\n  const specialAttributes = {};\n\n  for (const key of Object.keys(host)) {\n    const value = host[key];\n    const matches = key.match(HOST_REG_EXP$1);\n\n    if (matches === null) {\n      switch (key) {\n        case 'class':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(`Class binding must be string`);\n          }\n\n          specialAttributes.classAttr = value;\n          break;\n\n        case 'style':\n          if (typeof value !== 'string') {\n            // TODO(alxhub): make this a diagnostic.\n            throw new Error(`Style binding must be string`);\n          }\n\n          specialAttributes.styleAttr = value;\n          break;\n\n        default:\n          if (typeof value === 'string') {\n            attributes[key] = literal(value);\n          } else {\n            attributes[key] = value;\n          }\n\n      }\n    } else if (matches[1\n    /* Binding */\n    ] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(`Property binding must be string`);\n      } // synthetic properties (the ones that have a `@` as a prefix)\n      // are still treated the same as regular properties. Therefore\n      // there is no point in storing them in a separate map.\n\n\n      properties[matches[1\n      /* Binding */\n      ]] = value;\n    } else if (matches[2\n    /* Event */\n    ] != null) {\n      if (typeof value !== 'string') {\n        // TODO(alxhub): make this a diagnostic.\n        throw new Error(`Event binding must be string`);\n      }\n\n      listeners[matches[2\n      /* Event */\n      ]] = value;\n    }\n  }\n\n  return {\n    attributes,\n    listeners,\n    properties,\n    specialAttributes\n  };\n}\n/**\r\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\r\n * given set of host bindings has no errors.\r\n *\r\n * @param bindings set of host bindings to verify.\r\n * @param sourceSpan source span where host bindings were defined.\r\n * @returns array of errors associated with a given set of host bindings.\r\n */\n\n\nfunction verifyHostBindings(bindings, sourceSpan) {\n  const summary = metadataAsSummary(bindings); // TODO: abstract out host bindings verification logic and use it instead of\n  // creating events and properties ASTs to detect errors (FW-996)\n\n  const bindingParser = makeBindingParser();\n  bindingParser.createDirectiveHostEventAsts(summary, sourceSpan);\n  bindingParser.createBoundHostProperties(summary, sourceSpan);\n  return bindingParser.errors;\n}\n\nfunction compileStyles(styles, selector, hostSelector) {\n  const shadowCss = new ShadowCss();\n  return styles.map(style => {\n    return shadowCss.shimCssText(style, selector, hostSelector);\n  });\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * An interface for retrieving documents by URL that the compiler uses to\r\n * load templates.\r\n *\r\n * This is an abstract class, rather than an interface, so that it can be used\r\n * as injection token.\r\n */\n\n\nclass ResourceLoader {}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass CompilerFacadeImpl {\n  constructor(jitEvaluator = new JitEvaluator()) {\n    this.jitEvaluator = jitEvaluator;\n    this.FactoryTarget = FactoryTarget;\n    this.ResourceLoader = ResourceLoader;\n    this.elementSchemaRegistry = new DomElementSchemaRegistry();\n  }\n\n  compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n    const metadata = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      internalType: new WrappedNodeExpr(facade.type),\n      typeArgumentCount: 0,\n      deps: null,\n      pipeName: facade.pipeName,\n      pure: facade.pure\n    };\n    const res = compilePipeFromMetadata(metadata);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compilePipeDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const meta = convertDeclarePipeFacadeToMetadata(declaration);\n    const res = compilePipeFromMetadata(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n    var _a;\n\n    const {\n      expression,\n      statements\n    } = compileInjectable({\n      name: facade.name,\n      type: wrapReference(facade.type),\n      internalType: new WrappedNodeExpr(facade.type),\n      typeArgumentCount: facade.typeArgumentCount,\n      providedIn: computeProvidedIn(facade.providedIn),\n      useClass: convertToProviderExpression(facade, USE_CLASS),\n      useFactory: wrapExpression(facade, USE_FACTORY),\n      useValue: convertToProviderExpression(facade, USE_VALUE),\n      useExisting: convertToProviderExpression(facade, USE_EXISTING),\n      deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DependencyMetadata)\n    },\n    /* resolveForwardRefs */\n    true);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n\n  compileInjectableDeclaration(angularCoreEnv, sourceMapUrl, facade) {\n    var _a;\n\n    const {\n      expression,\n      statements\n    } = compileInjectable({\n      name: facade.type.name,\n      type: wrapReference(facade.type),\n      internalType: new WrappedNodeExpr(facade.type),\n      typeArgumentCount: 0,\n      providedIn: computeProvidedIn(facade.providedIn),\n      useClass: convertToProviderExpression(facade, USE_CLASS),\n      useFactory: wrapExpression(facade, USE_FACTORY),\n      useValue: convertToProviderExpression(facade, USE_VALUE),\n      useExisting: convertToProviderExpression(facade, USE_EXISTING),\n      deps: (_a = facade.deps) === null || _a === void 0 ? void 0 : _a.map(convertR3DeclareDependencyMetadata)\n    },\n    /* resolveForwardRefs */\n    true);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n  }\n\n  compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = {\n      name: facade.name,\n      type: wrapReference(facade.type),\n      internalType: new WrappedNodeExpr(facade.type),\n      providers: new WrappedNodeExpr(facade.providers),\n      imports: facade.imports.map(i => new WrappedNodeExpr(i))\n    };\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileInjectorDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const meta = convertDeclareInjectorFacadeToMetadata(declaration);\n    const res = compileInjector(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = {\n      type: wrapReference(facade.type),\n      internalType: new WrappedNodeExpr(facade.type),\n      adjacentType: new WrappedNodeExpr(facade.type),\n      bootstrap: facade.bootstrap.map(wrapReference),\n      declarations: facade.declarations.map(wrapReference),\n      imports: facade.imports.map(wrapReference),\n      exports: facade.exports.map(wrapReference),\n      emitInline: true,\n      containsForwardDecls: false,\n      schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n      id: facade.id ? new WrappedNodeExpr(facade.id) : null\n    };\n    const res = compileNgModule(meta);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileNgModuleDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const expression = compileNgModuleDeclarationExpression(declaration);\n    return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, []);\n  }\n\n  compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n    const meta = convertDirectiveFacadeToMetadata(facade);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  compileDirectiveDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const typeSourceSpan = this.createParseSourceSpan('Directive', declaration.type.name, sourceMapUrl);\n    const meta = convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan);\n    return this.compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  compileDirectiveFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser();\n    const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n  }\n\n  compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n    // Parse the template and check for errors.\n    const {\n      template,\n      interpolation\n    } = parseJitTemplate(facade.template, facade.name, sourceMapUrl, facade.preserveWhitespaces, facade.interpolation); // Compile the component metadata, including template, into an expression.\n\n    const meta = Object.assign(Object.assign(Object.assign({}, facade), convertDirectiveFacadeToMetadata(facade)), {\n      selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(),\n      template,\n      declarationListEmitMode: 0\n      /* Direct */\n      ,\n      styles: [...facade.styles, ...template.styles],\n      encapsulation: facade.encapsulation,\n      interpolation,\n      changeDetection: facade.changeDetection,\n      animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null,\n      viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) : null,\n      relativeContextFilePath: '',\n      i18nUseExternalIds: true\n    });\n    const jitExpressionSourceMap = `ng:///${facade.name}.js`;\n    return this.compileComponentFromMeta(angularCoreEnv, jitExpressionSourceMap, meta);\n  }\n\n  compileComponentDeclaration(angularCoreEnv, sourceMapUrl, declaration) {\n    const typeSourceSpan = this.createParseSourceSpan('Component', declaration.type.name, sourceMapUrl);\n    const meta = convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl);\n    return this.compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta);\n  }\n\n  compileComponentFromMeta(angularCoreEnv, sourceMapUrl, meta) {\n    const constantPool = new ConstantPool();\n    const bindingParser = makeBindingParser(meta.interpolation);\n    const res = compileComponentFromMetadata(meta, constantPool, bindingParser);\n    return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n  }\n\n  compileFactory(angularCoreEnv, sourceMapUrl, meta) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.name,\n      type: wrapReference(meta.type),\n      internalType: new WrappedNodeExpr(meta.type),\n      typeArgumentCount: meta.typeArgumentCount,\n      deps: convertR3DependencyMetadataArray(meta.deps),\n      target: meta.target\n    });\n    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n  }\n\n  compileFactoryDeclaration(angularCoreEnv, sourceMapUrl, meta) {\n    const factoryRes = compileFactoryFunction({\n      name: meta.type.name,\n      type: wrapReference(meta.type),\n      internalType: new WrappedNodeExpr(meta.type),\n      typeArgumentCount: 0,\n      deps: meta.deps && meta.deps.map(convertR3DeclareDependencyMetadata),\n      target: meta.target\n    });\n    return this.jitExpression(factoryRes.expression, angularCoreEnv, sourceMapUrl, factoryRes.statements);\n  }\n\n  createParseSourceSpan(kind, typeName, sourceUrl) {\n    return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n  }\n  /**\r\n   * JIT compiles an expression and returns the result of executing that expression.\r\n   *\r\n   * @param def the definition which will be compiled and executed to get the value to patch\r\n   * @param context an object map of @angular/core symbol names to symbols which will be available\r\n   * in the context of the compiled expression\r\n   * @param sourceUrl a URL to use for the source map of the compiled expression\r\n   * @param preStatements a collection of statements that should be evaluated before the expression.\r\n   */\n\n\n  jitExpression(def, context, sourceUrl, preStatements) {\n    // The ConstantPool may contain Statements which declare variables used in the final expression.\n    // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n    // declaration of $def which is set to the expression being compiled.\n    const statements = [...preStatements, new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported])];\n    const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context),\n    /* enableSourceMaps */\n    true);\n    return res['$def'];\n  }\n\n}\n\nconst USE_CLASS = /*#__PURE__*/Object.keys({\n  useClass: null\n})[0];\nconst USE_FACTORY = /*#__PURE__*/Object.keys({\n  useFactory: null\n})[0];\nconst USE_VALUE = /*#__PURE__*/Object.keys({\n  useValue: null\n})[0];\nconst USE_EXISTING = /*#__PURE__*/Object.keys({\n  useExisting: null\n})[0];\n\nfunction convertToR3QueryMetadata(facade) {\n  return Object.assign(Object.assign({}, facade), {\n    predicate: Array.isArray(facade.predicate) ? facade.predicate : new WrappedNodeExpr(facade.predicate),\n    read: facade.read ? new WrappedNodeExpr(facade.read) : null,\n    static: facade.static,\n    emitDistinctChangesOnly: facade.emitDistinctChangesOnly\n  });\n}\n\nfunction convertQueryDeclarationToMetadata(declaration) {\n  var _a, _b, _c, _d;\n\n  return {\n    propertyName: declaration.propertyName,\n    first: (_a = declaration.first) !== null && _a !== void 0 ? _a : false,\n    predicate: Array.isArray(declaration.predicate) ? declaration.predicate : new WrappedNodeExpr(declaration.predicate),\n    descendants: (_b = declaration.descendants) !== null && _b !== void 0 ? _b : false,\n    read: declaration.read ? new WrappedNodeExpr(declaration.read) : null,\n    static: (_c = declaration.static) !== null && _c !== void 0 ? _c : false,\n    emitDistinctChangesOnly: (_d = declaration.emitDistinctChangesOnly) !== null && _d !== void 0 ? _d : true\n  };\n}\n\nfunction convertDirectiveFacadeToMetadata(facade) {\n  const inputsFromMetadata = parseInputOutputs(facade.inputs || []);\n  const outputsFromMetadata = parseInputOutputs(facade.outputs || []);\n  const propMetadata = facade.propMetadata;\n  const inputsFromType = {};\n  const outputsFromType = {};\n\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isInput(ann)) {\n          inputsFromType[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n        } else if (isOutput(ann)) {\n          outputsFromType[field] = ann.bindingPropertyName || field;\n        }\n      });\n    }\n  }\n\n  return Object.assign(Object.assign({}, facade), {\n    typeArgumentCount: 0,\n    typeSourceSpan: facade.typeSourceSpan,\n    type: wrapReference(facade.type),\n    internalType: new WrappedNodeExpr(facade.type),\n    deps: null,\n    host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host),\n    inputs: Object.assign(Object.assign({}, inputsFromMetadata), inputsFromType),\n    outputs: Object.assign(Object.assign({}, outputsFromMetadata), outputsFromType),\n    queries: facade.queries.map(convertToR3QueryMetadata),\n    providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null,\n    viewQueries: facade.viewQueries.map(convertToR3QueryMetadata),\n    fullInheritance: false\n  });\n}\n\nfunction convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    typeSourceSpan,\n    internalType: new WrappedNodeExpr(declaration.type),\n    selector: (_a = declaration.selector) !== null && _a !== void 0 ? _a : null,\n    inputs: (_b = declaration.inputs) !== null && _b !== void 0 ? _b : {},\n    outputs: (_c = declaration.outputs) !== null && _c !== void 0 ? _c : {},\n    host: convertHostDeclarationToMetadata(declaration.host),\n    queries: ((_d = declaration.queries) !== null && _d !== void 0 ? _d : []).map(convertQueryDeclarationToMetadata),\n    viewQueries: ((_e = declaration.viewQueries) !== null && _e !== void 0 ? _e : []).map(convertQueryDeclarationToMetadata),\n    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    exportAs: (_f = declaration.exportAs) !== null && _f !== void 0 ? _f : null,\n    usesInheritance: (_g = declaration.usesInheritance) !== null && _g !== void 0 ? _g : false,\n    lifecycle: {\n      usesOnChanges: (_h = declaration.usesOnChanges) !== null && _h !== void 0 ? _h : false\n    },\n    deps: null,\n    typeArgumentCount: 0,\n    fullInheritance: false\n  };\n}\n\nfunction convertHostDeclarationToMetadata(host = {}) {\n  var _a, _b, _c;\n\n  return {\n    attributes: convertOpaqueValuesToExpressions((_a = host.attributes) !== null && _a !== void 0 ? _a : {}),\n    listeners: (_b = host.listeners) !== null && _b !== void 0 ? _b : {},\n    properties: (_c = host.properties) !== null && _c !== void 0 ? _c : {},\n    specialAttributes: {\n      classAttr: host.classAttribute,\n      styleAttr: host.styleAttribute\n    }\n  };\n}\n\nfunction convertOpaqueValuesToExpressions(obj) {\n  const result = {};\n\n  for (const key of Object.keys(obj)) {\n    result[key] = new WrappedNodeExpr(obj[key]);\n  }\n\n  return result;\n}\n\nfunction convertDeclareComponentFacadeToMetadata(declaration, typeSourceSpan, sourceMapUrl) {\n  var _a, _b, _c, _d, _e, _f;\n\n  const {\n    template,\n    interpolation\n  } = parseJitTemplate(declaration.template, declaration.type.name, sourceMapUrl, (_a = declaration.preserveWhitespaces) !== null && _a !== void 0 ? _a : false, declaration.interpolation);\n  return Object.assign(Object.assign({}, convertDeclareDirectiveFacadeToMetadata(declaration, typeSourceSpan)), {\n    template,\n    styles: (_b = declaration.styles) !== null && _b !== void 0 ? _b : [],\n    directives: ((_c = declaration.components) !== null && _c !== void 0 ? _c : []).concat((_d = declaration.directives) !== null && _d !== void 0 ? _d : []).map(convertUsedDirectiveDeclarationToMetadata),\n    pipes: convertUsedPipesToMetadata(declaration.pipes),\n    viewProviders: declaration.viewProviders !== undefined ? new WrappedNodeExpr(declaration.viewProviders) : null,\n    animations: declaration.animations !== undefined ? new WrappedNodeExpr(declaration.animations) : null,\n    changeDetection: (_e = declaration.changeDetection) !== null && _e !== void 0 ? _e : ChangeDetectionStrategy.Default,\n    encapsulation: (_f = declaration.encapsulation) !== null && _f !== void 0 ? _f : ViewEncapsulation.Emulated,\n    interpolation,\n    declarationListEmitMode: 2\n    /* ClosureResolved */\n    ,\n    relativeContextFilePath: '',\n    i18nUseExternalIds: true\n  });\n}\n\nfunction convertUsedDirectiveDeclarationToMetadata(declaration) {\n  var _a, _b, _c;\n\n  return {\n    selector: declaration.selector,\n    type: new WrappedNodeExpr(declaration.type),\n    inputs: (_a = declaration.inputs) !== null && _a !== void 0 ? _a : [],\n    outputs: (_b = declaration.outputs) !== null && _b !== void 0 ? _b : [],\n    exportAs: (_c = declaration.exportAs) !== null && _c !== void 0 ? _c : null\n  };\n}\n\nfunction convertUsedPipesToMetadata(declaredPipes) {\n  const pipes = new Map();\n\n  if (declaredPipes === undefined) {\n    return pipes;\n  }\n\n  for (const pipeName of Object.keys(declaredPipes)) {\n    const pipeType = declaredPipes[pipeName];\n    pipes.set(pipeName, new WrappedNodeExpr(pipeType));\n  }\n\n  return pipes;\n}\n\nfunction parseJitTemplate(template, typeName, sourceMapUrl, preserveWhitespaces, interpolation) {\n  const interpolationConfig = interpolation ? InterpolationConfig.fromArray(interpolation) : DEFAULT_INTERPOLATION_CONFIG; // Parse the template and check for errors.\n\n  const parsed = parseTemplate(template, sourceMapUrl, {\n    preserveWhitespaces: preserveWhitespaces,\n    interpolationConfig\n  });\n\n  if (parsed.errors !== null) {\n    const errors = parsed.errors.map(err => err.toString()).join(', ');\n    throw new Error(`Errors during JIT compilation of template for ${typeName}: ${errors}`);\n  }\n\n  return {\n    template: parsed,\n    interpolation: interpolationConfig\n  };\n}\n/**\r\n * Convert the expression, if present to an `R3ProviderExpression`.\r\n *\r\n * In JIT mode we do not want the compiler to wrap the expression in a `forwardRef()` call because,\r\n * if it is referencing a type that has not yet been defined, it will have already been wrapped in\r\n * a `forwardRef()` - either by the application developer or during partial-compilation. Thus we can\r\n * set `isForwardRef` to `false`.\r\n */\n\n\nfunction convertToProviderExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return createR3ProviderExpression(new WrappedNodeExpr(obj[property]),\n    /* isForwardRef */\n    false);\n  } else {\n    return undefined;\n  }\n}\n\nfunction wrapExpression(obj, property) {\n  if (obj.hasOwnProperty(property)) {\n    return new WrappedNodeExpr(obj[property]);\n  } else {\n    return undefined;\n  }\n}\n\nfunction computeProvidedIn(providedIn) {\n  const expression = providedIn == null || typeof providedIn === 'string' ? new LiteralExpr(providedIn !== null && providedIn !== void 0 ? providedIn : null) : new WrappedNodeExpr(providedIn); // See `convertToProviderExpression()` for why `isForwardRef` is false.\n\n  return createR3ProviderExpression(expression,\n  /* isForwardRef */\n  false);\n}\n\nfunction convertR3DependencyMetadataArray(facades) {\n  return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\n\nfunction convertR3DependencyMetadata(facade) {\n  const isAttributeDep = facade.attribute != null; // both `null` and `undefined`\n\n  const rawToken = facade.token === null ? null : new WrappedNodeExpr(facade.token); // In JIT mode, if the dep is an `@Attribute()` then we use the attribute name given in\n  // `attribute` rather than the `token`.\n\n  const token = isAttributeDep ? new WrappedNodeExpr(facade.attribute) : rawToken;\n  return createR3DependencyMetadata(token, isAttributeDep, facade.host, facade.optional, facade.self, facade.skipSelf);\n}\n\nfunction convertR3DeclareDependencyMetadata(facade) {\n  var _a, _b, _c, _d, _e;\n\n  const isAttributeDep = (_a = facade.attribute) !== null && _a !== void 0 ? _a : false;\n  const token = facade.token === null ? null : new WrappedNodeExpr(facade.token);\n  return createR3DependencyMetadata(token, isAttributeDep, (_b = facade.host) !== null && _b !== void 0 ? _b : false, (_c = facade.optional) !== null && _c !== void 0 ? _c : false, (_d = facade.self) !== null && _d !== void 0 ? _d : false, (_e = facade.skipSelf) !== null && _e !== void 0 ? _e : false);\n}\n\nfunction createR3DependencyMetadata(token, isAttributeDep, host, optional, self, skipSelf) {\n  // If the dep is an `@Attribute()` the `attributeNameType` ought to be the `unknown` type.\n  // But types are not available at runtime so we just use a literal `\"<unknown>\"` string as a dummy\n  // marker.\n  const attributeNameType = isAttributeDep ? literal('unknown') : null;\n  return {\n    token,\n    attributeNameType,\n    host,\n    optional,\n    self,\n    skipSelf\n  };\n}\n\nfunction extractHostBindings(propMetadata, sourceSpan, host) {\n  // First parse the declarations from the metadata.\n  const bindings = parseHostBindings(host || {}); // After that check host bindings for errors\n\n  const errors = verifyHostBindings(bindings, sourceSpan);\n\n  if (errors.length) {\n    throw new Error(errors.map(error => error.msg).join('\\n'));\n  } // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n\n\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isHostBinding(ann)) {\n          // Since this is a decorator, we know that the value is a class member. Always access it\n          // through `this` so that further down the line it can't be confused for a literal value\n          // (e.g. if there's a property called `true`).\n          bindings.properties[ann.hostPropertyName || field] = getSafePropertyAccessString('this', field);\n        } else if (isHostListener(ann)) {\n          bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n        }\n      });\n    }\n  }\n\n  return bindings;\n}\n\nfunction isHostBinding(value) {\n  return value.ngMetadataName === 'HostBinding';\n}\n\nfunction isHostListener(value) {\n  return value.ngMetadataName === 'HostListener';\n}\n\nfunction isInput(value) {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction isOutput(value) {\n  return value.ngMetadataName === 'Output';\n}\n\nfunction parseInputOutputs(values) {\n  return values.reduce((map, value) => {\n    const [field, property] = value.split(',').map(piece => piece.trim());\n    map[field] = property || field;\n    return map;\n  }, {});\n}\n\nfunction convertDeclarePipeFacadeToMetadata(declaration) {\n  var _a;\n\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    internalType: new WrappedNodeExpr(declaration.type),\n    typeArgumentCount: 0,\n    pipeName: declaration.name,\n    deps: null,\n    pure: (_a = declaration.pure) !== null && _a !== void 0 ? _a : true\n  };\n}\n\nfunction convertDeclareInjectorFacadeToMetadata(declaration) {\n  return {\n    name: declaration.type.name,\n    type: wrapReference(declaration.type),\n    internalType: new WrappedNodeExpr(declaration.type),\n    providers: declaration.providers !== undefined ? new WrappedNodeExpr(declaration.providers) : null,\n    imports: declaration.imports !== undefined ? declaration.imports.map(i => new WrappedNodeExpr(i)) : []\n  };\n}\n\nfunction publishFacade(global) {\n  const ng = global.ng || (global.ng = {});\n  ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst VERSION$1 = /*#__PURE__*/new Version('12.2.7');\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nclass CompilerConfig {\n  constructor({\n    defaultEncapsulation = ViewEncapsulation.Emulated,\n    useJit = true,\n    jitDevMode = false,\n    missingTranslation = null,\n    preserveWhitespaces,\n    strictInjectionParameters\n  } = {}) {\n    this.defaultEncapsulation = defaultEncapsulation;\n    this.useJit = !!useJit;\n    this.jitDevMode = !!jitDevMode;\n    this.missingTranslation = missingTranslation;\n    this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n    this.strictInjectionParameters = strictInjectionParameters === true;\n  }\n\n}\n\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {\n  return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass DirectiveNormalizer {\n  constructor(_resourceLoader, _urlResolver, _htmlParser, _config) {\n    this._resourceLoader = _resourceLoader;\n    this._urlResolver = _urlResolver;\n    this._htmlParser = _htmlParser;\n    this._config = _config;\n    this._resourceLoaderCache = new Map();\n  }\n\n  clearCache() {\n    this._resourceLoaderCache.clear();\n  }\n\n  clearCacheFor(normalizedDirective) {\n    if (!normalizedDirective.isComponent) {\n      return;\n    }\n\n    const template = normalizedDirective.template;\n\n    this._resourceLoaderCache.delete(template.templateUrl);\n\n    template.externalStylesheets.forEach(stylesheet => {\n      this._resourceLoaderCache.delete(stylesheet.moduleUrl);\n    });\n  }\n\n  _fetch(url) {\n    let result = this._resourceLoaderCache.get(url);\n\n    if (!result) {\n      result = this._resourceLoader.get(url);\n\n      this._resourceLoaderCache.set(url, result);\n    }\n\n    return result;\n  }\n\n  normalizeTemplate(prenormData) {\n    if (isDefined(prenormData.template)) {\n      if (isDefined(prenormData.templateUrl)) {\n        throw syntaxError(`'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\n      }\n\n      if (typeof prenormData.template !== 'string') {\n        throw syntaxError(`The template specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else if (isDefined(prenormData.templateUrl)) {\n      if (typeof prenormData.templateUrl !== 'string') {\n        throw syntaxError(`The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\n      }\n    } else {\n      throw syntaxError(`No template specified for component ${stringify(prenormData.componentType)}`);\n    }\n\n    if (isDefined(prenormData.preserveWhitespaces) && typeof prenormData.preserveWhitespaces !== 'boolean') {\n      throw syntaxError(`The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\n    }\n\n    return SyncAsync.then(this._preParseTemplate(prenormData), preparsedTemplate => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n  }\n\n  _preParseTemplate(prenomData) {\n    let template;\n    let templateUrl;\n\n    if (prenomData.template != null) {\n      template = prenomData.template;\n      templateUrl = prenomData.moduleUrl;\n    } else {\n      templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n      template = this._fetch(templateUrl);\n    }\n\n    return SyncAsync.then(template, template => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n  }\n\n  _preparseLoadedTemplate(prenormData, template, templateAbsUrl) {\n    const isInline = !!prenormData.template;\n    const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);\n    const templateUrl = templateSourceUrl({\n      reference: prenormData.ngModuleType\n    }, {\n      type: {\n        reference: prenormData.componentType\n      }\n    }, {\n      isInline,\n      templateUrl: templateAbsUrl\n    });\n\n    const rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, {\n      tokenizeExpansionForms: true,\n      interpolationConfig\n    });\n\n    if (rootNodesAndErrors.errors.length > 0) {\n      const errorString = rootNodesAndErrors.errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`);\n    }\n\n    const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({\n      styles: prenormData.styles,\n      moduleUrl: prenormData.moduleUrl\n    }));\n\n    const visitor = new TemplatePreparseVisitor();\n    visitAll$1(visitor, rootNodesAndErrors.rootNodes);\n\n    const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({\n      styles: visitor.styles,\n      styleUrls: visitor.styleUrls,\n      moduleUrl: templateAbsUrl\n    }));\n\n    const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n    const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n\n    const styleUrls = this._normalizeStylesheet(new CompileStylesheetMetadata({\n      styleUrls: prenormData.styleUrls,\n      moduleUrl: prenormData.moduleUrl\n    })).styleUrls;\n\n    return {\n      template,\n      templateUrl: templateAbsUrl,\n      isInline,\n      htmlAst: rootNodesAndErrors,\n      styles,\n      inlineStyleUrls,\n      styleUrls,\n      ngContentSelectors: visitor.ngContentSelectors\n    };\n  }\n\n  _normalizeTemplateMetadata(prenormData, preparsedTemplate) {\n    return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), externalStylesheets => this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets));\n  }\n\n  _normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, stylesheets) {\n    // Algorithm:\n    // - produce exactly 1 entry per original styleUrl in\n    // CompileTemplateMetadata.externalStylesheets with all styles inlined\n    // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n    // Reason: be able to determine how many stylesheets there are even without loading\n    // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n    // (as resource loading may be async)\n    const styles = [...preparsedTemplate.styles];\n\n    this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n\n    const styleUrls = preparsedTemplate.styleUrls;\n    const externalStylesheets = styleUrls.map(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl);\n      const styles = [...stylesheet.styles];\n\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n\n      return new CompileStylesheetMetadata({\n        moduleUrl: styleUrl,\n        styles: styles\n      });\n    });\n    let encapsulation = prenormData.encapsulation;\n\n    if (encapsulation == null) {\n      encapsulation = this._config.defaultEncapsulation;\n    }\n\n    if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 && styleUrls.length === 0) {\n      encapsulation = ViewEncapsulation.None;\n    }\n\n    return new CompileTemplateMetadata({\n      encapsulation,\n      template: preparsedTemplate.template,\n      templateUrl: preparsedTemplate.templateUrl,\n      htmlAst: preparsedTemplate.htmlAst,\n      styles,\n      styleUrls,\n      ngContentSelectors: preparsedTemplate.ngContentSelectors,\n      animations: prenormData.animations,\n      interpolation: prenormData.interpolation,\n      isInline: preparsedTemplate.isInline,\n      externalStylesheets,\n      preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces)\n    });\n  }\n\n  _inlineStyles(styleUrls, stylesheets, targetStyles) {\n    styleUrls.forEach(styleUrl => {\n      const stylesheet = stylesheets.get(styleUrl);\n      stylesheet.styles.forEach(style => targetStyles.push(style));\n\n      this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n    });\n  }\n\n  _loadMissingExternalStylesheets(styleUrls, loadedStylesheets = new Map()) {\n    return SyncAsync.then(SyncAsync.all(styleUrls.filter(styleUrl => !loadedStylesheets.has(styleUrl)).map(styleUrl => SyncAsync.then(this._fetch(styleUrl), loadedStyle => {\n      const stylesheet = this._normalizeStylesheet(new CompileStylesheetMetadata({\n        styles: [loadedStyle],\n        moduleUrl: styleUrl\n      }));\n\n      loadedStylesheets.set(styleUrl, stylesheet);\n      return this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n    }))), _ => loadedStylesheets);\n  }\n\n  _normalizeStylesheet(stylesheet) {\n    const moduleUrl = stylesheet.moduleUrl;\n    const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(url => this._urlResolver.resolve(moduleUrl, url));\n    const allStyles = stylesheet.styles.map(style => {\n      const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n      allStyleUrls.push(...styleWithImports.styleUrls);\n      return styleWithImports.style;\n    });\n    return new CompileStylesheetMetadata({\n      styles: allStyles,\n      styleUrls: allStyleUrls,\n      moduleUrl: moduleUrl\n    });\n  }\n\n}\n\nclass TemplatePreparseVisitor {\n  constructor() {\n    this.ngContentSelectors = [];\n    this.styles = [];\n    this.styleUrls = [];\n    this.ngNonBindableStackCount = 0;\n  }\n\n  visitElement(ast, context) {\n    const preparsedElement = preparseElement(ast);\n\n    switch (preparsedElement.type) {\n      case PreparsedElementType.NG_CONTENT:\n        if (this.ngNonBindableStackCount === 0) {\n          this.ngContentSelectors.push(preparsedElement.selectAttr);\n        }\n\n        break;\n\n      case PreparsedElementType.STYLE:\n        let textContent = '';\n        ast.children.forEach(child => {\n          if (child instanceof Text$3) {\n            textContent += child.value;\n          }\n        });\n        this.styles.push(textContent);\n        break;\n\n      case PreparsedElementType.STYLESHEET:\n        this.styleUrls.push(preparsedElement.hrefAttr);\n        break;\n\n      default:\n        break;\n    }\n\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount++;\n    }\n\n    visitAll$1(this, ast.children);\n\n    if (preparsedElement.nonBindable) {\n      this.ngNonBindableStackCount--;\n    }\n\n    return null;\n  }\n\n  visitExpansion(ast, context) {\n    visitAll$1(this, ast.cases);\n  }\n\n  visitExpansionCase(ast, context) {\n    visitAll$1(this, ast.expression);\n  }\n\n  visitComment(ast, context) {\n    return null;\n  }\n\n  visitAttribute(ast, context) {\n    return null;\n  }\n\n  visitText(ast, context) {\n    return null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst QUERY_METADATA_IDENTIFIERS = [createViewChild, createViewChildren, createContentChild, createContentChildren];\n/*\r\n * Resolve a `Type` for {@link Directive}.\r\n *\r\n * This interface can be overridden by the application developer to create custom behavior.\r\n *\r\n * See {@link Compiler}\r\n */\n\nclass DirectiveResolver {\n  constructor(_reflector) {\n    this._reflector = _reflector;\n  }\n\n  isDirective(type) {\n    const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n\n    return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n  }\n\n  resolve(type, throwIfNotFound = true) {\n    const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n\n    if (typeMetadata) {\n      const metadata = findLast(typeMetadata, isDirectiveMetadata);\n\n      if (metadata) {\n        const propertyMetadata = this._reflector.propMetadata(type);\n\n        const guards = this._reflector.guards(type);\n\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);\n      }\n    }\n\n    if (throwIfNotFound) {\n      throw new Error(`No Directive annotation found on ${stringify(type)}`);\n    }\n\n    return null;\n  }\n\n  _mergeWithPropertyMetadata(dm, propertyMetadata, guards, directiveType) {\n    const inputs = [];\n    const outputs = [];\n    const host = {};\n    const queries = {};\n    Object.keys(propertyMetadata).forEach(propName => {\n      const input = findLast(propertyMetadata[propName], a => createInput.isTypeOf(a));\n\n      if (input) {\n        if (input.bindingPropertyName) {\n          inputs.push(`${propName}: ${input.bindingPropertyName}`);\n        } else {\n          inputs.push(propName);\n        }\n      }\n\n      const output = findLast(propertyMetadata[propName], a => createOutput.isTypeOf(a));\n\n      if (output) {\n        if (output.bindingPropertyName) {\n          outputs.push(`${propName}: ${output.bindingPropertyName}`);\n        } else {\n          outputs.push(propName);\n        }\n      }\n\n      const hostBindings = propertyMetadata[propName].filter(a => createHostBinding.isTypeOf(a));\n      hostBindings.forEach(hostBinding => {\n        if (hostBinding.hostPropertyName) {\n          const startWith = hostBinding.hostPropertyName[0];\n\n          if (startWith === '(') {\n            throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\n          } else if (startWith === '[') {\n            throw new Error(`@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\n          }\n\n          host[`[${hostBinding.hostPropertyName}]`] = propName;\n        } else {\n          host[`[${propName}]`] = propName;\n        }\n      });\n      const hostListeners = propertyMetadata[propName].filter(a => createHostListener.isTypeOf(a));\n      hostListeners.forEach(hostListener => {\n        const args = hostListener.args || [];\n        host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n      });\n      const query = findLast(propertyMetadata[propName], a => QUERY_METADATA_IDENTIFIERS.some(i => i.isTypeOf(a)));\n\n      if (query) {\n        queries[propName] = query;\n      }\n    });\n    return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);\n  }\n\n  _extractPublicName(def) {\n    return splitAtColon(def, [null, def])[1].trim();\n  }\n\n  _dedupeBindings(bindings) {\n    const names = new Set();\n    const publicNames = new Set();\n    const reversedResult = []; // go last to first to allow later entries to overwrite previous entries\n\n    for (let i = bindings.length - 1; i >= 0; i--) {\n      const binding = bindings[i];\n\n      const name = this._extractPublicName(binding);\n\n      publicNames.add(name);\n\n      if (!names.has(name)) {\n        names.add(name);\n        reversedResult.push(binding);\n      }\n    }\n\n    return reversedResult.reverse();\n  }\n\n  _merge(directive, inputs, outputs, host, queries, guards, directiveType) {\n    const mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n\n    const mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n\n    const mergedHost = directive.host ? Object.assign(Object.assign({}, directive.host), host) : host;\n    const mergedQueries = directive.queries ? Object.assign(Object.assign({}, directive.queries), queries) : queries;\n\n    if (createComponent.isTypeOf(directive)) {\n      const comp = directive;\n      return createComponent({\n        selector: comp.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: comp.exportAs,\n        moduleId: comp.moduleId,\n        queries: mergedQueries,\n        changeDetection: comp.changeDetection,\n        providers: comp.providers,\n        viewProviders: comp.viewProviders,\n        entryComponents: comp.entryComponents,\n        template: comp.template,\n        templateUrl: comp.templateUrl,\n        styles: comp.styles,\n        styleUrls: comp.styleUrls,\n        encapsulation: comp.encapsulation,\n        animations: comp.animations,\n        interpolation: comp.interpolation,\n        preserveWhitespaces: directive.preserveWhitespaces\n      });\n    } else {\n      return createDirective({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        queries: mergedQueries,\n        providers: directive.providers,\n        guards\n      });\n    }\n  }\n\n}\n\nfunction isDirectiveMetadata(type) {\n  return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);\n}\n\nfunction findLast(arr, condition) {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (condition(arr[i])) {\n      return arr[i];\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n/**\r\n * Extract translatable messages from an html AST\r\n */\n\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n  const visitor = new _Visitor$2(implicitTags, implicitAttrs);\n  return visitor.extract(nodes, interpolationConfig);\n}\n\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n  const visitor = new _Visitor$2(implicitTags, implicitAttrs);\n  return visitor.merge(nodes, translations, interpolationConfig);\n}\n\nclass ExtractionResult {\n  constructor(messages, errors) {\n    this.messages = messages;\n    this.errors = errors;\n  }\n\n}\n\nvar _VisitorMode = /*#__PURE__*/(() => {\n  _VisitorMode = _VisitorMode || {};\n  _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n  _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n  return _VisitorMode;\n})();\n\n/**\r\n * This Visitor is used:\r\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\r\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\r\n *\r\n * @internal\r\n */\nclass _Visitor$2 {\n  constructor(_implicitTags, _implicitAttrs) {\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n  }\n  /**\r\n   * Extracts the messages from the tree\r\n   */\n\n\n  extract(nodes, interpolationConfig) {\n    this._init(_VisitorMode.Extract, interpolationConfig);\n\n    nodes.forEach(node => node.visit(this, null));\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ExtractionResult(this._messages, this._errors);\n  }\n  /**\r\n   * Returns a tree where all translatable nodes are translated\r\n   */\n\n\n  merge(nodes, translations, interpolationConfig) {\n    this._init(_VisitorMode.Merge, interpolationConfig);\n\n    this._translations = translations; // Construct a single fake root element\n\n    const wrapper = new Element$1('wrapper', [], nodes, undefined, undefined, undefined);\n    const translatedNode = wrapper.visit(this, null);\n\n    if (this._inI18nBlock) {\n      this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n    }\n\n    return new ParseTreeResult(translatedNode.children, this._errors);\n  }\n\n  visitExpansionCase(icuCase, context) {\n    // Parse cases for translatable html attributes\n    const expression = visitAll$1(this, icuCase.expression, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n    }\n  }\n\n  visitExpansion(icu, context) {\n    this._mayBeAddBlockChildren(icu);\n\n    const wasInIcu = this._inIcu;\n\n    if (!this._inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this._isInTranslatableSection) {\n        this._addMessage([icu]);\n      }\n\n      this._inIcu = true;\n    }\n\n    const cases = visitAll$1(this, icu.cases, context);\n\n    if (this._mode === _VisitorMode.Merge) {\n      icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n    }\n\n    this._inIcu = wasInIcu;\n    return icu;\n  }\n\n  visitComment(comment, context) {\n    const isOpening = _isOpeningComment(comment);\n\n    if (isOpening && this._isInTranslatableSection) {\n      this._reportError(comment, 'Could not start a block inside a translatable section');\n\n      return;\n    }\n\n    const isClosing = _isClosingComment(comment);\n\n    if (isClosing && !this._inI18nBlock) {\n      this._reportError(comment, 'Trying to close an unopened block');\n\n      return;\n    }\n\n    if (!this._inI18nNode && !this._inIcu) {\n      if (!this._inI18nBlock) {\n        if (isOpening) {\n          // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n          if (!i18nCommentsWarned && console && console.warn) {\n            i18nCommentsWarned = true;\n            const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : ''; // TODO(ocombe): use a log service once there is a public one available\n\n            console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n          }\n\n          this._inI18nBlock = true;\n          this._blockStartDepth = this._depth;\n          this._blockChildren = [];\n          this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n\n          this._openTranslatableSection(comment);\n        }\n      } else {\n        if (isClosing) {\n          if (this._depth == this._blockStartDepth) {\n            this._closeTranslatableSection(comment, this._blockChildren);\n\n            this._inI18nBlock = false;\n\n            const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc); // merge attributes in sections\n\n\n            const nodes = this._translateMessage(comment, message);\n\n            return visitAll$1(this, nodes);\n          } else {\n            this._reportError(comment, 'I18N blocks should not cross element boundaries');\n\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  visitText(text, context) {\n    if (this._isInTranslatableSection) {\n      this._mayBeAddBlockChildren(text);\n    }\n\n    return text;\n  }\n\n  visitElement(el, context) {\n    this._mayBeAddBlockChildren(el);\n\n    this._depth++;\n    const wasInI18nNode = this._inI18nNode;\n    const wasInImplicitNode = this._inImplicitNode;\n    let childNodes = [];\n    let translatedChildNodes = undefined; // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n\n    const i18nAttr = _getI18nAttr(el);\n\n    const i18nMeta = i18nAttr ? i18nAttr.value : '';\n    const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu && !this._isInTranslatableSection;\n    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this._inImplicitNode = wasInImplicitNode || isImplicit;\n\n    if (!this._isInTranslatableSection && !this._inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._inI18nNode = true;\n\n        const message = this._addMessage(el.children, i18nMeta);\n\n        translatedChildNodes = this._translateMessage(el, message);\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        const isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) this._openTranslatableSection(el);\n        visitAll$1(this, el.children);\n        if (isTranslatable) this._closeTranslatableSection(el, el.children);\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n      }\n\n      if (this._mode == _VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        visitAll$1(this, el.children);\n      }\n    }\n\n    if (this._mode === _VisitorMode.Merge) {\n      const visitNodes = translatedChildNodes || el.children;\n      visitNodes.forEach(child => {\n        const visited = child.visit(this, context);\n\n        if (visited && !this._isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n\n    this._visitAttributesOf(el);\n\n    this._depth--;\n    this._inI18nNode = wasInI18nNode;\n    this._inImplicitNode = wasInImplicitNode;\n\n    if (this._mode === _VisitorMode.Merge) {\n      const translatedAttrs = this._translateAttributes(el);\n\n      return new Element$1(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n    }\n\n    return null;\n  }\n\n  visitAttribute(attribute, context) {\n    throw new Error('unreachable code');\n  }\n\n  _init(mode, interpolationConfig) {\n    this._mode = mode;\n    this._inI18nBlock = false;\n    this._inI18nNode = false;\n    this._depth = 0;\n    this._inIcu = false;\n    this._msgCountAtSectionStart = undefined;\n    this._errors = [];\n    this._messages = [];\n    this._inImplicitNode = false;\n    this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n  } // looks for translatable attributes\n\n\n  _visitAttributesOf(el) {\n    const explicitAttrNameToValue = {};\n    const implicitAttrNames = this._implicitAttrs[el.name] || [];\n    el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX)).forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value);\n    el.attrs.forEach(attr => {\n      if (attr.name in explicitAttrNameToValue) {\n        this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n      } else if (implicitAttrNames.some(name => attr.name === name)) {\n        this._addMessage([attr]);\n      }\n    });\n  } // add a translatable message\n\n\n  _addMessage(ast, msgMeta) {\n    if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n      // Do not create empty messages\n      return null;\n    }\n\n    const {\n      meaning,\n      description,\n      id\n    } = _parseMessageMeta(msgMeta);\n\n    const message = this._createI18nMessage(ast, meaning, description, id);\n\n    this._messages.push(message);\n\n    return message;\n  } // Translates the given message given the `TranslationBundle`\n  // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n  // no-op when called in extraction mode (returns [])\n\n\n  _translateMessage(el, message) {\n    if (message && this._mode === _VisitorMode.Merge) {\n      const nodes = this._translations.get(message);\n\n      if (nodes) {\n        return nodes;\n      }\n\n      this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n    }\n\n    return [];\n  } // translate the attributes of an element and remove i18n specific attributes\n\n\n  _translateAttributes(el) {\n    const attributes = el.attrs;\n    const i18nParsedMessageMeta = {};\n    attributes.forEach(attr => {\n      if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value);\n      }\n    });\n    const translatedAttributes = [];\n    attributes.forEach(attr => {\n      if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n        // strip i18n specific attributes\n        return;\n      }\n\n      if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n        const {\n          meaning,\n          description,\n          id\n        } = i18nParsedMessageMeta[attr.name];\n\n        const message = this._createI18nMessage([attr], meaning, description, id);\n\n        const nodes = this._translations.get(message);\n\n        if (nodes) {\n          if (nodes.length == 0) {\n            translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan, undefined\n            /* keySpan */\n            , undefined\n            /* valueSpan */\n            , undefined\n            /* valueTokens */\n            , undefined\n            /* i18n */\n            ));\n          } else if (nodes[0] instanceof Text$3) {\n            const value = nodes[0].value;\n            translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan, undefined\n            /* keySpan */\n            , undefined\n            /* valueSpan */\n            , undefined\n            /* valueTokens */\n            , undefined\n            /* i18n */\n            ));\n          } else {\n            this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n          }\n        } else {\n          this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n        }\n      } else {\n        translatedAttributes.push(attr);\n      }\n    });\n    return translatedAttributes;\n  }\n  /**\r\n   * Add the node as a child of the block when:\r\n   * - we are in a block,\r\n   * - we are not inside a ICU message (those are handled separately),\r\n   * - the node is a \"direct child\" of the block\r\n   */\n\n\n  _mayBeAddBlockChildren(node) {\n    if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n      this._blockChildren.push(node);\n    }\n  }\n  /**\r\n   * Marks the start of a section, see `_closeTranslatableSection`\r\n   */\n\n\n  _openTranslatableSection(node) {\n    if (this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section start');\n    } else {\n      this._msgCountAtSectionStart = this._messages.length;\n    }\n  }\n  /**\r\n   * A translatable section could be:\r\n   * - the content of translatable element,\r\n   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\r\n   */\n\n\n  get _isInTranslatableSection() {\n    return this._msgCountAtSectionStart !== void 0;\n  }\n  /**\r\n   * Terminates a section.\r\n   *\r\n   * If a section has only one significant children (comments not significant) then we should not\r\n   * keep the message from this children:\r\n   *\r\n   * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\r\n   * - one for the <p> content with meaning and description,\r\n   * - another one for the ICU message.\r\n   *\r\n   * In this case the last message is discarded as it contains less information (the AST is\r\n   * otherwise identical).\r\n   *\r\n   * Note that we should still keep messages extracted from attributes inside the section (ie in the\r\n   * ICU message here)\r\n   */\n\n\n  _closeTranslatableSection(node, directChildren) {\n    if (!this._isInTranslatableSection) {\n      this._reportError(node, 'Unexpected section end');\n\n      return;\n    }\n\n    const startIndex = this._msgCountAtSectionStart;\n    const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment$1 ? 0 : 1), 0);\n\n    if (significantChildren == 1) {\n      for (let i = this._messages.length - 1; i >= startIndex; i--) {\n        const ast = this._messages[i].nodes;\n\n        if (!(ast.length == 1 && ast[0] instanceof Text$1)) {\n          this._messages.splice(i, 1);\n\n          break;\n        }\n      }\n    }\n\n    this._msgCountAtSectionStart = undefined;\n  }\n\n  _reportError(node, msg) {\n    this._errors.push(new I18nError(node.sourceSpan, msg));\n  }\n\n}\n\nfunction _isOpeningComment(n) {\n  return !!(n instanceof Comment$1 && n.value && n.value.startsWith('i18n'));\n}\n\nfunction _isClosingComment(n) {\n  return !!(n instanceof Comment$1 && n.value && n.value === '/i18n');\n}\n\nfunction _getI18nAttr(p) {\n  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\n\nfunction _parseMessageMeta(i18n) {\n  if (!i18n) return {\n    meaning: '',\n    description: '',\n    id: ''\n  };\n  const idIndex = i18n.indexOf(ID_SEPARATOR);\n  const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n  const [meaningAndDesc, id] = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n  const [meaning, description] = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc];\n  return {\n    meaning,\n    description,\n    id: id.trim()\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass XmlTagDefinition {\n  constructor() {\n    this.closedByParent = false;\n    this.isVoid = false;\n    this.ignoreFirstLf = false;\n    this.canSelfClose = true;\n    this.preventNamespaceInheritance = false;\n  }\n\n  requireExtraParent(currentParent) {\n    return false;\n  }\n\n  isClosedByChild(name) {\n    return false;\n  }\n\n  getContentType() {\n    return TagContentType.PARSABLE_DATA;\n  }\n\n}\n\nconst _TAG_DEFINITION = /*#__PURE__*/new XmlTagDefinition();\n\nfunction getXmlTagDefinition(tagName) {\n  return _TAG_DEFINITION;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass XmlParser extends Parser {\n  constructor() {\n    super(getXmlTagDefinition);\n  }\n\n  parse(source, url, options) {\n    return super.parse(source, url, options);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _VERSION = '1.2';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2'; // TODO(vicb): make this a param (s/_/-/)\n\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG$1 = 'x';\nconst _MARKER_TAG = 'mrk';\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG$1 = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _ALT_TRANS_TAG = 'alt-trans';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context'; // https://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// https://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\n\nclass Xliff extends Serializer {\n  write(messages, locale) {\n    const visitor = new _WriteVisitor();\n    const transUnits = [];\n    messages.forEach(message => {\n      let contextTags = [];\n      message.sources.forEach(source => {\n        let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, {\n          purpose: 'location'\n        });\n        contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, {\n          'context-type': 'sourcefile'\n        }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, {\n          'context-type': 'linenumber'\n        }, [new Text$2(`${source.startLine}`)]), new CR(8));\n        contextTags.push(new CR(8), contextGroupTag);\n      });\n      const transUnit = new Tag(_UNIT_TAG, {\n        id: message.id,\n        datatype: 'html'\n      });\n      transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);\n\n      if (message.description) {\n        transUnit.children.push(new CR(8), new Tag('note', {\n          priority: '1',\n          from: 'description'\n        }, [new Text$2(message.description)]));\n      }\n\n      if (message.meaning) {\n        transUnit.children.push(new CR(8), new Tag('note', {\n          priority: '1',\n          from: 'meaning'\n        }, [new Text$2(message.meaning)]));\n      }\n\n      transUnit.children.push(new CR(6));\n      transUnits.push(new CR(6), transUnit);\n    });\n    const body = new Tag('body', {}, [...transUnits, new CR(4)]);\n    const file = new Tag('file', {\n      'source-language': locale || _DEFAULT_SOURCE_LANG,\n      datatype: 'plaintext',\n      original: 'ng2.template'\n    }, [new CR(4), body, new CR(2)]);\n    const xliff = new Tag('xliff', {\n      version: _VERSION,\n      xmlns: _XMLNS\n    }, [new CR(2), file, new CR()]);\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), xliff, new CR()]);\n  }\n\n  load(content, url) {\n    // xliff to xml nodes\n    const xliffParser = new XliffParser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xliffParser.parse(content, url); // xml nodes to i18n nodes\n\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n();\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const {\n        i18nNodes,\n        errors: e\n      } = converter.convert(msgIdToHtml[msgId], url);\n      errors.push(...e);\n      i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n\n    if (errors.length) {\n      throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n\n  digest(message) {\n    return digest(message);\n  }\n\n}\n\nclass _WriteVisitor {\n  visitText(text, context) {\n    return [new Text$2(text.value)];\n  }\n\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu, context) {\n    const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n    });\n    nodes.push(new Text$2(`}`));\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    const ctype = getCtypeForTag(ph.tag);\n\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [new Tag(_PLACEHOLDER_TAG$1, {\n        id: ph.startName,\n        ctype,\n        'equiv-text': `<${ph.tag}/>`\n      })];\n    }\n\n    const startTagPh = new Tag(_PLACEHOLDER_TAG$1, {\n      id: ph.startName,\n      ctype,\n      'equiv-text': `<${ph.tag}>`\n    });\n    const closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {\n      id: ph.closeName,\n      ctype,\n      'equiv-text': `</${ph.tag}>`\n    });\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph, context) {\n    return [new Tag(_PLACEHOLDER_TAG$1, {\n      id: ph.name,\n      'equiv-text': `{{${ph.value}}}`\n    })];\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ')}}`;\n    return [new Tag(_PLACEHOLDER_TAG$1, {\n      id: ph.name,\n      'equiv-text': equivText\n    })];\n  }\n\n  serialize(nodes) {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n\n} // TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\n\n\nclass XliffParser {\n  constructor() {\n    this._locale = null;\n  }\n\n  parse(xliff, url) {\n    this._unitMlString = null;\n    this._msgIdToHtml = {};\n    const xml = new XmlParser().parse(xliff, url);\n    this._errors = xml.errors;\n    visitAll$1(this, xml.rootNodes, null);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n\n  visitElement(element, context) {\n    switch (element.name) {\n      case _UNIT_TAG:\n        this._unitMlString = null;\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n\n        if (!idAttr) {\n          this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            visitAll$1(this, element.children, null);\n\n            if (typeof this._unitMlString === 'string') {\n              this._msgIdToHtml[id] = this._unitMlString;\n            } else {\n              this._addError(element, `Message ${id} misses a translation`);\n            }\n          }\n        }\n\n        break;\n      // ignore those tags\n\n      case _SOURCE_TAG$1:\n      case _SEGMENT_SOURCE_TAG:\n      case _ALT_TRANS_TAG:\n        break;\n\n      case _TARGET_TAG:\n        const innerTextStart = element.startSourceSpan.end.offset;\n        const innerTextEnd = element.endSourceSpan.start.offset;\n        const content = element.startSourceSpan.start.file.content;\n        const innerText = content.slice(innerTextStart, innerTextEnd);\n        this._unitMlString = innerText;\n        break;\n\n      case _FILE_TAG:\n        const localeAttr = element.attrs.find(attr => attr.name === 'target-language');\n\n        if (localeAttr) {\n          this._locale = localeAttr.value;\n        }\n\n        visitAll$1(this, element.children, null);\n        break;\n\n      default:\n        // TODO(vicb): assert file structure, xliff version\n        // For now only recurse on unhandled nodes\n        visitAll$1(this, element.children, null);\n    }\n  }\n\n  visitAttribute(attribute, context) {}\n\n  visitText(text, context) {}\n\n  visitComment(comment, context) {}\n\n  visitExpansion(expansion, context) {}\n\n  visitExpansionCase(expansionCase, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n} // Convert ml nodes (xliff syntax) to i18n nodes\n\n\nclass XmlToI18n {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll$1(this, xmlIcu.rootNodes));\n    return {\n      i18nNodes: i18nNodes,\n      errors: this._errors\n    };\n  }\n\n  visitText(text, context) {\n    return new Text$1(text.value, text.sourceSpan);\n  }\n\n  visitElement(el, context) {\n    if (el.name === _PLACEHOLDER_TAG$1) {\n      const nameAttr = el.attrs.find(attr => attr.name === 'id');\n\n      if (nameAttr) {\n        return new Placeholder('', nameAttr.value, el.sourceSpan);\n      }\n\n      this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"id\" attribute`);\n\n      return null;\n    }\n\n    if (el.name === _MARKER_TAG) {\n      return [].concat(...visitAll$1(this, el.children));\n    }\n\n    this._addError(el, `Unexpected tag`);\n\n    return null;\n  }\n\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll$1(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: visitAll$1(this, icuCase.expression)\n    };\n  }\n\n  visitComment(comment, context) {}\n\n  visitAttribute(attribute, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n}\n\nfunction getCtypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n      return 'lb';\n\n    case 'img':\n      return 'image';\n\n    default:\n      return `x-${tag}`;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _VERSION$1 = '2.0';\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0'; // TODO(vicb): make this a param (s/_/-/)\n\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\nconst _PLACEHOLDER_TAG$2 = 'ph';\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\nconst _MARKER_TAG$1 = 'mrk';\nconst _XLIFF_TAG = 'xliff';\nconst _SOURCE_TAG$2 = 'source';\nconst _TARGET_TAG$1 = 'target';\nconst _UNIT_TAG$1 = 'unit'; // https://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\n\nclass Xliff2 extends Serializer {\n  write(messages, locale) {\n    const visitor = new _WriteVisitor$1();\n    const units = [];\n    messages.forEach(message => {\n      const unit = new Tag(_UNIT_TAG$1, {\n        id: message.id\n      });\n      const notes = new Tag('notes');\n\n      if (message.description || message.meaning) {\n        if (message.description) {\n          notes.children.push(new CR(8), new Tag('note', {\n            category: 'description'\n          }, [new Text$2(message.description)]));\n        }\n\n        if (message.meaning) {\n          notes.children.push(new CR(8), new Tag('note', {\n            category: 'meaning'\n          }, [new Text$2(message.meaning)]));\n        }\n      }\n\n      message.sources.forEach(source => {\n        notes.children.push(new CR(8), new Tag('note', {\n          category: 'location'\n        }, [new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)]));\n      });\n      notes.children.push(new CR(6));\n      unit.children.push(new CR(6), notes);\n      const segment = new Tag('segment');\n      segment.children.push(new CR(8), new Tag(_SOURCE_TAG$2, {}, visitor.serialize(message.nodes)), new CR(6));\n      unit.children.push(new CR(6), segment, new CR(4));\n      units.push(new CR(4), unit);\n    });\n    const file = new Tag('file', {\n      'original': 'ng.template',\n      id: 'ngi18n'\n    }, [...units, new CR(2)]);\n    const xliff = new Tag(_XLIFF_TAG, {\n      version: _VERSION$1,\n      xmlns: _XMLNS$1,\n      srcLang: locale || _DEFAULT_SOURCE_LANG$1\n    }, [new CR(2), file, new CR()]);\n    return serialize([new Declaration({\n      version: '1.0',\n      encoding: 'UTF-8'\n    }), new CR(), xliff, new CR()]);\n  }\n\n  load(content, url) {\n    // xliff to xml nodes\n    const xliff2Parser = new Xliff2Parser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xliff2Parser.parse(content, url); // xml nodes to i18n nodes\n\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n$1();\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const {\n        i18nNodes,\n        errors: e\n      } = converter.convert(msgIdToHtml[msgId], url);\n      errors.push(...e);\n      i18nNodesByMsgId[msgId] = i18nNodes;\n    });\n\n    if (errors.length) {\n      throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n\n  digest(message) {\n    return decimalDigest(message);\n  }\n\n}\n\nclass _WriteVisitor$1 {\n  visitText(text, context) {\n    return [new Text$2(text.value)];\n  }\n\n  visitContainer(container, context) {\n    const nodes = [];\n    container.children.forEach(node => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu, context) {\n    const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n    Object.keys(icu.cases).forEach(c => {\n      nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n    });\n    nodes.push(new Text$2(`}`));\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph, context) {\n    const type = getTypeForTag(ph.tag);\n\n    if (ph.isVoid) {\n      const tagPh = new Tag(_PLACEHOLDER_TAG$2, {\n        id: (this._nextPlaceholderId++).toString(),\n        equiv: ph.startName,\n        type: type,\n        disp: `<${ph.tag}/>`\n      });\n      return [tagPh];\n    }\n\n    const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n      id: (this._nextPlaceholderId++).toString(),\n      equivStart: ph.startName,\n      equivEnd: ph.closeName,\n      type: type,\n      dispStart: `<${ph.tag}>`,\n      dispEnd: `</${ph.tag}>`\n    });\n    const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n\n    if (nodes.length) {\n      nodes.forEach(node => tagPc.children.push(node));\n    } else {\n      tagPc.children.push(new Text$2(''));\n    }\n\n    return [tagPc];\n  }\n\n  visitPlaceholder(ph, context) {\n    const idStr = (this._nextPlaceholderId++).toString();\n    return [new Tag(_PLACEHOLDER_TAG$2, {\n      id: idStr,\n      equiv: ph.name,\n      disp: `{{${ph.value}}}`\n    })];\n  }\n\n  visitIcuPlaceholder(ph, context) {\n    const cases = Object.keys(ph.value.cases).map(value => value + ' {...}').join(' ');\n    const idStr = (this._nextPlaceholderId++).toString();\n    return [new Tag(_PLACEHOLDER_TAG$2, {\n      id: idStr,\n      equiv: ph.name,\n      disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}`\n    })];\n  }\n\n  serialize(nodes) {\n    this._nextPlaceholderId = 0;\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n\n} // Extract messages as xml nodes from the xliff file\n\n\nclass Xliff2Parser {\n  constructor() {\n    this._locale = null;\n  }\n\n  parse(xliff, url) {\n    this._unitMlString = null;\n    this._msgIdToHtml = {};\n    const xml = new XmlParser().parse(xliff, url);\n    this._errors = xml.errors;\n    visitAll$1(this, xml.rootNodes, null);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n\n  visitElement(element, context) {\n    switch (element.name) {\n      case _UNIT_TAG$1:\n        this._unitMlString = null;\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n\n        if (!idAttr) {\n          this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            visitAll$1(this, element.children, null);\n\n            if (typeof this._unitMlString === 'string') {\n              this._msgIdToHtml[id] = this._unitMlString;\n            } else {\n              this._addError(element, `Message ${id} misses a translation`);\n            }\n          }\n        }\n\n        break;\n\n      case _SOURCE_TAG$2:\n        // ignore source message\n        break;\n\n      case _TARGET_TAG$1:\n        const innerTextStart = element.startSourceSpan.end.offset;\n        const innerTextEnd = element.endSourceSpan.start.offset;\n        const content = element.startSourceSpan.start.file.content;\n        const innerText = content.slice(innerTextStart, innerTextEnd);\n        this._unitMlString = innerText;\n        break;\n\n      case _XLIFF_TAG:\n        const localeAttr = element.attrs.find(attr => attr.name === 'trgLang');\n\n        if (localeAttr) {\n          this._locale = localeAttr.value;\n        }\n\n        const versionAttr = element.attrs.find(attr => attr.name === 'version');\n\n        if (versionAttr) {\n          const version = versionAttr.value;\n\n          if (version !== '2.0') {\n            this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\n          } else {\n            visitAll$1(this, element.children, null);\n          }\n        }\n\n        break;\n\n      default:\n        visitAll$1(this, element.children, null);\n    }\n  }\n\n  visitAttribute(attribute, context) {}\n\n  visitText(text, context) {}\n\n  visitComment(comment, context) {}\n\n  visitExpansion(expansion, context) {}\n\n  visitExpansionCase(expansionCase, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n} // Convert ml nodes (xliff syntax) to i18n nodes\n\n\nclass XmlToI18n$1 {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : [].concat(...visitAll$1(this, xmlIcu.rootNodes));\n    return {\n      i18nNodes,\n      errors: this._errors\n    };\n  }\n\n  visitText(text, context) {\n    return new Text$1(text.value, text.sourceSpan);\n  }\n\n  visitElement(el, context) {\n    switch (el.name) {\n      case _PLACEHOLDER_TAG$2:\n        const nameAttr = el.attrs.find(attr => attr.name === 'equiv');\n\n        if (nameAttr) {\n          return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n        }\n\n        this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equiv\" attribute`);\n\n        break;\n\n      case _PLACEHOLDER_SPANNING_TAG:\n        const startAttr = el.attrs.find(attr => attr.name === 'equivStart');\n        const endAttr = el.attrs.find(attr => attr.name === 'equivEnd');\n\n        if (!startAttr) {\n          this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equivStart\" attribute`);\n        } else if (!endAttr) {\n          this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equivEnd\" attribute`);\n        } else {\n          const startId = startAttr.value;\n          const endId = endAttr.value;\n          const nodes = [];\n          return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\n        }\n\n        break;\n\n      case _MARKER_TAG$1:\n        return [].concat(...visitAll$1(this, el.children));\n\n      default:\n        this._addError(el, `Unexpected tag`);\n\n    }\n\n    return null;\n  }\n\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll$1(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: [].concat(...visitAll$1(this, icuCase.expression))\n    };\n  }\n\n  visitComment(comment, context) {}\n\n  visitAttribute(attribute, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n}\n\nfunction getTypeForTag(tag) {\n  switch (tag.toLowerCase()) {\n    case 'br':\n    case 'b':\n    case 'i':\n    case 'u':\n      return 'fmt';\n\n    case 'img':\n      return 'image';\n\n    case 'a':\n      return 'link';\n\n    default:\n      return 'other';\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG$3 = 'ph';\n\nclass Xtb extends Serializer {\n  write(messages, locale) {\n    throw new Error('Unsupported');\n  }\n\n  load(content, url) {\n    // xtb to xml nodes\n    const xtbParser = new XtbParser();\n    const {\n      locale,\n      msgIdToHtml,\n      errors\n    } = xtbParser.parse(content, url); // xml nodes to i18n nodes\n\n    const i18nNodesByMsgId = {};\n    const converter = new XmlToI18n$2(); // Because we should be able to load xtb files that rely on features not supported by angular,\n    // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n    // converted\n\n    Object.keys(msgIdToHtml).forEach(msgId => {\n      const valueFn = function () {\n        const {\n          i18nNodes,\n          errors\n        } = converter.convert(msgIdToHtml[msgId], url);\n\n        if (errors.length) {\n          throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n\n        return i18nNodes;\n      };\n\n      createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n    });\n\n    if (errors.length) {\n      throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n    }\n\n    return {\n      locale: locale,\n      i18nNodesByMsgId\n    };\n  }\n\n  digest(message) {\n    return digest$1(message);\n  }\n\n  createNameMapper(message) {\n    return new SimplePlaceholderMapper(message, toPublicName);\n  }\n\n}\n\nfunction createLazyProperty(messages, id, valueFn) {\n  Object.defineProperty(messages, id, {\n    configurable: true,\n    enumerable: true,\n    get: function () {\n      const value = valueFn();\n      Object.defineProperty(messages, id, {\n        enumerable: true,\n        value\n      });\n      return value;\n    },\n    set: _ => {\n      throw new Error('Could not overwrite an XTB translation');\n    }\n  });\n} // Extract messages as xml nodes from the xtb file\n\n\nclass XtbParser {\n  constructor() {\n    this._locale = null;\n  }\n\n  parse(xtb, url) {\n    this._bundleDepth = 0;\n    this._msgIdToHtml = {}; // We can not parse the ICU messages at this point as some messages might not originate\n    // from Angular that could not be lex'd.\n\n    const xml = new XmlParser().parse(xtb, url);\n    this._errors = xml.errors;\n    visitAll$1(this, xml.rootNodes);\n    return {\n      msgIdToHtml: this._msgIdToHtml,\n      errors: this._errors,\n      locale: this._locale\n    };\n  }\n\n  visitElement(element, context) {\n    switch (element.name) {\n      case _TRANSLATIONS_TAG:\n        this._bundleDepth++;\n\n        if (this._bundleDepth > 1) {\n          this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n        }\n\n        const langAttr = element.attrs.find(attr => attr.name === 'lang');\n\n        if (langAttr) {\n          this._locale = langAttr.value;\n        }\n\n        visitAll$1(this, element.children, null);\n        this._bundleDepth--;\n        break;\n\n      case _TRANSLATION_TAG:\n        const idAttr = element.attrs.find(attr => attr.name === 'id');\n\n        if (!idAttr) {\n          this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n        } else {\n          const id = idAttr.value;\n\n          if (this._msgIdToHtml.hasOwnProperty(id)) {\n            this._addError(element, `Duplicated translations for msg ${id}`);\n          } else {\n            const innerTextStart = element.startSourceSpan.end.offset;\n            const innerTextEnd = element.endSourceSpan.start.offset;\n            const content = element.startSourceSpan.start.file.content;\n            const innerText = content.slice(innerTextStart, innerTextEnd);\n            this._msgIdToHtml[id] = innerText;\n          }\n        }\n\n        break;\n\n      default:\n        this._addError(element, 'Unexpected tag');\n\n    }\n  }\n\n  visitAttribute(attribute, context) {}\n\n  visitText(text, context) {}\n\n  visitComment(comment, context) {}\n\n  visitExpansion(expansion, context) {}\n\n  visitExpansionCase(expansionCase, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n} // Convert ml nodes (xtb syntax) to i18n nodes\n\n\nclass XmlToI18n$2 {\n  convert(message, url) {\n    const xmlIcu = new XmlParser().parse(message, url, {\n      tokenizeExpansionForms: true\n    });\n    this._errors = xmlIcu.errors;\n    const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll$1(this, xmlIcu.rootNodes);\n    return {\n      i18nNodes,\n      errors: this._errors\n    };\n  }\n\n  visitText(text, context) {\n    return new Text$1(text.value, text.sourceSpan);\n  }\n\n  visitExpansion(icu, context) {\n    const caseMap = {};\n    visitAll$1(this, icu.cases).forEach(c => {\n      caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n    });\n    return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n  }\n\n  visitExpansionCase(icuCase, context) {\n    return {\n      value: icuCase.value,\n      nodes: visitAll$1(this, icuCase.expression)\n    };\n  }\n\n  visitElement(el, context) {\n    if (el.name === _PLACEHOLDER_TAG$3) {\n      const nameAttr = el.attrs.find(attr => attr.name === 'name');\n\n      if (nameAttr) {\n        return new Placeholder('', nameAttr.value, el.sourceSpan);\n      }\n\n      this._addError(el, `<${_PLACEHOLDER_TAG$3}> misses the \"name\" attribute`);\n    } else {\n      this._addError(el, `Unexpected tag`);\n    }\n\n    return null;\n  }\n\n  visitComment(comment, context) {}\n\n  visitAttribute(attribute, context) {}\n\n  _addError(node, message) {\n    this._errors.push(new I18nError(node.sourceSpan, message));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A container for translated messages\r\n */\n\n\nclass TranslationBundle {\n  constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this.digest = digest;\n    this.mapperFactory = mapperFactory;\n    this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n  } // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n\n\n  static load(content, url, serializer, missingTranslationStrategy, console) {\n    const {\n      locale,\n      i18nNodesByMsgId\n    } = serializer.load(content, url);\n\n    const digestFn = m => serializer.digest(m);\n\n    const mapperFactory = m => serializer.createNameMapper(m);\n\n    return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n  } // Returns the translation as HTML nodes from the given source message.\n\n\n  get(srcMsg) {\n    const html = this._i18nToHtml.convert(srcMsg);\n\n    if (html.errors.length) {\n      throw new Error(html.errors.join('\\n'));\n    }\n\n    return html.nodes;\n  }\n\n  has(srcMsg) {\n    return this.digest(srcMsg) in this._i18nNodesByMsgId;\n  }\n\n}\n\nclass I18nToHtmlVisitor {\n  constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n    this._i18nNodesByMsgId = _i18nNodesByMsgId;\n    this._locale = _locale;\n    this._digest = _digest;\n    this._mapperFactory = _mapperFactory;\n    this._missingTranslationStrategy = _missingTranslationStrategy;\n    this._console = _console;\n    this._contextStack = [];\n    this._errors = [];\n  }\n\n  convert(srcMsg) {\n    this._contextStack.length = 0;\n    this._errors.length = 0; // i18n to text\n\n    const text = this._convertToText(srcMsg); // text to html\n\n\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const html = new HtmlParser().parse(text, url, {\n      tokenizeExpansionForms: true\n    });\n    return {\n      nodes: html.rootNodes,\n      errors: [...this._errors, ...html.errors]\n    };\n  }\n\n  visitText(text, context) {\n    // `convert()` uses an `HtmlParser` to return `html.Node`s\n    // we should then make sure that any special characters are escaped\n    return escapeXml(text.value);\n  }\n\n  visitContainer(container, context) {\n    return container.children.map(n => n.visit(this)).join('');\n  }\n\n  visitIcu(icu, context) {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`); // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression].text : icu.expression;\n    return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n  }\n\n  visitPlaceholder(ph, context) {\n    const phName = this._mapper(ph.name);\n\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this._srcMsg.placeholders[phName].text;\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n\n    return '';\n  } // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n\n\n  visitTagPlaceholder(ph, context) {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n\n    const children = ph.children.map(c => c.visit(this)).join('');\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  } // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n\n\n  visitIcuPlaceholder(ph, context) {\n    // An ICU placeholder references the source message to be serialized\n    return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n  /**\r\n   * Convert a source message to a translated text string:\r\n   * - text nodes are replaced with their translation,\r\n   * - placeholders are replaced with their content,\r\n   * - ICU nodes are converted to ICU expressions.\r\n   */\n\n\n  _convertToText(srcMsg) {\n    const id = this._digest(srcMsg);\n\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes;\n\n    this._contextStack.push({\n      msg: this._srcMsg,\n      mapper: this._mapper\n    });\n\n    this._srcMsg = srcMsg;\n\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n\n      this._mapper = name => mapper ? mapper.toInternalName(name) : name;\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n      } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n\n        this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n      }\n\n      nodes = srcMsg.nodes;\n\n      this._mapper = name => name;\n    }\n\n    const text = nodes.map(node => node.visit(this)).join('');\n\n    const context = this._contextStack.pop();\n\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n\n  _addError(el, msg) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass I18NHtmlParser {\n  constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\n    this._htmlParser = _htmlParser;\n\n    if (translations) {\n      const serializer = createSerializer(translationsFormat);\n      this._translationBundle = TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n    } else {\n      this._translationBundle = new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n    }\n  }\n\n  parse(source, url, options = {}) {\n    const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n\n    const parseResult = this._htmlParser.parse(source, url, Object.assign({\n      interpolationConfig\n    }, options));\n\n    if (parseResult.errors.length) {\n      return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n    }\n\n    return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n  }\n\n}\n\nfunction createSerializer(format) {\n  format = (format || 'xlf').toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return new Xmb();\n\n    case 'xtb':\n      return new Xtb();\n\n    case 'xliff2':\n    case 'xlf2':\n      return new Xliff2();\n\n    case 'xliff':\n    case 'xlf':\n    default:\n      return new Xliff();\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst QUOTED_KEYS = '$quoted$';\n\nfunction convertValueToOutputAst(ctx, value, type = null) {\n  return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\n\nclass _ValueOutputAstTransformer {\n  constructor(ctx) {\n    this.ctx = ctx;\n  }\n\n  visitArray(arr, type) {\n    const values = []; // Note Array.map() must not be used to convert the values because it will\n    // skip over empty elements in arrays constructed using `new Array(length)`,\n    // resulting in `undefined` elements. This breaks the type guarantee that\n    // all values in `o.LiteralArrayExpr` are of type `o.Expression`.\n    // See test case in `value_util_spec.ts`.\n\n    for (let i = 0; i < arr.length; ++i) {\n      values.push(visitValue(arr[i], this, null\n      /* context */\n      ));\n    }\n\n    return literalArr(values, type);\n  }\n\n  visitStringMap(map, type) {\n    const entries = [];\n    const quotedSet = new Set(map && map[QUOTED_KEYS]);\n    Object.keys(map).forEach(key => {\n      entries.push(new LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\n    });\n    return new LiteralMapExpr(entries, type);\n  }\n\n  visitPrimitive(value, type) {\n    return literal(value, type);\n  }\n\n  visitOther(value, type) {\n    if (value instanceof Expression) {\n      return value;\n    } else {\n      return this.ctx.importExpr(value);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction mapEntry$1(key, value) {\n  return {\n    key,\n    value,\n    quoted: false\n  };\n}\n\nclass InjectableCompiler {\n  constructor(reflector, alwaysGenerateDef) {\n    this.reflector = reflector;\n    this.alwaysGenerateDef = alwaysGenerateDef;\n    this.tokenInjector = reflector.resolveExternalReference(Identifiers$1.Injector);\n  }\n\n  depsArray(deps, ctx) {\n    return deps.map(dep => {\n      let token = dep;\n      let args = [token];\n      let flags = 0\n      /* Default */\n      ;\n\n      if (Array.isArray(dep)) {\n        for (let i = 0; i < dep.length; i++) {\n          const v = dep[i];\n\n          if (v) {\n            if (v.ngMetadataName === 'Optional') {\n              flags |= 8\n              /* Optional */\n              ;\n            } else if (v.ngMetadataName === 'SkipSelf') {\n              flags |= 4\n              /* SkipSelf */\n              ;\n            } else if (v.ngMetadataName === 'Self') {\n              flags |= 2\n              /* Self */\n              ;\n            } else if (v.ngMetadataName === 'Inject') {\n              token = v.token;\n            } else {\n              token = v;\n            }\n          }\n        }\n      }\n\n      let tokenExpr;\n\n      if (typeof token === 'string') {\n        tokenExpr = literal(token);\n      } else if (token === this.tokenInjector) {\n        tokenExpr = importExpr(Identifiers$1.INJECTOR);\n      } else {\n        tokenExpr = ctx.importExpr(token);\n      }\n\n      if (flags !== 0\n      /* Default */\n      ) {\n        args = [tokenExpr, literal(flags)];\n      } else {\n        args = [tokenExpr];\n      }\n\n      return importExpr(Identifiers$1.inject).callFn(args);\n    });\n  }\n\n  factoryFor(injectable, ctx) {\n    let retValue;\n\n    if (injectable.useExisting) {\n      retValue = importExpr(Identifiers$1.inject).callFn([ctx.importExpr(injectable.useExisting)]);\n    } else if (injectable.useFactory) {\n      const deps = injectable.deps || [];\n\n      if (deps.length > 0) {\n        retValue = ctx.importExpr(injectable.useFactory).callFn(this.depsArray(deps, ctx));\n      } else {\n        return ctx.importExpr(injectable.useFactory);\n      }\n    } else if (injectable.useValue) {\n      retValue = convertValueToOutputAst(ctx, injectable.useValue);\n    } else {\n      const clazz = injectable.useClass || injectable.symbol;\n      const depArgs = this.depsArray(this.reflector.parameters(clazz), ctx);\n      retValue = new InstantiateExpr(ctx.importExpr(clazz), depArgs);\n    }\n\n    return fn([], [new ReturnStatement(retValue)], undefined, undefined, injectable.symbol.name + '_Factory');\n  }\n\n  injectableDef(injectable, ctx) {\n    let providedIn = NULL_EXPR;\n\n    if (injectable.providedIn !== undefined) {\n      if (injectable.providedIn === null) {\n        providedIn = NULL_EXPR;\n      } else if (typeof injectable.providedIn === 'string') {\n        providedIn = literal(injectable.providedIn);\n      } else {\n        providedIn = ctx.importExpr(injectable.providedIn);\n      }\n    }\n\n    const def = [mapEntry$1('factory', this.factoryFor(injectable, ctx)), mapEntry$1('token', ctx.importExpr(injectable.type.reference)), mapEntry$1('providedIn', providedIn)];\n    return importExpr(Identifiers.ɵɵdefineInjectable).callFn([literalMap(def)], undefined, true);\n  }\n\n  compile(injectable, ctx) {\n    if (this.alwaysGenerateDef || injectable.providedIn !== undefined) {\n      const className = identifierName(injectable.type);\n      const clazz = new ClassStmt(className, null, [new ClassField('ɵprov', INFERRED_TYPE, [StmtModifier.Static], this.injectableDef(injectable, ctx))], [], new ClassMethod(null, [], []), []);\n      ctx.statements.push(clazz);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nconst GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nconst JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nconst JIT_SUMMARY_NAME = /NgSummary$/;\n\nfunction ngfactoryFilePath(filePath, forceSourceFile = false) {\n  const urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n  return `${urlWithSuffix[0]}.ngfactory${normalizeGenFileSuffix(urlWithSuffix[1])}`;\n}\n\nfunction stripGeneratedFileSuffix(filePath) {\n  return filePath.replace(GENERATED_FILE, '.');\n}\n\nfunction isGeneratedFile(filePath) {\n  return GENERATED_FILE.test(filePath);\n}\n\nfunction splitTypescriptSuffix(path, forceSourceFile = false) {\n  if (path.endsWith('.d.ts')) {\n    return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n  }\n\n  const lastDot = path.lastIndexOf('.');\n\n  if (lastDot !== -1) {\n    return [path.substring(0, lastDot), path.substring(lastDot)];\n  }\n\n  return [path, ''];\n}\n\nfunction normalizeGenFileSuffix(srcFileSuffix) {\n  return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n}\n\nfunction summaryFileName(fileName) {\n  const fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n  return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\n\nfunction summaryForJitFileName(fileName, forceSourceFile = false) {\n  const urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n  return `${urlWithSuffix[0]}.ngsummary${urlWithSuffix[1]}`;\n}\n\nfunction stripSummaryForJitFileSuffix(filePath) {\n  return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\n\nfunction summaryForJitName(symbolName) {\n  return `${symbolName}NgSummary`;\n}\n\nfunction stripSummaryForJitNameSuffix(symbolName) {\n  return symbolName.replace(JIT_SUMMARY_NAME, '');\n}\n\nconst LOWERED_SYMBOL = /\\u0275\\d+/;\n\nfunction isLoweredSymbol(name) {\n  return LOWERED_SYMBOL.test(name);\n}\n\nfunction createLoweredSymbol(id) {\n  return `\\u0275${id}`;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar LifecycleHooks = /*#__PURE__*/(() => {\n  LifecycleHooks = LifecycleHooks || {};\n  LifecycleHooks[LifecycleHooks[\"OnInit\"] = 0] = \"OnInit\";\n  LifecycleHooks[LifecycleHooks[\"OnDestroy\"] = 1] = \"OnDestroy\";\n  LifecycleHooks[LifecycleHooks[\"DoCheck\"] = 2] = \"DoCheck\";\n  LifecycleHooks[LifecycleHooks[\"OnChanges\"] = 3] = \"OnChanges\";\n  LifecycleHooks[LifecycleHooks[\"AfterContentInit\"] = 4] = \"AfterContentInit\";\n  LifecycleHooks[LifecycleHooks[\"AfterContentChecked\"] = 5] = \"AfterContentChecked\";\n  LifecycleHooks[LifecycleHooks[\"AfterViewInit\"] = 6] = \"AfterViewInit\";\n  LifecycleHooks[LifecycleHooks[\"AfterViewChecked\"] = 7] = \"AfterViewChecked\";\n  return LifecycleHooks;\n})();\nconst LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];\n\nfunction hasLifecycleHook(reflector, hook, token) {\n  return reflector.hasLifecycleHook(token, getHookName(hook));\n}\n\nfunction getAllLifecycleHooks(reflector, token) {\n  return LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(reflector, hook, token));\n}\n\nfunction getHookName(hook) {\n  switch (hook) {\n    case LifecycleHooks.OnInit:\n      return 'ngOnInit';\n\n    case LifecycleHooks.OnDestroy:\n      return 'ngOnDestroy';\n\n    case LifecycleHooks.DoCheck:\n      return 'ngDoCheck';\n\n    case LifecycleHooks.OnChanges:\n      return 'ngOnChanges';\n\n    case LifecycleHooks.AfterContentInit:\n      return 'ngAfterContentInit';\n\n    case LifecycleHooks.AfterContentChecked:\n      return 'ngAfterContentChecked';\n\n    case LifecycleHooks.AfterViewInit:\n      return 'ngAfterViewInit';\n\n    case LifecycleHooks.AfterViewChecked:\n      return 'ngAfterViewChecked';\n\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected = hook;\n      throw new Error(`unexpected ${unexpected}`);\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst ERROR_COMPONENT_TYPE = 'ngComponentType';\nconst MISSING_NG_MODULE_METADATA_ERROR_DATA = 'ngMissingNgModuleMetadataErrorData';\n\nfunction getMissingNgModuleMetadataErrorData(error) {\n  var _a;\n\n  return (_a = error[MISSING_NG_MODULE_METADATA_ERROR_DATA]) !== null && _a !== void 0 ? _a : null;\n} // Design notes:\n// - don't lazily create metadata:\n//   For some metadata, we need to do async work sometimes,\n//   so the user has to kick off this loading.\n//   But we want to report errors even when the async work is\n//   not required to check that the user would have been able\n//   to wait correctly.\n\n\nclass CompileMetadataResolver {\n  constructor(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n    this._config = _config;\n    this._htmlParser = _htmlParser;\n    this._ngModuleResolver = _ngModuleResolver;\n    this._directiveResolver = _directiveResolver;\n    this._pipeResolver = _pipeResolver;\n    this._summaryResolver = _summaryResolver;\n    this._schemaRegistry = _schemaRegistry;\n    this._directiveNormalizer = _directiveNormalizer;\n    this._console = _console;\n    this._staticSymbolCache = _staticSymbolCache;\n    this._reflector = _reflector;\n    this._errorCollector = _errorCollector;\n    this._nonNormalizedDirectiveCache = new Map();\n    this._directiveCache = new Map();\n    this._summaryCache = new Map();\n    this._pipeCache = new Map();\n    this._ngModuleCache = new Map();\n    this._ngModuleOfTypes = new Map();\n    this._shallowModuleCache = new Map();\n  }\n\n  getReflector() {\n    return this._reflector;\n  }\n\n  clearCacheFor(type) {\n    const dirMeta = this._directiveCache.get(type);\n\n    this._directiveCache.delete(type);\n\n    this._nonNormalizedDirectiveCache.delete(type);\n\n    this._summaryCache.delete(type);\n\n    this._pipeCache.delete(type);\n\n    this._ngModuleOfTypes.delete(type); // Clear all of the NgModule as they contain transitive information!\n\n\n    this._ngModuleCache.clear();\n\n    if (dirMeta) {\n      this._directiveNormalizer.clearCacheFor(dirMeta);\n    }\n  }\n\n  clearCache() {\n    this._directiveCache.clear();\n\n    this._nonNormalizedDirectiveCache.clear();\n\n    this._summaryCache.clear();\n\n    this._pipeCache.clear();\n\n    this._ngModuleCache.clear();\n\n    this._ngModuleOfTypes.clear();\n\n    this._directiveNormalizer.clearCache();\n  }\n\n  _createProxyClass(baseType, name) {\n    let delegate = null;\n\n    const proxyClass = function () {\n      if (!delegate) {\n        throw new Error(`Illegal state: Class ${name} for type ${stringify(baseType)} is not compiled yet!`);\n      }\n\n      return delegate.apply(this, arguments);\n    };\n\n    proxyClass.setDelegate = d => {\n      delegate = d;\n      proxyClass.prototype = d.prototype;\n    }; // Make stringify work correctly\n\n\n    proxyClass.overriddenName = name;\n    return proxyClass;\n  }\n\n  getGeneratedClass(dirType, name) {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n    } else {\n      return this._createProxyClass(dirType, name);\n    }\n  }\n\n  getComponentViewClass(dirType) {\n    return this.getGeneratedClass(dirType, viewClassName(dirType, 0));\n  }\n\n  getHostComponentViewClass(dirType) {\n    return this.getGeneratedClass(dirType, hostViewClassName(dirType));\n  }\n\n  getHostComponentType(dirType) {\n    const name = `${identifierName({\n      reference: dirType\n    })}_Host`;\n\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(dirType.filePath, name);\n    }\n\n    return this._createProxyClass(dirType, name);\n  }\n\n  getRendererType(dirType) {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));\n    } else {\n      // returning an object as proxy,\n      // that we fill later during runtime compilation.\n      return {};\n    }\n  }\n\n  getComponentFactory(selector, dirType, inputs, outputs) {\n    if (dirType instanceof StaticSymbol) {\n      return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));\n    } else {\n      const hostView = this.getHostComponentViewClass(dirType); // Note: ngContentSelectors will be filled later once the template is\n      // loaded.\n\n      const createComponentFactory = this._reflector.resolveExternalReference(Identifiers$1.createComponentFactory);\n\n      return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);\n    }\n  }\n\n  initComponentFactory(factory, ngContentSelectors) {\n    if (!(factory instanceof StaticSymbol)) {\n      factory.ngContentSelectors.push(...ngContentSelectors);\n    }\n  }\n\n  _loadSummary(type, kind) {\n    let typeSummary = this._summaryCache.get(type);\n\n    if (!typeSummary) {\n      const summary = this._summaryResolver.resolveSummary(type);\n\n      typeSummary = summary ? summary.type : null;\n\n      this._summaryCache.set(type, typeSummary || null);\n    }\n\n    return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n  }\n\n  getHostComponentMetadata(compMeta, hostViewType) {\n    const hostType = this.getHostComponentType(compMeta.type.reference);\n\n    if (!hostViewType) {\n      hostViewType = this.getHostComponentViewClass(hostType);\n    } // Note: ! is ok here as this method should only be called with normalized directive\n    // metadata, which always fills in the selector.\n\n\n    const template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n    const templateUrl = '';\n\n    const htmlAst = this._htmlParser.parse(template, templateUrl);\n\n    return CompileDirectiveMetadata.create({\n      isHost: true,\n      type: {\n        reference: hostType,\n        diDeps: [],\n        lifecycleHooks: []\n      },\n      template: new CompileTemplateMetadata({\n        encapsulation: ViewEncapsulation.None,\n        template,\n        templateUrl,\n        htmlAst,\n        styles: [],\n        styleUrls: [],\n        ngContentSelectors: [],\n        animations: [],\n        isInline: true,\n        externalStylesheets: [],\n        interpolation: null,\n        preserveWhitespaces: false\n      }),\n      exportAs: null,\n      changeDetection: ChangeDetectionStrategy.Default,\n      inputs: [],\n      outputs: [],\n      host: {},\n      isComponent: true,\n      selector: '*',\n      providers: [],\n      viewProviders: [],\n      queries: [],\n      guards: {},\n      viewQueries: [],\n      componentViewType: hostViewType,\n      rendererType: {\n        id: '__Host__',\n        encapsulation: ViewEncapsulation.None,\n        styles: [],\n        data: {}\n      },\n      entryComponents: [],\n      componentFactory: null\n    });\n  }\n\n  loadDirectiveMetadata(ngModuleType, directiveType, isSync) {\n    if (this._directiveCache.has(directiveType)) {\n      return null;\n    }\n\n    directiveType = resolveForwardRef(directiveType);\n    const {\n      annotation,\n      metadata\n    } = this.getNonNormalizedDirectiveMetadata(directiveType);\n\n    const createDirectiveMetadata = templateMetadata => {\n      const normalizedDirMeta = new CompileDirectiveMetadata({\n        isHost: false,\n        type: metadata.type,\n        isComponent: metadata.isComponent,\n        selector: metadata.selector,\n        exportAs: metadata.exportAs,\n        changeDetection: metadata.changeDetection,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        hostListeners: metadata.hostListeners,\n        hostProperties: metadata.hostProperties,\n        hostAttributes: metadata.hostAttributes,\n        providers: metadata.providers,\n        viewProviders: metadata.viewProviders,\n        queries: metadata.queries,\n        guards: metadata.guards,\n        viewQueries: metadata.viewQueries,\n        entryComponents: metadata.entryComponents,\n        componentViewType: metadata.componentViewType,\n        rendererType: metadata.rendererType,\n        componentFactory: metadata.componentFactory,\n        template: templateMetadata\n      });\n\n      if (templateMetadata) {\n        this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);\n      }\n\n      this._directiveCache.set(directiveType, normalizedDirMeta);\n\n      this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n\n      return null;\n    };\n\n    if (metadata.isComponent) {\n      const template = metadata.template;\n\n      const templateMeta = this._directiveNormalizer.normalizeTemplate({\n        ngModuleType,\n        componentType: directiveType,\n        moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n        encapsulation: template.encapsulation,\n        template: template.template,\n        templateUrl: template.templateUrl,\n        styles: template.styles,\n        styleUrls: template.styleUrls,\n        animations: template.animations,\n        interpolation: template.interpolation,\n        preserveWhitespaces: template.preserveWhitespaces\n      });\n\n      if (isPromise(templateMeta) && isSync) {\n        this._reportError(componentStillLoadingError(directiveType), directiveType);\n\n        return null;\n      }\n\n      return SyncAsync.then(templateMeta, createDirectiveMetadata);\n    } else {\n      // directive\n      createDirectiveMetadata(null);\n      return null;\n    }\n  }\n\n  getNonNormalizedDirectiveMetadata(directiveType) {\n    directiveType = resolveForwardRef(directiveType);\n\n    if (!directiveType) {\n      return null;\n    }\n\n    let cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n\n    const dirMeta = this._directiveResolver.resolve(directiveType, false);\n\n    if (!dirMeta) {\n      return null;\n    }\n\n    let nonNormalizedTemplateMetadata = undefined;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // component\n      const compMeta = dirMeta;\n      assertArrayOfStrings('styles', compMeta.styles);\n      assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n      assertInterpolationSymbols('interpolation', compMeta.interpolation);\n      const animations = compMeta.animations;\n      nonNormalizedTemplateMetadata = new CompileTemplateMetadata({\n        encapsulation: noUndefined(compMeta.encapsulation),\n        template: noUndefined(compMeta.template),\n        templateUrl: noUndefined(compMeta.templateUrl),\n        htmlAst: null,\n        styles: compMeta.styles || [],\n        styleUrls: compMeta.styleUrls || [],\n        animations: animations || [],\n        interpolation: noUndefined(compMeta.interpolation),\n        isInline: !!compMeta.template,\n        externalStylesheets: [],\n        ngContentSelectors: [],\n        preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces)\n      });\n    }\n\n    let changeDetectionStrategy = null;\n    let viewProviders = [];\n    let entryComponentMetadata = [];\n    let selector = dirMeta.selector;\n\n    if (createComponent.isTypeOf(dirMeta)) {\n      // Component\n      const compMeta = dirMeta;\n      changeDetectionStrategy = compMeta.changeDetection;\n\n      if (compMeta.viewProviders) {\n        viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, `viewProviders for \"${stringifyType(directiveType)}\"`, [], directiveType);\n      }\n\n      if (compMeta.entryComponents) {\n        entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents).map(type => this._getEntryComponentMetadata(type)).concat(entryComponentMetadata);\n      }\n\n      if (!selector) {\n        selector = this._schemaRegistry.getDefaultComponentElementName();\n      }\n    } else {\n      // Directive\n      if (!selector) {\n        selector = null;\n      }\n    }\n\n    let providers = [];\n\n    if (dirMeta.providers != null) {\n      providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, `providers for \"${stringifyType(directiveType)}\"`, [], directiveType);\n    }\n\n    let queries = [];\n    let viewQueries = [];\n\n    if (dirMeta.queries != null) {\n      queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n      viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n    }\n\n    const metadata = CompileDirectiveMetadata.create({\n      isHost: false,\n      selector: selector,\n      exportAs: noUndefined(dirMeta.exportAs),\n      isComponent: !!nonNormalizedTemplateMetadata,\n      type: this._getTypeMetadata(directiveType),\n      template: nonNormalizedTemplateMetadata,\n      changeDetection: changeDetectionStrategy,\n      inputs: dirMeta.inputs || [],\n      outputs: dirMeta.outputs || [],\n      host: dirMeta.host || {},\n      providers: providers || [],\n      viewProviders: viewProviders || [],\n      queries: queries || [],\n      guards: dirMeta.guards || {},\n      viewQueries: viewQueries || [],\n      entryComponents: entryComponentMetadata,\n      componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : null,\n      rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n      componentFactory: null\n    });\n\n    if (nonNormalizedTemplateMetadata) {\n      metadata.componentFactory = this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n    }\n\n    cacheEntry = {\n      metadata,\n      annotation: dirMeta\n    };\n\n    this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n\n    return cacheEntry;\n  }\n  /**\r\n   * Gets the metadata for the given directive.\r\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\r\n   */\n\n\n  getDirectiveMetadata(directiveType) {\n    const dirMeta = this._directiveCache.get(directiveType);\n\n    if (!dirMeta) {\n      this._reportError(syntaxError(`Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`), directiveType);\n    }\n\n    return dirMeta;\n  }\n\n  getDirectiveSummary(dirType) {\n    const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);\n\n    if (!dirSummary) {\n      this._reportError(syntaxError(`Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`), dirType);\n    }\n\n    return dirSummary;\n  }\n\n  isDirective(type) {\n    return !!this._loadSummary(type, CompileSummaryKind.Directive) || this._directiveResolver.isDirective(type);\n  }\n\n  isAbstractDirective(type) {\n    const summary = this._loadSummary(type, CompileSummaryKind.Directive);\n\n    if (summary && !summary.isComponent) {\n      return !summary.selector;\n    }\n\n    const meta = this._directiveResolver.resolve(type, false);\n\n    if (meta && !createComponent.isTypeOf(meta)) {\n      return !meta.selector;\n    }\n\n    return false;\n  }\n\n  isPipe(type) {\n    return !!this._loadSummary(type, CompileSummaryKind.Pipe) || this._pipeResolver.isPipe(type);\n  }\n\n  isNgModule(type) {\n    return !!this._loadSummary(type, CompileSummaryKind.NgModule) || this._ngModuleResolver.isNgModule(type);\n  }\n\n  getNgModuleSummary(moduleType, alreadyCollecting = null) {\n    let moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);\n\n    if (!moduleSummary) {\n      const moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n      moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n\n      if (moduleSummary) {\n        this._summaryCache.set(moduleType, moduleSummary);\n      }\n    }\n\n    return moduleSummary;\n  }\n  /**\r\n   * Loads the declared directives and pipes of an NgModule.\r\n   */\n\n\n  loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync, throwIfNotFound = true) {\n    const ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n    const loading = [];\n\n    if (ngModule) {\n      ngModule.declaredDirectives.forEach(id => {\n        const promise = this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n\n        if (promise) {\n          loading.push(promise);\n        }\n      });\n      ngModule.declaredPipes.forEach(id => this._loadPipeMetadata(id.reference));\n    }\n\n    return Promise.all(loading);\n  }\n\n  getShallowModuleMetadata(moduleType) {\n    let compileMeta = this._shallowModuleCache.get(moduleType);\n\n    if (compileMeta) {\n      return compileMeta;\n    }\n\n    const ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n    compileMeta = {\n      type: this._getTypeMetadata(moduleType),\n      rawExports: ngModuleMeta.exports,\n      rawImports: ngModuleMeta.imports,\n      rawProviders: ngModuleMeta.providers\n    };\n\n    this._shallowModuleCache.set(moduleType, compileMeta);\n\n    return compileMeta;\n  }\n\n  getNgModuleMetadata(moduleType, throwIfNotFound = true, alreadyCollecting = null) {\n    moduleType = resolveForwardRef(moduleType);\n\n    let compileMeta = this._ngModuleCache.get(moduleType);\n\n    if (compileMeta) {\n      return compileMeta;\n    }\n\n    const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n\n    if (!meta) {\n      return null;\n    }\n\n    const declaredDirectives = [];\n    const exportedNonModuleIdentifiers = [];\n    const declaredPipes = [];\n    const importedModules = [];\n    const exportedModules = [];\n    const providers = [];\n    const entryComponents = [];\n    const bootstrapComponents = [];\n    const schemas = [];\n\n    if (meta.imports) {\n      flattenAndDedupeArray(meta.imports).forEach(importedType => {\n        let importedModuleType = undefined;\n\n        if (isValidType(importedType)) {\n          importedModuleType = importedType;\n        } else if (importedType && importedType.ngModule) {\n          const moduleWithProviders = importedType;\n          importedModuleType = moduleWithProviders.ngModule;\n\n          if (moduleWithProviders.providers) {\n            providers.push(...this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, `provider for the NgModule '${stringifyType(importedModuleType)}'`, [], importedType));\n          }\n        }\n\n        if (importedModuleType) {\n          if (this._checkSelfImport(moduleType, importedModuleType)) return;\n          if (!alreadyCollecting) alreadyCollecting = new Set();\n\n          if (alreadyCollecting.has(importedModuleType)) {\n            this._reportError(syntaxError(`${this._getTypeDescriptor(importedModuleType)} '${stringifyType(importedType)}' is imported recursively by the module '${stringifyType(moduleType)}'.`), moduleType);\n\n            return;\n          }\n\n          alreadyCollecting.add(importedModuleType);\n          const importedModuleSummary = this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n          alreadyCollecting.delete(importedModuleType);\n\n          if (!importedModuleSummary) {\n            const err = syntaxError(`Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'. Please add a @NgModule annotation.`); // If possible, record additional context for this error to enable more useful\n            // diagnostics on the compiler side.\n\n            if (importedType instanceof StaticSymbol) {\n              err[MISSING_NG_MODULE_METADATA_ERROR_DATA] = {\n                fileName: importedType.filePath,\n                className: importedType.name\n              };\n            }\n\n            this._reportError(err, moduleType);\n\n            return;\n          }\n\n          importedModules.push(importedModuleSummary);\n        } else {\n          this._reportError(syntaxError(`Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`), moduleType);\n\n          return;\n        }\n      });\n    }\n\n    if (meta.exports) {\n      flattenAndDedupeArray(meta.exports).forEach(exportedType => {\n        if (!isValidType(exportedType)) {\n          this._reportError(syntaxError(`Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`), moduleType);\n\n          return;\n        }\n\n        if (!alreadyCollecting) alreadyCollecting = new Set();\n\n        if (alreadyCollecting.has(exportedType)) {\n          this._reportError(syntaxError(`${this._getTypeDescriptor(exportedType)} '${stringify(exportedType)}' is exported recursively by the module '${stringifyType(moduleType)}'`), moduleType);\n\n          return;\n        }\n\n        alreadyCollecting.add(exportedType);\n        const exportedModuleSummary = this.getNgModuleSummary(exportedType, alreadyCollecting);\n        alreadyCollecting.delete(exportedType);\n\n        if (exportedModuleSummary) {\n          exportedModules.push(exportedModuleSummary);\n        } else {\n          exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));\n        }\n      });\n    } // Note: This will be modified later, so we rely on\n    // getting a new instance every time!\n\n\n    const transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n\n    if (meta.declarations) {\n      flattenAndDedupeArray(meta.declarations).forEach(declaredType => {\n        if (!isValidType(declaredType)) {\n          this._reportError(syntaxError(`Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`), moduleType);\n\n          return;\n        }\n\n        const declaredIdentifier = this._getIdentifierMetadata(declaredType);\n\n        if (this.isDirective(declaredType)) {\n          if (this.isAbstractDirective(declaredType)) {\n            this._reportError(syntaxError(`Directive ${stringifyType(declaredType)} has no selector, please add it!`), declaredType);\n          }\n\n          transitiveModule.addDirective(declaredIdentifier);\n          declaredDirectives.push(declaredIdentifier);\n\n          this._addTypeToModule(declaredType, moduleType);\n        } else if (this.isPipe(declaredType)) {\n          transitiveModule.addPipe(declaredIdentifier);\n          transitiveModule.pipes.push(declaredIdentifier);\n          declaredPipes.push(declaredIdentifier);\n\n          this._addTypeToModule(declaredType, moduleType);\n        } else {\n          this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`), moduleType);\n\n          return;\n        }\n      });\n    }\n\n    const exportedDirectives = [];\n    const exportedPipes = [];\n    exportedNonModuleIdentifiers.forEach(exportedId => {\n      if (transitiveModule.directivesSet.has(exportedId.reference)) {\n        exportedDirectives.push(exportedId);\n        transitiveModule.addExportedDirective(exportedId);\n      } else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n        exportedPipes.push(exportedId);\n        transitiveModule.addExportedPipe(exportedId);\n      } else {\n        this._reportError(syntaxError(`Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`), moduleType);\n\n        return;\n      }\n    }); // The providers of the module have to go last\n    // so that they overwrite any other provider we already added.\n\n    if (meta.providers) {\n      providers.push(...this._getProvidersMetadata(meta.providers, entryComponents, `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));\n    }\n\n    if (meta.entryComponents) {\n      entryComponents.push(...flattenAndDedupeArray(meta.entryComponents).map(type => this._getEntryComponentMetadata(type)));\n    }\n\n    if (meta.bootstrap) {\n      flattenAndDedupeArray(meta.bootstrap).forEach(type => {\n        if (!isValidType(type)) {\n          this._reportError(syntaxError(`Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`), moduleType);\n\n          return;\n        }\n\n        bootstrapComponents.push(this._getIdentifierMetadata(type));\n      });\n    }\n\n    entryComponents.push(...bootstrapComponents.map(type => this._getEntryComponentMetadata(type.reference)));\n\n    if (meta.schemas) {\n      schemas.push(...flattenAndDedupeArray(meta.schemas));\n    }\n\n    compileMeta = new CompileNgModuleMetadata({\n      type: this._getTypeMetadata(moduleType),\n      providers,\n      entryComponents,\n      bootstrapComponents,\n      schemas,\n      declaredDirectives,\n      exportedDirectives,\n      declaredPipes,\n      exportedPipes,\n      importedModules,\n      exportedModules,\n      transitiveModule,\n      id: meta.id || null\n    });\n    entryComponents.forEach(id => transitiveModule.addEntryComponent(id));\n    providers.forEach(provider => transitiveModule.addProvider(provider, compileMeta.type));\n    transitiveModule.addModule(compileMeta.type);\n\n    this._ngModuleCache.set(moduleType, compileMeta);\n\n    return compileMeta;\n  }\n\n  _checkSelfImport(moduleType, importedModuleType) {\n    if (moduleType === importedModuleType) {\n      this._reportError(syntaxError(`'${stringifyType(moduleType)}' module can't import itself`), moduleType);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _getTypeDescriptor(type) {\n    if (isValidType(type)) {\n      if (this.isDirective(type)) {\n        return 'directive';\n      }\n\n      if (this.isPipe(type)) {\n        return 'pipe';\n      }\n\n      if (this.isNgModule(type)) {\n        return 'module';\n      }\n    }\n\n    if (type.provide) {\n      return 'provider';\n    }\n\n    return 'value';\n  }\n\n  _addTypeToModule(type, moduleType) {\n    const oldModule = this._ngModuleOfTypes.get(type);\n\n    if (oldModule && oldModule !== moduleType) {\n      this._reportError(syntaxError(`Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` + `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` + `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`), moduleType);\n\n      return;\n    }\n\n    this._ngModuleOfTypes.set(type, moduleType);\n  }\n\n  _getTransitiveNgModuleMetadata(importedModules, exportedModules) {\n    // collect `providers` / `entryComponents` from all imported and all exported modules\n    const result = new TransitiveCompileNgModuleMetadata();\n    const modulesByToken = new Map();\n    importedModules.concat(exportedModules).forEach(modSummary => {\n      modSummary.modules.forEach(mod => result.addModule(mod));\n      modSummary.entryComponents.forEach(comp => result.addEntryComponent(comp));\n      const addedTokens = new Set();\n      modSummary.providers.forEach(entry => {\n        const tokenRef = tokenReference(entry.provider.token);\n        let prevModules = modulesByToken.get(tokenRef);\n\n        if (!prevModules) {\n          prevModules = new Set();\n          modulesByToken.set(tokenRef, prevModules);\n        }\n\n        const moduleRef = entry.module.reference; // Note: the providers of one module may still contain multiple providers\n        // per token (e.g. for multi providers), and we need to preserve these.\n\n        if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n          prevModules.add(moduleRef);\n          addedTokens.add(tokenRef);\n          result.addProvider(entry.provider, entry.module);\n        }\n      });\n    });\n    exportedModules.forEach(modSummary => {\n      modSummary.exportedDirectives.forEach(id => result.addExportedDirective(id));\n      modSummary.exportedPipes.forEach(id => result.addExportedPipe(id));\n    });\n    importedModules.forEach(modSummary => {\n      modSummary.exportedDirectives.forEach(id => result.addDirective(id));\n      modSummary.exportedPipes.forEach(id => result.addPipe(id));\n    });\n    return result;\n  }\n\n  _getIdentifierMetadata(type) {\n    type = resolveForwardRef(type);\n    return {\n      reference: type\n    };\n  }\n\n  isInjectable(type) {\n    const annotations = this._reflector.tryAnnotations(type);\n\n    return annotations.some(ann => createInjectable.isTypeOf(ann));\n  }\n\n  getInjectableSummary(type) {\n    return {\n      summaryKind: CompileSummaryKind.Injectable,\n      type: this._getTypeMetadata(type, null, false)\n    };\n  }\n\n  getInjectableMetadata(type, dependencies = null, throwOnUnknownDeps = true) {\n    const typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);\n\n    const typeMetadata = typeSummary ? typeSummary.type : this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n\n    const annotations = this._reflector.annotations(type).filter(ann => createInjectable.isTypeOf(ann));\n\n    if (annotations.length === 0) {\n      return null;\n    }\n\n    const meta = annotations[annotations.length - 1];\n    return {\n      symbol: type,\n      type: typeMetadata,\n      providedIn: meta.providedIn,\n      useValue: meta.useValue,\n      useClass: meta.useClass,\n      useExisting: meta.useExisting,\n      useFactory: meta.useFactory,\n      deps: meta.deps\n    };\n  }\n\n  _getTypeMetadata(type, dependencies = null, throwOnUnknownDeps = true) {\n    const identifier = this._getIdentifierMetadata(type);\n\n    return {\n      reference: identifier.reference,\n      diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n      lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference)\n    };\n  }\n\n  _getFactoryMetadata(factory, dependencies = null) {\n    factory = resolveForwardRef(factory);\n    return {\n      reference: factory,\n      diDeps: this._getDependenciesMetadata(factory, dependencies)\n    };\n  }\n  /**\r\n   * Gets the metadata for the given pipe.\r\n   * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\r\n   */\n\n\n  getPipeMetadata(pipeType) {\n    const pipeMeta = this._pipeCache.get(pipeType);\n\n    if (!pipeMeta) {\n      this._reportError(syntaxError(`Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`), pipeType);\n    }\n\n    return pipeMeta || null;\n  }\n\n  getPipeSummary(pipeType) {\n    const pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);\n\n    if (!pipeSummary) {\n      this._reportError(syntaxError(`Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`), pipeType);\n    }\n\n    return pipeSummary;\n  }\n\n  getOrLoadPipeMetadata(pipeType) {\n    let pipeMeta = this._pipeCache.get(pipeType);\n\n    if (!pipeMeta) {\n      pipeMeta = this._loadPipeMetadata(pipeType);\n    }\n\n    return pipeMeta;\n  }\n\n  _loadPipeMetadata(pipeType) {\n    pipeType = resolveForwardRef(pipeType);\n\n    const pipeAnnotation = this._pipeResolver.resolve(pipeType);\n\n    const pipeMeta = new CompilePipeMetadata({\n      type: this._getTypeMetadata(pipeType),\n      name: pipeAnnotation.name,\n      pure: !!pipeAnnotation.pure\n    });\n\n    this._pipeCache.set(pipeType, pipeMeta);\n\n    this._summaryCache.set(pipeType, pipeMeta.toSummary());\n\n    return pipeMeta;\n  }\n\n  _getDependenciesMetadata(typeOrFunc, dependencies, throwOnUnknownDeps = true) {\n    let hasUnknownDeps = false;\n    const params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n    const dependenciesMetadata = params.map(param => {\n      let isAttribute = false;\n      let isHost = false;\n      let isSelf = false;\n      let isSkipSelf = false;\n      let isOptional = false;\n      let token = null;\n\n      if (Array.isArray(param)) {\n        param.forEach(paramEntry => {\n          if (createHost.isTypeOf(paramEntry)) {\n            isHost = true;\n          } else if (createSelf.isTypeOf(paramEntry)) {\n            isSelf = true;\n          } else if (createSkipSelf.isTypeOf(paramEntry)) {\n            isSkipSelf = true;\n          } else if (createOptional.isTypeOf(paramEntry)) {\n            isOptional = true;\n          } else if (createAttribute.isTypeOf(paramEntry)) {\n            isAttribute = true;\n            token = paramEntry.attributeName;\n          } else if (createInject.isTypeOf(paramEntry)) {\n            token = paramEntry.token;\n          } else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n            token = paramEntry;\n          } else if (isValidType(paramEntry) && token == null) {\n            token = paramEntry;\n          }\n        });\n      } else {\n        token = param;\n      }\n\n      if (token == null) {\n        hasUnknownDeps = true;\n        return {};\n      }\n\n      return {\n        isAttribute,\n        isHost,\n        isSelf,\n        isSkipSelf,\n        isOptional,\n        token: this._getTokenMetadata(token)\n      };\n    });\n\n    if (hasUnknownDeps) {\n      const depsTokens = dependenciesMetadata.map(dep => dep.token ? stringifyType(dep.token) : '?').join(', ');\n      const message = `Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`;\n\n      if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n        this._reportError(syntaxError(message), typeOrFunc);\n      }\n    }\n\n    return dependenciesMetadata;\n  }\n\n  _getTokenMetadata(token) {\n    token = resolveForwardRef(token);\n    let compileToken;\n\n    if (typeof token === 'string') {\n      compileToken = {\n        value: token\n      };\n    } else {\n      compileToken = {\n        identifier: {\n          reference: token\n        }\n      };\n    }\n\n    return compileToken;\n  }\n\n  _getProvidersMetadata(providers, targetEntryComponents, debugInfo, compileProviders = [], type) {\n    providers.forEach((provider, providerIdx) => {\n      if (Array.isArray(provider)) {\n        this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n      } else {\n        provider = resolveForwardRef(provider);\n        let providerMeta = undefined;\n\n        if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n          this._validateProvider(provider);\n\n          providerMeta = new ProviderMeta(provider.provide, provider);\n        } else if (isValidType(provider)) {\n          providerMeta = new ProviderMeta(provider, {\n            useClass: provider\n          });\n        } else if (provider === void 0) {\n          this._reportError(syntaxError(`Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.`));\n\n          return;\n        } else {\n          const providersInfo = providers.reduce((soFar, seenProvider, seenProviderIdx) => {\n            if (seenProviderIdx < providerIdx) {\n              soFar.push(`${stringifyType(seenProvider)}`);\n            } else if (seenProviderIdx == providerIdx) {\n              soFar.push(`?${stringifyType(seenProvider)}?`);\n            } else if (seenProviderIdx == providerIdx + 1) {\n              soFar.push('...');\n            }\n\n            return soFar;\n          }, []).join(', ');\n\n          this._reportError(syntaxError(`Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`), type);\n\n          return;\n        }\n\n        if (providerMeta.token === this._reflector.resolveExternalReference(Identifiers$1.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n          targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));\n        } else {\n          compileProviders.push(this.getProviderMetadata(providerMeta));\n        }\n      }\n    });\n    return compileProviders;\n  }\n\n  _validateProvider(provider) {\n    if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n      this._reportError(syntaxError(`Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.`));\n    }\n  }\n\n  _getEntryComponentsFromProvider(provider, type) {\n    const components = [];\n    const collectedIdentifiers = [];\n\n    if (provider.useFactory || provider.useExisting || provider.useClass) {\n      this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);\n\n      return [];\n    }\n\n    if (!provider.multi) {\n      this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`), type);\n\n      return [];\n    }\n\n    extractIdentifiers(provider.useValue, collectedIdentifiers);\n    collectedIdentifiers.forEach(identifier => {\n      const entry = this._getEntryComponentMetadata(identifier.reference, false);\n\n      if (entry) {\n        components.push(entry);\n      }\n    });\n    return components;\n  }\n\n  _getEntryComponentMetadata(dirType, throwIfNotFound = true) {\n    const dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n\n    if (dirMeta && dirMeta.metadata.isComponent) {\n      return {\n        componentType: dirType,\n        componentFactory: dirMeta.metadata.componentFactory\n      };\n    }\n\n    const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);\n\n    if (dirSummary && dirSummary.isComponent) {\n      return {\n        componentType: dirType,\n        componentFactory: dirSummary.componentFactory\n      };\n    }\n\n    if (throwIfNotFound) {\n      throw syntaxError(`${dirType.name} cannot be used as an entry component.`);\n    }\n\n    return null;\n  }\n\n  _getInjectableTypeMetadata(type, dependencies = null) {\n    const typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);\n\n    if (typeSummary) {\n      return typeSummary.type;\n    }\n\n    return this._getTypeMetadata(type, dependencies);\n  }\n\n  getProviderMetadata(provider) {\n    let compileDeps = undefined;\n    let compileTypeMetadata = null;\n    let compileFactoryMetadata = null;\n\n    let token = this._getTokenMetadata(provider.token);\n\n    if (provider.useClass) {\n      compileTypeMetadata = this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n      compileDeps = compileTypeMetadata.diDeps;\n\n      if (provider.token === provider.useClass) {\n        // use the compileTypeMetadata as it contains information about lifecycleHooks...\n        token = {\n          identifier: compileTypeMetadata\n        };\n      }\n    } else if (provider.useFactory) {\n      compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n      compileDeps = compileFactoryMetadata.diDeps;\n    }\n\n    return {\n      token: token,\n      useClass: compileTypeMetadata,\n      useValue: provider.useValue,\n      useFactory: compileFactoryMetadata,\n      useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n      deps: compileDeps,\n      multi: provider.multi\n    };\n  }\n\n  _getQueriesMetadata(queries, isViewQuery, directiveType) {\n    const res = [];\n    Object.keys(queries).forEach(propertyName => {\n      const query = queries[propertyName];\n\n      if (query.isViewQuery === isViewQuery) {\n        res.push(this._getQueryMetadata(query, propertyName, directiveType));\n      }\n    });\n    return res;\n  }\n\n  _queryVarBindings(selector) {\n    return selector.split(/\\s*,\\s*/);\n  }\n\n  _getQueryMetadata(q, propertyName, typeOrFunc) {\n    let selectors;\n\n    if (typeof q.selector === 'string') {\n      selectors = this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));\n    } else {\n      if (!q.selector) {\n        this._reportError(syntaxError(`Can't construct a query for the property \"${propertyName}\" of \"${stringifyType(typeOrFunc)}\" since the query selector wasn't defined.`), typeOrFunc);\n\n        selectors = [];\n      } else {\n        selectors = [this._getTokenMetadata(q.selector)];\n      }\n    }\n\n    return {\n      selectors,\n      first: q.first,\n      descendants: q.descendants,\n      emitDistinctChangesOnly: q.emitDistinctChangesOnly,\n      propertyName,\n      read: q.read ? this._getTokenMetadata(q.read) : null,\n      static: q.static\n    };\n  }\n\n  _reportError(error, type, otherType) {\n    if (this._errorCollector) {\n      this._errorCollector(error, type);\n\n      if (otherType) {\n        this._errorCollector(error, otherType);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n}\n\nfunction flattenArray(tree, out = []) {\n  if (tree) {\n    for (let i = 0; i < tree.length; i++) {\n      const item = resolveForwardRef(tree[i]);\n\n      if (Array.isArray(item)) {\n        flattenArray(item, out);\n      } else {\n        out.push(item);\n      }\n    }\n  }\n\n  return out;\n}\n\nfunction dedupeArray(array) {\n  if (array) {\n    return Array.from(new Set(array));\n  }\n\n  return [];\n}\n\nfunction flattenAndDedupeArray(tree) {\n  return dedupeArray(flattenArray(tree));\n}\n\nfunction isValidType(value) {\n  return value instanceof StaticSymbol || value instanceof Type;\n}\n\nfunction extractIdentifiers(value, targetIdentifiers) {\n  visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\n\nclass _CompileValueConverter extends ValueTransformer {\n  visitOther(value, targetIdentifiers) {\n    targetIdentifiers.push({\n      reference: value\n    });\n  }\n\n}\n\nfunction stringifyType(type) {\n  if (type instanceof StaticSymbol) {\n    return `${type.name} in ${type.filePath}`;\n  } else {\n    return stringify(type);\n  }\n}\n/**\r\n * Indicates that a component is still being loaded in a synchronous compile.\r\n */\n\n\nfunction componentStillLoadingError(compType) {\n  const error = Error(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  error[ERROR_COMPONENT_TYPE] = compType;\n  return error;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction providerDef(ctx, providerAst) {\n  let flags = 0\n  /* None */\n  ;\n\n  if (!providerAst.eager) {\n    flags |= 4096\n    /* LazyProvider */\n    ;\n  }\n\n  if (providerAst.providerType === ProviderAstType.PrivateService) {\n    flags |= 8192\n    /* PrivateProvider */\n    ;\n  }\n\n  if (providerAst.isModule) {\n    flags |= 1073741824\n    /* TypeModuleProvider */\n    ;\n  }\n\n  providerAst.lifecycleHooks.forEach(lifecycleHook => {\n    // for regular providers, we only support ngOnDestroy\n    if (lifecycleHook === LifecycleHooks.OnDestroy || providerAst.providerType === ProviderAstType.Directive || providerAst.providerType === ProviderAstType.Component) {\n      flags |= lifecycleHookToNodeFlag(lifecycleHook);\n    }\n  });\n  const {\n    providerExpr,\n    flags: providerFlags,\n    depsExpr\n  } = providerAst.multiProvider ? multiProviderDef(ctx, flags, providerAst.providers) : singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]);\n  return {\n    providerExpr,\n    flags: providerFlags,\n    depsExpr,\n    tokenExpr: tokenExpr(ctx, providerAst.token)\n  };\n}\n\nfunction multiProviderDef(ctx, flags, providers) {\n  const allDepDefs = [];\n  const allParams = [];\n  const exprs = providers.map((provider, providerIndex) => {\n    let expr;\n\n    if (provider.useClass) {\n      const depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n      expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\n    } else if (provider.useFactory) {\n      const depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n      expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\n    } else if (provider.useExisting) {\n      const depExprs = convertDeps(providerIndex, [{\n        token: provider.useExisting\n      }]);\n      expr = depExprs[0];\n    } else {\n      expr = convertValueToOutputAst(ctx, provider.useValue);\n    }\n\n    return expr;\n  });\n  const providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);\n  return {\n    providerExpr,\n    flags: flags | 1024\n    /* TypeFactoryProvider */\n    ,\n    depsExpr: literalArr(allDepDefs)\n  };\n\n  function convertDeps(providerIndex, deps) {\n    return deps.map((dep, depIndex) => {\n      const paramName = `p${providerIndex}_${depIndex}`;\n      allParams.push(new FnParam(paramName, DYNAMIC_TYPE));\n      allDepDefs.push(depDef(ctx, dep));\n      return variable(paramName);\n    });\n  }\n}\n\nfunction singleProviderDef(ctx, flags, providerType, providerMeta) {\n  let providerExpr;\n  let deps;\n\n  if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\n    providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n    flags |= 16384\n    /* TypeDirective */\n    ;\n    deps = providerMeta.deps || providerMeta.useClass.diDeps;\n  } else {\n    if (providerMeta.useClass) {\n      providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n      flags |= 512\n      /* TypeClassProvider */\n      ;\n      deps = providerMeta.deps || providerMeta.useClass.diDeps;\n    } else if (providerMeta.useFactory) {\n      providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\n      flags |= 1024\n      /* TypeFactoryProvider */\n      ;\n      deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n    } else if (providerMeta.useExisting) {\n      providerExpr = NULL_EXPR;\n      flags |= 2048\n      /* TypeUseExistingProvider */\n      ;\n      deps = [{\n        token: providerMeta.useExisting\n      }];\n    } else {\n      providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\n      flags |= 256\n      /* TypeValueProvider */\n      ;\n      deps = [];\n    }\n  }\n\n  const depsExpr = literalArr(deps.map(dep => depDef(ctx, dep)));\n  return {\n    providerExpr,\n    flags,\n    depsExpr\n  };\n}\n\nfunction tokenExpr(ctx, tokenMeta) {\n  return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) : literal(tokenMeta.value);\n}\n\nfunction depDef(ctx, dep) {\n  // Note: the following fields have already been normalized out by provider_analyzer:\n  // - isAttribute, isHost\n  const expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, dep.token);\n  let flags = 0\n  /* None */\n  ;\n\n  if (dep.isSkipSelf) {\n    flags |= 1\n    /* SkipSelf */\n    ;\n  }\n\n  if (dep.isOptional) {\n    flags |= 2\n    /* Optional */\n    ;\n  }\n\n  if (dep.isSelf) {\n    flags |= 4\n    /* Self */\n    ;\n  }\n\n  if (dep.isValue) {\n    flags |= 8\n    /* Value */\n    ;\n  }\n\n  return flags === 0\n  /* None */\n  ? expr : literalArr([literal(flags), expr]);\n}\n\nfunction lifecycleHookToNodeFlag(lifecycleHook) {\n  let nodeFlag = 0\n  /* None */\n  ;\n\n  switch (lifecycleHook) {\n    case LifecycleHooks.AfterContentChecked:\n      nodeFlag = 2097152\n      /* AfterContentChecked */\n      ;\n      break;\n\n    case LifecycleHooks.AfterContentInit:\n      nodeFlag = 1048576\n      /* AfterContentInit */\n      ;\n      break;\n\n    case LifecycleHooks.AfterViewChecked:\n      nodeFlag = 8388608\n      /* AfterViewChecked */\n      ;\n      break;\n\n    case LifecycleHooks.AfterViewInit:\n      nodeFlag = 4194304\n      /* AfterViewInit */\n      ;\n      break;\n\n    case LifecycleHooks.DoCheck:\n      nodeFlag = 262144\n      /* DoCheck */\n      ;\n      break;\n\n    case LifecycleHooks.OnChanges:\n      nodeFlag = 524288\n      /* OnChanges */\n      ;\n      break;\n\n    case LifecycleHooks.OnDestroy:\n      nodeFlag = 131072\n      /* OnDestroy */\n      ;\n      break;\n\n    case LifecycleHooks.OnInit:\n      nodeFlag = 65536\n      /* OnInit */\n      ;\n      break;\n  }\n\n  return nodeFlag;\n}\n\nfunction componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {\n  const entryComponentFactories = entryComponents.map(entryComponent => ctx.importExpr(entryComponent.componentFactory));\n  const token = createTokenForExternalReference(reflector, Identifiers$1.ComponentFactoryResolver);\n  const classMeta = {\n    diDeps: [{\n      isValue: true,\n      value: literalArr(entryComponentFactories)\n    }, {\n      token: token,\n      isSkipSelf: true,\n      isOptional: true\n    }, {\n      token: createTokenForExternalReference(reflector, Identifiers$1.NgModuleRef)\n    }],\n    lifecycleHooks: [],\n    reference: reflector.resolveExternalReference(Identifiers$1.CodegenComponentFactoryResolver)\n  };\n  const {\n    providerExpr,\n    flags: providerFlags,\n    depsExpr\n  } = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\n    token,\n    multi: false,\n    useClass: classMeta\n  });\n  return {\n    providerExpr,\n    flags: providerFlags,\n    depsExpr,\n    tokenExpr: tokenExpr(ctx, token)\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass NgModuleCompileResult {\n  constructor(ngModuleFactoryVar) {\n    this.ngModuleFactoryVar = ngModuleFactoryVar;\n  }\n\n}\n\nconst LOG_VAR = /*#__PURE__*/variable('_l');\n\nclass NgModuleCompiler {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n\n  compile(ctx, ngModuleMeta, extraProviders) {\n    const sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n    const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n    const bootstrapComponents = ngModuleMeta.bootstrapComponents;\n    const providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n    const providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0\n    /* None */\n    , entryComponentFactories)].concat(providerParser.parse().map(provider => providerDef(ctx, provider))).map(({\n      providerExpr,\n      depsExpr,\n      flags,\n      tokenExpr\n    }) => {\n      return importExpr(Identifiers$1.moduleProviderDef).callFn([literal(flags), tokenExpr, providerExpr, depsExpr]);\n    });\n    const ngModuleDef = importExpr(Identifiers$1.moduleDef).callFn([literalArr(providerDefs)]);\n    const ngModuleDefFactory = fn([new FnParam(LOG_VAR.name)], [new ReturnStatement(ngModuleDef)], INFERRED_TYPE);\n    const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n\n    this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, importExpr(Identifiers$1.createModuleFactory).callFn([ctx.importExpr(ngModuleMeta.type.reference), literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))), ngModuleDefFactory]));\n\n    if (ngModuleMeta.id) {\n      const id = typeof ngModuleMeta.id === 'string' ? literal(ngModuleMeta.id) : ctx.importExpr(ngModuleMeta.id);\n      const registerFactoryStmt = importExpr(Identifiers$1.RegisterModuleFactoryFn).callFn([id, variable(ngModuleFactoryVar)]).toStmt();\n      ctx.statements.push(registerFactoryStmt);\n    }\n\n    return new NgModuleCompileResult(ngModuleFactoryVar);\n  }\n\n  createStub(ctx, ngModuleReference) {\n    this._createNgModuleFactory(ctx, ngModuleReference, NULL_EXPR);\n  }\n\n  _createNgModuleFactory(ctx, reference, value) {\n    const ngModuleFactoryVar = `${identifierName({\n      reference: reference\n    })}NgFactory`;\n    const ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(value).toDeclStmt(importType(Identifiers$1.NgModuleFactory, [expressionType(ctx.importExpr(reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]);\n    ctx.statements.push(ngModuleFactoryStmt);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Resolves types to {@link NgModule}.\r\n */\n\n\nclass NgModuleResolver {\n  constructor(_reflector) {\n    this._reflector = _reflector;\n  }\n\n  isNgModule(type) {\n    return this._reflector.annotations(type).some(createNgModule.isTypeOf);\n  }\n\n  resolve(type, throwIfNotFound = true) {\n    const ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\n\n    if (ngModuleMeta) {\n      return ngModuleMeta;\n    } else {\n      if (throwIfNotFound) {\n        throw new Error(`No NgModule metadata found for '${stringify(type)}'.`);\n      }\n\n      return null;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction debugOutputAstAsTypeScript(ast) {\n  const converter = new _TsEmitterVisitor();\n  const ctx = EmitterVisitorContext.createRoot();\n  const asts = Array.isArray(ast) ? ast : [ast];\n  asts.forEach(ast => {\n    if (ast instanceof Statement) {\n      ast.visitStatement(converter, ctx);\n    } else if (ast instanceof Expression) {\n      ast.visitExpression(converter, ctx);\n    } else if (ast instanceof Type$1) {\n      ast.visitType(converter, ctx);\n    } else {\n      throw new Error(`Don't know how to print debug info for ${ast}`);\n    }\n  });\n  return ctx.toSource();\n}\n\nclass TypeScriptEmitter {\n  emitStatementsAndContext(genFilePath, stmts, preamble = '', emitSourceMaps = true, referenceFilter, importFilter) {\n    const converter = new _TsEmitterVisitor(referenceFilter, importFilter);\n    const ctx = EmitterVisitorContext.createRoot();\n    converter.visitAllStatements(stmts, ctx);\n    const preambleLines = preamble ? preamble.split('\\n') : [];\n    converter.reexports.forEach((reexports, exportedModuleName) => {\n      const reexportsCode = reexports.map(reexport => `${reexport.name} as ${reexport.as}`).join(',');\n      preambleLines.push(`export {${reexportsCode}} from '${exportedModuleName}';`);\n    });\n    converter.importsWithPrefixes.forEach((prefix, importedModuleName) => {\n      // Note: can't write the real word for import as it screws up system.js auto detection...\n      preambleLines.push(`imp` + `ort * as ${prefix} from '${importedModuleName}';`);\n    });\n    const sm = emitSourceMaps ? ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() : '';\n    const lines = [...preambleLines, ctx.toSource(), sm];\n\n    if (sm) {\n      // always add a newline at the end, as some tools have bugs without it.\n      lines.push('');\n    }\n\n    ctx.setPreambleLineCount(preambleLines.length);\n    return {\n      sourceText: lines.join('\\n'),\n      context: ctx\n    };\n  }\n\n  emitStatements(genFilePath, stmts, preamble = '') {\n    return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;\n  }\n\n}\n\nclass _TsEmitterVisitor extends AbstractEmitterVisitor {\n  constructor(referenceFilter, importFilter) {\n    super(false);\n    this.referenceFilter = referenceFilter;\n    this.importFilter = importFilter;\n    this.typeExpression = 0;\n    this.importsWithPrefixes = new Map();\n    this.reexports = new Map();\n  }\n\n  visitType(t, ctx, defaultType = 'any') {\n    if (t) {\n      this.typeExpression++;\n      t.visitType(this, ctx);\n      this.typeExpression--;\n    } else {\n      ctx.print(null, defaultType);\n    }\n  }\n\n  visitLiteralExpr(ast, ctx) {\n    const value = ast.value;\n\n    if (value == null && ast.type != INFERRED_TYPE) {\n      ctx.print(ast, `(${value} as any)`);\n      return null;\n    }\n\n    return super.visitLiteralExpr(ast, ctx);\n  } // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.\n  // In SNC mode, [] have the type never[], so we cast here to any[].\n  // TODO: narrow the cast to a more explicit type, or use a pattern that does not\n  // start with [].concat. see https://github.com/angular/angular/pull/11846\n\n\n  visitLiteralArrayExpr(ast, ctx) {\n    if (ast.entries.length === 0) {\n      ctx.print(ast, '(');\n    }\n\n    const result = super.visitLiteralArrayExpr(ast, ctx);\n\n    if (ast.entries.length === 0) {\n      ctx.print(ast, ' as any[])');\n    }\n\n    return result;\n  }\n\n  visitExternalExpr(ast, ctx) {\n    this._visitIdentifier(ast.value, ast.typeParams, ctx);\n\n    return null;\n  }\n\n  visitAssertNotNullExpr(ast, ctx) {\n    const result = super.visitAssertNotNullExpr(ast, ctx);\n    ctx.print(ast, '!');\n    return result;\n  }\n\n  visitDeclareVarStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported) && stmt.value instanceof ExternalExpr && !stmt.type) {\n      // check for a reexport\n      const {\n        name,\n        moduleName\n      } = stmt.value.value;\n\n      if (moduleName) {\n        let reexports = this.reexports.get(moduleName);\n\n        if (!reexports) {\n          reexports = [];\n          this.reexports.set(moduleName, reexports);\n        }\n\n        reexports.push({\n          name: name,\n          as: stmt.name\n        });\n        return null;\n      }\n    }\n\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.print(stmt, `export `);\n    }\n\n    if (stmt.hasModifier(StmtModifier.Final)) {\n      ctx.print(stmt, `const`);\n    } else {\n      ctx.print(stmt, `var`);\n    }\n\n    ctx.print(stmt, ` ${stmt.name}`);\n\n    this._printColonType(stmt.type, ctx);\n\n    if (stmt.value) {\n      ctx.print(stmt, ` = `);\n      stmt.value.visitExpression(this, ctx);\n    }\n\n    ctx.println(stmt, `;`);\n    return null;\n  }\n\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Cannot visit a WrappedNodeExpr when outputting Typescript.');\n  }\n\n  visitCastExpr(ast, ctx) {\n    ctx.print(ast, `(<`);\n    ast.type.visitType(this, ctx);\n    ctx.print(ast, `>`);\n    ast.value.visitExpression(this, ctx);\n    ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitInstantiateExpr(ast, ctx) {\n    ctx.print(ast, `new `);\n    this.typeExpression++;\n    ast.classExpr.visitExpression(this, ctx);\n    this.typeExpression--;\n    ctx.print(ast, `(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(ast, `)`);\n    return null;\n  }\n\n  visitDeclareClassStmt(stmt, ctx) {\n    ctx.pushClass(stmt);\n\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.print(stmt, `export `);\n    }\n\n    ctx.print(stmt, `class ${stmt.name}`);\n\n    if (stmt.parent != null) {\n      ctx.print(stmt, ` extends `);\n      this.typeExpression++;\n      stmt.parent.visitExpression(this, ctx);\n      this.typeExpression--;\n    }\n\n    ctx.println(stmt, ` {`);\n    ctx.incIndent();\n    stmt.fields.forEach(field => this._visitClassField(field, ctx));\n\n    if (stmt.constructorMethod != null) {\n      this._visitClassConstructor(stmt, ctx);\n    }\n\n    stmt.getters.forEach(getter => this._visitClassGetter(getter, ctx));\n    stmt.methods.forEach(method => this._visitClassMethod(method, ctx));\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    ctx.popClass();\n    return null;\n  }\n\n  _visitClassField(field, ctx) {\n    if (field.hasModifier(StmtModifier.Private)) {\n      // comment out as a workaround for #10967\n      ctx.print(null, `/*private*/ `);\n    }\n\n    if (field.hasModifier(StmtModifier.Static)) {\n      ctx.print(null, 'static ');\n    }\n\n    ctx.print(null, field.name);\n\n    this._printColonType(field.type, ctx);\n\n    if (field.initializer) {\n      ctx.print(null, ' = ');\n      field.initializer.visitExpression(this, ctx);\n    }\n\n    ctx.println(null, `;`);\n  }\n\n  _visitClassGetter(getter, ctx) {\n    if (getter.hasModifier(StmtModifier.Private)) {\n      ctx.print(null, `private `);\n    }\n\n    ctx.print(null, `get ${getter.name}()`);\n\n    this._printColonType(getter.type, ctx);\n\n    ctx.println(null, ` {`);\n    ctx.incIndent();\n    this.visitAllStatements(getter.body, ctx);\n    ctx.decIndent();\n    ctx.println(null, `}`);\n  }\n\n  _visitClassConstructor(stmt, ctx) {\n    ctx.print(stmt, `constructor(`);\n\n    this._visitParams(stmt.constructorMethod.params, ctx);\n\n    ctx.println(stmt, `) {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.constructorMethod.body, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n  }\n\n  _visitClassMethod(method, ctx) {\n    if (method.hasModifier(StmtModifier.Private)) {\n      ctx.print(null, `private `);\n    }\n\n    ctx.print(null, `${method.name}(`);\n\n    this._visitParams(method.params, ctx);\n\n    ctx.print(null, `)`);\n\n    this._printColonType(method.type, ctx, 'void');\n\n    ctx.println(null, ` {`);\n    ctx.incIndent();\n    this.visitAllStatements(method.body, ctx);\n    ctx.decIndent();\n    ctx.println(null, `}`);\n  }\n\n  visitFunctionExpr(ast, ctx) {\n    if (ast.name) {\n      ctx.print(ast, 'function ');\n      ctx.print(ast, ast.name);\n    }\n\n    ctx.print(ast, `(`);\n\n    this._visitParams(ast.params, ctx);\n\n    ctx.print(ast, `)`);\n\n    this._printColonType(ast.type, ctx, 'void');\n\n    if (!ast.name) {\n      ctx.print(ast, ` => `);\n    }\n\n    ctx.println(ast, '{');\n    ctx.incIndent();\n    this.visitAllStatements(ast.statements, ctx);\n    ctx.decIndent();\n    ctx.print(ast, `}`);\n    return null;\n  }\n\n  visitDeclareFunctionStmt(stmt, ctx) {\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.print(stmt, `export `);\n    }\n\n    ctx.print(stmt, `function ${stmt.name}(`);\n\n    this._visitParams(stmt.params, ctx);\n\n    ctx.print(stmt, `)`);\n\n    this._printColonType(stmt.type, ctx, 'void');\n\n    ctx.println(stmt, ` {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.statements, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  visitTryCatchStmt(stmt, ctx) {\n    ctx.println(stmt, `try {`);\n    ctx.incIndent();\n    this.visitAllStatements(stmt.bodyStmts, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\n    ctx.incIndent();\n    const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);\n    this.visitAllStatements(catchStmts, ctx);\n    ctx.decIndent();\n    ctx.println(stmt, `}`);\n    return null;\n  }\n\n  visitBuiltinType(type, ctx) {\n    let typeStr;\n\n    switch (type.name) {\n      case BuiltinTypeName.Bool:\n        typeStr = 'boolean';\n        break;\n\n      case BuiltinTypeName.Dynamic:\n        typeStr = 'any';\n        break;\n\n      case BuiltinTypeName.Function:\n        typeStr = 'Function';\n        break;\n\n      case BuiltinTypeName.Number:\n        typeStr = 'number';\n        break;\n\n      case BuiltinTypeName.Int:\n        typeStr = 'number';\n        break;\n\n      case BuiltinTypeName.String:\n        typeStr = 'string';\n        break;\n\n      case BuiltinTypeName.None:\n        typeStr = 'never';\n        break;\n\n      default:\n        throw new Error(`Unsupported builtin type ${type.name}`);\n    }\n\n    ctx.print(null, typeStr);\n    return null;\n  }\n\n  visitExpressionType(ast, ctx) {\n    ast.value.visitExpression(this, ctx);\n\n    if (ast.typeParams !== null) {\n      ctx.print(null, '<');\n      this.visitAllObjects(type => this.visitType(type, ctx), ast.typeParams, ctx, ',');\n      ctx.print(null, '>');\n    }\n\n    return null;\n  }\n\n  visitArrayType(type, ctx) {\n    this.visitType(type.of, ctx);\n    ctx.print(null, `[]`);\n    return null;\n  }\n\n  visitMapType(type, ctx) {\n    ctx.print(null, `{[key: string]:`);\n    this.visitType(type.valueType, ctx);\n    ctx.print(null, `}`);\n    return null;\n  }\n\n  getBuiltinMethodName(method) {\n    let name;\n\n    switch (method) {\n      case BuiltinMethod.ConcatArray:\n        name = 'concat';\n        break;\n\n      case BuiltinMethod.SubscribeObservable:\n        name = 'subscribe';\n        break;\n\n      case BuiltinMethod.Bind:\n        name = 'bind';\n        break;\n\n      default:\n        throw new Error(`Unknown builtin method: ${method}`);\n    }\n\n    return name;\n  }\n\n  _visitParams(params, ctx) {\n    this.visitAllObjects(param => {\n      ctx.print(null, param.name);\n\n      this._printColonType(param.type, ctx);\n    }, params, ctx, ',');\n  }\n\n  _visitIdentifier(value, typeParams, ctx) {\n    const {\n      name,\n      moduleName\n    } = value;\n\n    if (this.referenceFilter && this.referenceFilter(value)) {\n      ctx.print(null, '(null as any)');\n      return;\n    }\n\n    if (moduleName && (!this.importFilter || !this.importFilter(value))) {\n      let prefix = this.importsWithPrefixes.get(moduleName);\n\n      if (prefix == null) {\n        prefix = `i${this.importsWithPrefixes.size}`;\n        this.importsWithPrefixes.set(moduleName, prefix);\n      }\n\n      ctx.print(null, `${prefix}.`);\n    }\n\n    ctx.print(null, name);\n\n    if (this.typeExpression > 0) {\n      // If we are in a type expression that refers to a generic type then supply\n      // the required type parameters. If there were not enough type parameters\n      // supplied, supply any as the type. Outside a type expression the reference\n      // should not supply type parameters and be treated as a simple value reference\n      // to the constructor function itself.\n      const suppliedParameters = typeParams || [];\n\n      if (suppliedParameters.length > 0) {\n        ctx.print(null, `<`);\n        this.visitAllObjects(type => type.visitType(this, ctx), typeParams, ctx, ',');\n        ctx.print(null, `>`);\n      }\n    }\n  }\n\n  _printColonType(type, ctx, defaultType) {\n    if (type !== INFERRED_TYPE) {\n      ctx.print(null, ':');\n      this.visitType(type, ctx, defaultType);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Resolve a `Type` for {@link Pipe}.\r\n *\r\n * This interface can be overridden by the application developer to create custom behavior.\r\n *\r\n * See {@link Compiler}\r\n */\n\n\nclass PipeResolver {\n  constructor(_reflector) {\n    this._reflector = _reflector;\n  }\n\n  isPipe(type) {\n    const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n\n    return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n  }\n  /**\r\n   * Return {@link Pipe} for a given `Type`.\r\n   */\n\n\n  resolve(type, throwIfNotFound = true) {\n    const metas = this._reflector.annotations(resolveForwardRef(type));\n\n    if (metas) {\n      const annotation = findLast(metas, createPipe.isTypeOf);\n\n      if (annotation) {\n        return annotation;\n      }\n    }\n\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n\n    return null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generates code that is used to type check templates.\r\n */\n\n\nclass TypeCheckCompiler {\n  constructor(options, reflector) {\n    this.options = options;\n    this.reflector = reflector;\n  }\n  /**\r\n   * Important notes:\r\n   * - This must not produce new `import` statements, but only refer to types outside\r\n   *   of the file via the variables provided via externalReferenceVars.\r\n   *   This allows Typescript to reuse the old program's structure as no imports have changed.\r\n   * - This must not produce any exports, as this would pollute the .d.ts file\r\n   *   and also violate the point above.\r\n   */\n\n\n  compileComponent(componentId, component, template, usedPipes, externalReferenceVars, ctx) {\n    const pipes = new Map();\n    usedPipes.forEach(p => pipes.set(p.name, p.type.reference));\n    let embeddedViewCount = 0;\n\n    const viewBuilderFactory = (parent, guards) => {\n      const embeddedViewIndex = embeddedViewCount++;\n      return new ViewBuilder(this.options, this.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory);\n    };\n\n    const visitor = viewBuilderFactory(null, []);\n    visitor.visitAll([], template);\n    return visitor.build(componentId);\n  }\n\n}\n\nconst DYNAMIC_VAR_NAME = '_any';\n\nclass TypeCheckLocalResolver {\n  notifyImplicitReceiverUse() {}\n\n  maybeRestoreView() {}\n\n  getLocal(name) {\n    if (name === EventHandlerVars.event.name) {\n      // References to the event should not be type-checked.\n      // TODO(chuckj): determine a better type for the event.\n      return variable(DYNAMIC_VAR_NAME);\n    }\n\n    return null;\n  }\n\n}\n\nconst defaultResolver = /*#__PURE__*/new TypeCheckLocalResolver();\n\nclass ViewBuilder {\n  constructor(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory) {\n    this.options = options;\n    this.reflector = reflector;\n    this.externalReferenceVars = externalReferenceVars;\n    this.parent = parent;\n    this.component = component;\n    this.isHostComponent = isHostComponent;\n    this.embeddedViewIndex = embeddedViewIndex;\n    this.pipes = pipes;\n    this.guards = guards;\n    this.ctx = ctx;\n    this.viewBuilderFactory = viewBuilderFactory;\n    this.refOutputVars = new Map();\n    this.variables = [];\n    this.children = [];\n    this.updates = [];\n    this.actions = [];\n  }\n\n  getOutputVar(type) {\n    let varName;\n\n    if (type === this.component && this.isHostComponent) {\n      varName = DYNAMIC_VAR_NAME;\n    } else if (type instanceof StaticSymbol) {\n      varName = this.externalReferenceVars.get(type);\n    } else {\n      varName = DYNAMIC_VAR_NAME;\n    }\n\n    if (!varName) {\n      throw new Error(`Illegal State: referring to a type without a variable ${JSON.stringify(type)}`);\n    }\n\n    return varName;\n  }\n\n  getTypeGuardExpressions(ast) {\n    const result = [...this.guards];\n\n    for (let directive of ast.directives) {\n      for (let input of directive.inputs) {\n        const guard = directive.directive.guards[input.directiveName];\n\n        if (guard) {\n          const useIf = guard === 'UseIf';\n          result.push({\n            guard,\n            useIf,\n            expression: {\n              context: this.component,\n              value: input.value,\n              sourceSpan: input.sourceSpan\n            }\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n\n  visitAll(variables, astNodes) {\n    this.variables = variables;\n    templateVisitAll(this, astNodes);\n  }\n\n  build(componentId, targetStatements = []) {\n    this.children.forEach(child => child.build(componentId, targetStatements));\n    let viewStmts = [variable(DYNAMIC_VAR_NAME).set(NULL_EXPR).toDeclStmt(DYNAMIC_TYPE)];\n    let bindingCount = 0;\n    this.updates.forEach(expression => {\n      const {\n        sourceSpan,\n        context,\n        value\n      } = this.preprocessUpdateExpression(expression);\n      const bindingId = `${bindingCount++}`;\n      const nameResolver = context === this.component ? this : defaultResolver;\n      const {\n        stmts,\n        currValExpr\n      } = convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId, BindingForm.General);\n      stmts.push(new ExpressionStatement(currValExpr));\n      viewStmts.push(...stmts.map(stmt => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n    });\n    this.actions.forEach(({\n      sourceSpan,\n      context,\n      value\n    }) => {\n      const bindingId = `${bindingCount++}`;\n      const nameResolver = context === this.component ? this : defaultResolver;\n      const {\n        stmts\n      } = convertActionBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId);\n      viewStmts.push(...stmts.map(stmt => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n    });\n\n    if (this.guards.length) {\n      let guardExpression = undefined;\n\n      for (const guard of this.guards) {\n        const {\n          context,\n          value\n        } = this.preprocessUpdateExpression(guard.expression);\n        const bindingId = `${bindingCount++}`;\n        const nameResolver = context === this.component ? this : defaultResolver; // We only support support simple expressions and ignore others as they\n        // are unlikely to affect type narrowing.\n\n        const {\n          stmts,\n          currValExpr\n        } = convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId, BindingForm.TrySimple);\n\n        if (stmts.length == 0) {\n          const guardClause = guard.useIf ? currValExpr : this.ctx.importExpr(guard.guard).callFn([currValExpr]);\n          guardExpression = guardExpression ? guardExpression.and(guardClause) : guardClause;\n        }\n      }\n\n      if (guardExpression) {\n        viewStmts = [new IfStmt(guardExpression, viewStmts)];\n      }\n    }\n\n    const viewName = `_View_${componentId}_${this.embeddedViewIndex}`;\n    const viewFactory = new DeclareFunctionStmt(viewName, [], viewStmts);\n    targetStatements.push(viewFactory);\n    return targetStatements;\n  }\n\n  visitBoundText(ast, context) {\n    const astWithSource = ast.value;\n    const inter = astWithSource.ast;\n    inter.expressions.forEach(expr => this.updates.push({\n      context: this.component,\n      value: expr,\n      sourceSpan: ast.sourceSpan\n    }));\n  }\n\n  visitEmbeddedTemplate(ast, context) {\n    this.visitElementOrTemplate(ast); // Note: The old view compiler used to use an `any` type\n    // for the context in any embedded view.\n    // We keep this behaivor behind a flag for now.\n\n    if (this.options.fullTemplateTypeCheck) {\n      // Find any applicable type guards. For example, NgIf has a type guard on ngIf\n      // (see NgIf.ngIfTypeGuard) that can be used to indicate that a template is only\n      // stamped out if ngIf is truthy so any bindings in the template can assume that,\n      // if a nullable type is used for ngIf, that expression is not null or undefined.\n      const guards = this.getTypeGuardExpressions(ast);\n      const childVisitor = this.viewBuilderFactory(this, guards);\n      this.children.push(childVisitor);\n      childVisitor.visitAll(ast.variables, ast.children);\n    }\n  }\n\n  visitElement(ast, context) {\n    this.visitElementOrTemplate(ast);\n    let inputDefs = [];\n    let updateRendererExpressions = [];\n    let outputDefs = [];\n    ast.inputs.forEach(inputAst => {\n      this.updates.push({\n        context: this.component,\n        value: inputAst.value,\n        sourceSpan: inputAst.sourceSpan\n      });\n    });\n    templateVisitAll(this, ast.children);\n  }\n\n  visitElementOrTemplate(ast) {\n    ast.directives.forEach(dirAst => {\n      this.visitDirective(dirAst);\n    });\n    ast.references.forEach(ref => {\n      let outputVarType = null; // Note: The old view compiler used to use an `any` type\n      // for directives exposed via `exportAs`.\n      // We keep this behaivor behind a flag for now.\n\n      if (ref.value && ref.value.identifier && this.options.fullTemplateTypeCheck) {\n        outputVarType = ref.value.identifier.reference;\n      } else {\n        outputVarType = BuiltinTypeName.Dynamic;\n      }\n\n      this.refOutputVars.set(ref.name, outputVarType);\n    });\n    ast.outputs.forEach(outputAst => {\n      this.actions.push({\n        context: this.component,\n        value: outputAst.handler,\n        sourceSpan: outputAst.sourceSpan\n      });\n    });\n  }\n\n  visitDirective(dirAst) {\n    const dirType = dirAst.directive.type.reference;\n    dirAst.inputs.forEach(input => this.updates.push({\n      context: this.component,\n      value: input.value,\n      sourceSpan: input.sourceSpan\n    })); // Note: The old view compiler used to use an `any` type\n    // for expressions in host properties / events.\n    // We keep this behaivor behind a flag for now.\n\n    if (this.options.fullTemplateTypeCheck) {\n      dirAst.hostProperties.forEach(inputAst => this.updates.push({\n        context: dirType,\n        value: inputAst.value,\n        sourceSpan: inputAst.sourceSpan\n      }));\n      dirAst.hostEvents.forEach(hostEventAst => this.actions.push({\n        context: dirType,\n        value: hostEventAst.handler,\n        sourceSpan: hostEventAst.sourceSpan\n      }));\n    }\n  }\n\n  notifyImplicitReceiverUse() {}\n\n  maybeRestoreView() {}\n\n  getLocal(name) {\n    if (name == EventHandlerVars.event.name) {\n      return variable(this.getOutputVar(BuiltinTypeName.Dynamic));\n    }\n\n    for (let currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {\n      let outputVarType; // check references\n\n      outputVarType = currBuilder.refOutputVars.get(name);\n\n      if (outputVarType == null) {\n        // check variables\n        const varAst = currBuilder.variables.find(varAst => varAst.name === name);\n\n        if (varAst) {\n          outputVarType = BuiltinTypeName.Dynamic;\n        }\n      }\n\n      if (outputVarType != null) {\n        return variable(this.getOutputVar(outputVarType));\n      }\n    }\n\n    return null;\n  }\n\n  pipeOutputVar(name) {\n    const pipe = this.pipes.get(name);\n\n    if (!pipe) {\n      throw new Error(`Illegal State: Could not find pipe ${name} in template of ${this.component}`);\n    }\n\n    return this.getOutputVar(pipe);\n  }\n\n  preprocessUpdateExpression(expression) {\n    return {\n      sourceSpan: expression.sourceSpan,\n      context: expression.context,\n      value: convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: argCount => args => {\n          const arr = literalArr(args); // Note: The old view compiler used to use an `any` type\n          // for arrays.\n\n          return this.options.fullTemplateTypeCheck ? arr : arr.cast(DYNAMIC_TYPE);\n        },\n        createLiteralMapConverter: keys => values => {\n          const entries = keys.map((k, i) => ({\n            key: k.key,\n            value: values[i],\n            quoted: k.quoted\n          }));\n          const map = literalMap(entries); // Note: The old view compiler used to use an `any` type\n          // for maps.\n\n          return this.options.fullTemplateTypeCheck ? map : map.cast(DYNAMIC_TYPE);\n        },\n        createPipeConverter: (name, argCount) => args => {\n          // Note: The old view compiler used to use an `any` type\n          // for pipes.\n          const pipeExpr = this.options.fullTemplateTypeCheck ? variable(this.pipeOutputVar(name)) : variable(this.getOutputVar(BuiltinTypeName.Dynamic));\n          return pipeExpr.callMethod('transform', args);\n        }\n      }, expression.value)\n    };\n  }\n\n  visitNgContent(ast, context) {}\n\n  visitText(ast, context) {}\n\n  visitDirectiveProperty(ast, context) {}\n\n  visitReference(ast, context) {}\n\n  visitVariable(ast, context) {}\n\n  visitEvent(ast, context) {}\n\n  visitElementProperty(ast, context) {}\n\n  visitAttr(ast, context) {}\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst CLASS_ATTR$1 = 'class';\nconst STYLE_ATTR = 'style';\nconst IMPLICIT_TEMPLATE_VAR = '$implicit';\n\nclass ViewCompileResult {\n  constructor(viewClassVar, rendererTypeVar) {\n    this.viewClassVar = viewClassVar;\n    this.rendererTypeVar = rendererTypeVar;\n  }\n\n}\n\nclass ViewCompiler {\n  constructor(_reflector) {\n    this._reflector = _reflector;\n  }\n\n  compileComponent(outputCtx, component, template, styles, usedPipes) {\n    let embeddedViewCount = 0;\n    let renderComponentVarName = undefined;\n\n    if (!component.isHost) {\n      const template = component.template;\n      const customRenderData = [];\n\n      if (template.animations && template.animations.length) {\n        customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template.animations), true));\n      }\n\n      const renderComponentVar = variable(rendererTypeName(component.type.reference));\n      renderComponentVarName = renderComponentVar.name;\n      outputCtx.statements.push(renderComponentVar.set(importExpr(Identifiers$1.createRendererType2).callFn([new LiteralMapExpr([new LiteralMapEntry('encapsulation', literal(template.encapsulation), false), new LiteralMapEntry('styles', styles, false), new LiteralMapEntry('data', new LiteralMapExpr(customRenderData), false)])])).toDeclStmt(importType(Identifiers$1.RendererType2), [StmtModifier.Final, StmtModifier.Exported]));\n    }\n\n    const viewBuilderFactory = parent => {\n      const embeddedViewIndex = embeddedViewCount++;\n      return new ViewBuilder$1(this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory);\n    };\n\n    const visitor = viewBuilderFactory(null);\n    visitor.visitAll([], template);\n    outputCtx.statements.push(...visitor.build());\n    return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n  }\n\n}\n\nconst LOG_VAR$1 = /*#__PURE__*/variable('_l');\nconst VIEW_VAR = /*#__PURE__*/variable('_v');\nconst CHECK_VAR = /*#__PURE__*/variable('_ck');\nconst COMP_VAR = /*#__PURE__*/variable('_co');\nconst EVENT_NAME_VAR = /*#__PURE__*/variable('en');\nconst ALLOW_DEFAULT_VAR = /*#__PURE__*/variable(`ad`);\n\nclass ViewBuilder$1 {\n  constructor(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory) {\n    this.reflector = reflector;\n    this.outputCtx = outputCtx;\n    this.parent = parent;\n    this.component = component;\n    this.embeddedViewIndex = embeddedViewIndex;\n    this.usedPipes = usedPipes;\n    this.viewBuilderFactory = viewBuilderFactory;\n    this.nodes = [];\n    this.purePipeNodeIndices = Object.create(null); // Need Object.create so that we don't have builtin values...\n\n    this.refNodeIndices = Object.create(null);\n    this.variables = [];\n    this.children = []; // TODO(tbosch): The old view compiler used to use an `any` type\n    // for the context in any embedded view. We keep this behaivor for now\n    // to be able to introduce the new view compiler without too many errors.\n\n    this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : expressionType(outputCtx.importExpr(this.component.type.reference));\n    this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\n  }\n\n  visitAll(variables, astNodes) {\n    this.variables = variables; // create the pipes for the pure pipes immediately, so that we know their indices.\n\n    if (!this.parent) {\n      this.usedPipes.forEach(pipe => {\n        if (pipe.pure) {\n          this.purePipeNodeIndices[pipe.name] = this._createPipe(null, pipe);\n        }\n      });\n    }\n\n    if (!this.parent) {\n      this.component.viewQueries.forEach((query, queryIndex) => {\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        const queryId = queryIndex + 1;\n        const bindingType = query.first ? 0\n        /* First */\n        : 1\n        /* All */\n        ;\n        const flags = 134217728\n        /* TypeViewQuery */\n        | calcQueryFlags(query);\n        this.nodes.push(() => ({\n          sourceSpan: null,\n          nodeFlags: flags,\n          nodeDef: importExpr(Identifiers$1.queryDef).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])])\n        }));\n      });\n    }\n\n    templateVisitAll(this, astNodes);\n\n    if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n      // if the view is an embedded view, then we need to add an additional root node in some cases\n      this.nodes.push(() => ({\n        sourceSpan: null,\n        nodeFlags: 1\n        /* TypeElement */\n        ,\n        nodeDef: importExpr(Identifiers$1.anchorDef).callFn([literal(0\n        /* None */\n        ), NULL_EXPR, NULL_EXPR, literal(0)])\n      }));\n    }\n  }\n\n  build(targetStatements = []) {\n    this.children.forEach(child => child.build(targetStatements));\n\n    const {\n      updateRendererStmts,\n      updateDirectivesStmts,\n      nodeDefExprs\n    } = this._createNodeExpressions();\n\n    const updateRendererFn = this._createUpdateFn(updateRendererStmts);\n\n    const updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n\n    let viewFlags = 0\n    /* None */\n    ;\n\n    if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n      viewFlags |= 2\n      /* OnPush */\n      ;\n    }\n\n    const viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR$1.name)], [new ReturnStatement(importExpr(Identifiers$1.viewDef).callFn([literal(viewFlags), literalArr(nodeDefExprs), updateDirectivesFn, updateRendererFn]))], importType(Identifiers$1.ViewDefinition), this.embeddedViewIndex === 0 ? [StmtModifier.Exported] : []);\n    targetStatements.push(viewFactory);\n    return targetStatements;\n  }\n\n  _createUpdateFn(updateStmts) {\n    let updateFn;\n\n    if (updateStmts.length > 0) {\n      const preStmts = [];\n\n      if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n\n      updateFn = fn([new FnParam(CHECK_VAR.name, INFERRED_TYPE), new FnParam(VIEW_VAR.name, INFERRED_TYPE)], [...preStmts, ...updateStmts], INFERRED_TYPE);\n    } else {\n      updateFn = NULL_EXPR;\n    }\n\n    return updateFn;\n  }\n\n  visitNgContent(ast, context) {\n    // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n    this.nodes.push(() => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: 8\n      /* TypeNgContent */\n      ,\n      nodeDef: importExpr(Identifiers$1.ngContentDef).callFn([literal(ast.ngContentIndex), literal(ast.index)])\n    }));\n  }\n\n  visitText(ast, context) {\n    // Static text nodes have no check function\n    const checkIndex = -1;\n    this.nodes.push(() => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: 2\n      /* TypeText */\n      ,\n      nodeDef: importExpr(Identifiers$1.textDef).callFn([literal(checkIndex), literal(ast.ngContentIndex), literalArr([literal(ast.value)])])\n    }));\n  }\n\n  visitBoundText(ast, context) {\n    const nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array\n\n    this.nodes.push(null);\n    const astWithSource = ast.value;\n    const inter = astWithSource.ast;\n    const updateRendererExpressions = inter.expressions.map((expr, bindingIndex) => this._preprocessUpdateExpression({\n      nodeIndex,\n      bindingIndex,\n      sourceSpan: ast.sourceSpan,\n      context: COMP_VAR,\n      value: expr\n    })); // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: 2\n      /* TypeText */\n      ,\n      nodeDef: importExpr(Identifiers$1.textDef).callFn([literal(checkIndex), literal(ast.ngContentIndex), literalArr(inter.strings.map(s => literal(s)))]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n\n  visitEmbeddedTemplate(ast, context) {\n    const nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array\n\n    this.nodes.push(null);\n\n    const {\n      flags,\n      queryMatchesExpr,\n      hostEvents\n    } = this._visitElementOrTemplate(nodeIndex, ast);\n\n    const childVisitor = this.viewBuilderFactory(this);\n    this.children.push(childVisitor);\n    childVisitor.visitAll(ast.variables, ast.children);\n    const childCount = this.nodes.length - nodeIndex - 1; // anchorDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n    //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n    //   ViewDefinitionFactory): NodeDef;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: 1\n      /* TypeElement */\n      | flags,\n      nodeDef: importExpr(Identifiers$1.anchorDef).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), this._createElementHandleEventFn(nodeIndex, hostEvents), variable(childVisitor.viewName)])\n    });\n  }\n\n  visitElement(ast, context) {\n    const nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array so we can add children\n\n    this.nodes.push(null); // Using a null element name creates an anchor.\n\n    const elName = isNgContainer(ast.name) ? null : ast.name;\n\n    const {\n      flags,\n      usedEvents,\n      queryMatchesExpr,\n      hostBindings: dirHostBindings,\n      hostEvents\n    } = this._visitElementOrTemplate(nodeIndex, ast);\n\n    let inputDefs = [];\n    let updateRendererExpressions = [];\n    let outputDefs = [];\n\n    if (elName) {\n      const hostBindings = ast.inputs.map(inputAst => ({\n        context: COMP_VAR,\n        inputAst,\n        dirAst: null\n      })).concat(dirHostBindings);\n\n      if (hostBindings.length) {\n        updateRendererExpressions = hostBindings.map((hostBinding, bindingIndex) => this._preprocessUpdateExpression({\n          context: hostBinding.context,\n          nodeIndex,\n          bindingIndex,\n          sourceSpan: hostBinding.inputAst.sourceSpan,\n          value: hostBinding.inputAst.value\n        }));\n        inputDefs = hostBindings.map(hostBinding => elementBindingDef(hostBinding.inputAst, hostBinding.dirAst));\n      }\n\n      outputDefs = usedEvents.map(([target, eventName]) => literalArr([literal(target), literal(eventName)]));\n    }\n\n    templateVisitAll(this, ast.children);\n    const childCount = this.nodes.length - nodeIndex - 1;\n    const compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);\n    let compRendererType = NULL_EXPR;\n    let compView = NULL_EXPR;\n\n    if (compAst) {\n      compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n      compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n    } // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n\n\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: ast.sourceSpan,\n      nodeFlags: 1\n      /* TypeElement */\n      | flags,\n      nodeDef: importExpr(Identifiers$1.elementDef).callFn([literal(checkIndex), literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR, inputDefs.length ? literalArr(inputDefs) : NULL_EXPR, outputDefs.length ? literalArr(outputDefs) : NULL_EXPR, this._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType]),\n      updateRenderer: updateRendererExpressions\n    });\n  }\n\n  _visitElementOrTemplate(nodeIndex, ast) {\n    let flags = 0\n    /* None */\n    ;\n\n    if (ast.hasViewContainer) {\n      flags |= 16777216\n      /* EmbeddedViews */\n      ;\n    }\n\n    const usedEvents = new Map();\n    ast.outputs.forEach(event => {\n      const {\n        name,\n        target\n      } = elementEventNameAndTarget(event, null);\n      usedEvents.set(elementEventFullName(target, name), [target, name]);\n    });\n    ast.directives.forEach(dirAst => {\n      dirAst.hostEvents.forEach(event => {\n        const {\n          name,\n          target\n        } = elementEventNameAndTarget(event, dirAst);\n        usedEvents.set(elementEventFullName(target, name), [target, name]);\n      });\n    });\n    const hostBindings = [];\n    const hostEvents = [];\n\n    this._visitComponentFactoryResolverProvider(ast.directives);\n\n    ast.providers.forEach(providerAst => {\n      let dirAst = undefined;\n      ast.directives.forEach(localDirAst => {\n        if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n          dirAst = localDirAst;\n        }\n      });\n\n      if (dirAst) {\n        const {\n          hostBindings: dirHostBindings,\n          hostEvents: dirHostEvents\n        } = this._visitDirective(providerAst, dirAst, ast.references, ast.queryMatches, usedEvents);\n\n        hostBindings.push(...dirHostBindings);\n        hostEvents.push(...dirHostEvents);\n      } else {\n        this._visitProvider(providerAst, ast.queryMatches);\n      }\n    });\n    let queryMatchExprs = [];\n    ast.queryMatches.forEach(match => {\n      let valueType = undefined;\n\n      if (tokenReference(match.value) === this.reflector.resolveExternalReference(Identifiers$1.ElementRef)) {\n        valueType = 0\n        /* ElementRef */\n        ;\n      } else if (tokenReference(match.value) === this.reflector.resolveExternalReference(Identifiers$1.ViewContainerRef)) {\n        valueType = 3\n        /* ViewContainerRef */\n        ;\n      } else if (tokenReference(match.value) === this.reflector.resolveExternalReference(Identifiers$1.TemplateRef)) {\n        valueType = 2\n        /* TemplateRef */\n        ;\n      }\n\n      if (valueType != null) {\n        queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));\n      }\n    });\n    ast.references.forEach(ref => {\n      let valueType = undefined;\n\n      if (!ref.value) {\n        valueType = 1\n        /* RenderElement */\n        ;\n      } else if (tokenReference(ref.value) === this.reflector.resolveExternalReference(Identifiers$1.TemplateRef)) {\n        valueType = 2\n        /* TemplateRef */\n        ;\n      }\n\n      if (valueType != null) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));\n      }\n    });\n    ast.outputs.forEach(outputAst => {\n      hostEvents.push({\n        context: COMP_VAR,\n        eventAst: outputAst,\n        dirAst: null\n      });\n    });\n    return {\n      flags,\n      usedEvents: Array.from(usedEvents.values()),\n      queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n      hostBindings,\n      hostEvents: hostEvents\n    };\n  }\n\n  _visitDirective(providerAst, dirAst, refs, queryMatches, usedEvents) {\n    const nodeIndex = this.nodes.length; // reserve the space in the nodeDefs array so we can add children\n\n    this.nodes.push(null);\n    dirAst.directive.queries.forEach((query, queryIndex) => {\n      const queryId = dirAst.contentQueryStartId + queryIndex;\n      const flags = 67108864\n      /* TypeContentQuery */\n      | calcQueryFlags(query);\n      const bindingType = query.first ? 0\n      /* First */\n      : 1\n      /* All */\n      ;\n      this.nodes.push(() => ({\n        sourceSpan: dirAst.sourceSpan,\n        nodeFlags: flags,\n        nodeDef: importExpr(Identifiers$1.queryDef).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])])\n      }));\n    }); // Note: the operation below might also create new nodeDefs,\n    // but we don't want them to be a child of a directive,\n    // as they might be a provider/pipe on their own.\n    // I.e. we only allow queries as children of directives nodes.\n\n    const childCount = this.nodes.length - nodeIndex - 1;\n\n    let {\n      flags,\n      queryMatchExprs,\n      providerExpr,\n      depsExpr\n    } = this._visitProviderOrDirective(providerAst, queryMatches);\n\n    refs.forEach(ref => {\n      if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n        this.refNodeIndices[ref.name] = nodeIndex;\n        queryMatchExprs.push(literalArr([literal(ref.name), literal(4\n        /* Provider */\n        )]));\n      }\n    });\n\n    if (dirAst.directive.isComponent) {\n      flags |= 32768\n      /* Component */\n      ;\n    }\n\n    const inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {\n      const mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]); // Note: it's important to not quote the key so that we can capture renames by minifiers!\n\n      return new LiteralMapEntry(inputAst.directiveName, mapValue, false);\n    });\n    const outputDefs = [];\n    const dirMeta = dirAst.directive;\n    Object.keys(dirMeta.outputs).forEach(propName => {\n      const eventName = dirMeta.outputs[propName];\n\n      if (usedEvents.has(eventName)) {\n        // Note: it's important to not quote the key so that we can capture renames by minifiers!\n        outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));\n      }\n    });\n    let updateDirectiveExpressions = [];\n\n    if (dirAst.inputs.length || (flags & (262144\n    /* DoCheck */\n    | 65536\n    /* OnInit */\n    )) > 0) {\n      updateDirectiveExpressions = dirAst.inputs.map((input, bindingIndex) => this._preprocessUpdateExpression({\n        nodeIndex,\n        bindingIndex,\n        sourceSpan: input.sourceSpan,\n        context: COMP_VAR,\n        value: input.value\n      }));\n    }\n\n    const dirContextExpr = importExpr(Identifiers$1.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\n    const hostBindings = dirAst.hostProperties.map(inputAst => ({\n      context: dirContextExpr,\n      dirAst,\n      inputAst\n    }));\n    const hostEvents = dirAst.hostEvents.map(hostEventAst => ({\n      context: dirContextExpr,\n      eventAst: hostEventAst,\n      dirAst\n    })); // Check index is the same as the node index during compilation\n    // They might only differ at runtime\n\n    const checkIndex = nodeIndex;\n\n    this.nodes[nodeIndex] = () => ({\n      sourceSpan: dirAst.sourceSpan,\n      nodeFlags: 16384\n      /* TypeDirective */\n      | flags,\n      nodeDef: importExpr(Identifiers$1.directiveDef).callFn([literal(checkIndex), literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, literal(childCount), providerExpr, depsExpr, inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR, outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR]),\n      updateDirectives: updateDirectiveExpressions,\n      directive: dirAst.directive.type\n    });\n\n    return {\n      hostBindings,\n      hostEvents\n    };\n  }\n\n  _visitProvider(providerAst, queryMatches) {\n    this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n  }\n\n  _visitComponentFactoryResolverProvider(directives) {\n    const componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);\n\n    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n      const {\n        providerExpr,\n        depsExpr,\n        flags,\n        tokenExpr\n      } = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192\n      /* PrivateProvider */\n      , componentDirMeta.directive.entryComponents);\n\n      this._addProviderNode({\n        providerExpr,\n        depsExpr,\n        flags,\n        tokenExpr,\n        queryMatchExprs: [],\n        sourceSpan: componentDirMeta.sourceSpan\n      });\n    }\n  }\n\n  _addProviderNode(data) {\n    // providerDef(\n    //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n    //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n    this.nodes.push(() => ({\n      sourceSpan: data.sourceSpan,\n      nodeFlags: data.flags,\n      nodeDef: importExpr(Identifiers$1.providerDef).callFn([literal(data.flags), data.queryMatchExprs.length ? literalArr(data.queryMatchExprs) : NULL_EXPR, data.tokenExpr, data.providerExpr, data.depsExpr])\n    }));\n  }\n\n  _visitProviderOrDirective(providerAst, queryMatches) {\n    let flags = 0\n    /* None */\n    ;\n    let queryMatchExprs = [];\n    queryMatches.forEach(match => {\n      if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n        queryMatchExprs.push(literalArr([literal(match.queryId), literal(4\n        /* Provider */\n        )]));\n      }\n    });\n    const {\n      providerExpr,\n      depsExpr,\n      flags: providerFlags,\n      tokenExpr\n    } = providerDef(this.outputCtx, providerAst);\n    return {\n      flags: flags | providerFlags,\n      queryMatchExprs,\n      providerExpr,\n      depsExpr,\n      tokenExpr,\n      sourceSpan: providerAst.sourceSpan\n    };\n  }\n\n  getLocal(name) {\n    if (name == EventHandlerVars.event.name) {\n      return EventHandlerVars.event;\n    }\n\n    let currViewExpr = VIEW_VAR;\n\n    for (let currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {\n      // check references\n      const refNodeIndex = currBuilder.refNodeIndices[name];\n\n      if (refNodeIndex != null) {\n        return importExpr(Identifiers$1.nodeValue).callFn([currViewExpr, literal(refNodeIndex)]);\n      } // check variables\n\n\n      const varAst = currBuilder.variables.find(varAst => varAst.name === name);\n\n      if (varAst) {\n        const varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n        return currViewExpr.prop('context').prop(varValue);\n      }\n    }\n\n    return null;\n  }\n\n  notifyImplicitReceiverUse() {// Not needed in ViewEngine as ViewEngine walks through the generated\n    // expressions to figure out if the implicit receiver is used and needs\n    // to be generated as part of the pre-update statements.\n  }\n\n  maybeRestoreView() {// Not necessary in ViewEngine, because view restoration is an Ivy concept.\n  }\n\n  _createLiteralArrayConverter(sourceSpan, argCount) {\n    if (argCount === 0) {\n      const valueExpr = importExpr(Identifiers$1.EMPTY_ARRAY);\n      return () => valueExpr;\n    }\n\n    const checkIndex = this.nodes.length;\n    this.nodes.push(() => ({\n      sourceSpan,\n      nodeFlags: 32\n      /* TypePureArray */\n      ,\n      nodeDef: importExpr(Identifiers$1.pureArrayDef).callFn([literal(checkIndex), literal(argCount)])\n    }));\n    return args => callCheckStmt(checkIndex, args);\n  }\n\n  _createLiteralMapConverter(sourceSpan, keys) {\n    if (keys.length === 0) {\n      const valueExpr = importExpr(Identifiers$1.EMPTY_MAP);\n      return () => valueExpr;\n    }\n\n    const map = literalMap(keys.map((e, i) => Object.assign(Object.assign({}, e), {\n      value: literal(i)\n    })));\n    const checkIndex = this.nodes.length;\n    this.nodes.push(() => ({\n      sourceSpan,\n      nodeFlags: 64\n      /* TypePureObject */\n      ,\n      nodeDef: importExpr(Identifiers$1.pureObjectDef).callFn([literal(checkIndex), map])\n    }));\n    return args => callCheckStmt(checkIndex, args);\n  }\n\n  _createPipeConverter(expression, name, argCount) {\n    const pipe = this.usedPipes.find(pipeSummary => pipeSummary.name === name);\n\n    if (pipe.pure) {\n      const checkIndex = this.nodes.length;\n      this.nodes.push(() => ({\n        sourceSpan: expression.sourceSpan,\n        nodeFlags: 128\n        /* TypePurePipe */\n        ,\n        nodeDef: importExpr(Identifiers$1.purePipeDef).callFn([literal(checkIndex), literal(argCount)])\n      })); // find underlying pipe in the component view\n\n      let compViewExpr = VIEW_VAR;\n      let compBuilder = this;\n\n      while (compBuilder.parent) {\n        compBuilder = compBuilder.parent;\n        compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);\n      }\n\n      const pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n      const pipeValueExpr = importExpr(Identifiers$1.nodeValue).callFn([compViewExpr, literal(pipeNodeIndex)]);\n      return args => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex, [pipeValueExpr].concat(args)));\n    } else {\n      const nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n\n      const nodeValueExpr = importExpr(Identifiers$1.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\n      return args => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr.callMethod('transform', args));\n    }\n  }\n\n  _createPipe(sourceSpan, pipe) {\n    const nodeIndex = this.nodes.length;\n    let flags = 0\n    /* None */\n    ;\n    pipe.type.lifecycleHooks.forEach(lifecycleHook => {\n      // for pipes, we only support ngOnDestroy\n      if (lifecycleHook === LifecycleHooks.OnDestroy) {\n        flags |= lifecycleHookToNodeFlag(lifecycleHook);\n      }\n    });\n    const depExprs = pipe.type.diDeps.map(diDep => depDef(this.outputCtx, diDep)); // function pipeDef(\n    //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n\n    this.nodes.push(() => ({\n      sourceSpan,\n      nodeFlags: 16\n      /* TypePipe */\n      ,\n      nodeDef: importExpr(Identifiers$1.pipeDef).callFn([literal(flags), this.outputCtx.importExpr(pipe.type.reference), literalArr(depExprs)])\n    }));\n    return nodeIndex;\n  }\n  /**\r\n   * For the AST in `UpdateExpression.value`:\r\n   * - create nodes for pipes, literal arrays and, literal maps,\r\n   * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\r\n   *\r\n   * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\r\n   */\n\n\n  _preprocessUpdateExpression(expression) {\n    return {\n      nodeIndex: expression.nodeIndex,\n      bindingIndex: expression.bindingIndex,\n      sourceSpan: expression.sourceSpan,\n      context: expression.context,\n      value: convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: argCount => this._createLiteralArrayConverter(expression.sourceSpan, argCount),\n        createLiteralMapConverter: keys => this._createLiteralMapConverter(expression.sourceSpan, keys),\n        createPipeConverter: (name, argCount) => this._createPipeConverter(expression, name, argCount)\n      }, expression.value)\n    };\n  }\n\n  _createNodeExpressions() {\n    const self = this;\n    let updateBindingCount = 0;\n    const updateRendererStmts = [];\n    const updateDirectivesStmts = [];\n    const nodeDefExprs = this.nodes.map((factory, nodeIndex) => {\n      const {\n        nodeDef,\n        nodeFlags,\n        updateDirectives,\n        updateRenderer,\n        sourceSpan\n      } = factory();\n\n      if (updateRenderer) {\n        updateRendererStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n      }\n\n      if (updateDirectives) {\n        updateDirectivesStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144\n        /* DoCheck */\n        | 65536\n        /* OnInit */\n        )) > 0));\n      } // We use a comma expression to call the log function before\n      // the nodeDef function, but still use the result of the nodeDef function\n      // as the value.\n      // Note: We only add the logger to elements / text nodes,\n      // so we don't generate too much code.\n\n\n      const logWithNodeDef = nodeFlags & 3\n      /* CatRenderNode */\n      ? new CommaExpr([LOG_VAR$1.callFn([]).callFn([]), nodeDef]) : nodeDef;\n      return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n    });\n    return {\n      updateRendererStmts,\n      updateDirectivesStmts,\n      nodeDefExprs\n    };\n\n    function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {\n      const updateStmts = [];\n      const exprs = expressions.map(({\n        sourceSpan,\n        context,\n        value\n      }) => {\n        const bindingId = `${updateBindingCount++}`;\n        const nameResolver = context === COMP_VAR ? self : null;\n        const {\n          stmts,\n          currValExpr\n        } = convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General);\n        updateStmts.push(...stmts.map(stmt => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n        return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n      });\n\n      if (expressions.length || allowEmptyExprs) {\n        updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n      }\n\n      return updateStmts;\n    }\n  }\n\n  _createElementHandleEventFn(nodeIndex, handlers) {\n    const handleEventStmts = [];\n    let handleEventBindingCount = 0;\n    handlers.forEach(({\n      context,\n      eventAst,\n      dirAst\n    }) => {\n      const bindingId = `${handleEventBindingCount++}`;\n      const nameResolver = context === COMP_VAR ? this : null;\n      const {\n        stmts,\n        allowDefault\n      } = convertActionBinding(nameResolver, context, eventAst.handler, bindingId);\n      const trueStmts = stmts;\n\n      if (allowDefault) {\n        trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n      }\n\n      const {\n        target: eventTarget,\n        name: eventName\n      } = elementEventNameAndTarget(eventAst, dirAst);\n      const fullEventName = elementEventFullName(eventTarget, eventName);\n      handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));\n    });\n    let handleEventFn;\n\n    if (handleEventStmts.length > 0) {\n      const preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];\n\n      if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {\n        preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n      }\n\n      handleEventFn = fn([new FnParam(VIEW_VAR.name, INFERRED_TYPE), new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE), new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)], [...preStmts, ...handleEventStmts, new ReturnStatement(ALLOW_DEFAULT_VAR)], INFERRED_TYPE);\n    } else {\n      handleEventFn = NULL_EXPR;\n    }\n\n    return handleEventFn;\n  }\n\n  visitDirective(ast, context) {}\n\n  visitDirectiveProperty(ast, context) {}\n\n  visitReference(ast, context) {}\n\n  visitVariable(ast, context) {}\n\n  visitEvent(ast, context) {}\n\n  visitElementProperty(ast, context) {}\n\n  visitAttr(ast, context) {}\n\n}\n\nfunction needsAdditionalRootNode(astNodes) {\n  const lastAstNode = astNodes[astNodes.length - 1];\n\n  if (lastAstNode instanceof EmbeddedTemplateAst) {\n    return lastAstNode.hasViewContainer;\n  }\n\n  if (lastAstNode instanceof ElementAst) {\n    if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n      return needsAdditionalRootNode(lastAstNode.children);\n    }\n\n    return lastAstNode.hasViewContainer;\n  }\n\n  return lastAstNode instanceof NgContentAst;\n}\n\nfunction elementBindingDef(inputAst, dirAst) {\n  const inputType = inputAst.type;\n\n  switch (inputType) {\n    case 1\n    /* Attribute */\n    :\n      return literalArr([literal(1\n      /* TypeElementAttribute */\n      ), literal(inputAst.name), literal(inputAst.securityContext)]);\n\n    case 0\n    /* Property */\n    :\n      return literalArr([literal(8\n      /* TypeProperty */\n      ), literal(inputAst.name), literal(inputAst.securityContext)]);\n\n    case 4\n    /* Animation */\n    :\n      const bindingType = 8\n      /* TypeProperty */\n      | (dirAst && dirAst.directive.isComponent ? 32\n      /* SyntheticHostProperty */\n      : 16\n      /* SyntheticProperty */\n      );\n      return literalArr([literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)]);\n\n    case 2\n    /* Class */\n    :\n      return literalArr([literal(2\n      /* TypeElementClass */\n      ), literal(inputAst.name), NULL_EXPR]);\n\n    case 3\n    /* Style */\n    :\n      return literalArr([literal(4\n      /* TypeElementStyle */\n      ), literal(inputAst.name), literal(inputAst.unit)]);\n\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected = inputType;\n      throw new Error(`unexpected ${unexpected}`);\n  }\n}\n\nfunction fixedAttrsDef(elementAst) {\n  const mapResult = Object.create(null);\n  elementAst.attrs.forEach(attrAst => {\n    mapResult[attrAst.name] = attrAst.value;\n  });\n  elementAst.directives.forEach(dirAst => {\n    Object.keys(dirAst.directive.hostAttributes).forEach(name => {\n      const value = dirAst.directive.hostAttributes[name];\n      const prevValue = mapResult[name];\n      mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n    });\n  }); // Note: We need to sort to get a defined output order\n  // for tests and for caching generated artifacts...\n\n  return literalArr(Object.keys(mapResult).sort().map(attrName => literalArr([literal(attrName), literal(mapResult[attrName])])));\n}\n\nfunction mergeAttributeValue(attrName, attrValue1, attrValue2) {\n  if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {\n    return `${attrValue1} ${attrValue2}`;\n  } else {\n    return attrValue2;\n  }\n}\n\nfunction callCheckStmt(nodeIndex, exprs) {\n  if (exprs.length > 10) {\n    return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1\n    /* Dynamic */\n    ), literalArr(exprs)]);\n  } else {\n    return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0\n    /* Inline */\n    ), ...exprs]);\n  }\n}\n\nfunction callUnwrapValue(nodeIndex, bindingIdx, expr) {\n  return importExpr(Identifiers$1.unwrapValue).callFn([VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr]);\n}\n\nfunction elementEventNameAndTarget(eventAst, dirAst) {\n  if (eventAst.isAnimation) {\n    return {\n      name: `@${eventAst.name}.${eventAst.phase}`,\n      target: dirAst && dirAst.directive.isComponent ? 'component' : null\n    };\n  } else {\n    return eventAst;\n  }\n}\n\nfunction calcQueryFlags(query) {\n  let flags = 0\n  /* None */\n  ; // Note: We only make queries static that query for a single item and the user specifically\n  // set the to be static. This is because of backwards compatibility with the old view compiler...\n\n  if (query.first && query.static) {\n    flags |= 268435456\n    /* StaticQuery */\n    ;\n  } else {\n    flags |= 536870912\n    /* DynamicQuery */\n    ;\n  }\n\n  if (query.emitDistinctChangesOnly) {\n    flags |= -2147483648\n    /* EmitDistinctChangesOnly */\n    ;\n  }\n\n  return flags;\n}\n\nfunction elementEventFullName(target, name) {\n  return target ? `${target}:${name}` : name;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A container for message extracted from the templates.\r\n */\n\n\nclass MessageBundle {\n  constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\n    this._htmlParser = _htmlParser;\n    this._implicitTags = _implicitTags;\n    this._implicitAttrs = _implicitAttrs;\n    this._locale = _locale;\n    this._messages = [];\n  }\n\n  updateFromTemplate(html, url, interpolationConfig) {\n    const htmlParserResult = this._htmlParser.parse(html, url, {\n      tokenizeExpansionForms: true,\n      interpolationConfig\n    });\n\n    if (htmlParserResult.errors.length) {\n      return htmlParserResult.errors;\n    }\n\n    const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n\n    if (i18nParserResult.errors.length) {\n      return i18nParserResult.errors;\n    }\n\n    this._messages.push(...i18nParserResult.messages);\n\n    return [];\n  } // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n\n\n  getMessages() {\n    return this._messages;\n  }\n\n  write(serializer, filterSources) {\n    const messages = {};\n    const mapperVisitor = new MapPlaceholderNames(); // Deduplicate messages based on their ID\n\n    this._messages.forEach(message => {\n      const id = serializer.digest(message);\n\n      if (!messages.hasOwnProperty(id)) {\n        messages[id] = message;\n      } else {\n        messages[id].sources.push(...message.sources);\n      }\n    }); // Transform placeholder names using the serializer mapping\n\n\n    const msgList = Object.keys(messages).map(id => {\n      const mapper = serializer.createNameMapper(messages[id]);\n      const src = messages[id];\n      const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n      let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n\n      if (filterSources) {\n        transformedMessage.sources.forEach(source => source.filePath = filterSources(source.filePath));\n      }\n\n      return transformedMessage;\n    });\n    return serializer.write(msgList, this._locale);\n  }\n\n} // Transform an i18n AST by renaming the placeholder nodes with the given mapper\n\n\nclass MapPlaceholderNames extends CloneVisitor {\n  convert(nodes, mapper) {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n\n  visitTagPlaceholder(ph, mapper) {\n    const startName = mapper.toPublicName(ph.startName);\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan, ph.startSourceSpan, ph.endSourceSpan);\n  }\n\n  visitPlaceholder(ph, mapper) {\n    return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph, mapper) {\n    return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass GeneratedFile {\n  constructor(srcFileUrl, genFileUrl, sourceOrStmts) {\n    this.srcFileUrl = srcFileUrl;\n    this.genFileUrl = genFileUrl;\n\n    if (typeof sourceOrStmts === 'string') {\n      this.source = sourceOrStmts;\n      this.stmts = null;\n    } else {\n      this.source = null;\n      this.stmts = sourceOrStmts;\n    }\n  }\n\n  isEquivalent(other) {\n    if (this.genFileUrl !== other.genFileUrl) {\n      return false;\n    }\n\n    if (this.source) {\n      return this.source === other.source;\n    }\n\n    if (other.stmts == null) {\n      return false;\n    } // Note: the constructor guarantees that if this.source is not filled,\n    // then this.stmts is.\n\n\n    return areAllEquivalent(this.stmts, other.stmts);\n  }\n\n}\n\nfunction toTypeScript(file, preamble = '') {\n  if (!file.stmts) {\n    throw new Error(`Illegal state: No stmts present on GeneratedFile ${file.genFileUrl}`);\n  }\n\n  return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction listLazyRoutes(moduleMeta, reflector) {\n  const allLazyRoutes = [];\n\n  for (const {\n    provider,\n    module\n  } of moduleMeta.transitiveModule.providers) {\n    if (tokenReference(provider.token) === reflector.ROUTES) {\n      const loadChildren = _collectLoadChildren(provider.useValue);\n\n      for (const route of loadChildren) {\n        allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));\n      }\n    }\n  }\n\n  return allLazyRoutes;\n}\n\nfunction _collectLoadChildren(routes, target = []) {\n  if (typeof routes === 'string') {\n    target.push(routes);\n  } else if (Array.isArray(routes)) {\n    for (const route of routes) {\n      _collectLoadChildren(route, target);\n    }\n  } else if (routes.loadChildren) {\n    _collectLoadChildren(routes.loadChildren, target);\n  } else if (routes.children) {\n    _collectLoadChildren(routes.children, target);\n  }\n\n  return target;\n}\n\nfunction parseLazyRoute(route, reflector, module) {\n  const [routePath, routeName] = route.split('#');\n  const referencedModule = reflector.resolveExternalReference({\n    moduleName: routePath,\n    name: routeName\n  }, module ? module.filePath : undefined);\n  return {\n    route: route,\n    module: module || referencedModule,\n    referencedModule\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\n\nclass ResolvedStaticSymbol {\n  constructor(symbol, metadata) {\n    this.symbol = symbol;\n    this.metadata = metadata;\n  }\n\n}\n\nconst SUPPORTED_SCHEMA_VERSION = 4;\n/**\r\n * This class is responsible for loading metadata per symbol,\r\n * and normalizing references between symbols.\r\n *\r\n * Internally, it only uses symbols without members,\r\n * and deduces the values for symbols with members based\r\n * on these symbols.\r\n */\n\nclass StaticSymbolResolver {\n  constructor(host, staticSymbolCache, summaryResolver, errorRecorder) {\n    this.host = host;\n    this.staticSymbolCache = staticSymbolCache;\n    this.summaryResolver = summaryResolver;\n    this.errorRecorder = errorRecorder;\n    this.metadataCache = new Map(); // Note: this will only contain StaticSymbols without members!\n\n    this.resolvedSymbols = new Map(); // Note: this will only contain StaticSymbols without members!\n\n    this.importAs = new Map();\n    this.symbolResourcePaths = new Map();\n    this.symbolFromFile = new Map();\n    this.knownFileNameToModuleNames = new Map();\n  }\n\n  resolveSymbol(staticSymbol) {\n    if (staticSymbol.members.length > 0) {\n      return this._resolveSymbolMembers(staticSymbol);\n    } // Note: always ask for a summary first,\n    // as we might have read shallow metadata via a .d.ts file\n    // for the symbol.\n\n\n    const resultFromSummary = this._resolveSymbolFromSummary(staticSymbol);\n\n    if (resultFromSummary) {\n      return resultFromSummary;\n    }\n\n    const resultFromCache = this.resolvedSymbols.get(staticSymbol);\n\n    if (resultFromCache) {\n      return resultFromCache;\n    } // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n    // have summaries, only .d.ts files. So we always need to check both, the summary\n    // and metadata.\n\n\n    this._createSymbolsOf(staticSymbol.filePath);\n\n    return this.resolvedSymbols.get(staticSymbol);\n  }\n  /**\r\n   * getImportAs produces a symbol that can be used to import the given symbol.\r\n   * The import might be different than the symbol if the symbol is exported from\r\n   * a library with a summary; in which case we want to import the symbol from the\r\n   * ngfactory re-export instead of directly to avoid introducing a direct dependency\r\n   * on an otherwise indirect dependency.\r\n   *\r\n   * @param staticSymbol the symbol for which to generate a import symbol\r\n   */\n\n\n  getImportAs(staticSymbol, useSummaries = true) {\n    if (staticSymbol.members.length) {\n      const baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\n      const baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n      return baseImportAs ? this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) : null;\n    }\n\n    const summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);\n\n    if (summarizedFileName !== staticSymbol.filePath) {\n      const summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);\n      const baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);\n      const baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n      return baseImportAs ? this.getStaticSymbol(summaryForJitFileName(baseImportAs.filePath), summaryForJitName(baseImportAs.name), baseSymbol.members) : null;\n    }\n\n    let result = useSummaries && this.summaryResolver.getImportAs(staticSymbol) || null;\n\n    if (!result) {\n      result = this.importAs.get(staticSymbol);\n    }\n\n    return result;\n  }\n  /**\r\n   * getResourcePath produces the path to the original location of the symbol and should\r\n   * be used to determine the relative location of resource references recorded in\r\n   * symbol metadata.\r\n   */\n\n\n  getResourcePath(staticSymbol) {\n    return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;\n  }\n  /**\r\n   * getTypeArity returns the number of generic type parameters the given symbol\r\n   * has. If the symbol is not a type the result is null.\r\n   */\n\n\n  getTypeArity(staticSymbol) {\n    // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would\n    // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.\n    // All references to generated classes must include the correct arity whenever\n    // generating code.\n    if (isGeneratedFile(staticSymbol.filePath)) {\n      return null;\n    }\n\n    let resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));\n\n    while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n      resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));\n    }\n\n    return resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity || null;\n  }\n\n  getKnownModuleName(filePath) {\n    return this.knownFileNameToModuleNames.get(filePath) || null;\n  }\n\n  recordImportAs(sourceSymbol, targetSymbol) {\n    sourceSymbol.assertNoMembers();\n    targetSymbol.assertNoMembers();\n    this.importAs.set(sourceSymbol, targetSymbol);\n  }\n\n  recordModuleNameForFileName(fileName, moduleName) {\n    this.knownFileNameToModuleNames.set(fileName, moduleName);\n  }\n  /**\r\n   * Invalidate all information derived from the given file and return the\r\n   * static symbols contained in the file.\r\n   *\r\n   * @param fileName the file to invalidate\r\n   */\n\n\n  invalidateFile(fileName) {\n    this.metadataCache.delete(fileName);\n    const symbols = this.symbolFromFile.get(fileName);\n\n    if (!symbols) {\n      return [];\n    }\n\n    this.symbolFromFile.delete(fileName);\n\n    for (const symbol of symbols) {\n      this.resolvedSymbols.delete(symbol);\n      this.importAs.delete(symbol);\n      this.symbolResourcePaths.delete(symbol);\n    }\n\n    return symbols;\n  }\n  /** @internal */\n\n\n  ignoreErrorsFor(cb) {\n    const recorder = this.errorRecorder;\n\n    this.errorRecorder = () => {};\n\n    try {\n      return cb();\n    } finally {\n      this.errorRecorder = recorder;\n    }\n  }\n\n  _resolveSymbolMembers(staticSymbol) {\n    const members = staticSymbol.members;\n    const baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\n\n    if (!baseResolvedSymbol) {\n      return null;\n    }\n\n    let baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);\n\n    if (baseMetadata instanceof StaticSymbol) {\n      return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\n    } else if (baseMetadata && baseMetadata.__symbolic === 'class') {\n      if (baseMetadata.statics && members.length === 1) {\n        return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\n      }\n    } else {\n      let value = baseMetadata;\n\n      for (let i = 0; i < members.length && value; i++) {\n        value = value[members[i]];\n      }\n\n      return new ResolvedStaticSymbol(staticSymbol, value);\n    }\n\n    return null;\n  }\n\n  _resolveSymbolFromSummary(staticSymbol) {\n    const summary = this.summaryResolver.resolveSummary(staticSymbol);\n    return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\n  }\n  /**\r\n   * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\r\n   * All types passed to the StaticResolver should be pseudo-types returned by this method.\r\n   *\r\n   * @param declarationFile the absolute path of the file where the symbol is declared\r\n   * @param name the name of the type.\r\n   * @param members a symbol for a static member of the named type\r\n   */\n\n\n  getStaticSymbol(declarationFile, name, members) {\n    return this.staticSymbolCache.get(declarationFile, name, members);\n  }\n  /**\r\n   * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\r\n   * metadata.\r\n   *\r\n   * @param filePath the absolute path to examine for decorators.\r\n   * @returns true if any class in the file has a decorator.\r\n   */\n\n\n  hasDecorators(filePath) {\n    const metadata = this.getModuleMetadata(filePath);\n\n    if (metadata['metadata']) {\n      return Object.keys(metadata['metadata']).some(metadataKey => {\n        const entry = metadata['metadata'][metadataKey];\n        return entry && entry.__symbolic === 'class' && entry.decorators;\n      });\n    }\n\n    return false;\n  }\n\n  getSymbolsOf(filePath) {\n    const summarySymbols = this.summaryResolver.getSymbolsOf(filePath);\n\n    if (summarySymbols) {\n      return summarySymbols;\n    } // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n    // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.\n\n\n    this._createSymbolsOf(filePath);\n\n    return this.symbolFromFile.get(filePath) || [];\n  }\n\n  _createSymbolsOf(filePath) {\n    if (this.symbolFromFile.has(filePath)) {\n      return;\n    }\n\n    const resolvedSymbols = [];\n    const metadata = this.getModuleMetadata(filePath);\n\n    if (metadata['importAs']) {\n      // Index bundle indices should use the importAs module name defined\n      // in the bundle.\n      this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);\n    } // handle the symbols in one of the re-export location\n\n\n    if (metadata['exports']) {\n      for (const moduleExport of metadata['exports']) {\n        // handle the symbols in the list of explicitly re-exported symbols.\n        if (moduleExport.export) {\n          moduleExport.export.forEach(exportSymbol => {\n            let symbolName;\n\n            if (typeof exportSymbol === 'string') {\n              symbolName = exportSymbol;\n            } else {\n              symbolName = exportSymbol.as;\n            }\n\n            symbolName = unescapeIdentifier(symbolName);\n            let symName = symbolName;\n\n            if (typeof exportSymbol !== 'string') {\n              symName = unescapeIdentifier(exportSymbol.name);\n            }\n\n            const resolvedModule = this.resolveModule(moduleExport.from, filePath);\n\n            if (resolvedModule) {\n              const targetSymbol = this.getStaticSymbol(resolvedModule, symName);\n              const sourceSymbol = this.getStaticSymbol(filePath, symbolName);\n              resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\n            }\n          });\n        } else {\n          // Handle the symbols loaded by 'export *' directives.\n          const resolvedModule = this.resolveModule(moduleExport.from, filePath);\n\n          if (resolvedModule && resolvedModule !== filePath) {\n            const nestedExports = this.getSymbolsOf(resolvedModule);\n            nestedExports.forEach(targetSymbol => {\n              const sourceSymbol = this.getStaticSymbol(filePath, targetSymbol.name);\n              resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\n            });\n          }\n        }\n      }\n    } // handle the actual metadata. Has to be after the exports\n    // as there might be collisions in the names, and we want the symbols\n    // of the current module to win ofter reexports.\n\n\n    if (metadata['metadata']) {\n      // handle direct declarations of the symbol\n      const topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\n      const origins = metadata['origins'] || {};\n      Object.keys(metadata['metadata']).forEach(metadataKey => {\n        const symbolMeta = metadata['metadata'][metadataKey];\n        const name = unescapeIdentifier(metadataKey);\n        const symbol = this.getStaticSymbol(filePath, name);\n        const origin = origins.hasOwnProperty(metadataKey) && origins[metadataKey];\n\n        if (origin) {\n          // If the symbol is from a bundled index, use the declaration location of the\n          // symbol so relative references (such as './my.html') will be calculated\n          // correctly.\n          const originFilePath = this.resolveModule(origin, filePath);\n\n          if (!originFilePath) {\n            this.reportError(new Error(`Couldn't resolve original symbol for ${origin} from ${this.host.getOutputName(filePath)}`));\n          } else {\n            this.symbolResourcePaths.set(symbol, originFilePath);\n          }\n        }\n\n        resolvedSymbols.push(this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames, symbolMeta));\n      });\n    }\n\n    const uniqueSymbols = new Set();\n\n    for (const resolvedSymbol of resolvedSymbols) {\n      this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);\n      uniqueSymbols.add(resolvedSymbol.symbol);\n    }\n\n    this.symbolFromFile.set(filePath, Array.from(uniqueSymbols));\n  }\n\n  createResolvedSymbol(sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {\n    // For classes that don't have Angular summaries / metadata,\n    // we only keep their arity, but nothing else\n    // (e.g. their constructor parameters).\n    // We do this to prevent introducing deep imports\n    // as we didn't generate .ngfactory.ts files with proper reexports.\n    const isTsFile = TS.test(sourceSymbol.filePath);\n\n    if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && !isTsFile && metadata && metadata['__symbolic'] === 'class') {\n      const transformedMeta = {\n        __symbolic: 'class',\n        arity: metadata.arity\n      };\n      return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n    }\n\n    let _originalFileMemo;\n\n    const getOriginalName = () => {\n      if (!_originalFileMemo) {\n        // Guess what the original file name is from the reference. If it has a `.d.ts` extension\n        // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have\n        // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`\n        // location as it is not important to finding the file.\n        _originalFileMemo = this.host.getOutputName(topLevelPath.replace(/((\\.ts)|(\\.d\\.ts)|)$/, '.ts').replace(/^.*node_modules[/\\\\]/, ''));\n      }\n\n      return _originalFileMemo;\n    };\n\n    const self = this;\n\n    class ReferenceTransformer extends ValueTransformer {\n      visitStringMap(map, functionParams) {\n        const symbolic = map['__symbolic'];\n\n        if (symbolic === 'function') {\n          const oldLen = functionParams.length;\n          functionParams.push(...(map['parameters'] || []));\n          const result = super.visitStringMap(map, functionParams);\n          functionParams.length = oldLen;\n          return result;\n        } else if (symbolic === 'reference') {\n          const module = map['module'];\n          const name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\n\n          if (!name) {\n            return null;\n          }\n\n          let filePath;\n\n          if (module) {\n            filePath = self.resolveModule(module, sourceSymbol.filePath);\n\n            if (!filePath) {\n              return {\n                __symbolic: 'error',\n                message: `Could not resolve ${module} relative to ${self.host.getMetadataFor(sourceSymbol.filePath)}.`,\n                line: map['line'],\n                character: map['character'],\n                fileName: getOriginalName()\n              };\n            }\n\n            return {\n              __symbolic: 'resolved',\n              symbol: self.getStaticSymbol(filePath, name),\n              line: map['line'],\n              character: map['character'],\n              fileName: getOriginalName()\n            };\n          } else if (functionParams.indexOf(name) >= 0) {\n            // reference to a function parameter\n            return {\n              __symbolic: 'reference',\n              name: name\n            };\n          } else {\n            if (topLevelSymbolNames.has(name)) {\n              return self.getStaticSymbol(topLevelPath, name);\n            } // ambient value\n\n\n            null;\n          }\n        } else if (symbolic === 'error') {\n          return Object.assign(Object.assign({}, map), {\n            fileName: getOriginalName()\n          });\n        } else {\n          return super.visitStringMap(map, functionParams);\n        }\n      }\n\n    }\n\n    const transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\n    let unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);\n\n    if (unwrappedTransformedMeta instanceof StaticSymbol) {\n      return this.createExport(sourceSymbol, unwrappedTransformedMeta);\n    }\n\n    return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n  }\n\n  createExport(sourceSymbol, targetSymbol) {\n    sourceSymbol.assertNoMembers();\n    targetSymbol.assertNoMembers();\n\n    if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {\n      // This case is for an ng library importing symbols from a plain ts library\n      // transitively.\n      // Note: We rely on the fact that we discover symbols in the direction\n      // from source files to library files\n      this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\n    }\n\n    return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\n  }\n\n  reportError(error, context, path) {\n    if (this.errorRecorder) {\n      this.errorRecorder(error, context && context.filePath || path);\n    } else {\n      throw error;\n    }\n  }\n  /**\r\n   * @param module an absolute path to a module file.\r\n   */\n\n\n  getModuleMetadata(module) {\n    let moduleMetadata = this.metadataCache.get(module);\n\n    if (!moduleMetadata) {\n      const moduleMetadatas = this.host.getMetadataFor(module);\n\n      if (moduleMetadatas) {\n        let maxVersion = -1;\n        moduleMetadatas.forEach(md => {\n          if (md && md['version'] > maxVersion) {\n            maxVersion = md['version'];\n            moduleMetadata = md;\n          }\n        });\n      }\n\n      if (!moduleMetadata) {\n        moduleMetadata = {\n          __symbolic: 'module',\n          version: SUPPORTED_SCHEMA_VERSION,\n          module: module,\n          metadata: {}\n        };\n      }\n\n      if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\n        const errorMessage = moduleMetadata['version'] == 2 ? `Unsupported metadata version ${moduleMetadata['version']} for module ${module}. This module should be compiled with a newer version of ngc` : `Metadata version mismatch for module ${this.host.getOutputName(module)}, found version ${moduleMetadata['version']}, expected ${SUPPORTED_SCHEMA_VERSION}`;\n        this.reportError(new Error(errorMessage));\n      }\n\n      this.metadataCache.set(module, moduleMetadata);\n    }\n\n    return moduleMetadata;\n  }\n\n  getSymbolByModule(module, symbolName, containingFile) {\n    const filePath = this.resolveModule(module, containingFile);\n\n    if (!filePath) {\n      this.reportError(new Error(`Could not resolve module ${module}${containingFile ? ' relative to ' + this.host.getOutputName(containingFile) : ''}`));\n      return this.getStaticSymbol(`ERROR:${module}`, symbolName);\n    }\n\n    return this.getStaticSymbol(filePath, symbolName);\n  }\n\n  resolveModule(module, containingFile) {\n    try {\n      return this.host.moduleNameToFileName(module, containingFile);\n    } catch (e) {\n      console.error(`Could not resolve module '${module}' relative to file ${containingFile}`);\n      this.reportError(e, undefined, containingFile);\n    }\n\n    return null;\n  }\n\n} // Remove extra underscore from escaped identifier.\n// See https://github.com/Microsoft/TypeScript/blob/master/src/compiler/utilities.ts\n\n\nfunction unescapeIdentifier(identifier) {\n  return identifier.startsWith('___') ? identifier.substr(1) : identifier;\n}\n\nfunction unwrapResolvedMetadata(metadata) {\n  if (metadata && metadata.__symbolic === 'resolved') {\n    return metadata.symbol;\n  }\n\n  return metadata;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types, createExternalSymbolReexports = false) {\n  const toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName); // for symbols, we use everything except for the class metadata itself\n  // (we keep the statics though), as the class metadata is contained in the\n  // CompileTypeSummary.\n\n  symbols.forEach(resolvedSymbol => toJsonSerializer.addSummary({\n    symbol: resolvedSymbol.symbol,\n    metadata: resolvedSymbol.metadata\n  })); // Add type summaries.\n\n  types.forEach(({\n    summary,\n    metadata\n  }) => {\n    toJsonSerializer.addSummary({\n      symbol: summary.type.reference,\n      metadata: undefined,\n      type: summary\n    });\n  });\n  const {\n    json,\n    exportAs\n  } = toJsonSerializer.serialize(createExternalSymbolReexports);\n\n  if (forJitCtx) {\n    const forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\n    types.forEach(({\n      summary,\n      metadata\n    }) => {\n      forJitSerializer.addSourceType(summary, metadata);\n    });\n    toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach(summary => {\n      if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\n        forJitSerializer.addLibType(summary.type);\n      }\n    });\n    forJitSerializer.serialize(exportAs);\n  }\n\n  return {\n    json,\n    exportAs\n  };\n}\n\nfunction deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {\n  const deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\n  return deserializer.deserialize(libraryFileName, json);\n}\n\nfunction createForJitStub(outputCtx, reference) {\n  return createSummaryForJitFunction(outputCtx, reference, NULL_EXPR);\n}\n\nfunction createSummaryForJitFunction(outputCtx, reference, value) {\n  const fnName = summaryForJitName(reference.name);\n  outputCtx.statements.push(fn([], [new ReturnStatement(value)], new ArrayType(DYNAMIC_TYPE)).toDeclStmt(fnName, [StmtModifier.Final, StmtModifier.Exported]));\n}\n\nclass ToJsonSerializer extends ValueTransformer {\n  constructor(symbolResolver, summaryResolver, srcFileName) {\n    super();\n    this.symbolResolver = symbolResolver;\n    this.summaryResolver = summaryResolver;\n    this.srcFileName = srcFileName; // Note: This only contains symbols without members.\n\n    this.symbols = [];\n    this.indexBySymbol = new Map();\n    this.reexportedBy = new Map(); // This now contains a `__symbol: number` in the place of\n    // StaticSymbols, but otherwise has the same shape as the original objects.\n\n    this.processedSummaryBySymbol = new Map();\n    this.processedSummaries = [];\n    this.unprocessedSymbolSummariesBySymbol = new Map();\n    this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\n  }\n\n  addSummary(summary) {\n    let unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\n    let processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n\n    if (!unprocessedSummary) {\n      unprocessedSummary = {\n        symbol: summary.symbol,\n        metadata: undefined\n      };\n      this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\n      processedSummary = {\n        symbol: this.processValue(summary.symbol, 0\n        /* None */\n        )\n      };\n      this.processedSummaries.push(processedSummary);\n      this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n    }\n\n    if (!unprocessedSummary.metadata && summary.metadata) {\n      let metadata = summary.metadata || {};\n\n      if (metadata.__symbolic === 'class') {\n        // For classes, we keep everything except their class decorators.\n        // We need to keep e.g. the ctor args, method names, method decorators\n        // so that the class can be extended in another compilation unit.\n        // We don't keep the class decorators as\n        // 1) they refer to data\n        //   that should not cause a rebuild of downstream compilation units\n        //   (e.g. inline templates of @Component, or @NgModule.declarations)\n        // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n        const clone = {};\n        Object.keys(metadata).forEach(propName => {\n          if (propName !== 'decorators') {\n            clone[propName] = metadata[propName];\n          }\n        });\n        metadata = clone;\n      } else if (isCall(metadata)) {\n        if (!isFunctionCall(metadata) && !isMethodCallOnVariable(metadata)) {\n          // Don't store complex calls as we won't be able to simplify them anyways later on.\n          metadata = {\n            __symbolic: 'error',\n            message: 'Complex function calls are not supported.'\n          };\n        }\n      } // Note: We need to keep storing ctor calls for e.g.\n      // `export const x = new InjectionToken(...)`\n\n\n      unprocessedSummary.metadata = metadata;\n      processedSummary.metadata = this.processValue(metadata, 1\n      /* ResolveValue */\n      );\n\n      if (metadata instanceof StaticSymbol && this.summaryResolver.isLibraryFile(metadata.filePath)) {\n        const declarationSymbol = this.symbols[this.indexBySymbol.get(metadata)];\n\n        if (!isLoweredSymbol(declarationSymbol.name)) {\n          // Note: symbols that were introduced during codegen in the user file can have a reexport\n          // if a user used `export *`. However, we can't rely on this as tsickle will change\n          // `export *` into named exports, using only the information from the typechecker.\n          // As we introduce the new symbols after typecheck, Tsickle does not know about them,\n          // and omits them when expanding `export *`.\n          // So we have to keep reexporting these symbols manually via .ngfactory files.\n          this.reexportedBy.set(declarationSymbol, summary.symbol);\n        }\n      }\n    }\n\n    if (!unprocessedSummary.type && summary.type) {\n      unprocessedSummary.type = summary.type; // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n      // as the type summaries already contain the transitive data that they require\n      // (in a minimal way).\n\n      processedSummary.type = this.processValue(summary.type, 0\n      /* None */\n      ); // except for reexported directives / pipes, so we need to store\n      // their summaries explicitly.\n\n      if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\n        const ngModuleSummary = summary.type;\n        ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(id => {\n          const symbol = id.reference;\n\n          if (this.summaryResolver.isLibraryFile(symbol.filePath) && !this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\n            const summary = this.summaryResolver.resolveSummary(symbol);\n\n            if (summary) {\n              this.addSummary(summary);\n            }\n          }\n        });\n      }\n    }\n  }\n  /**\r\n   * @param createExternalSymbolReexports Whether external static symbols should be re-exported.\r\n   * This can be enabled if external symbols should be re-exported by the current module in\r\n   * order to avoid dynamically generated module dependencies which can break strict dependency\r\n   * enforcements (as in Google3). Read more here: https://github.com/angular/angular/issues/25644\r\n   */\n\n\n  serialize(createExternalSymbolReexports) {\n    const exportAs = [];\n    const json = JSON.stringify({\n      moduleName: this.moduleName,\n      summaries: this.processedSummaries,\n      symbols: this.symbols.map((symbol, index) => {\n        symbol.assertNoMembers();\n        let importAs = undefined;\n\n        if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\n          const reexportSymbol = this.reexportedBy.get(symbol);\n\n          if (reexportSymbol) {\n            // In case the given external static symbol is already manually exported by the\n            // user, we just proxy the external static symbol reference to the manual export.\n            // This ensures that the AOT compiler imports the external symbol through the\n            // user export and does not introduce another dependency which is not needed.\n            importAs = this.indexBySymbol.get(reexportSymbol);\n          } else if (createExternalSymbolReexports) {\n            // In this case, the given external static symbol is *not* manually exported by\n            // the user, and we manually create a re-export in the factory file so that we\n            // don't introduce another module dependency. This is useful when running within\n            // Bazel so that the AOT compiler does not introduce any module dependencies\n            // which can break the strict dependency enforcement. (e.g. as in Google3)\n            // Read more about this here: https://github.com/angular/angular/issues/25644\n            const summary = this.unprocessedSymbolSummariesBySymbol.get(symbol);\n\n            if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\n              importAs = `${symbol.name}_${index}`;\n              exportAs.push({\n                symbol,\n                exportAs: importAs\n              });\n            }\n          }\n        }\n\n        return {\n          __symbol: index,\n          name: symbol.name,\n          filePath: this.summaryResolver.toSummaryFileName(symbol.filePath, this.srcFileName),\n          importAs: importAs\n        };\n      })\n    });\n    return {\n      json,\n      exportAs\n    };\n  }\n\n  processValue(value, flags) {\n    return visitValue(value, this, flags);\n  }\n\n  visitOther(value, context) {\n    if (value instanceof StaticSymbol) {\n      let baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n      const index = this.visitStaticSymbol(baseSymbol, context);\n      return {\n        __symbol: index,\n        members: value.members\n      };\n    }\n  }\n  /**\r\n   * Strip line and character numbers from ngsummaries.\r\n   * Emitting them causes white spaces changes to retrigger upstream\r\n   * recompilations in bazel.\r\n   * TODO: find out a way to have line and character numbers in errors without\r\n   * excessive recompilation in bazel.\r\n   */\n\n\n  visitStringMap(map, context) {\n    if (map['__symbolic'] === 'resolved') {\n      return visitValue(map['symbol'], this, context);\n    }\n\n    if (map['__symbolic'] === 'error') {\n      delete map['line'];\n      delete map['character'];\n    }\n\n    return super.visitStringMap(map, context);\n  }\n  /**\r\n   * Returns null if the options.resolveValue is true, and the summary for the symbol\r\n   * resolved to a type or could not be resolved.\r\n   */\n\n\n  visitStaticSymbol(baseSymbol, flags) {\n    let index = this.indexBySymbol.get(baseSymbol);\n    let summary = null;\n\n    if (flags & 1\n    /* ResolveValue */\n    && this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\n      if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\n        // the summary for this symbol was already added\n        // -> nothing to do.\n        return index;\n      }\n\n      summary = this.loadSummary(baseSymbol);\n\n      if (summary && summary.metadata instanceof StaticSymbol) {\n        // The summary is a reexport\n        index = this.visitStaticSymbol(summary.metadata, flags); // reset the summary as it is just a reexport, so we don't want to store it.\n\n        summary = null;\n      }\n    } else if (index != null) {\n      // Note: == on purpose to compare with undefined!\n      // No summary and the symbol is already added -> nothing to do.\n      return index;\n    } // Note: == on purpose to compare with undefined!\n\n\n    if (index == null) {\n      index = this.symbols.length;\n      this.symbols.push(baseSymbol);\n    }\n\n    this.indexBySymbol.set(baseSymbol, index);\n\n    if (summary) {\n      this.addSummary(summary);\n    }\n\n    return index;\n  }\n\n  loadSummary(symbol) {\n    let summary = this.summaryResolver.resolveSummary(symbol);\n\n    if (!summary) {\n      // some symbols might originate from a plain typescript library\n      // that just exported .d.ts and .metadata.json files, i.e. where no summary\n      // files were created.\n      const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n\n      if (resolvedSymbol) {\n        summary = {\n          symbol: resolvedSymbol.symbol,\n          metadata: resolvedSymbol.metadata\n        };\n      }\n    }\n\n    return summary;\n  }\n\n}\n\nclass ForJitSerializer {\n  constructor(outputCtx, symbolResolver, summaryResolver) {\n    this.outputCtx = outputCtx;\n    this.symbolResolver = symbolResolver;\n    this.summaryResolver = summaryResolver;\n    this.data = [];\n  }\n\n  addSourceType(summary, metadata) {\n    this.data.push({\n      summary,\n      metadata,\n      isLibrary: false\n    });\n  }\n\n  addLibType(summary) {\n    this.data.push({\n      summary,\n      metadata: null,\n      isLibrary: true\n    });\n  }\n\n  serialize(exportAsArr) {\n    const exportAsBySymbol = new Map();\n\n    for (const {\n      symbol,\n      exportAs\n    } of exportAsArr) {\n      exportAsBySymbol.set(symbol, exportAs);\n    }\n\n    const ngModuleSymbols = new Set();\n\n    for (const {\n      summary,\n      metadata,\n      isLibrary\n    } of this.data) {\n      if (summary.summaryKind === CompileSummaryKind.NgModule) {\n        // collect the symbols that refer to NgModule classes.\n        // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n        // we don't add the summaries of all referenced symbols when we serialize type summaries.\n        // See serializeSummaries for details.\n        ngModuleSymbols.add(summary.type.reference);\n        const modSummary = summary;\n\n        for (const mod of modSummary.modules) {\n          ngModuleSymbols.add(mod.reference);\n        }\n      }\n\n      if (!isLibrary) {\n        const fnName = summaryForJitName(summary.type.reference.name);\n        createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, metadata));\n      }\n    }\n\n    ngModuleSymbols.forEach(ngModuleSymbol => {\n      if (this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\n        let exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\n        const jitExportAsName = summaryForJitName(exportAs);\n        this.outputCtx.statements.push(variable(jitExportAsName).set(this.serializeSummaryRef(ngModuleSymbol)).toDeclStmt(null, [StmtModifier.Exported]));\n      }\n    });\n  }\n\n  serializeSummaryWithDeps(summary, metadata) {\n    const expressions = [this.serializeSummary(summary)];\n    let providers = [];\n\n    if (metadata instanceof CompileNgModuleMetadata) {\n      expressions.push(... // For directives / pipes, we only add the declared ones,\n      // and rely on transitively importing NgModules to get the transitive\n      // summaries.\n      metadata.declaredDirectives.concat(metadata.declaredPipes).map(type => type.reference) // For modules,\n      // we also add the summaries for modules\n      // from libraries.\n      // This is ok as we produce reexports for all transitive modules.\n      .concat(metadata.transitiveModule.modules.map(type => type.reference).filter(ref => ref !== metadata.type.reference)).map(ref => this.serializeSummaryRef(ref))); // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n      // and we already have transitive modules.\n\n      providers = metadata.providers;\n    } else if (summary.summaryKind === CompileSummaryKind.Directive) {\n      const dirSummary = summary;\n      providers = dirSummary.providers.concat(dirSummary.viewProviders);\n    } // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n    // declaredDirectives / declaredPipes), as we allow\n    // providers without ctor arguments to skip the `@Injectable` decorator,\n    // i.e. we didn't generate .ngsummary.ts files for these.\n\n\n    expressions.push(...providers.filter(provider => !!provider.useClass).map(provider => this.serializeSummary({\n      summaryKind: CompileSummaryKind.Injectable,\n      type: provider.useClass\n    })));\n    return literalArr(expressions);\n  }\n\n  serializeSummaryRef(typeSymbol) {\n    const jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n    return this.outputCtx.importExpr(jitImportedSymbol);\n  }\n\n  serializeSummary(data) {\n    const outputCtx = this.outputCtx;\n\n    class Transformer {\n      visitArray(arr, context) {\n        return literalArr(arr.map(entry => visitValue(entry, this, context)));\n      }\n\n      visitStringMap(map, context) {\n        return new LiteralMapExpr(Object.keys(map).map(key => new LiteralMapEntry(key, visitValue(map[key], this, context), false)));\n      }\n\n      visitPrimitive(value, context) {\n        return literal(value);\n      }\n\n      visitOther(value, context) {\n        if (value instanceof StaticSymbol) {\n          return outputCtx.importExpr(value);\n        } else {\n          throw new Error(`Illegal State: Encountered value ${value}`);\n        }\n      }\n\n    }\n\n    return visitValue(data, new Transformer(), null);\n  }\n\n}\n\nclass FromJsonDeserializer extends ValueTransformer {\n  constructor(symbolCache, summaryResolver) {\n    super();\n    this.symbolCache = symbolCache;\n    this.summaryResolver = summaryResolver;\n  }\n\n  deserialize(libraryFileName, json) {\n    const data = JSON.parse(json);\n    const allImportAs = [];\n    this.symbols = data.symbols.map(serializedSymbol => this.symbolCache.get(this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name));\n    data.symbols.forEach((serializedSymbol, index) => {\n      const symbol = this.symbols[index];\n      const importAs = serializedSymbol.importAs;\n\n      if (typeof importAs === 'number') {\n        allImportAs.push({\n          symbol,\n          importAs: this.symbols[importAs]\n        });\n      } else if (typeof importAs === 'string') {\n        allImportAs.push({\n          symbol,\n          importAs: this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs)\n        });\n      }\n    });\n    const summaries = visitValue(data.summaries, this, null);\n    return {\n      moduleName: data.moduleName,\n      summaries,\n      importAs: allImportAs\n    };\n  }\n\n  visitStringMap(map, context) {\n    if ('__symbol' in map) {\n      const baseSymbol = this.symbols[map['__symbol']];\n      const members = map['members'];\n      return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) : baseSymbol;\n    } else {\n      return super.visitStringMap(map, context);\n    }\n  }\n\n}\n\nfunction isCall(metadata) {\n  return metadata && metadata.__symbolic === 'call';\n}\n\nfunction isFunctionCall(metadata) {\n  return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\n}\n\nfunction isMethodCallOnVariable(metadata) {\n  return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' && unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass AotCompiler {\n  constructor(_config, _options, _host, reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _injectableCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {\n    this._config = _config;\n    this._options = _options;\n    this._host = _host;\n    this.reflector = reflector;\n    this._metadataResolver = _metadataResolver;\n    this._templateParser = _templateParser;\n    this._styleCompiler = _styleCompiler;\n    this._viewCompiler = _viewCompiler;\n    this._typeCheckCompiler = _typeCheckCompiler;\n    this._ngModuleCompiler = _ngModuleCompiler;\n    this._injectableCompiler = _injectableCompiler;\n    this._outputEmitter = _outputEmitter;\n    this._summaryResolver = _summaryResolver;\n    this._symbolResolver = _symbolResolver;\n    this._templateAstCache = new Map();\n    this._analyzedFiles = new Map();\n    this._analyzedFilesForInjectables = new Map();\n  }\n\n  clearCache() {\n    this._metadataResolver.clearCache();\n  }\n\n  analyzeModulesSync(rootFiles) {\n    const analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n    analyzeResult.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true));\n    return analyzeResult;\n  }\n\n  analyzeModulesAsync(rootFiles) {\n    const analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n    return Promise.all(analyzeResult.ngModules.map(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false))).then(() => analyzeResult);\n  }\n\n  _analyzeFile(fileName) {\n    let analyzedFile = this._analyzedFiles.get(fileName);\n\n    if (!analyzedFile) {\n      analyzedFile = analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\n\n      this._analyzedFiles.set(fileName, analyzedFile);\n    }\n\n    return analyzedFile;\n  }\n\n  _analyzeFileForInjectables(fileName) {\n    let analyzedFile = this._analyzedFilesForInjectables.get(fileName);\n\n    if (!analyzedFile) {\n      analyzedFile = analyzeFileForInjectables(this._host, this._symbolResolver, this._metadataResolver, fileName);\n\n      this._analyzedFilesForInjectables.set(fileName, analyzedFile);\n    }\n\n    return analyzedFile;\n  }\n\n  findGeneratedFileNames(fileName) {\n    const genFileNames = [];\n\n    const file = this._analyzeFile(fileName); // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\n    // or a reference to a non source file.\n    // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\n    // Only do this for StubEmitFlags.Basic, as adding a type check block\n    // does not change this file (as we generate type check blocks based on NgModules).\n\n\n    if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length || file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\n      genFileNames.push(ngfactoryFilePath(file.fileName, true));\n\n      if (this._options.enableSummariesForJit) {\n        genFileNames.push(summaryForJitFileName(file.fileName, true));\n      }\n    }\n\n    const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\n    file.directives.forEach(dirSymbol => {\n      const compMeta = this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol).metadata;\n\n      if (!compMeta.isComponent) {\n        return;\n      } // Note: compMeta is a component and therefore template is non null.\n\n\n      compMeta.template.styleUrls.forEach(styleUrl => {\n        const normalizedUrl = this._host.resourceNameToFileName(styleUrl, file.fileName);\n\n        if (!normalizedUrl) {\n          throw syntaxError(`Couldn't resolve resource ${styleUrl} relative to ${file.fileName}`);\n        }\n\n        const needsShim = (compMeta.template.encapsulation || this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\n        genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\n\n        if (this._options.allowEmptyCodegenFiles) {\n          genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\n        }\n      });\n    });\n    return genFileNames;\n  }\n\n  emitBasicStub(genFileName, originalFileName) {\n    const outputCtx = this._createOutputContext(genFileName);\n\n    if (genFileName.endsWith('.ngfactory.ts')) {\n      if (!originalFileName) {\n        throw new Error(`Assertion error: require the original file for .ngfactory.ts stubs. File: ${genFileName}`);\n      }\n\n      const originalFile = this._analyzeFile(originalFileName);\n\n      this._createNgFactoryStub(outputCtx, originalFile, 1\n      /* Basic */\n      );\n    } else if (genFileName.endsWith('.ngsummary.ts')) {\n      if (this._options.enableSummariesForJit) {\n        if (!originalFileName) {\n          throw new Error(`Assertion error: require the original file for .ngsummary.ts stubs. File: ${genFileName}`);\n        }\n\n        const originalFile = this._analyzeFile(originalFileName);\n\n        _createEmptyStub(outputCtx);\n\n        originalFile.ngModules.forEach(ngModule => {\n          // create exports that user code can reference\n          createForJitStub(outputCtx, ngModule.type.reference);\n        });\n      }\n    } else if (genFileName.endsWith('.ngstyle.ts')) {\n      _createEmptyStub(outputCtx);\n    } // Note: for the stubs, we don't need a property srcFileUrl,\n    // as later on in emitAllImpls we will create the proper GeneratedFiles with the\n    // correct srcFileUrl.\n    // This is good as e.g. for .ngstyle.ts files we can't derive\n    // the url of components based on the genFileUrl.\n\n\n    return this._codegenSourceModule('unknown', outputCtx);\n  }\n\n  emitTypeCheckStub(genFileName, originalFileName) {\n    const originalFile = this._analyzeFile(originalFileName);\n\n    const outputCtx = this._createOutputContext(genFileName);\n\n    if (genFileName.endsWith('.ngfactory.ts')) {\n      this._createNgFactoryStub(outputCtx, originalFile, 2\n      /* TypeCheck */\n      );\n    }\n\n    return outputCtx.statements.length > 0 ? this._codegenSourceModule(originalFile.fileName, outputCtx) : null;\n  }\n\n  loadFilesAsync(fileNames, tsFiles) {\n    const files = fileNames.map(fileName => this._analyzeFile(fileName));\n    const loadingPromises = [];\n    files.forEach(file => file.ngModules.forEach(ngModule => loadingPromises.push(this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false))));\n    const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n    return Promise.all(loadingPromises).then(_ => ({\n      analyzedModules: mergeAndValidateNgFiles(files),\n      analyzedInjectables: analyzedInjectables\n    }));\n  }\n\n  loadFilesSync(fileNames, tsFiles) {\n    const files = fileNames.map(fileName => this._analyzeFile(fileName));\n    files.forEach(file => file.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true)));\n    const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n    return {\n      analyzedModules: mergeAndValidateNgFiles(files),\n      analyzedInjectables: analyzedInjectables\n    };\n  }\n\n  _createNgFactoryStub(outputCtx, file, emitFlags) {\n    let componentId = 0;\n    file.ngModules.forEach((ngModuleMeta, ngModuleIndex) => {\n      // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n      // so we don't change the .ngfactory file too much when adding the type-check block.\n      // create exports that user code can reference\n      this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference); // add references to the symbols from the metadata.\n      // These can be used by the type check block for components,\n      // and they also cause TypeScript to include these files into the program too,\n      // which will make them part of the analyzedFiles.\n\n\n      const externalReferences = [// Add references that are available from all the modules and imports.\n      ...ngModuleMeta.transitiveModule.directives.map(d => d.reference), ...ngModuleMeta.transitiveModule.pipes.map(d => d.reference), ...ngModuleMeta.importedModules.map(m => m.type.reference), ...ngModuleMeta.exportedModules.map(m => m.type.reference), // Add references that might be inserted by the template compiler.\n      ...this._externalIdentifierReferences([Identifiers$1.TemplateRef, Identifiers$1.ElementRef])];\n      const externalReferenceVars = new Map();\n      externalReferences.forEach((ref, typeIndex) => {\n        externalReferenceVars.set(ref, `_decl${ngModuleIndex}_${typeIndex}`);\n      });\n      externalReferenceVars.forEach((varName, reference) => {\n        outputCtx.statements.push(variable(varName).set(NULL_EXPR.cast(DYNAMIC_TYPE)).toDeclStmt(expressionType(outputCtx.importExpr(reference,\n        /* typeParams */\n        null,\n        /* useSummaries */\n        false))));\n      });\n\n      if (emitFlags & 2\n      /* TypeCheck */\n      ) {\n        // add the type-check block for all components of the NgModule\n        ngModuleMeta.declaredDirectives.forEach(dirId => {\n          const compMeta = this._metadataResolver.getDirectiveMetadata(dirId.reference);\n\n          if (!compMeta.isComponent) {\n            return;\n          }\n\n          componentId++;\n\n          this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_Host_${componentId}`, ngModuleMeta, this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);\n\n          this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_${componentId}`, ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);\n        });\n      }\n    });\n\n    if (outputCtx.statements.length === 0) {\n      _createEmptyStub(outputCtx);\n    }\n  }\n\n  _externalIdentifierReferences(references) {\n    const result = [];\n\n    for (let reference of references) {\n      const token = createTokenForExternalReference(this.reflector, reference);\n\n      if (token.identifier) {\n        result.push(token.identifier.reference);\n      }\n    }\n\n    return result;\n  }\n\n  _createTypeCheckBlock(ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {\n    const {\n      template: parsedTemplate,\n      pipes: usedPipes\n    } = this._parseTemplate(compMeta, moduleMeta, directives);\n\n    ctx.statements.push(...this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx));\n  }\n\n  emitMessageBundle(analyzeResult, locale) {\n    const errors = [];\n    const htmlParser = new HtmlParser(); // TODO(vicb): implicit tags & attributes\n\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n    analyzeResult.files.forEach(file => {\n      const compMetas = [];\n      file.directives.forEach(directiveType => {\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\n\n        if (dirMeta && dirMeta.isComponent) {\n          compMetas.push(dirMeta);\n        }\n      });\n      compMetas.forEach(compMeta => {\n        const html = compMeta.template.template; // Template URL points to either an HTML or TS file depending on whether\n        // the file is used with `templateUrl:` or `template:`, respectively.\n\n        const templateUrl = compMeta.template.templateUrl;\n        const interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);\n        errors.push(...messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig));\n      });\n    });\n\n    if (errors.length) {\n      throw new Error(errors.map(e => e.toString()).join('\\n'));\n    }\n\n    return messageBundle;\n  }\n\n  emitAllPartialModules2(files) {\n    // Using reduce like this is a select many pattern (where map is a select pattern)\n    return files.reduce((r, file) => {\n      r.push(...this._emitPartialModule2(file.fileName, file.injectables));\n      return r;\n    }, []);\n  }\n\n  _emitPartialModule2(fileName, injectables) {\n    const context = this._createOutputContext(fileName);\n\n    injectables.forEach(injectable => this._injectableCompiler.compile(injectable, context));\n\n    if (context.statements && context.statements.length > 0) {\n      return [{\n        fileName,\n        statements: [...context.constantPool.statements, ...context.statements]\n      }];\n    }\n\n    return [];\n  }\n\n  emitAllImpls(analyzeResult) {\n    const {\n      ngModuleByPipeOrDirective,\n      files\n    } = analyzeResult;\n    const sourceModules = files.map(file => this._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables));\n    return flatten(sourceModules);\n  }\n\n  _compileImplFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\n    const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\n    const generatedFiles = [];\n\n    const outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n\n    generatedFiles.push(...this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx)); // compile all ng modules\n\n    ngModules.forEach(ngModuleMeta => this._compileModule(outputCtx, ngModuleMeta)); // compile components\n\n    directives.forEach(dirType => {\n      const compMeta = this._metadataResolver.getDirectiveMetadata(dirType);\n\n      if (!compMeta.isComponent) {\n        return;\n      }\n\n      const ngModule = ngModuleByPipeOrDirective.get(dirType);\n\n      if (!ngModule) {\n        throw new Error(`Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);\n      } // compile styles\n\n\n      const componentStylesheet = this._styleCompiler.compileComponent(outputCtx, compMeta); // Note: compMeta is a component and therefore template is non null.\n\n\n      compMeta.template.externalStylesheets.forEach(stylesheetMeta => {\n        // Note: fill non shim and shim style files as they might\n        // be shared by component with and without ViewEncapsulation.\n        const shim = this._styleCompiler.needsStyleShim(compMeta);\n\n        generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\n\n        if (this._options.allowEmptyCodegenFiles) {\n          generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\n        }\n      }); // compile components\n\n      const compViewVars = this._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);\n\n      this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n    });\n\n    if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\n      const srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n\n      generatedFiles.unshift(srcModule);\n    }\n\n    return generatedFiles;\n  }\n\n  _createSummary(srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {\n    const symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName).map(symbol => this._symbolResolver.resolveSymbol(symbol));\n\n    const typeData = [...ngModules.map(meta => ({\n      summary: this._metadataResolver.getNgModuleSummary(meta.type.reference),\n      metadata: this._metadataResolver.getNgModuleMetadata(meta.type.reference)\n    })), ...directives.map(ref => ({\n      summary: this._metadataResolver.getDirectiveSummary(ref),\n      metadata: this._metadataResolver.getDirectiveMetadata(ref)\n    })), ...pipes.map(ref => ({\n      summary: this._metadataResolver.getPipeSummary(ref),\n      metadata: this._metadataResolver.getPipeMetadata(ref)\n    })), ...injectables.map(ref => ({\n      summary: this._metadataResolver.getInjectableSummary(ref.symbol),\n      metadata: this._metadataResolver.getInjectableSummary(ref.symbol).type\n    }))];\n    const forJitOutputCtx = this._options.enableSummariesForJit ? this._createOutputContext(summaryForJitFileName(srcFileName, true)) : null;\n    const {\n      json,\n      exportAs\n    } = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData, this._options.createExternalSymbolFactoryReexports);\n    exportAs.forEach(entry => {\n      ngFactoryCtx.statements.push(variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [StmtModifier.Exported]));\n    });\n    const summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\n    const result = [summaryJson];\n\n    if (forJitOutputCtx) {\n      result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\n    }\n\n    return result;\n  }\n\n  _compileModule(outputCtx, ngModule) {\n    const providers = [];\n\n    if (this._options.locale) {\n      const normalizedLocale = this._options.locale.replace(/_/g, '-');\n\n      providers.push({\n        token: createTokenForExternalReference(this.reflector, Identifiers$1.LOCALE_ID),\n        useValue: normalizedLocale\n      });\n    }\n\n    if (this._options.i18nFormat) {\n      providers.push({\n        token: createTokenForExternalReference(this.reflector, Identifiers$1.TRANSLATIONS_FORMAT),\n        useValue: this._options.i18nFormat\n      });\n    }\n\n    this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n  }\n\n  _compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix) {\n    const hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\n\n    const hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix).viewClassVar;\n\n    const compFactoryVar = componentFactoryName(compMeta.type.reference);\n    const inputsExprs = [];\n\n    for (let propName in compMeta.inputs) {\n      const templateName = compMeta.inputs[propName]; // Don't quote so that the key gets minified...\n\n      inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\n    }\n\n    const outputsExprs = [];\n\n    for (let propName in compMeta.outputs) {\n      const templateName = compMeta.outputs[propName]; // Don't quote so that the key gets minified...\n\n      outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\n    }\n\n    outputCtx.statements.push(variable(compFactoryVar).set(importExpr(Identifiers$1.createComponentFactory).callFn([literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference), variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs), new LiteralMapExpr(outputsExprs), literalArr(compMeta.template.ngContentSelectors.map(selector => literal(selector)))])).toDeclStmt(importType(Identifiers$1.ComponentFactory, [expressionType(outputCtx.importExpr(compMeta.type.reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]));\n  }\n\n  _compileComponent(outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {\n    const {\n      template: parsedTemplate,\n      pipes: usedPipes\n    } = this._parseTemplate(compMeta, ngModule, directiveIdentifiers);\n\n    const stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);\n\n    const viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n\n    if (componentStyles) {\n      _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);\n    }\n\n    return viewResult;\n  }\n\n  _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\n    if (this._templateAstCache.has(compMeta.type.reference)) {\n      return this._templateAstCache.get(compMeta.type.reference);\n    }\n\n    const preserveWhitespaces = compMeta.template.preserveWhitespaces;\n    const directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n    const pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n\n    const result = this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);\n\n    this._templateAstCache.set(compMeta.type.reference, result);\n\n    return result;\n  }\n\n  _createOutputContext(genFilePath) {\n    const importExpr$1 = (symbol, typeParams = null, useSummaries = true) => {\n      if (!(symbol instanceof StaticSymbol)) {\n        throw new Error(`Internal error: unknown identifier ${JSON.stringify(symbol)}`);\n      }\n\n      const arity = this._symbolResolver.getTypeArity(symbol) || 0;\n      const {\n        filePath,\n        name,\n        members\n      } = this._symbolResolver.getImportAs(symbol, useSummaries) || symbol;\n\n      const importModule = this._fileNameToModuleName(filePath, genFilePath); // It should be good enough to compare filePath to genFilePath and if they are equal\n      // there is a self reference. However, ngfactory files generate to .ts but their\n      // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n      // and is tracked by #17705.\n\n\n      const selfReference = this._fileNameToModuleName(genFilePath, genFilePath);\n\n      const moduleName = importModule === selfReference ? null : importModule; // If we are in a type expression that refers to a generic type then supply\n      // the required type parameters. If there were not enough type parameters\n      // supplied, supply any as the type. Outside a type expression the reference\n      // should not supply type parameters and be treated as a simple value reference\n      // to the constructor function itself.\n\n      const suppliedTypeParams = typeParams || [];\n      const missingTypeParamsCount = arity - suppliedTypeParams.length;\n      const allTypeParams = suppliedTypeParams.concat(newArray(missingTypeParamsCount, DYNAMIC_TYPE));\n      return members.reduce((expr, memberName) => expr.prop(memberName), importExpr(new ExternalReference(moduleName, name, null), allTypeParams));\n    };\n\n    return {\n      statements: [],\n      genFilePath,\n      importExpr: importExpr$1,\n      constantPool: new ConstantPool()\n    };\n  }\n\n  _fileNameToModuleName(importedFilePath, containingFilePath) {\n    return this._summaryResolver.getKnownModuleName(importedFilePath) || this._symbolResolver.getKnownModuleName(importedFilePath) || this._host.fileNameToModuleName(importedFilePath, containingFilePath);\n  }\n\n  _codegenStyles(srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {\n    const outputCtx = this._createOutputContext(_stylesModuleUrl(stylesheetMetadata.moduleUrl, isShimmed, fileSuffix));\n\n    const compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\n\n    _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\n\n    return this._codegenSourceModule(srcFileUrl, outputCtx);\n  }\n\n  _codegenSourceModule(srcFileUrl, ctx) {\n    return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n  }\n\n  listLazyRoutes(entryRoute, analyzedModules) {\n    const self = this;\n\n    if (entryRoute) {\n      const symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;\n      return visitLazyRoute(symbol);\n    } else if (analyzedModules) {\n      const allLazyRoutes = [];\n\n      for (const ngModule of analyzedModules.ngModules) {\n        const lazyRoutes = listLazyRoutes(ngModule, this.reflector);\n\n        for (const lazyRoute of lazyRoutes) {\n          allLazyRoutes.push(lazyRoute);\n        }\n      }\n\n      return allLazyRoutes;\n    } else {\n      throw new Error(`Either route or analyzedModules has to be specified!`);\n    }\n\n    function visitLazyRoute(symbol, seenRoutes = new Set(), allLazyRoutes = []) {\n      // Support pointing to default exports, but stop recursing there,\n      // as the StaticReflector does not yet support default exports.\n      if (seenRoutes.has(symbol) || !symbol.name) {\n        return allLazyRoutes;\n      }\n\n      seenRoutes.add(symbol);\n      const lazyRoutes = listLazyRoutes(self._metadataResolver.getNgModuleMetadata(symbol, true), self.reflector);\n\n      for (const lazyRoute of lazyRoutes) {\n        allLazyRoutes.push(lazyRoute);\n        visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\n      }\n\n      return allLazyRoutes;\n    }\n  }\n\n}\n\nfunction _createEmptyStub(outputCtx) {\n  // Note: We need to produce at least one import statement so that\n  // TypeScript knows that the file is an es6 module. Otherwise our generated\n  // exports / imports won't be emitted properly by TypeScript.\n  outputCtx.statements.push(importExpr(Identifiers$1.ComponentFactory).toStmt());\n}\n\nfunction _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {\n  compileResult.dependencies.forEach(dep => {\n    dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n  });\n}\n\nfunction _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n  return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;\n}\n\nfunction analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n  const files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);\n\n  return mergeAnalyzedFiles(files);\n}\n\nfunction analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n  return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\n}\n\nfunction validateAnalyzedModules(analyzedModules) {\n  if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\n    const messages = analyzedModules.symbolsMissingModule.map(s => `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);\n    throw syntaxError(messages.join('\\n'));\n  }\n\n  return analyzedModules;\n} // Analyzes all of the program files,\n// including files that are not part of the program\n// but are referenced by an NgModule.\n\n\nfunction _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {\n  const seenFiles = new Set();\n  const files = [];\n\n  const visitFile = fileName => {\n    if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\n      return false;\n    }\n\n    seenFiles.add(fileName);\n    const analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\n    files.push(analyzedFile);\n    analyzedFile.ngModules.forEach(ngModule => {\n      ngModule.transitiveModule.modules.forEach(modMeta => visitFile(modMeta.reference.filePath));\n    });\n  };\n\n  fileNames.forEach(fileName => visitFile(fileName));\n  return files;\n}\n\nfunction analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {\n  const abstractDirectives = [];\n  const directives = [];\n  const pipes = [];\n  const injectables = [];\n  const ngModules = [];\n  const hasDecorators = staticSymbolResolver.hasDecorators(fileName);\n  let exportsNonSourceFiles = false;\n  const isDeclarationFile = fileName.endsWith('.d.ts'); // Don't analyze .d.ts files that have no decorators as a shortcut\n  // to speed up the analysis. This prevents us from\n  // resolving the references in these files.\n  // Note: exportsNonSourceFiles is only needed when compiling with summaries,\n  // which is not the case when .d.ts files are treated as input files.\n\n  if (!isDeclarationFile || hasDecorators) {\n    staticSymbolResolver.getSymbolsOf(fileName).forEach(symbol => {\n      const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n      const symbolMeta = resolvedSymbol.metadata;\n\n      if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n        return;\n      }\n\n      let isNgSymbol = false;\n\n      if (symbolMeta.__symbolic === 'class') {\n        if (metadataResolver.isDirective(symbol)) {\n          isNgSymbol = true; // This directive either has a selector or doesn't. Selector-less directives get tracked\n          // in abstractDirectives, not directives. The compiler doesn't deal with selector-less\n          // directives at all, really, other than to persist their metadata. This is done so that\n          // apps will have an easier time migrating to Ivy, which requires the selector-less\n          // annotations to be applied.\n\n          if (!metadataResolver.isAbstractDirective(symbol)) {\n            // The directive is an ordinary directive.\n            directives.push(symbol);\n          } else {\n            // The directive has no selector and is an \"abstract\" directive, so track it\n            // accordingly.\n            abstractDirectives.push(symbol);\n          }\n        } else if (metadataResolver.isPipe(symbol)) {\n          isNgSymbol = true;\n          pipes.push(symbol);\n        } else if (metadataResolver.isNgModule(symbol)) {\n          const ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\n\n          if (ngModule) {\n            isNgSymbol = true;\n            ngModules.push(ngModule);\n          }\n        } else if (metadataResolver.isInjectable(symbol)) {\n          isNgSymbol = true;\n          const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n\n          if (injectable) {\n            injectables.push(injectable);\n          }\n        }\n      }\n\n      if (!isNgSymbol) {\n        exportsNonSourceFiles = exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\n      }\n    });\n  }\n\n  return {\n    fileName,\n    directives,\n    abstractDirectives,\n    pipes,\n    ngModules,\n    injectables,\n    exportsNonSourceFiles\n  };\n}\n\nfunction analyzeFileForInjectables(host, staticSymbolResolver, metadataResolver, fileName) {\n  const injectables = [];\n  const shallowModules = [];\n\n  if (staticSymbolResolver.hasDecorators(fileName)) {\n    staticSymbolResolver.getSymbolsOf(fileName).forEach(symbol => {\n      const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n      const symbolMeta = resolvedSymbol.metadata;\n\n      if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n        return;\n      }\n\n      if (symbolMeta.__symbolic === 'class') {\n        if (metadataResolver.isInjectable(symbol)) {\n          const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n\n          if (injectable) {\n            injectables.push(injectable);\n          }\n        } else if (metadataResolver.isNgModule(symbol)) {\n          const module = metadataResolver.getShallowModuleMetadata(symbol);\n\n          if (module) {\n            shallowModules.push(module);\n          }\n        }\n      }\n    });\n  }\n\n  return {\n    fileName,\n    injectables,\n    shallowModules\n  };\n}\n\nfunction isValueExportingNonSourceFile(host, metadata) {\n  let exportsNonSourceFiles = false;\n\n  class Visitor {\n    visitArray(arr, context) {\n      arr.forEach(v => visitValue(v, this, context));\n    }\n\n    visitStringMap(map, context) {\n      Object.keys(map).forEach(key => visitValue(map[key], this, context));\n    }\n\n    visitPrimitive(value, context) {}\n\n    visitOther(value, context) {\n      if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\n        exportsNonSourceFiles = true;\n      }\n    }\n\n  }\n\n  visitValue(metadata, new Visitor(), null);\n  return exportsNonSourceFiles;\n}\n\nfunction mergeAnalyzedFiles(analyzedFiles) {\n  const allNgModules = [];\n  const ngModuleByPipeOrDirective = new Map();\n  const allPipesAndDirectives = new Set();\n  analyzedFiles.forEach(af => {\n    af.ngModules.forEach(ngModule => {\n      allNgModules.push(ngModule);\n      ngModule.declaredDirectives.forEach(d => ngModuleByPipeOrDirective.set(d.reference, ngModule));\n      ngModule.declaredPipes.forEach(p => ngModuleByPipeOrDirective.set(p.reference, ngModule));\n    });\n    af.directives.forEach(d => allPipesAndDirectives.add(d));\n    af.pipes.forEach(p => allPipesAndDirectives.add(p));\n  });\n  const symbolsMissingModule = [];\n  allPipesAndDirectives.forEach(ref => {\n    if (!ngModuleByPipeOrDirective.has(ref)) {\n      symbolsMissingModule.push(ref);\n    }\n  });\n  return {\n    ngModules: allNgModules,\n    ngModuleByPipeOrDirective,\n    symbolsMissingModule,\n    files: analyzedFiles\n  };\n}\n\nfunction mergeAndValidateNgFiles(files) {\n  return validateAnalyzedModules(mergeAnalyzedFiles(files));\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst FORMATTED_MESSAGE = 'ngFormattedMessage';\n\nfunction indentStr(level) {\n  if (level <= 0) return '';\n  if (level < 6) return ['', ' ', '  ', '   ', '    ', '     '][level];\n  const half = indentStr(Math.floor(level / 2));\n  return half + half + (level % 2 === 1 ? ' ' : '');\n}\n\nfunction formatChain(chain, indent = 0) {\n  if (!chain) return '';\n  const position = chain.position ? `${chain.position.fileName}(${chain.position.line + 1},${chain.position.column + 1})` : '';\n  const prefix = position && indent === 0 ? `${position}: ` : '';\n  const postfix = position && indent !== 0 ? ` at ${position}` : '';\n  let message = `${prefix}${chain.message}${postfix}`;\n\n  if (chain.next) {\n    for (const kid of chain.next) {\n      message += '\\n' + formatChain(kid, indent + 2);\n    }\n  }\n\n  return `${indentStr(indent)}${message}`;\n}\n\nfunction formattedError(chain) {\n  const message = formatChain(chain) + '.';\n  const error = syntaxError(message);\n  error[FORMATTED_MESSAGE] = true;\n  error.chain = chain;\n  error.position = chain.position;\n  return error;\n}\n\nfunction isFormattedError(error) {\n  return !!error[FORMATTED_MESSAGE];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst ANGULAR_CORE = '@angular/core';\nconst ANGULAR_ROUTER = '@angular/router';\nconst HIDDEN_KEY = /^\\$.*\\$$/;\nconst IGNORE = {\n  __symbolic: 'ignore'\n};\nconst USE_VALUE$1 = 'useValue';\nconst PROVIDE = 'provide';\nconst REFERENCE_SET = /*#__PURE__*/new Set([USE_VALUE$1, 'useFactory', 'data', 'id', 'loadChildren']);\nconst TYPEGUARD_POSTFIX = 'TypeGuard';\nconst USE_IF = 'UseIf';\n\nfunction shouldIgnore(value) {\n  return value && value.__symbolic == 'ignore';\n}\n/**\r\n * A static reflector implements enough of the Reflector API that is necessary to compile\r\n * templates statically.\r\n */\n\n\nclass StaticReflector {\n  constructor(summaryResolver, symbolResolver, knownMetadataClasses = [], knownMetadataFunctions = [], errorRecorder) {\n    this.summaryResolver = summaryResolver;\n    this.symbolResolver = symbolResolver;\n    this.errorRecorder = errorRecorder;\n    this.annotationCache = new Map();\n    this.shallowAnnotationCache = new Map();\n    this.propertyCache = new Map();\n    this.parameterCache = new Map();\n    this.methodCache = new Map();\n    this.staticCache = new Map();\n    this.conversionMap = new Map();\n    this.resolvedExternalReferences = new Map();\n    this.annotationForParentClassWithSummaryKind = new Map();\n    this.initializeConversionMap();\n    knownMetadataClasses.forEach(kc => this._registerDecoratorOrConstructor(this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\n    knownMetadataFunctions.forEach(kf => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n    this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n  }\n\n  componentModuleUrl(typeOrFunc) {\n    const staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n    return this.symbolResolver.getResourcePath(staticSymbol);\n  }\n  /**\r\n   * Invalidate the specified `symbols` on program change.\r\n   * @param symbols\r\n   */\n\n\n  invalidateSymbols(symbols) {\n    for (const symbol of symbols) {\n      this.annotationCache.delete(symbol);\n      this.shallowAnnotationCache.delete(symbol);\n      this.propertyCache.delete(symbol);\n      this.parameterCache.delete(symbol);\n      this.methodCache.delete(symbol);\n      this.staticCache.delete(symbol);\n      this.conversionMap.delete(symbol);\n    }\n  }\n\n  resolveExternalReference(ref, containingFile) {\n    let key = undefined;\n\n    if (!containingFile) {\n      key = `${ref.moduleName}:${ref.name}`;\n      const declarationSymbol = this.resolvedExternalReferences.get(key);\n      if (declarationSymbol) return declarationSymbol;\n    }\n\n    const refSymbol = this.symbolResolver.getSymbolByModule(ref.moduleName, ref.name, containingFile);\n    const declarationSymbol = this.findSymbolDeclaration(refSymbol);\n\n    if (!containingFile) {\n      this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName);\n      this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n    }\n\n    if (key) {\n      this.resolvedExternalReferences.set(key, declarationSymbol);\n    }\n\n    return declarationSymbol;\n  }\n\n  findDeclaration(moduleUrl, name, containingFile) {\n    return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n  }\n\n  tryFindDeclaration(moduleUrl, name, containingFile) {\n    return this.symbolResolver.ignoreErrorsFor(() => this.findDeclaration(moduleUrl, name, containingFile));\n  }\n\n  findSymbolDeclaration(symbol) {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n\n    if (resolvedSymbol) {\n      let resolvedMetadata = resolvedSymbol.metadata;\n\n      if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n        resolvedMetadata = resolvedMetadata.symbol;\n      }\n\n      if (resolvedMetadata instanceof StaticSymbol) {\n        return this.findSymbolDeclaration(resolvedSymbol.metadata);\n      }\n    }\n\n    return symbol;\n  }\n\n  tryAnnotations(type) {\n    const originalRecorder = this.errorRecorder;\n\n    this.errorRecorder = (error, fileName) => {};\n\n    try {\n      return this.annotations(type);\n    } finally {\n      this.errorRecorder = originalRecorder;\n    }\n  }\n\n  annotations(type) {\n    return this._annotations(type, (type, decorators) => this.simplify(type, decorators), this.annotationCache);\n  }\n\n  shallowAnnotations(type) {\n    return this._annotations(type, (type, decorators) => this.simplify(type, decorators, true), this.shallowAnnotationCache);\n  }\n\n  _annotations(type, simplify, annotationCache) {\n    let annotations = annotationCache.get(type);\n\n    if (!annotations) {\n      annotations = [];\n      const classMetadata = this.getTypeMetadata(type);\n      const parentType = this.findParentType(type, classMetadata);\n\n      if (parentType) {\n        const parentAnnotations = this.annotations(parentType);\n        annotations.push(...parentAnnotations);\n      }\n\n      let ownAnnotations = [];\n\n      if (classMetadata['decorators']) {\n        ownAnnotations = simplify(type, classMetadata['decorators']);\n\n        if (ownAnnotations) {\n          annotations.push(...ownAnnotations);\n        }\n      }\n\n      if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) && this.summaryResolver.isLibraryFile(parentType.filePath)) {\n        const summary = this.summaryResolver.resolveSummary(parentType);\n\n        if (summary && summary.type) {\n          const requiredAnnotationTypes = this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind);\n          const typeHasRequiredAnnotation = requiredAnnotationTypes.some(requiredType => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\n\n          if (!typeHasRequiredAnnotation) {\n            this.reportError(formatMetadataError(metadataError(`Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[summary.type.summaryKind]} in another compilation unit without duplicating the decorator`,\n            /* summary */\n            undefined, `Please add a ${requiredAnnotationTypes.map(type => type.ngMetadataName).join(' or ')} decorator to the class`), type), type);\n          }\n        }\n      }\n\n      annotationCache.set(type, annotations.filter(ann => !!ann));\n    }\n\n    return annotations;\n  }\n\n  propMetadata(type) {\n    let propMetadata = this.propertyCache.get(type);\n\n    if (!propMetadata) {\n      const classMetadata = this.getTypeMetadata(type);\n      propMetadata = {};\n      const parentType = this.findParentType(type, classMetadata);\n\n      if (parentType) {\n        const parentPropMetadata = this.propMetadata(parentType);\n        Object.keys(parentPropMetadata).forEach(parentProp => {\n          propMetadata[parentProp] = parentPropMetadata[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach(propName => {\n        const propData = members[propName];\n        const prop = propData.find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\n        const decorators = []; // hasOwnProperty() is used here to make sure we do not look up methods\n        // on `Object.prototype`.\n\n        if (propMetadata === null || propMetadata === void 0 ? void 0 : propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n\n        propMetadata[propName] = decorators;\n\n        if (prop && prop['decorators']) {\n          decorators.push(...this.simplify(type, prop['decorators']));\n        }\n      });\n      this.propertyCache.set(type, propMetadata);\n    }\n\n    return propMetadata;\n  }\n\n  parameters(type) {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n      return [];\n    }\n\n    try {\n      let parameters = this.parameterCache.get(type);\n\n      if (!parameters) {\n        const classMetadata = this.getTypeMetadata(type);\n        const parentType = this.findParentType(type, classMetadata);\n        const members = classMetadata ? classMetadata['members'] : null;\n        const ctorData = members ? members['__ctor__'] : null;\n\n        if (ctorData) {\n          const ctor = ctorData.find(a => a['__symbolic'] == 'constructor');\n          const rawParameterTypes = ctor['parameters'] || [];\n          const parameterDecorators = this.simplify(type, ctor['parameterDecorators'] || []);\n          parameters = [];\n          rawParameterTypes.forEach((rawParamType, index) => {\n            const nestedResult = [];\n            const paramType = this.trySimplify(type, rawParamType);\n            if (paramType) nestedResult.push(paramType);\n            const decorators = parameterDecorators ? parameterDecorators[index] : null;\n\n            if (decorators) {\n              nestedResult.push(...decorators);\n            }\n\n            parameters.push(nestedResult);\n          });\n        } else if (parentType) {\n          parameters = this.parameters(parentType);\n        }\n\n        if (!parameters) {\n          parameters = [];\n        }\n\n        this.parameterCache.set(type, parameters);\n      }\n\n      return parameters;\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  _methodNames(type) {\n    let methodNames = this.methodCache.get(type);\n\n    if (!methodNames) {\n      const classMetadata = this.getTypeMetadata(type);\n      methodNames = {};\n      const parentType = this.findParentType(type, classMetadata);\n\n      if (parentType) {\n        const parentMethodNames = this._methodNames(parentType);\n\n        Object.keys(parentMethodNames).forEach(parentProp => {\n          methodNames[parentProp] = parentMethodNames[parentProp];\n        });\n      }\n\n      const members = classMetadata['members'] || {};\n      Object.keys(members).forEach(propName => {\n        const propData = members[propName];\n        const isMethod = propData.some(a => a['__symbolic'] == 'method');\n        methodNames[propName] = methodNames[propName] || isMethod;\n      });\n      this.methodCache.set(type, methodNames);\n    }\n\n    return methodNames;\n  }\n\n  _staticMembers(type) {\n    let staticMembers = this.staticCache.get(type);\n\n    if (!staticMembers) {\n      const classMetadata = this.getTypeMetadata(type);\n      const staticMemberData = classMetadata['statics'] || {};\n      staticMembers = Object.keys(staticMemberData);\n      this.staticCache.set(type, staticMembers);\n    }\n\n    return staticMembers;\n  }\n\n  findParentType(type, classMetadata) {\n    const parentType = this.trySimplify(type, classMetadata['extends']);\n\n    if (parentType instanceof StaticSymbol) {\n      return parentType;\n    }\n  }\n\n  hasLifecycleHook(type, lcProperty) {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(new Error(`hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n    }\n\n    try {\n      return !!this._methodNames(type)[lcProperty];\n    } catch (e) {\n      console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n      throw e;\n    }\n  }\n\n  guards(type) {\n    if (!(type instanceof StaticSymbol)) {\n      this.reportError(new Error(`guards received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n      return {};\n    }\n\n    const staticMembers = this._staticMembers(type);\n\n    const result = {};\n\n    for (let name of staticMembers) {\n      if (name.endsWith(TYPEGUARD_POSTFIX)) {\n        let property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);\n        let value;\n\n        if (property.endsWith(USE_IF)) {\n          property = name.substr(0, property.length - USE_IF.length);\n          value = USE_IF;\n        } else {\n          value = this.getStaticSymbol(type.filePath, type.name, [name]);\n        }\n\n        result[property] = value;\n      }\n    }\n\n    return result;\n  }\n\n  _registerDecoratorOrConstructor(type, ctor) {\n    this.conversionMap.set(type, (context, args) => new ctor(...args));\n  }\n\n  _registerFunction(type, fn) {\n    this.conversionMap.set(type, (context, args) => fn.apply(undefined, args));\n  }\n\n  initializeConversionMap() {\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n\n    this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n    this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n    this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n    this.ANALYZE_FOR_ENTRY_COMPONENTS = this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule); // Note: Some metadata classes can be used directly with Provider.deps.\n\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n\n    this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n  }\n  /**\r\n   * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\r\n   * All types passed to the StaticResolver should be pseudo-types returned by this method.\r\n   *\r\n   * @param declarationFile the absolute path of the file where the symbol is declared\r\n   * @param name the name of the type.\r\n   */\n\n\n  getStaticSymbol(declarationFile, name, members) {\n    return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n  }\n  /**\r\n   * Simplify but discard any errors\r\n   */\n\n\n  trySimplify(context, value) {\n    const originalRecorder = this.errorRecorder;\n\n    this.errorRecorder = (error, fileName) => {};\n\n    const result = this.simplify(context, value);\n    this.errorRecorder = originalRecorder;\n    return result;\n  }\n  /** @internal */\n\n\n  simplify(context, value, lazy = false) {\n    const self = this;\n    let scope = BindingScope$1.empty;\n    const calling = new Map();\n    const rootContext = context;\n\n    function simplifyInContext(context, value, depth, references) {\n      function resolveReferenceValue(staticSymbol) {\n        const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n        return resolvedSymbol ? resolvedSymbol.metadata : null;\n      }\n\n      function simplifyEagerly(value) {\n        return simplifyInContext(context, value, depth, 0);\n      }\n\n      function simplifyLazily(value) {\n        return simplifyInContext(context, value, depth, references + 1);\n      }\n\n      function simplifyNested(nestedContext, value) {\n        if (nestedContext === context) {\n          // If the context hasn't changed let the exception propagate unmodified.\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        }\n\n        try {\n          return simplifyInContext(nestedContext, value, depth + 1, references);\n        } catch (e) {\n          if (isMetadataError(e)) {\n            // Propagate the message text up but add a message to the chain that explains how we got\n            // here.\n            // e.chain implies e.symbol\n            const summaryMsg = e.chain ? 'references \\'' + e.symbol.name + '\\'' : errorSummary(e);\n            const summary = `'${nestedContext.name}' ${summaryMsg}`;\n            const chain = {\n              message: summary,\n              position: e.position,\n              next: e.chain\n            }; // TODO(chuckj): retrieve the position information indirectly from the collectors node\n            // map if the metadata is from a .ts file.\n\n            self.error({\n              message: e.message,\n              advise: e.advise,\n              context: e.context,\n              chain,\n              symbol: nestedContext\n            }, context);\n          } else {\n            // It is probably an internal error.\n            throw e;\n          }\n        }\n      }\n\n      function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {\n        if (targetFunction && targetFunction['__symbolic'] == 'function') {\n          if (calling.get(functionSymbol)) {\n            self.error({\n              message: 'Recursion is not supported',\n              summary: `called '${functionSymbol.name}' recursively`,\n              value: targetFunction\n            }, functionSymbol);\n          }\n\n          try {\n            const value = targetFunction['value'];\n\n            if (value && (depth != 0 || value.__symbolic != 'error')) {\n              const parameters = targetFunction['parameters'];\n              const defaults = targetFunction.defaults;\n              args = args.map(arg => simplifyNested(context, arg)).map(arg => shouldIgnore(arg) ? undefined : arg);\n\n              if (defaults && defaults.length > args.length) {\n                args.push(...defaults.slice(args.length).map(value => simplify(value)));\n              }\n\n              calling.set(functionSymbol, true);\n              const functionScope = BindingScope$1.build();\n\n              for (let i = 0; i < parameters.length; i++) {\n                functionScope.define(parameters[i], args[i]);\n              }\n\n              const oldScope = scope;\n              let result;\n\n              try {\n                scope = functionScope.done();\n                result = simplifyNested(functionSymbol, value);\n              } finally {\n                scope = oldScope;\n              }\n\n              return result;\n            }\n          } finally {\n            calling.delete(functionSymbol);\n          }\n        }\n\n        if (depth === 0) {\n          // If depth is 0 we are evaluating the top level expression that is describing element\n          // decorator. In this case, it is a decorator we don't understand, such as a custom\n          // non-angular decorator, and we should just ignore it.\n          return IGNORE;\n        }\n\n        let position = undefined;\n\n        if (targetExpression && targetExpression.__symbolic == 'resolved') {\n          const line = targetExpression.line;\n          const character = targetExpression.character;\n          const fileName = targetExpression.fileName;\n\n          if (fileName != null && line != null && character != null) {\n            position = {\n              fileName,\n              line,\n              column: character\n            };\n          }\n        }\n\n        self.error({\n          message: FUNCTION_CALL_NOT_SUPPORTED,\n          context: functionSymbol,\n          value: targetFunction,\n          position\n        }, context);\n      }\n\n      function simplify(expression) {\n        if (isPrimitive(expression)) {\n          return expression;\n        }\n\n        if (Array.isArray(expression)) {\n          const result = [];\n\n          for (const item of expression) {\n            // Check for a spread expression\n            if (item && item.__symbolic === 'spread') {\n              // We call with references as 0 because we require the actual value and cannot\n              // tolerate a reference here.\n              const spreadArray = simplifyEagerly(item.expression);\n\n              if (Array.isArray(spreadArray)) {\n                for (const spreadItem of spreadArray) {\n                  result.push(spreadItem);\n                }\n\n                continue;\n              }\n            }\n\n            const value = simplify(item);\n\n            if (shouldIgnore(value)) {\n              continue;\n            }\n\n            result.push(value);\n          }\n\n          return result;\n        }\n\n        if (expression instanceof StaticSymbol) {\n          // Stop simplification at builtin symbols or if we are in a reference context and\n          // the symbol doesn't have members.\n          if (expression === self.injectionToken || self.conversionMap.has(expression) || references > 0 && !expression.members.length) {\n            return expression;\n          } else {\n            const staticSymbol = expression;\n            const declarationValue = resolveReferenceValue(staticSymbol);\n\n            if (declarationValue != null) {\n              return simplifyNested(staticSymbol, declarationValue);\n            } else {\n              return staticSymbol;\n            }\n          }\n        }\n\n        if (expression) {\n          if (expression['__symbolic']) {\n            let staticSymbol;\n\n            switch (expression['__symbolic']) {\n              case 'binop':\n                let left = simplify(expression['left']);\n                if (shouldIgnore(left)) return left;\n                let right = simplify(expression['right']);\n                if (shouldIgnore(right)) return right;\n\n                switch (expression['operator']) {\n                  case '&&':\n                    return left && right;\n\n                  case '||':\n                    return left || right;\n\n                  case '|':\n                    return left | right;\n\n                  case '^':\n                    return left ^ right;\n\n                  case '&':\n                    return left & right;\n\n                  case '==':\n                    return left == right;\n\n                  case '!=':\n                    return left != right;\n\n                  case '===':\n                    return left === right;\n\n                  case '!==':\n                    return left !== right;\n\n                  case '<':\n                    return left < right;\n\n                  case '>':\n                    return left > right;\n\n                  case '<=':\n                    return left <= right;\n\n                  case '>=':\n                    return left >= right;\n\n                  case '<<':\n                    return left << right;\n\n                  case '>>':\n                    return left >> right;\n\n                  case '+':\n                    return left + right;\n\n                  case '-':\n                    return left - right;\n\n                  case '*':\n                    return left * right;\n\n                  case '/':\n                    return left / right;\n\n                  case '%':\n                    return left % right;\n\n                  case '??':\n                    return left !== null && left !== void 0 ? left : right;\n                }\n\n                return null;\n\n              case 'if':\n                let condition = simplify(expression['condition']);\n                return condition ? simplify(expression['thenExpression']) : simplify(expression['elseExpression']);\n\n              case 'pre':\n                let operand = simplify(expression['operand']);\n                if (shouldIgnore(operand)) return operand;\n\n                switch (expression['operator']) {\n                  case '+':\n                    return operand;\n\n                  case '-':\n                    return -operand;\n\n                  case '!':\n                    return !operand;\n\n                  case '~':\n                    return ~operand;\n                }\n\n                return null;\n\n              case 'index':\n                let indexTarget = simplifyEagerly(expression['expression']);\n                let index = simplifyEagerly(expression['index']);\n                if (indexTarget && isPrimitive(index)) return indexTarget[index];\n                return null;\n\n              case 'select':\n                const member = expression['member'];\n                let selectContext = context;\n                let selectTarget = simplify(expression['expression']);\n\n                if (selectTarget instanceof StaticSymbol) {\n                  const members = selectTarget.members.concat(member);\n                  selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                  const declarationValue = resolveReferenceValue(selectContext);\n\n                  if (declarationValue != null) {\n                    return simplifyNested(selectContext, declarationValue);\n                  } else {\n                    return selectContext;\n                  }\n                }\n\n                if (selectTarget && isPrimitive(member)) return simplifyNested(selectContext, selectTarget[member]);\n                return null;\n\n              case 'reference':\n                // Note: This only has to deal with variable references, as symbol references have\n                // been converted into 'resolved'\n                // in the StaticSymbolResolver.\n                const name = expression['name'];\n                const localValue = scope.resolve(name);\n\n                if (localValue != BindingScope$1.missing) {\n                  return localValue;\n                }\n\n                break;\n\n              case 'resolved':\n                try {\n                  return simplify(expression.symbol);\n                } catch (e) {\n                  // If an error is reported evaluating the symbol record the position of the\n                  // reference in the error so it can\n                  // be reported in the error message generated from the exception.\n                  if (isMetadataError(e) && expression.fileName != null && expression.line != null && expression.character != null) {\n                    e.position = {\n                      fileName: expression.fileName,\n                      line: expression.line,\n                      column: expression.character\n                    };\n                  }\n\n                  throw e;\n                }\n\n              case 'class':\n                return context;\n\n              case 'function':\n                return context;\n\n              case 'new':\n              case 'call':\n                // Determine if the function is a built-in conversion\n                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1,\n                /* references */\n                0);\n\n                if (staticSymbol instanceof StaticSymbol) {\n                  if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                    // if somebody calls new InjectionToken, don't create an InjectionToken,\n                    // but rather return the symbol to which the InjectionToken is assigned to.\n                    // OpaqueToken is supported too as it is required by the language service to\n                    // support v4 and prior versions of Angular.\n                    return context;\n                  }\n\n                  const argExpressions = expression['arguments'] || [];\n                  let converter = self.conversionMap.get(staticSymbol);\n\n                  if (converter) {\n                    const args = argExpressions.map(arg => simplifyNested(context, arg)).map(arg => shouldIgnore(arg) ? undefined : arg);\n                    return converter(context, args);\n                  } else {\n                    // Determine if the function is one we can simplify.\n                    const targetFunction = resolveReferenceValue(staticSymbol);\n                    return simplifyCall(staticSymbol, targetFunction, argExpressions, expression['expression']);\n                  }\n                }\n\n                return IGNORE;\n\n              case 'error':\n                let message = expression.message;\n\n                if (expression['line'] != null) {\n                  self.error({\n                    message,\n                    context: expression.context,\n                    value: expression,\n                    position: {\n                      fileName: expression['fileName'],\n                      line: expression['line'],\n                      column: expression['character']\n                    }\n                  }, context);\n                } else {\n                  self.error({\n                    message,\n                    context: expression.context\n                  }, context);\n                }\n\n                return IGNORE;\n\n              case 'ignore':\n                return expression;\n            }\n\n            return null;\n          }\n\n          return mapStringMap(expression, (value, name) => {\n            if (REFERENCE_SET.has(name)) {\n              if (name === USE_VALUE$1 && PROVIDE in expression) {\n                // If this is a provider expression, check for special tokens that need the value\n                // during analysis.\n                const provide = simplify(expression.provide);\n\n                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                  return simplify(value);\n                }\n              }\n\n              return simplifyLazily(value);\n            }\n\n            return simplify(value);\n          });\n        }\n\n        return IGNORE;\n      }\n\n      return simplify(value);\n    }\n\n    let result;\n\n    try {\n      result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n    } catch (e) {\n      if (this.errorRecorder) {\n        this.reportError(e, context);\n      } else {\n        throw formatMetadataError(e, context);\n      }\n    }\n\n    if (shouldIgnore(result)) {\n      return undefined;\n    }\n\n    return result;\n  }\n\n  getTypeMetadata(type) {\n    const resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n    return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : {\n      __symbolic: 'class'\n    };\n  }\n\n  reportError(error, context, path) {\n    if (this.errorRecorder) {\n      this.errorRecorder(formatMetadataError(error, context), context && context.filePath || path);\n    } else {\n      throw error;\n    }\n  }\n\n  error({\n    message,\n    summary,\n    advise,\n    position,\n    context,\n    value,\n    symbol,\n    chain\n  }, reportingContext) {\n    this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);\n  }\n\n}\n\nconst METADATA_ERROR = 'ngMetadataError';\n\nfunction metadataError(message, summary, advise, position, symbol, context, chain) {\n  const error = syntaxError(message);\n  error[METADATA_ERROR] = true;\n  if (advise) error.advise = advise;\n  if (position) error.position = position;\n  if (summary) error.summary = summary;\n  if (context) error.context = context;\n  if (chain) error.chain = chain;\n  if (symbol) error.symbol = symbol;\n  return error;\n}\n\nfunction isMetadataError(error) {\n  return !!error[METADATA_ERROR];\n}\n\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n\nfunction expandedMessage(message, context) {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\n      }\n\n      break;\n\n    case VARIABLE_NOT_INITIALIZED:\n      return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n\n    case COULD_NOT_RESOLVE_TYPE:\n      if (context && context.typeName) {\n        return `Could not resolve type ${context.typeName}`;\n      }\n\n      break;\n\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (context && context.name) {\n        return `Function calls are not supported in decorators but '${context.name}' was called`;\n      }\n\n      return 'Function calls are not supported in decorators';\n\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\n      }\n\n      break;\n\n    case LAMBDA_NOT_SUPPORTED:\n      return `Function expressions are not supported in decorators`;\n  }\n\n  return message;\n}\n\nfunction messageAdvise(message, context) {\n  switch (message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (context && context.className) {\n        return `Consider exporting '${context.className}'`;\n      }\n\n      break;\n\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'Consider simplifying to avoid destructuring';\n\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (context && context.name) {\n        return `Consider exporting '${context.name}'`;\n      }\n\n      break;\n\n    case LAMBDA_NOT_SUPPORTED:\n      return `Consider changing the function expression into an exported function`;\n  }\n\n  return undefined;\n}\n\nfunction errorSummary(error) {\n  if (error.summary) {\n    return error.summary;\n  }\n\n  switch (error.message) {\n    case REFERENCE_TO_NONEXPORTED_CLASS:\n      if (error.context && error.context.className) {\n        return `references non-exported class ${error.context.className}`;\n      }\n\n      break;\n\n    case VARIABLE_NOT_INITIALIZED:\n      return 'is not initialized';\n\n    case DESTRUCTURE_NOT_SUPPORTED:\n      return 'is a destructured variable';\n\n    case COULD_NOT_RESOLVE_TYPE:\n      return 'could not be resolved';\n\n    case FUNCTION_CALL_NOT_SUPPORTED:\n      if (error.context && error.context.name) {\n        return `calls '${error.context.name}'`;\n      }\n\n      return `calls a function`;\n\n    case REFERENCE_TO_LOCAL_SYMBOL:\n      if (error.context && error.context.name) {\n        return `references local variable ${error.context.name}`;\n      }\n\n      return `references a local variable`;\n  }\n\n  return 'contains the error';\n}\n\nfunction mapStringMap(input, transform) {\n  if (!input) return {};\n  const result = {};\n  Object.keys(input).forEach(key => {\n    const value = transform(input[key], key);\n\n    if (!shouldIgnore(value)) {\n      if (HIDDEN_KEY.test(key)) {\n        Object.defineProperty(result, key, {\n          enumerable: false,\n          configurable: true,\n          value: value\n        });\n      } else {\n        result[key] = value;\n      }\n    }\n  });\n  return result;\n}\n\nfunction isPrimitive(o) {\n  return o === null || typeof o !== 'function' && typeof o !== 'object';\n}\n\nlet BindingScope$1 = /*#__PURE__*/(() => {\n  class BindingScope$1 {\n    static build() {\n      const current = new Map();\n      return {\n        define: function (name, value) {\n          current.set(name, value);\n          return this;\n        },\n        done: function () {\n          return current.size > 0 ? new PopulatedScope(current) : BindingScope$1.empty;\n        }\n      };\n    }\n\n  }\n\n  BindingScope$1.missing = {};\n  BindingScope$1.empty = {\n    resolve: name => BindingScope$1.missing\n  };\n  return BindingScope$1;\n})();\n\nclass PopulatedScope extends BindingScope$1 {\n  constructor(bindings) {\n    super();\n    this.bindings = bindings;\n  }\n\n  resolve(name) {\n    return this.bindings.has(name) ? this.bindings.get(name) : BindingScope$1.missing;\n  }\n\n}\n\nfunction formatMetadataMessageChain(chain, advise) {\n  const expanded = expandedMessage(chain.message, chain.context);\n  const nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\n  const message = `${expanded}${nesting}`;\n  const position = chain.position;\n  const next = chain.next ? formatMetadataMessageChain(chain.next, advise) : advise ? {\n    message: advise\n  } : undefined;\n  return {\n    message,\n    position,\n    next: next ? [next] : undefined\n  };\n}\n\nfunction formatMetadataError(e, context) {\n  if (isMetadataError(e)) {\n    // Produce a formatted version of the and leaving enough information in the original error\n    // to recover the formatting information to eventually produce a diagnostic error message.\n    const position = e.position;\n    const chain = {\n      message: `Error during template compile of '${context.name}'`,\n      position: position,\n      next: {\n        message: e.message,\n        next: e.chain,\n        context: e.context,\n        symbol: e.symbol\n      }\n    };\n    const advise = e.advise || messageAdvise(e.message, e.context);\n    return formattedError(formatMetadataMessageChain(chain, advise));\n  }\n\n  return e;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass AotSummaryResolver {\n  constructor(host, staticSymbolCache) {\n    this.host = host;\n    this.staticSymbolCache = staticSymbolCache; // Note: this will only contain StaticSymbols without members!\n\n    this.summaryCache = new Map();\n    this.loadedFilePaths = new Map(); // Note: this will only contain StaticSymbols without members!\n\n    this.importAs = new Map();\n    this.knownFileNameToModuleNames = new Map();\n  }\n\n  isLibraryFile(filePath) {\n    // Note: We need to strip the .ngfactory. file path,\n    // so this method also works for generated files\n    // (for which host.isSourceFile will always return false).\n    return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n  }\n\n  toSummaryFileName(filePath, referringSrcFileName) {\n    return this.host.toSummaryFileName(filePath, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName, referringLibFileName) {\n    return this.host.fromSummaryFileName(fileName, referringLibFileName);\n  }\n\n  resolveSummary(staticSymbol) {\n    const rootSymbol = staticSymbol.members.length ? this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) : staticSymbol;\n    let summary = this.summaryCache.get(rootSymbol);\n\n    if (!summary) {\n      this._loadSummaryFile(staticSymbol.filePath);\n\n      summary = this.summaryCache.get(staticSymbol);\n    }\n\n    return rootSymbol === staticSymbol && summary || null;\n  }\n\n  getSymbolsOf(filePath) {\n    if (this._loadSummaryFile(filePath)) {\n      return Array.from(this.summaryCache.keys()).filter(symbol => symbol.filePath === filePath);\n    }\n\n    return null;\n  }\n\n  getImportAs(staticSymbol) {\n    staticSymbol.assertNoMembers();\n    return this.importAs.get(staticSymbol);\n  }\n  /**\r\n   * Converts a file path to a module name that can be used as an `import`.\r\n   */\n\n\n  getKnownModuleName(importedFilePath) {\n    return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n  }\n\n  addSummary(summary) {\n    this.summaryCache.set(summary.symbol, summary);\n  }\n\n  _loadSummaryFile(filePath) {\n    let hasSummary = this.loadedFilePaths.get(filePath);\n\n    if (hasSummary != null) {\n      return hasSummary;\n    }\n\n    let json = null;\n\n    if (this.isLibraryFile(filePath)) {\n      const summaryFilePath = summaryFileName(filePath);\n\n      try {\n        json = this.host.loadSummary(summaryFilePath);\n      } catch (e) {\n        console.error(`Error loading summary file ${summaryFilePath}`);\n        throw e;\n      }\n    }\n\n    hasSummary = json != null;\n    this.loadedFilePaths.set(filePath, hasSummary);\n\n    if (json) {\n      const {\n        moduleName,\n        summaries,\n        importAs\n      } = deserializeSummaries(this.staticSymbolCache, this, filePath, json);\n      summaries.forEach(summary => this.summaryCache.set(summary.symbol, summary));\n\n      if (moduleName) {\n        this.knownFileNameToModuleNames.set(filePath, moduleName);\n      }\n\n      importAs.forEach(importAs => {\n        this.importAs.set(importAs.symbol, importAs.importAs);\n      });\n    }\n\n    return hasSummary;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction createAotUrlResolver(host) {\n  return {\n    resolve: (basePath, url) => {\n      const filePath = host.resourceNameToFileName(url, basePath);\n\n      if (!filePath) {\n        throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n      }\n\n      return filePath;\n    }\n  };\n}\n/**\r\n * Creates a new AotCompiler based on options and a host.\r\n */\n\n\nfunction createAotCompiler(compilerHost, options, errorCollector) {\n  let translations = options.translations || '';\n  const urlResolver = createAotUrlResolver(compilerHost);\n  const symbolCache = new StaticSymbolCache();\n  const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n  const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n  const staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n  let htmlParser;\n\n  if (!!options.enableIvy) {\n    // Ivy handles i18n at the compiler level so we must use a regular parser\n    htmlParser = new HtmlParser();\n  } else {\n    htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n  }\n\n  const config = new CompilerConfig({\n    defaultEncapsulation: ViewEncapsulation.Emulated,\n    useJit: false,\n    missingTranslation: options.missingTranslation,\n    preserveWhitespaces: options.preserveWhitespaces,\n    strictInjectionParameters: options.strictInjectionParameters\n  });\n  const normalizer = new DirectiveNormalizer({\n    get: url => compilerHost.loadResource(url)\n  }, urlResolver, htmlParser, config);\n  const expressionParser = new Parser$1(new Lexer());\n  const elementSchemaRegistry = new DomElementSchemaRegistry();\n  const tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n  const resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector); // TODO(vicb): do not pass options.i18nFormat here\n\n  const viewCompiler = new ViewCompiler(staticReflector);\n  const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n  const compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(), summaryResolver, symbolResolver);\n  return {\n    compiler,\n    reflector: staticReflector\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass SummaryResolver {}\n\nclass JitSummaryResolver {\n  constructor() {\n    this._summaries = new Map();\n  }\n\n  isLibraryFile() {\n    return false;\n  }\n\n  toSummaryFileName(fileName) {\n    return fileName;\n  }\n\n  fromSummaryFileName(fileName) {\n    return fileName;\n  }\n\n  resolveSummary(reference) {\n    return this._summaries.get(reference) || null;\n  }\n\n  getSymbolsOf() {\n    return [];\n  }\n\n  getImportAs(reference) {\n    return reference;\n  }\n\n  getKnownModuleName(fileName) {\n    return null;\n  }\n\n  addSummary(summary) {\n    this._summaries.set(summary.symbol, summary);\n  }\n\n}\n\nfunction interpretStatements(statements, reflector) {\n  const ctx = new _ExecutionContext(null, null, null, new Map());\n  const visitor = new StatementInterpreter(reflector);\n  visitor.visitAllStatements(statements, ctx);\n  const result = {};\n  ctx.exports.forEach(exportName => {\n    result[exportName] = ctx.vars.get(exportName);\n  });\n  return result;\n}\n\nfunction _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n  const childCtx = ctx.createChildWihtLocalVars();\n\n  for (let i = 0; i < varNames.length; i++) {\n    childCtx.vars.set(varNames[i], varValues[i]);\n  }\n\n  const result = visitor.visitAllStatements(statements, childCtx);\n  return result ? result.value : null;\n}\n\nclass _ExecutionContext {\n  constructor(parent, instance, className, vars) {\n    this.parent = parent;\n    this.instance = instance;\n    this.className = className;\n    this.vars = vars;\n    this.exports = [];\n  }\n\n  createChildWihtLocalVars() {\n    return new _ExecutionContext(this, this.instance, this.className, new Map());\n  }\n\n}\n\nclass ReturnValue {\n  constructor(value) {\n    this.value = value;\n  }\n\n}\n\nfunction createDynamicClass(_classStmt, _ctx, _visitor) {\n  const propertyDescriptors = {};\n\n  _classStmt.getters.forEach(getter => {\n    // Note: use `function` instead of arrow function to capture `this`\n    propertyDescriptors[getter.name] = {\n      configurable: false,\n      get: function () {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  _classStmt.methods.forEach(function (method) {\n    const paramNames = method.params.map(param => param.name); // Note: use `function` instead of arrow function to capture `this`\n\n    propertyDescriptors[method.name] = {\n      writable: false,\n      configurable: false,\n      value: function (...args) {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n      }\n    };\n  });\n\n  const ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name); // Note: use `function` instead of arrow function to capture `this`\n\n\n  const ctor = function (...args) {\n    const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n\n    _classStmt.fields.forEach(field => {\n      this[field.name] = undefined;\n    });\n\n    _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n  };\n\n  const superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n  ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n  return ctor;\n}\n\nclass StatementInterpreter {\n  constructor(reflector) {\n    this.reflector = reflector;\n  }\n\n  debugAst(ast) {\n    return debugOutputAstAsTypeScript(ast);\n  }\n\n  visitDeclareVarStmt(stmt, ctx) {\n    const initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n    ctx.vars.set(stmt.name, initialValue);\n\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n\n    return null;\n  }\n\n  visitWriteVarExpr(expr, ctx) {\n    const value = expr.value.visitExpression(this, ctx);\n    let currCtx = ctx;\n\n    while (currCtx != null) {\n      if (currCtx.vars.has(expr.name)) {\n        currCtx.vars.set(expr.name, value);\n        return value;\n      }\n\n      currCtx = currCtx.parent;\n    }\n\n    throw new Error(`Not declared variable ${expr.name}`);\n  }\n\n  visitWrappedNodeExpr(ast, ctx) {\n    throw new Error('Cannot interpret a WrappedNodeExpr.');\n  }\n\n  visitTypeofExpr(ast, ctx) {\n    throw new Error('Cannot interpret a TypeofExpr');\n  }\n\n  visitReadVarExpr(ast, ctx) {\n    let varName = ast.name;\n\n    if (ast.builtin != null) {\n      switch (ast.builtin) {\n        case BuiltinVar.Super:\n          return Object.getPrototypeOf(ctx.instance);\n\n        case BuiltinVar.This:\n          return ctx.instance;\n\n        case BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR$2;\n          break;\n\n        case BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR$2;\n          break;\n\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n\n    let currCtx = ctx;\n\n    while (currCtx != null) {\n      if (currCtx.vars.has(varName)) {\n        return currCtx.vars.get(varName);\n      }\n\n      currCtx = currCtx.parent;\n    }\n\n    throw new Error(`Not declared variable ${varName}`);\n  }\n\n  visitWriteKeyExpr(expr, ctx) {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const index = expr.index.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[index] = value;\n    return value;\n  }\n\n  visitWritePropExpr(expr, ctx) {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const value = expr.value.visitExpression(this, ctx);\n    receiver[expr.name] = value;\n    return value;\n  }\n\n  visitInvokeMethodExpr(expr, ctx) {\n    const receiver = expr.receiver.visitExpression(this, ctx);\n    const args = this.visitAllExpressions(expr.args, ctx);\n    let result;\n\n    if (expr.builtin != null) {\n      switch (expr.builtin) {\n        case BuiltinMethod.ConcatArray:\n          result = receiver.concat(...args);\n          break;\n\n        case BuiltinMethod.SubscribeObservable:\n          result = receiver.subscribe({\n            next: args[0]\n          });\n          break;\n\n        case BuiltinMethod.Bind:\n          result = receiver.bind(...args);\n          break;\n\n        default:\n          throw new Error(`Unknown builtin method ${expr.builtin}`);\n      }\n    } else {\n      result = receiver[expr.name].apply(receiver, args);\n    }\n\n    return result;\n  }\n\n  visitInvokeFunctionExpr(stmt, ctx) {\n    const args = this.visitAllExpressions(stmt.args, ctx);\n    const fnExpr = stmt.fn;\n\n    if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n      ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n      return null;\n    } else {\n      const fn = stmt.fn.visitExpression(this, ctx);\n      return fn.apply(null, args);\n    }\n  }\n\n  visitTaggedTemplateExpr(expr, ctx) {\n    const templateElements = expr.template.elements.map(e => e.text);\n    Object.defineProperty(templateElements, 'raw', {\n      value: expr.template.elements.map(e => e.rawText)\n    });\n    const args = this.visitAllExpressions(expr.template.expressions, ctx);\n    args.unshift(templateElements);\n    const tag = expr.tag.visitExpression(this, ctx);\n    return tag.apply(null, args);\n  }\n\n  visitReturnStmt(stmt, ctx) {\n    return new ReturnValue(stmt.value.visitExpression(this, ctx));\n  }\n\n  visitDeclareClassStmt(stmt, ctx) {\n    const clazz = createDynamicClass(stmt, ctx, this);\n    ctx.vars.set(stmt.name, clazz);\n\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n\n    return null;\n  }\n\n  visitExpressionStmt(stmt, ctx) {\n    return stmt.expr.visitExpression(this, ctx);\n  }\n\n  visitIfStmt(stmt, ctx) {\n    const condition = stmt.condition.visitExpression(this, ctx);\n\n    if (condition) {\n      return this.visitAllStatements(stmt.trueCase, ctx);\n    } else if (stmt.falseCase != null) {\n      return this.visitAllStatements(stmt.falseCase, ctx);\n    }\n\n    return null;\n  }\n\n  visitTryCatchStmt(stmt, ctx) {\n    try {\n      return this.visitAllStatements(stmt.bodyStmts, ctx);\n    } catch (e) {\n      const childCtx = ctx.createChildWihtLocalVars();\n      childCtx.vars.set(CATCH_ERROR_VAR$2, e);\n      childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);\n      return this.visitAllStatements(stmt.catchStmts, childCtx);\n    }\n  }\n\n  visitThrowStmt(stmt, ctx) {\n    throw stmt.error.visitExpression(this, ctx);\n  }\n\n  visitInstantiateExpr(ast, ctx) {\n    const args = this.visitAllExpressions(ast.args, ctx);\n    const clazz = ast.classExpr.visitExpression(this, ctx);\n    return new clazz(...args);\n  }\n\n  visitLiteralExpr(ast, ctx) {\n    return ast.value;\n  }\n\n  visitLocalizedString(ast, context) {\n    return null;\n  }\n\n  visitExternalExpr(ast, ctx) {\n    return this.reflector.resolveExternalReference(ast.value);\n  }\n\n  visitConditionalExpr(ast, ctx) {\n    if (ast.condition.visitExpression(this, ctx)) {\n      return ast.trueCase.visitExpression(this, ctx);\n    } else if (ast.falseCase != null) {\n      return ast.falseCase.visitExpression(this, ctx);\n    }\n\n    return null;\n  }\n\n  visitNotExpr(ast, ctx) {\n    return !ast.condition.visitExpression(this, ctx);\n  }\n\n  visitAssertNotNullExpr(ast, ctx) {\n    return ast.condition.visitExpression(this, ctx);\n  }\n\n  visitCastExpr(ast, ctx) {\n    return ast.value.visitExpression(this, ctx);\n  }\n\n  visitFunctionExpr(ast, ctx) {\n    const paramNames = ast.params.map(param => param.name);\n    return _declareFn(paramNames, ast.statements, ctx, this);\n  }\n\n  visitDeclareFunctionStmt(stmt, ctx) {\n    const paramNames = stmt.params.map(param => param.name);\n    ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n\n    if (stmt.hasModifier(StmtModifier.Exported)) {\n      ctx.exports.push(stmt.name);\n    }\n\n    return null;\n  }\n\n  visitUnaryOperatorExpr(ast, ctx) {\n    const rhs = () => ast.expr.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case UnaryOperator.Plus:\n        return +rhs();\n\n      case UnaryOperator.Minus:\n        return -rhs();\n\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n\n  visitBinaryOperatorExpr(ast, ctx) {\n    var _a;\n\n    const lhs = () => ast.lhs.visitExpression(this, ctx);\n\n    const rhs = () => ast.rhs.visitExpression(this, ctx);\n\n    switch (ast.operator) {\n      case BinaryOperator.Equals:\n        return lhs() == rhs();\n\n      case BinaryOperator.Identical:\n        return lhs() === rhs();\n\n      case BinaryOperator.NotEquals:\n        return lhs() != rhs();\n\n      case BinaryOperator.NotIdentical:\n        return lhs() !== rhs();\n\n      case BinaryOperator.And:\n        return lhs() && rhs();\n\n      case BinaryOperator.Or:\n        return lhs() || rhs();\n\n      case BinaryOperator.Plus:\n        return lhs() + rhs();\n\n      case BinaryOperator.Minus:\n        return lhs() - rhs();\n\n      case BinaryOperator.Divide:\n        return lhs() / rhs();\n\n      case BinaryOperator.Multiply:\n        return lhs() * rhs();\n\n      case BinaryOperator.Modulo:\n        return lhs() % rhs();\n\n      case BinaryOperator.Lower:\n        return lhs() < rhs();\n\n      case BinaryOperator.LowerEquals:\n        return lhs() <= rhs();\n\n      case BinaryOperator.Bigger:\n        return lhs() > rhs();\n\n      case BinaryOperator.BiggerEquals:\n        return lhs() >= rhs();\n\n      case BinaryOperator.NullishCoalesce:\n        return (_a = lhs()) !== null && _a !== void 0 ? _a : rhs();\n\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n  }\n\n  visitReadPropExpr(ast, ctx) {\n    let result;\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    result = receiver[ast.name];\n    return result;\n  }\n\n  visitReadKeyExpr(ast, ctx) {\n    const receiver = ast.receiver.visitExpression(this, ctx);\n    const prop = ast.index.visitExpression(this, ctx);\n    return receiver[prop];\n  }\n\n  visitLiteralArrayExpr(ast, ctx) {\n    return this.visitAllExpressions(ast.entries, ctx);\n  }\n\n  visitLiteralMapExpr(ast, ctx) {\n    const result = {};\n    ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\n    return result;\n  }\n\n  visitCommaExpr(ast, context) {\n    const values = this.visitAllExpressions(ast.parts, context);\n    return values[values.length - 1];\n  }\n\n  visitAllExpressions(expressions, ctx) {\n    return expressions.map(expr => expr.visitExpression(this, ctx));\n  }\n\n  visitAllStatements(statements, ctx) {\n    for (let i = 0; i < statements.length; i++) {\n      const stmt = statements[i];\n      const val = stmt.visitStatement(this, ctx);\n\n      if (val instanceof ReturnValue) {\n        return val;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nfunction _declareFn(varNames, statements, ctx, visitor) {\n  return (...args) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\n\nconst CATCH_ERROR_VAR$2 = 'error';\nconst CATCH_STACK_VAR$2 = 'stack';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * An internal module of the Angular compiler that begins with component types,\r\n * extracts templates, and eventually produces a compiled version of the component\r\n * ready for linking into an application.\r\n *\r\n * @security  When compiling templates at runtime, you must ensure that the entire template comes\r\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\r\n * application to XSS risks.  For more detail, see the [Security Guide](https://g.co/ng/security).\r\n */\n\nclass JitCompiler {\n  constructor(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _jitEvaluator, _compilerConfig, _console, getExtraNgModuleProviders) {\n    this._metadataResolver = _metadataResolver;\n    this._templateParser = _templateParser;\n    this._styleCompiler = _styleCompiler;\n    this._viewCompiler = _viewCompiler;\n    this._ngModuleCompiler = _ngModuleCompiler;\n    this._summaryResolver = _summaryResolver;\n    this._reflector = _reflector;\n    this._jitEvaluator = _jitEvaluator;\n    this._compilerConfig = _compilerConfig;\n    this._console = _console;\n    this.getExtraNgModuleProviders = getExtraNgModuleProviders;\n    this._compiledTemplateCache = new Map();\n    this._compiledHostTemplateCache = new Map();\n    this._compiledDirectiveWrapperCache = new Map();\n    this._compiledNgModuleCache = new Map();\n    this._sharedStylesheetCount = 0;\n    this._addedAotSummaries = new Set();\n  }\n\n  compileModuleSync(moduleType) {\n    return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\n  }\n\n  compileModuleAsync(moduleType) {\n    return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\n  }\n\n  compileModuleAndAllComponentsSync(moduleType) {\n    return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\n  }\n\n  compileModuleAndAllComponentsAsync(moduleType) {\n    return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\n  }\n\n  getComponentFactory(component) {\n    const summary = this._metadataResolver.getDirectiveSummary(component);\n\n    return summary.componentFactory;\n  }\n\n  loadAotSummaries(summaries) {\n    this.clearCache();\n\n    this._addAotSummaries(summaries);\n  }\n\n  _addAotSummaries(fn) {\n    if (this._addedAotSummaries.has(fn)) {\n      return;\n    }\n\n    this._addedAotSummaries.add(fn);\n\n    const summaries = fn();\n\n    for (let i = 0; i < summaries.length; i++) {\n      const entry = summaries[i];\n\n      if (typeof entry === 'function') {\n        this._addAotSummaries(entry);\n      } else {\n        const summary = entry;\n\n        this._summaryResolver.addSummary({\n          symbol: summary.type.reference,\n          metadata: null,\n          type: summary\n        });\n      }\n    }\n  }\n\n  hasAotSummary(ref) {\n    return !!this._summaryResolver.resolveSummary(ref);\n  }\n\n  _filterJitIdentifiers(ids) {\n    return ids.map(mod => mod.reference).filter(ref => !this.hasAotSummary(ref));\n  }\n\n  _compileModuleAndComponents(moduleType, isSync) {\n    return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n      this._compileComponents(moduleType, null);\n\n      return this._compileModule(moduleType);\n    });\n  }\n\n  _compileModuleAndAllComponents(moduleType, isSync) {\n    return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n      const componentFactories = [];\n\n      this._compileComponents(moduleType, componentFactories);\n\n      return {\n        ngModuleFactory: this._compileModule(moduleType),\n        componentFactories: componentFactories\n      };\n    });\n  }\n\n  _loadModules(mainModule, isSync) {\n    const loading = [];\n\n    const mainNgModule = this._metadataResolver.getNgModuleMetadata(mainModule); // Note: for runtime compilation, we want to transitively compile all modules,\n    // so we also need to load the declared directives / pipes for all nested modules.\n\n\n    this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach(nestedNgModule => {\n      // getNgModuleMetadata only returns null if the value passed in is not an NgModule\n      const moduleMeta = this._metadataResolver.getNgModuleMetadata(nestedNgModule);\n\n      this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach(ref => {\n        const promise = this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\n\n        if (promise) {\n          loading.push(promise);\n        }\n      });\n\n      this._filterJitIdentifiers(moduleMeta.declaredPipes).forEach(ref => this._metadataResolver.getOrLoadPipeMetadata(ref));\n    });\n\n    return SyncAsync.all(loading);\n  }\n\n  _compileModule(moduleType) {\n    let ngModuleFactory = this._compiledNgModuleCache.get(moduleType);\n\n    if (!ngModuleFactory) {\n      const moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType); // Always provide a bound Compiler\n\n\n      const extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\n      const outputCtx = createOutputContext();\n\n      const compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\n\n      ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\n\n      this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\n    }\n\n    return ngModuleFactory;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _compileComponents(mainModule, allComponentFactories) {\n    const ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n\n    const moduleByJitDirective = new Map();\n    const templates = new Set();\n\n    const transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\n\n    transJitModules.forEach(localMod => {\n      const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod);\n\n      this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(dirRef => {\n        moduleByJitDirective.set(dirRef, localModuleMeta);\n\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n\n        if (dirMeta.isComponent) {\n          templates.add(this._createCompiledTemplate(dirMeta, localModuleMeta));\n\n          if (allComponentFactories) {\n            const template = this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n\n            templates.add(template);\n            allComponentFactories.push(dirMeta.componentFactory);\n          }\n        }\n      });\n    });\n    transJitModules.forEach(localMod => {\n      const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod);\n\n      this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(dirRef => {\n        const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n\n        if (dirMeta.isComponent) {\n          dirMeta.entryComponents.forEach(entryComponentType => {\n            const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);\n            templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n          });\n        }\n      });\n\n      localModuleMeta.entryComponents.forEach(entryComponentType => {\n        if (!this.hasAotSummary(entryComponentType.componentType)) {\n          const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);\n          templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n        }\n      });\n    });\n    templates.forEach(template => this._compileTemplate(template));\n  }\n\n  clearCacheFor(type) {\n    this._compiledNgModuleCache.delete(type);\n\n    this._metadataResolver.clearCacheFor(type);\n\n    this._compiledHostTemplateCache.delete(type);\n\n    const compiledTemplate = this._compiledTemplateCache.get(type);\n\n    if (compiledTemplate) {\n      this._compiledTemplateCache.delete(type);\n    }\n  }\n\n  clearCache() {\n    // Note: don't clear the _addedAotSummaries, as they don't change!\n    this._metadataResolver.clearCache();\n\n    this._compiledTemplateCache.clear();\n\n    this._compiledHostTemplateCache.clear();\n\n    this._compiledNgModuleCache.clear();\n  }\n\n  _createCompiledHostTemplate(compType, ngModule) {\n    if (!ngModule) {\n      throw new Error(`Component ${stringify(compType)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n\n    let compiledTemplate = this._compiledHostTemplateCache.get(compType);\n\n    if (!compiledTemplate) {\n      const compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n\n      assertComponent(compMeta);\n\n      const hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, compMeta.componentFactory.viewDefFactory);\n\n      compiledTemplate = new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n\n      this._compiledHostTemplateCache.set(compType, compiledTemplate);\n    }\n\n    return compiledTemplate;\n  }\n\n  _createCompiledTemplate(compMeta, ngModule) {\n    let compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n\n    if (!compiledTemplate) {\n      assertComponent(compMeta);\n      compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n\n      this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n    }\n\n    return compiledTemplate;\n  }\n\n  _compileTemplate(template) {\n    if (template.isCompiled) {\n      return;\n    }\n\n    const compMeta = template.compMeta;\n    const externalStylesheetsByModuleUrl = new Map();\n    const outputContext = createOutputContext();\n\n    const componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta);\n\n    compMeta.template.externalStylesheets.forEach(stylesheetMeta => {\n      const compiledStylesheet = this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\n\n      externalStylesheetsByModuleUrl.set(stylesheetMeta.moduleUrl, compiledStylesheet);\n    });\n\n    this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\n\n    const pipes = template.ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n\n    const {\n      template: parsedTemplate,\n      pipes: usedPipes\n    } = this._parseTemplate(compMeta, template.ngModule, template.directives);\n\n    const compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, variable(componentStylesheet.stylesVar), usedPipes);\n\n    const evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\n\n    const viewClass = evalResult[compileResult.viewClassVar];\n    const rendererType = evalResult[compileResult.rendererTypeVar];\n    template.compiled(viewClass, rendererType);\n  }\n\n  _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\n    // Note: ! is ok here as components always have a template.\n    const preserveWhitespaces = compMeta.template.preserveWhitespaces;\n    const directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n    const pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n    return this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);\n  }\n\n  _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {\n    result.dependencies.forEach((dep, i) => {\n      const nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n\n      const nestedStylesArr = this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n\n      dep.setValue(nestedStylesArr);\n    });\n  }\n\n  _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {\n    this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n\n    return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];\n  }\n\n  _interpretOrJit(sourceUrl, statements) {\n    if (!this._compilerConfig.useJit) {\n      return interpretStatements(statements, this._reflector);\n    } else {\n      return this._jitEvaluator.evaluateStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\n    }\n  }\n\n}\n\nclass CompiledTemplate {\n  constructor(isHost, compType, compMeta, ngModule, directives) {\n    this.isHost = isHost;\n    this.compType = compType;\n    this.compMeta = compMeta;\n    this.ngModule = ngModule;\n    this.directives = directives;\n    this._viewClass = null;\n    this.isCompiled = false;\n  }\n\n  compiled(viewClass, rendererType) {\n    this._viewClass = viewClass;\n    this.compMeta.componentViewType.setDelegate(viewClass);\n\n    for (let prop in rendererType) {\n      this.compMeta.rendererType[prop] = rendererType[prop];\n    }\n\n    this.isCompiled = true;\n  }\n\n}\n\nfunction assertComponent(meta) {\n  if (!meta.isComponent) {\n    throw new Error(`Could not compile '${identifierName(meta.type)}' because it is not a component.`);\n  }\n}\n\nfunction createOutputContext() {\n  const importExpr$1 = symbol => importExpr({\n    name: identifierName(symbol),\n    moduleName: null,\n    runtime: symbol\n  });\n\n  return {\n    statements: [],\n    genFilePath: '',\n    importExpr: importExpr$1,\n    constantPool: new ConstantPool()\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Provides access to reflection data about symbols that the compiler needs.\r\n */\n\n\nclass CompileReflector {}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Create a {@link UrlResolver} with no package prefix.\r\n */\n\n\nfunction createUrlResolverWithoutPackagePrefix() {\n  return new UrlResolver();\n}\n\nfunction createOfflineCompileUrlResolver() {\n  return new UrlResolver('.');\n}\n\nconst UrlResolver = class UrlResolverImpl {\n  constructor(_packagePrefix = null) {\n    this._packagePrefix = _packagePrefix;\n  }\n  /**\r\n   * Resolves the `url` given the `baseUrl`:\r\n   * - when the `url` is null, the `baseUrl` is returned,\r\n   * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\r\n   * `baseUrl` and `url`,\r\n   * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\r\n   * returned as is (ignoring the `baseUrl`)\r\n   */\n\n\n  resolve(baseUrl, url) {\n    let resolvedUrl = url;\n\n    if (baseUrl != null && baseUrl.length > 0) {\n      resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n    }\n\n    const resolvedParts = _split(resolvedUrl);\n\n    let prefix = this._packagePrefix;\n\n    if (prefix != null && resolvedParts != null && resolvedParts[_ComponentIndex.Scheme] == 'package') {\n      let path = resolvedParts[_ComponentIndex.Path];\n      prefix = prefix.replace(/\\/+$/, '');\n      path = path.replace(/^\\/+/, '');\n      return `${prefix}/${path}`;\n    }\n\n    return resolvedUrl;\n  }\n\n};\n/**\r\n * Extract the scheme of a URL.\r\n */\n\nfunction getUrlScheme(url) {\n  const match = _split(url);\n\n  return match && match[_ComponentIndex.Scheme] || '';\n} // The code below is adapted from Traceur:\n// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js\n\n/**\r\n * Builds a URI string from already-encoded parts.\r\n *\r\n * No encoding is performed.  Any component may be omitted as either null or\r\n * undefined.\r\n *\r\n * @param opt_scheme The scheme such as 'http'.\r\n * @param opt_userInfo The user name before the '@'.\r\n * @param opt_domain The domain such as 'www.google.com', already\r\n *     URI-encoded.\r\n * @param opt_port The port number.\r\n * @param opt_path The path, already URI-encoded.  If it is not\r\n *     empty, it must begin with a slash.\r\n * @param opt_queryData The URI-encoded query data.\r\n * @param opt_fragment The URI-encoded fragment identifier.\r\n * @return The fully combined URI.\r\n */\n\n\nfunction _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n  const out = [];\n\n  if (opt_scheme != null) {\n    out.push(opt_scheme + ':');\n  }\n\n  if (opt_domain != null) {\n    out.push('//');\n\n    if (opt_userInfo != null) {\n      out.push(opt_userInfo + '@');\n    }\n\n    out.push(opt_domain);\n\n    if (opt_port != null) {\n      out.push(':' + opt_port);\n    }\n  }\n\n  if (opt_path != null) {\n    out.push(opt_path);\n  }\n\n  if (opt_queryData != null) {\n    out.push('?' + opt_queryData);\n  }\n\n  if (opt_fragment != null) {\n    out.push('#' + opt_fragment);\n  }\n\n  return out.join('');\n}\n/**\r\n * A regular expression for breaking a URI into its component parts.\r\n *\r\n * {@link https://tools.ietf.org/html/rfc3986#appendix-B} says\r\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\r\n * disambiguation method used by POSIX regular expressions, it is natural and\r\n * commonplace to use a regular expression for parsing the potential five\r\n * components of a URI reference.\r\n *\r\n * The following line is the regular expression for breaking-down a\r\n * well-formed URI reference into its components.\r\n *\r\n * <pre>\r\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n *  12            3  4          5       6  7        8 9\r\n * </pre>\r\n *\r\n * The numbers in the second line above are only to assist readability; they\r\n * indicate the reference points for each subexpression (i.e., each paired\r\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\r\n * For example, matching the above expression to\r\n * <pre>\r\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\r\n * </pre>\r\n * results in the following subexpression matches:\r\n * <pre>\r\n *    $1 = http:\r\n *    $2 = http\r\n *    $3 = //www.ics.uci.edu\r\n *    $4 = www.ics.uci.edu\r\n *    $5 = /pub/ietf/uri/\r\n *    $6 = <undefined>\r\n *    $7 = <undefined>\r\n *    $8 = #Related\r\n *    $9 = Related\r\n * </pre>\r\n * where <undefined> indicates that the component is not present, as is the\r\n * case for the query component in the above example. Therefore, we can\r\n * determine the value of the five components as\r\n * <pre>\r\n *    scheme    = $2\r\n *    authority = $4\r\n *    path      = $5\r\n *    query     = $7\r\n *    fragment  = $9\r\n * </pre>\r\n *\r\n * The regular expression has been modified slightly to expose the\r\n * userInfo, domain, and port separately from the authority.\r\n * The modified version yields\r\n * <pre>\r\n *    $1 = http              scheme\r\n *    $2 = <undefined>       userInfo -\\\r\n *    $3 = www.ics.uci.edu   domain     | authority\r\n *    $4 = <undefined>       port     -/\r\n *    $5 = /pub/ietf/uri/    path\r\n *    $6 = <undefined>       query without ?\r\n *    $7 = Related           fragment without #\r\n * </pre>\r\n * @internal\r\n */\n\n\nconst _splitRe = /*#__PURE__*/new RegExp('^' + '(?:' + '([^:/?#.]+)' + // scheme - ignore special characters\n// used by other URL parts such as :,\n// ?, /, #, and .\n':)?' + '(?://' + '(?:([^/?#]*)@)?' + // userInfo\n'([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' + // domain - restrict to letters,\n// digits, dashes, dots, percent\n// escapes, and unicode characters.\n'(?::([0-9]+))?' + // port\n')?' + '([^?#]+)?' + // path\n'(?:\\\\?([^#]*))?' + // query\n'(?:#(.*))?' + // fragment\n'$');\n/**\r\n * The index of each URI component in the return value of goog.uri.utils.split.\r\n * @enum {number}\r\n */\n\n\nvar _ComponentIndex = /*#__PURE__*/(() => {\n  _ComponentIndex = _ComponentIndex || {};\n  _ComponentIndex[_ComponentIndex[\"Scheme\"] = 1] = \"Scheme\";\n  _ComponentIndex[_ComponentIndex[\"UserInfo\"] = 2] = \"UserInfo\";\n  _ComponentIndex[_ComponentIndex[\"Domain\"] = 3] = \"Domain\";\n  _ComponentIndex[_ComponentIndex[\"Port\"] = 4] = \"Port\";\n  _ComponentIndex[_ComponentIndex[\"Path\"] = 5] = \"Path\";\n  _ComponentIndex[_ComponentIndex[\"QueryData\"] = 6] = \"QueryData\";\n  _ComponentIndex[_ComponentIndex[\"Fragment\"] = 7] = \"Fragment\";\n  return _ComponentIndex;\n})();\n\n/**\r\n * Splits a URI into its component parts.\r\n *\r\n * Each component can be accessed via the component indices; for example:\r\n * <pre>\r\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\r\n * </pre>\r\n *\r\n * @param uri The URI string to examine.\r\n * @return Each component still URI-encoded.\r\n *     Each component that is present will contain the encoded value, whereas\r\n *     components that are not present will be undefined or empty, depending\r\n *     on the browser's regular expression implementation.  Never null, since\r\n *     arbitrary strings may still look like path names.\r\n */\nfunction _split(uri) {\n  return uri.match(_splitRe);\n}\n/**\r\n * Removes dot segments in given path component, as described in\r\n * RFC 3986, section 5.2.4.\r\n *\r\n * @param path A non-empty path component.\r\n * @return Path component with removed dot segments.\r\n */\n\n\nfunction _removeDotSegments(path) {\n  if (path == '/') return '/';\n  const leadingSlash = path[0] == '/' ? '/' : '';\n  const trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n  const segments = path.split('/');\n  const out = [];\n  let up = 0;\n\n  for (let pos = 0; pos < segments.length; pos++) {\n    const segment = segments[pos];\n\n    switch (segment) {\n      case '':\n      case '.':\n        break;\n\n      case '..':\n        if (out.length > 0) {\n          out.pop();\n        } else {\n          up++;\n        }\n\n        break;\n\n      default:\n        out.push(segment);\n    }\n  }\n\n  if (leadingSlash == '') {\n    while (up-- > 0) {\n      out.unshift('..');\n    }\n\n    if (out.length === 0) out.push('.');\n  }\n\n  return leadingSlash + out.join('/') + trailingSlash;\n}\n/**\r\n * Takes an array of the parts from split and canonicalizes the path part\r\n * and then joins all the parts.\r\n */\n\n\nfunction _joinAndCanonicalizePath(parts) {\n  let path = parts[_ComponentIndex.Path];\n  path = path == null ? '' : _removeDotSegments(path);\n  parts[_ComponentIndex.Path] = path;\n  return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n}\n/**\r\n * Resolves a URL.\r\n * @param base The URL acting as the base URL.\r\n * @param to The URL to resolve.\r\n */\n\n\nfunction _resolveUrl(base, url) {\n  const parts = _split(encodeURI(url));\n\n  const baseParts = _split(base);\n\n  if (parts[_ComponentIndex.Scheme] != null) {\n    return _joinAndCanonicalizePath(parts);\n  } else {\n    parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n  }\n\n  for (let i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n    if (parts[i] == null) {\n      parts[i] = baseParts[i];\n    }\n  }\n\n  if (parts[_ComponentIndex.Path][0] == '/') {\n    return _joinAndCanonicalizePath(parts);\n  }\n\n  let path = baseParts[_ComponentIndex.Path];\n  if (path == null) path = '/';\n  const index = path.lastIndexOf('/');\n  path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n  parts[_ComponentIndex.Path] = path;\n  return _joinAndCanonicalizePath(parts);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass Extractor {\n  constructor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n    this.host = host;\n    this.staticSymbolResolver = staticSymbolResolver;\n    this.messageBundle = messageBundle;\n    this.metadataResolver = metadataResolver;\n  }\n\n  extract(rootFiles) {\n    const {\n      files,\n      ngModules\n    } = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\n    return Promise.all(ngModules.map(ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false))).then(() => {\n      const errors = [];\n      files.forEach(file => {\n        const compMetas = [];\n        file.directives.forEach(directiveType => {\n          const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n\n          if (dirMeta && dirMeta.isComponent) {\n            compMetas.push(dirMeta);\n          }\n        });\n        compMetas.forEach(compMeta => {\n          const html = compMeta.template.template; // Template URL points to either an HTML or TS file depending on\n          // whether the file is used with `templateUrl:` or `template:`,\n          // respectively.\n\n          const templateUrl = compMeta.template.templateUrl;\n          const interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);\n          errors.push(...this.messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig));\n        });\n      });\n\n      if (errors.length) {\n        throw new Error(errors.map(e => e.toString()).join('\\n'));\n      }\n\n      return this.messageBundle;\n    });\n  }\n\n  static create(host, locale) {\n    const htmlParser = new HtmlParser();\n    const urlResolver = createAotUrlResolver(host);\n    const symbolCache = new StaticSymbolCache();\n    const summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n    const config = new CompilerConfig({\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n      useJit: false\n    });\n    const normalizer = new DirectiveNormalizer({\n      get: url => host.loadResource(url)\n    }, urlResolver, htmlParser, config);\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector); // TODO(vicb): implicit tags & attributes\n\n    const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n    const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {\n      extractor,\n      staticReflector\n    };\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar FactoryTarget$1 = /*#__PURE__*/(() => {\n  FactoryTarget$1 = FactoryTarget$1 || {};\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n  return FactoryTarget$1;\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Processes `Target`s with a given set of directives and performs a binding operation, which\r\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\r\n * target.\r\n */\nclass R3TargetBinder {\n  constructor(directiveMatcher) {\n    this.directiveMatcher = directiveMatcher;\n  }\n  /**\r\n   * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\r\n   * metadata about the types referenced in the template.\r\n   */\n\n\n  bind(target) {\n    if (!target.template) {\n      // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n      throw new Error('Binding without a template not yet supported');\n    } // First, parse the template into a `Scope` structure. This operation captures the syntactic\n    // scopes in the template and makes them available for later use.\n\n\n    const scope = Scope.apply(target.template); // Use the `Scope` to extract the entities present at every level of the template.\n\n    const templateEntities = extractTemplateEntities(scope); // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n    //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n    //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n    //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n    //   - references: Map of #references to their targets.\n\n    const {\n      directives,\n      bindings,\n      references\n    } = DirectiveBinder.apply(target.template, this.directiveMatcher); // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n    // template. This extracts all the metadata that doesn't depend on directive matching.\n\n    const {\n      expressions,\n      symbols,\n      nestingLevel,\n      usedPipes\n    } = TemplateBinder.applyWithScope(target.template, scope);\n    return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, templateEntities, usedPipes);\n  }\n\n}\n/**\r\n * Represents a binding scope within a template.\r\n *\r\n * Any variables, references, or other named entities declared within the template will\r\n * be captured and available by name in `namedEntities`. Additionally, child templates will\r\n * be analyzed and have their child `Scope`s available in `childScopes`.\r\n */\n\n\nclass Scope {\n  constructor(parentScope, template) {\n    this.parentScope = parentScope;\n    this.template = template;\n    /**\r\n     * Named members of the `Scope`, such as `Reference`s or `Variable`s.\r\n     */\n\n    this.namedEntities = new Map();\n    /**\r\n     * Child `Scope`s for immediately nested `Template`s.\r\n     */\n\n    this.childScopes = new Map();\n  }\n\n  static newRootScope() {\n    return new Scope(null, null);\n  }\n  /**\r\n   * Process a template (either as a `Template` sub-template with variables, or a plain array of\r\n   * template `Node`s) and construct its `Scope`.\r\n   */\n\n\n  static apply(template) {\n    const scope = Scope.newRootScope();\n    scope.ingest(template);\n    return scope;\n  }\n  /**\r\n   * Internal method to process the template and populate the `Scope`.\r\n   */\n\n\n  ingest(template) {\n    if (template instanceof Template) {\n      // Variables on an <ng-template> are defined in the inner scope.\n      template.variables.forEach(node => this.visitVariable(node)); // Process the nodes of the template.\n\n      template.children.forEach(node => node.visit(this));\n    } else {\n      // No overarching `Template` instance, so process the nodes directly.\n      template.forEach(node => node.visit(this));\n    }\n  }\n\n  visitElement(element) {\n    // `Element`s in the template may have `Reference`s which are captured in the scope.\n    element.references.forEach(node => this.visitReference(node)); // Recurse into the `Element`'s children.\n\n    element.children.forEach(node => node.visit(this));\n  }\n\n  visitTemplate(template) {\n    // References on a <ng-template> are defined in the outer scope, so capture them before\n    // processing the template's child scope.\n    template.references.forEach(node => this.visitReference(node)); // Next, create an inner scope and process the template within it.\n\n    const scope = new Scope(this, template);\n    scope.ingest(template);\n    this.childScopes.set(template, scope);\n  }\n\n  visitVariable(variable) {\n    // Declare the variable if it's not already.\n    this.maybeDeclare(variable);\n  }\n\n  visitReference(reference) {\n    // Declare the variable if it's not already.\n    this.maybeDeclare(reference);\n  } // Unused visitors.\n\n\n  visitContent(content) {}\n\n  visitBoundAttribute(attr) {}\n\n  visitBoundEvent(event) {}\n\n  visitBoundText(text) {}\n\n  visitText(text) {}\n\n  visitTextAttribute(attr) {}\n\n  visitIcu(icu) {}\n\n  maybeDeclare(thing) {\n    // Declare something with a name, as long as that name isn't taken.\n    if (!this.namedEntities.has(thing.name)) {\n      this.namedEntities.set(thing.name, thing);\n    }\n  }\n  /**\r\n   * Look up a variable within this `Scope`.\r\n   *\r\n   * This can recurse into a parent `Scope` if it's available.\r\n   */\n\n\n  lookup(name) {\n    if (this.namedEntities.has(name)) {\n      // Found in the local scope.\n      return this.namedEntities.get(name);\n    } else if (this.parentScope !== null) {\n      // Not in the local scope, but there's a parent scope so check there.\n      return this.parentScope.lookup(name);\n    } else {\n      // At the top level and it wasn't found.\n      return null;\n    }\n  }\n  /**\r\n   * Get the child scope for a `Template`.\r\n   *\r\n   * This should always be defined.\r\n   */\n\n\n  getChildScope(template) {\n    const res = this.childScopes.get(template);\n\n    if (res === undefined) {\n      throw new Error(`Assertion error: child scope for ${template} not found`);\n    }\n\n    return res;\n  }\n\n}\n/**\r\n * Processes a template and matches directives on nodes (elements and templates).\r\n *\r\n * Usually used via the static `apply()` method.\r\n */\n\n\nclass DirectiveBinder {\n  constructor(matcher, directives, bindings, references) {\n    this.matcher = matcher;\n    this.directives = directives;\n    this.bindings = bindings;\n    this.references = references;\n  }\n  /**\r\n   * Process a template (list of `Node`s) and perform directive matching against each node.\r\n   *\r\n   * @param template the list of template `Node`s to match (recursively).\r\n   * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\r\n   * this template.\r\n   * @returns three maps which contain information about directives in the template: the\r\n   * `directives` map which lists directives matched on each node, the `bindings` map which\r\n   * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\r\n   * map which resolves #references (`Reference`s) within the template to the named directive or\r\n   * template node.\r\n   */\n\n\n  static apply(template, selectorMatcher) {\n    const directives = new Map();\n    const bindings = new Map();\n    const references = new Map();\n    const matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);\n    matcher.ingest(template);\n    return {\n      directives,\n      bindings,\n      references\n    };\n  }\n\n  ingest(template) {\n    template.forEach(node => node.visit(this));\n  }\n\n  visitElement(element) {\n    this.visitElementOrTemplate(element.name, element);\n  }\n\n  visitTemplate(template) {\n    this.visitElementOrTemplate('ng-template', template);\n  }\n\n  visitElementOrTemplate(elementName, node) {\n    // First, determine the HTML shape of the node for the purpose of directive matching.\n    // Do this by building up a `CssSelector` for the node.\n    const cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node)); // Next, use the `SelectorMatcher` to get the list of directives on the node.\n\n    const directives = [];\n    this.matcher.match(cssSelector, (_, directive) => directives.push(directive));\n\n    if (directives.length > 0) {\n      this.directives.set(node, directives);\n    } // Resolve any references that are created on this node.\n\n\n    node.references.forEach(ref => {\n      let dirTarget = null; // If the reference expression is empty, then it matches the \"primary\" directive on the node\n      // (if there is one). Otherwise it matches the host node itself (either an element or\n      // <ng-template> node).\n\n      if (ref.value.trim() === '') {\n        // This could be a reference to a component if there is one.\n        dirTarget = directives.find(dir => dir.isComponent) || null;\n      } else {\n        // This should be a reference to a directive exported via exportAs.\n        dirTarget = directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) || null; // Check if a matching directive was found.\n\n        if (dirTarget === null) {\n          // No matching directive was found - this reference points to an unknown target. Leave it\n          // unmapped.\n          return;\n        }\n      }\n\n      if (dirTarget !== null) {\n        // This reference points to a directive.\n        this.references.set(ref, {\n          directive: dirTarget,\n          node\n        });\n      } else {\n        // This reference points to the node itself.\n        this.references.set(ref, node);\n      }\n    });\n\n    const setAttributeBinding = (attribute, ioType) => {\n      const dir = directives.find(dir => dir[ioType].hasBindingPropertyName(attribute.name));\n      const binding = dir !== undefined ? dir : node;\n      this.bindings.set(attribute, binding);\n    }; // Node inputs (bound attributes) and text attributes can be bound to an\n    // input on a directive.\n\n\n    node.inputs.forEach(input => setAttributeBinding(input, 'inputs'));\n    node.attributes.forEach(attr => setAttributeBinding(attr, 'inputs'));\n\n    if (node instanceof Template) {\n      node.templateAttrs.forEach(attr => setAttributeBinding(attr, 'inputs'));\n    } // Node outputs (bound events) can be bound to an output on a directive.\n\n\n    node.outputs.forEach(output => setAttributeBinding(output, 'outputs')); // Recurse into the node's children.\n\n    node.children.forEach(child => child.visit(this));\n  } // Unused visitors.\n\n\n  visitContent(content) {}\n\n  visitVariable(variable) {}\n\n  visitReference(reference) {}\n\n  visitTextAttribute(attribute) {}\n\n  visitBoundAttribute(attribute) {}\n\n  visitBoundEvent(attribute) {}\n\n  visitBoundAttributeOrEvent(node) {}\n\n  visitText(text) {}\n\n  visitBoundText(text) {}\n\n  visitIcu(icu) {}\n\n}\n/**\r\n * Processes a template and extract metadata about expressions and symbols within.\r\n *\r\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\r\n * within the template in order to operate.\r\n *\r\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\r\n * by overridden methods from that visitor.\r\n */\n\n\nclass TemplateBinder extends RecursiveAstVisitor$1 {\n  constructor(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {\n    super();\n    this.bindings = bindings;\n    this.symbols = symbols;\n    this.usedPipes = usedPipes;\n    this.nestingLevel = nestingLevel;\n    this.scope = scope;\n    this.template = template;\n    this.level = level;\n    this.pipesUsed = []; // Save a bit of processing time by constructing this closure in advance.\n\n    this.visitNode = node => node.visit(this);\n  } // This method is defined to reconcile the type of TemplateBinder since both\n  // RecursiveAstVisitor and Visitor define the visit() method in their\n  // interfaces.\n\n\n  visit(node, context) {\n    if (node instanceof AST) {\n      node.visit(this, context);\n    } else {\n      node.visit(this);\n    }\n  }\n  /**\r\n   * Process a template and extract metadata about expressions and symbols within.\r\n   *\r\n   * @param template the nodes of the template to process\r\n   * @param scope the `Scope` of the template being processed.\r\n   * @returns three maps which contain metadata about the template: `expressions` which interprets\r\n   * special `AST` nodes in expressions as pointing to references or variables declared within the\r\n   * template, `symbols` which maps those variables and references to the nested `Template` which\r\n   * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\r\n   * nesting level (how many levels deep within the template structure the `Template` is), starting\r\n   * at 1.\r\n   */\n\n\n  static applyWithScope(template, scope) {\n    const expressions = new Map();\n    const symbols = new Map();\n    const nestingLevel = new Map();\n    const usedPipes = new Set(); // The top-level template has nesting level 0.\n\n    const binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);\n    binder.ingest(template);\n    return {\n      expressions,\n      symbols,\n      nestingLevel,\n      usedPipes\n    };\n  }\n\n  ingest(template) {\n    if (template instanceof Template) {\n      // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,\n      // and references were all processed in the scope of the containing template.\n      template.variables.forEach(this.visitNode);\n      template.children.forEach(this.visitNode); // Set the nesting level.\n\n      this.nestingLevel.set(template, this.level);\n    } else {\n      // Visit each node from the top-level template.\n      template.forEach(this.visitNode);\n    }\n  }\n\n  visitElement(element) {\n    // Visit the inputs, outputs, and children of the element.\n    element.inputs.forEach(this.visitNode);\n    element.outputs.forEach(this.visitNode);\n    element.children.forEach(this.visitNode);\n  }\n\n  visitTemplate(template) {\n    // First, visit inputs, outputs and template attributes of the template node.\n    template.inputs.forEach(this.visitNode);\n    template.outputs.forEach(this.visitNode);\n    template.templateAttrs.forEach(this.visitNode); // References are also evaluated in the outer context.\n\n    template.references.forEach(this.visitNode); // Next, recurse into the template using its scope, and bumping the nesting level up by one.\n\n    const childScope = this.scope.getChildScope(template);\n    const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);\n    binder.ingest(template);\n  }\n\n  visitVariable(variable) {\n    // Register the `Variable` as a symbol in the current `Template`.\n    if (this.template !== null) {\n      this.symbols.set(variable, this.template);\n    }\n  }\n\n  visitReference(reference) {\n    // Register the `Reference` as a symbol in the current `Template`.\n    if (this.template !== null) {\n      this.symbols.set(reference, this.template);\n    }\n  } // Unused template visitors\n\n\n  visitText(text) {}\n\n  visitContent(content) {}\n\n  visitTextAttribute(attribute) {}\n\n  visitIcu(icu) {\n    Object.keys(icu.vars).forEach(key => icu.vars[key].visit(this));\n    Object.keys(icu.placeholders).forEach(key => icu.placeholders[key].visit(this));\n  } // The remaining visitors are concerned with processing AST expressions within template bindings\n\n\n  visitBoundAttribute(attribute) {\n    attribute.value.visit(this);\n  }\n\n  visitBoundEvent(event) {\n    event.handler.visit(this);\n  }\n\n  visitBoundText(text) {\n    text.value.visit(this);\n  }\n\n  visitPipe(ast, context) {\n    this.usedPipes.add(ast.name);\n    return super.visitPipe(ast, context);\n  } // These five types of AST expressions can refer to expression roots, which could be variables\n  // or references in the current scope.\n\n\n  visitPropertyRead(ast, context) {\n    this.maybeMap(context, ast, ast.name);\n    return super.visitPropertyRead(ast, context);\n  }\n\n  visitSafePropertyRead(ast, context) {\n    this.maybeMap(context, ast, ast.name);\n    return super.visitSafePropertyRead(ast, context);\n  }\n\n  visitPropertyWrite(ast, context) {\n    this.maybeMap(context, ast, ast.name);\n    return super.visitPropertyWrite(ast, context);\n  }\n\n  visitMethodCall(ast, context) {\n    this.maybeMap(context, ast, ast.name);\n    return super.visitMethodCall(ast, context);\n  }\n\n  visitSafeMethodCall(ast, context) {\n    this.maybeMap(context, ast, ast.name);\n    return super.visitSafeMethodCall(ast, context);\n  }\n\n  maybeMap(scope, ast, name) {\n    // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n    // `AST` expression that maps to a `Variable` or `Reference`.\n    if (!(ast.receiver instanceof ImplicitReceiver)) {\n      return;\n    } // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n    // probably a property on the top-level component context.\n\n\n    let target = this.scope.lookup(name);\n\n    if (target !== null) {\n      this.bindings.set(ast, target);\n    }\n  }\n\n}\n/**\r\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\r\n *\r\n * See `BoundTarget` for documentation on the individual methods.\r\n */\n\n\nclass R3BoundTarget {\n  constructor(target, directives, bindings, references, exprTargets, symbols, nestingLevel, templateEntities, usedPipes) {\n    this.target = target;\n    this.directives = directives;\n    this.bindings = bindings;\n    this.references = references;\n    this.exprTargets = exprTargets;\n    this.symbols = symbols;\n    this.nestingLevel = nestingLevel;\n    this.templateEntities = templateEntities;\n    this.usedPipes = usedPipes;\n  }\n\n  getEntitiesInTemplateScope(template) {\n    var _a;\n\n    return (_a = this.templateEntities.get(template)) !== null && _a !== void 0 ? _a : new Set();\n  }\n\n  getDirectivesOfNode(node) {\n    return this.directives.get(node) || null;\n  }\n\n  getReferenceTarget(ref) {\n    return this.references.get(ref) || null;\n  }\n\n  getConsumerOfBinding(binding) {\n    return this.bindings.get(binding) || null;\n  }\n\n  getExpressionTarget(expr) {\n    return this.exprTargets.get(expr) || null;\n  }\n\n  getTemplateOfSymbol(symbol) {\n    return this.symbols.get(symbol) || null;\n  }\n\n  getNestingLevel(template) {\n    return this.nestingLevel.get(template) || 0;\n  }\n\n  getUsedDirectives() {\n    const set = new Set();\n    this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));\n    return Array.from(set.values());\n  }\n\n  getUsedPipes() {\n    return Array.from(this.usedPipes);\n  }\n\n}\n\nfunction extractTemplateEntities(rootScope) {\n  const entityMap = new Map();\n\n  function extractScopeEntities(scope) {\n    if (entityMap.has(scope.template)) {\n      return entityMap.get(scope.template);\n    }\n\n    const currentEntities = scope.namedEntities;\n    let templateEntities;\n\n    if (scope.parentScope !== null) {\n      templateEntities = new Map([...extractScopeEntities(scope.parentScope), ...currentEntities]);\n    } else {\n      templateEntities = new Map(currentEntities);\n    }\n\n    entityMap.set(scope.template, templateEntities);\n    return templateEntities;\n  }\n\n  const scopesToProcess = [rootScope];\n\n  while (scopesToProcess.length > 0) {\n    const scope = scopesToProcess.pop();\n\n    for (const childScope of scope.childScopes.values()) {\n      scopesToProcess.push(childScope);\n    }\n\n    extractScopeEntities(scope);\n  }\n\n  const templateEntities = new Map();\n\n  for (const [template, entities] of entityMap) {\n    templateEntities.set(template, new Set(entities.values()));\n  }\n\n  return templateEntities;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction compileClassMetadata(metadata) {\n  var _a, _b; // Generate an ngDevMode guarded call to setClassMetadata with the class identifier and its\n  // metadata.\n\n\n  const fnCall = importExpr(Identifiers.setClassMetadata).callFn([metadata.type, metadata.decorators, (_a = metadata.ctorParameters) !== null && _a !== void 0 ? _a : literal(null), (_b = metadata.propDecorators) !== null && _b !== void 0 ? _b : literal(null)]);\n  const iife = fn([], [devOnlyGuardedExpression(fnCall).toStmt()]);\n  return iife.callFn([]);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION = '12.0.0';\n\nfunction compileDeclareClassMetadata(metadata) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', metadata.type);\n  definitionMap.set('decorators', metadata.decorators);\n  definitionMap.set('ctorParameters', metadata.ctorParameters);\n  definitionMap.set('propDecorators', metadata.propDecorators);\n  return importExpr(Identifiers.declareClassMetadata).callFn([definitionMap.toLiteralMap()]);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$1 = '12.0.0';\n/**\r\n * Compile a directive declaration defined by the `R3DirectiveMetadata`.\r\n */\n\nfunction compileDeclareDirectiveFromMetadata(meta) {\n  const definitionMap = createDirectiveDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareDirective).callFn([definitionMap.toLiteralMap()]);\n  const type = createDirectiveType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for a directive into a `DefinitionMap`. This allows for reusing\r\n * this logic for components, as they extend the directive metadata.\r\n */\n\n\nfunction createDirectiveDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$1));\n  definitionMap.set('version', literal('12.2.7')); // e.g. `type: MyDirective`\n\n  definitionMap.set('type', meta.internalType); // e.g. `selector: 'some-dir'`\n\n  if (meta.selector !== null) {\n    definitionMap.set('selector', literal(meta.selector));\n  }\n\n  definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n  definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n  definitionMap.set('host', compileHostMetadata(meta.host));\n  definitionMap.set('providers', meta.providers);\n\n  if (meta.queries.length > 0) {\n    definitionMap.set('queries', literalArr(meta.queries.map(compileQuery)));\n  }\n\n  if (meta.viewQueries.length > 0) {\n    definitionMap.set('viewQueries', literalArr(meta.viewQueries.map(compileQuery)));\n  }\n\n  if (meta.exportAs !== null) {\n    definitionMap.set('exportAs', asLiteral(meta.exportAs));\n  }\n\n  if (meta.usesInheritance) {\n    definitionMap.set('usesInheritance', literal(true));\n  }\n\n  if (meta.lifecycle.usesOnChanges) {\n    definitionMap.set('usesOnChanges', literal(true));\n  }\n\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  return definitionMap;\n}\n/**\r\n * Compiles the metadata of a single query into its partial declaration form as declared\r\n * by `R3DeclareQueryMetadata`.\r\n */\n\n\nfunction compileQuery(query) {\n  const meta = new DefinitionMap();\n  meta.set('propertyName', literal(query.propertyName));\n\n  if (query.first) {\n    meta.set('first', literal(true));\n  }\n\n  meta.set('predicate', Array.isArray(query.predicate) ? asLiteral(query.predicate) : query.predicate);\n\n  if (!query.emitDistinctChangesOnly) {\n    // `emitDistinctChangesOnly` is special because we expect it to be `true`.\n    // Therefore we explicitly emit the field, and explicitly place it only when it's `false`.\n    meta.set('emitDistinctChangesOnly', literal(false));\n  } else {// The linker will assume that an absent `emitDistinctChangesOnly` flag is by default `true`.\n  }\n\n  if (query.descendants) {\n    meta.set('descendants', literal(true));\n  }\n\n  meta.set('read', query.read);\n\n  if (query.static) {\n    meta.set('static', literal(true));\n  }\n\n  return meta.toLiteralMap();\n}\n/**\r\n * Compiles the host metadata into its partial declaration form as declared\r\n * in `R3DeclareDirectiveMetadata['host']`\r\n */\n\n\nfunction compileHostMetadata(meta) {\n  const hostMetadata = new DefinitionMap();\n  hostMetadata.set('attributes', toOptionalLiteralMap(meta.attributes, expression => expression));\n  hostMetadata.set('listeners', toOptionalLiteralMap(meta.listeners, literal));\n  hostMetadata.set('properties', toOptionalLiteralMap(meta.properties, literal));\n\n  if (meta.specialAttributes.styleAttr) {\n    hostMetadata.set('styleAttribute', literal(meta.specialAttributes.styleAttr));\n  }\n\n  if (meta.specialAttributes.classAttr) {\n    hostMetadata.set('classAttribute', literal(meta.specialAttributes.classAttr));\n  }\n\n  if (hostMetadata.values.length > 0) {\n    return hostMetadata.toLiteralMap();\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Compile a component declaration defined by the `R3ComponentMetadata`.\r\n */\n\n\nfunction compileDeclareComponentFromMetadata(meta, template, additionalTemplateInfo) {\n  const definitionMap = createComponentDefinitionMap(meta, template, additionalTemplateInfo);\n  const expression = importExpr(Identifiers.declareComponent).callFn([definitionMap.toLiteralMap()]);\n  const type = createComponentType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for a component into a `DefinitionMap`.\r\n */\n\n\nfunction createComponentDefinitionMap(meta, template, templateInfo) {\n  const definitionMap = createDirectiveDefinitionMap(meta);\n  definitionMap.set('template', getTemplateExpression(template, templateInfo));\n\n  if (templateInfo.isInline) {\n    definitionMap.set('isInline', literal(true));\n  }\n\n  definitionMap.set('styles', toOptionalLiteralArray(meta.styles, literal));\n  definitionMap.set('components', compileUsedDirectiveMetadata(meta, directive => directive.isComponent === true));\n  definitionMap.set('directives', compileUsedDirectiveMetadata(meta, directive => directive.isComponent !== true));\n  definitionMap.set('pipes', compileUsedPipeMetadata(meta));\n  definitionMap.set('viewProviders', meta.viewProviders);\n  definitionMap.set('animations', meta.animations);\n\n  if (meta.changeDetection !== undefined) {\n    definitionMap.set('changeDetection', importExpr(Identifiers.ChangeDetectionStrategy).prop(ChangeDetectionStrategy[meta.changeDetection]));\n  }\n\n  if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n    definitionMap.set('encapsulation', importExpr(Identifiers.ViewEncapsulation).prop(ViewEncapsulation[meta.encapsulation]));\n  }\n\n  if (meta.interpolation !== DEFAULT_INTERPOLATION_CONFIG) {\n    definitionMap.set('interpolation', literalArr([literal(meta.interpolation.start), literal(meta.interpolation.end)]));\n  }\n\n  if (template.preserveWhitespaces === true) {\n    definitionMap.set('preserveWhitespaces', literal(true));\n  }\n\n  return definitionMap;\n}\n\nfunction getTemplateExpression(template, templateInfo) {\n  // If the template has been defined using a direct literal, we use that expression directly\n  // without any modifications. This is ensures proper source mapping from the partially\n  // compiled code to the source file declaring the template. Note that this does not capture\n  // template literals referenced indirectly through an identifier.\n  if (templateInfo.inlineTemplateLiteralExpression !== null) {\n    return templateInfo.inlineTemplateLiteralExpression;\n  } // If the template is defined inline but not through a literal, the template has been resolved\n  // through static interpretation. We create a literal but cannot provide any source span. Note\n  // that we cannot use the expression defining the template because the linker expects the template\n  // to be defined as a literal in the declaration.\n\n\n  if (templateInfo.isInline) {\n    return literal(templateInfo.content, null, null);\n  } // The template is external so we must synthesize an expression node with\n  // the appropriate source-span.\n\n\n  const contents = templateInfo.content;\n  const file = new ParseSourceFile(contents, templateInfo.sourceUrl);\n  const start = new ParseLocation(file, 0, 0, 0);\n  const end = computeEndLocation(file, contents);\n  const span = new ParseSourceSpan(start, end);\n  return literal(contents, null, span);\n}\n\nfunction computeEndLocation(file, contents) {\n  const length = contents.length;\n  let lineStart = 0;\n  let lastLineStart = 0;\n  let line = 0;\n\n  do {\n    lineStart = contents.indexOf('\\n', lastLineStart);\n\n    if (lineStart !== -1) {\n      lastLineStart = lineStart + 1;\n      line++;\n    }\n  } while (lineStart !== -1);\n\n  return new ParseLocation(file, length, line, length - lastLineStart);\n}\n/**\r\n * Compiles the directives as registered in the component metadata into an array literal of the\r\n * individual directives. If the component does not use any directives, then null is returned.\r\n */\n\n\nfunction compileUsedDirectiveMetadata(meta, predicate) {\n  const wrapType = meta.declarationListEmitMode !== 0\n  /* Direct */\n  ? generateForwardRef : expr => expr;\n  const directives = meta.directives.filter(predicate);\n  return toOptionalLiteralArray(directives, directive => {\n    const dirMeta = new DefinitionMap();\n    dirMeta.set('type', wrapType(directive.type));\n    dirMeta.set('selector', literal(directive.selector));\n    dirMeta.set('inputs', toOptionalLiteralArray(directive.inputs, literal));\n    dirMeta.set('outputs', toOptionalLiteralArray(directive.outputs, literal));\n    dirMeta.set('exportAs', toOptionalLiteralArray(directive.exportAs, literal));\n    return dirMeta.toLiteralMap();\n  });\n}\n/**\r\n * Compiles the pipes as registered in the component metadata into an object literal, where the\r\n * pipe's name is used as key and a reference to its type as value. If the component does not use\r\n * any pipes, then null is returned.\r\n */\n\n\nfunction compileUsedPipeMetadata(meta) {\n  if (meta.pipes.size === 0) {\n    return null;\n  }\n\n  const wrapType = meta.declarationListEmitMode !== 0\n  /* Direct */\n  ? generateForwardRef : expr => expr;\n  const entries = [];\n\n  for (const [name, pipe] of meta.pipes) {\n    entries.push({\n      key: name,\n      value: wrapType(pipe),\n      quoted: true\n    });\n  }\n\n  return literalMap(entries);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$2 = '12.0.0';\n\nfunction compileDeclareFactoryFunction(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$2));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.internalType);\n  definitionMap.set('deps', compileDependencies(meta.deps));\n  definitionMap.set('target', importExpr(Identifiers.FactoryTarget).prop(FactoryTarget[meta.target]));\n  return {\n    expression: importExpr(Identifiers.declareFactory).callFn([definitionMap.toLiteralMap()]),\n    statements: [],\n    type: createFactoryType(meta)\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$3 = '12.0.0';\n/**\r\n * Compile a Injectable declaration defined by the `R3InjectableMetadata`.\r\n */\n\nfunction compileDeclareInjectableFromMetadata(meta) {\n  const definitionMap = createInjectableDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareInjectable).callFn([definitionMap.toLiteralMap()]);\n  const type = createInjectableType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for a Injectable into a `DefinitionMap`.\r\n */\n\n\nfunction createInjectableDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$3));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.internalType); // Only generate providedIn property if it has a non-null value\n\n  if (meta.providedIn !== undefined) {\n    const providedIn = convertFromProviderExpression(meta.providedIn);\n\n    if (providedIn.value !== null) {\n      definitionMap.set('providedIn', providedIn);\n    }\n  }\n\n  if (meta.useClass !== undefined) {\n    definitionMap.set('useClass', convertFromProviderExpression(meta.useClass));\n  }\n\n  if (meta.useExisting !== undefined) {\n    definitionMap.set('useExisting', convertFromProviderExpression(meta.useExisting));\n  }\n\n  if (meta.useValue !== undefined) {\n    definitionMap.set('useValue', convertFromProviderExpression(meta.useValue));\n  } // Factories do not contain `ForwardRef`s since any types are already wrapped in a function call\n  // so the types will not be eagerly evaluated. Therefore we do not need to process this expression\n  // with `convertFromProviderExpression()`.\n\n\n  if (meta.useFactory !== undefined) {\n    definitionMap.set('useFactory', meta.useFactory);\n  }\n\n  if (meta.deps !== undefined) {\n    definitionMap.set('deps', literalArr(meta.deps.map(compileDependency)));\n  }\n\n  return definitionMap;\n}\n/**\r\n * Convert an `R3ProviderExpression` to an `Expression`, possibly wrapping its expression in a\r\n * `forwardRef()` call.\r\n *\r\n * If `R3ProviderExpression.isForwardRef` is true then the expression was originally wrapped in a\r\n * `forwardRef()` call to prevent the value from being eagerly evaluated in the code.\r\n *\r\n * Normally, the linker will statically process the code, putting the `expression` inside a factory\r\n * function so the `forwardRef()` wrapper is not evaluated before it has been defined. But if the\r\n * partial declaration is evaluated by the JIT compiler the `forwardRef()` call is still needed to\r\n * prevent eager evaluation of the `expression`.\r\n *\r\n * So in partial declarations, expressions that could be forward-refs are wrapped in `forwardRef()`\r\n * calls, and this is then unwrapped in the linker as necessary.\r\n *\r\n * See `packages/compiler-cli/src/ngtsc/annotations/src/injectable.ts` and\r\n * `packages/compiler/src/jit_compiler_facade.ts` for more information.\r\n */\n\n\nfunction convertFromProviderExpression({\n  expression,\n  isForwardRef\n}) {\n  return isForwardRef ? generateForwardRef(expression) : expression;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$4 = '12.0.0';\n\nfunction compileDeclareInjectorFromMetadata(meta) {\n  const definitionMap = createInjectorDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareInjector).callFn([definitionMap.toLiteralMap()]);\n  const type = createInjectorType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for an Injector into a `DefinitionMap`.\r\n */\n\n\nfunction createInjectorDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$4));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.internalType);\n  definitionMap.set('providers', meta.providers);\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', literalArr(meta.imports));\n  }\n\n  return definitionMap;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$5 = '12.0.0';\n\nfunction compileDeclareNgModuleFromMetadata(meta) {\n  const definitionMap = createNgModuleDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declareNgModule).callFn([definitionMap.toLiteralMap()]);\n  const type = createNgModuleType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for an NgModule into a `DefinitionMap`.\r\n */\n\n\nfunction createNgModuleDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$5));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core));\n  definitionMap.set('type', meta.internalType); // We only generate the keys in the metadata if the arrays contain values.\n  // We must wrap the arrays inside a function if any of the values are a forward reference to a\n  // not-yet-declared class. This is to support JIT execution of the `ɵɵngDeclareNgModule()` call.\n  // In the linker these wrappers are stripped and then reapplied for the `ɵɵdefineNgModule()` call.\n\n  if (meta.bootstrap.length > 0) {\n    definitionMap.set('bootstrap', refsToArray(meta.bootstrap, meta.containsForwardDecls));\n  }\n\n  if (meta.declarations.length > 0) {\n    definitionMap.set('declarations', refsToArray(meta.declarations, meta.containsForwardDecls));\n  }\n\n  if (meta.imports.length > 0) {\n    definitionMap.set('imports', refsToArray(meta.imports, meta.containsForwardDecls));\n  }\n\n  if (meta.exports.length > 0) {\n    definitionMap.set('exports', refsToArray(meta.exports, meta.containsForwardDecls));\n  }\n\n  if (meta.schemas !== null && meta.schemas.length > 0) {\n    definitionMap.set('schemas', literalArr(meta.schemas.map(ref => ref.value)));\n  }\n\n  if (meta.id !== null) {\n    definitionMap.set('id', meta.id);\n  }\n\n  return definitionMap;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Every time we make a breaking change to the declaration interface or partial-linker behavior, we\r\n * must update this constant to prevent old partial-linkers from incorrectly processing the\r\n * declaration.\r\n *\r\n * Do not include any prerelease in these versions as they are ignored.\r\n */\n\n\nconst MINIMUM_PARTIAL_LINKER_VERSION$6 = '12.0.0';\n/**\r\n * Compile a Pipe declaration defined by the `R3PipeMetadata`.\r\n */\n\nfunction compileDeclarePipeFromMetadata(meta) {\n  const definitionMap = createPipeDefinitionMap(meta);\n  const expression = importExpr(Identifiers.declarePipe).callFn([definitionMap.toLiteralMap()]);\n  const type = createPipeType(meta);\n  return {\n    expression,\n    type,\n    statements: []\n  };\n}\n/**\r\n * Gathers the declaration fields for a Pipe into a `DefinitionMap`.\r\n */\n\n\nfunction createPipeDefinitionMap(meta) {\n  const definitionMap = new DefinitionMap();\n  definitionMap.set('minVersion', literal(MINIMUM_PARTIAL_LINKER_VERSION$6));\n  definitionMap.set('version', literal('12.2.7'));\n  definitionMap.set('ngImport', importExpr(Identifiers.core)); // e.g. `type: MyPipe`\n\n  definitionMap.set('type', meta.internalType); // e.g. `name: \"myPipe\"`\n\n  definitionMap.set('name', literal(meta.pipeName));\n\n  if (meta.pure === false) {\n    // e.g. `pure: false`\n    definitionMap.set('pure', literal(meta.pure));\n  }\n\n  return definitionMap;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\n\n\n/*#__PURE__*/\npublishFacade(_global);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nexport { AST, ASTWithName, ASTWithSource, AbsoluteSourceSpan, AotCompiler, AotSummaryResolver, ArrayType, AssertNotNull, AstMemoryEfficientTransformer, AstPath, AstTransformer$1 as AstTransformer, AttrAst, Attribute, Binary, BinaryOperator, BinaryOperatorExpr, BindingPipe, BoundDirectivePropertyAst, BoundElementProperty, BoundElementPropertyAst, BoundEventAst, BoundTextAst, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CONTENT_ATTR, CUSTOM_ELEMENTS_SCHEMA, CastExpr, Chain, ClassField, ClassMethod, ClassStmt, CommaExpr, Comment$1 as Comment, CompileDirectiveMetadata, CompileMetadataResolver, CompileNgModuleMetadata, CompilePipeMetadata, CompileReflector, CompileShallowModuleMetadata, CompileStylesheetMetadata, CompileSummaryKind, CompileTemplateMetadata, CompiledStylesheet, CompilerConfig, Conditional, ConditionalExpr, ConstantPool, CssSelector, DEFAULT_INTERPOLATION_CONFIG, DYNAMIC_TYPE, DeclareFunctionStmt, DeclareVarStmt, DirectiveAst, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, EOF, ERROR_COMPONENT_TYPE, Element$1 as Element, ElementAst, ElementSchemaRegistry, EmbeddedTemplateAst, EmitterVisitorContext, EmptyExpr, Expansion, ExpansionCase, Expression, ExpressionBinding, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, Extractor, FactoryTarget, FunctionCall, FunctionExpr, GeneratedFile, HOST_ATTR, HtmlParser, HtmlTagDefinition, I18NHtmlParser, Identifiers$1 as Identifiers, IfStmt, ImplicitReceiver, InstantiateExpr, Interpolation, InterpolationConfig, InvokeFunctionExpr, InvokeMethodExpr, IvyParser, JSDocComment, JitCompiler, JitEvaluator, JitSummaryResolver, KeyedRead, KeyedWrite, LeadingComment, Lexer, LiteralArray, LiteralArrayExpr, LiteralExpr, LiteralMap, LiteralMapExpr, LiteralPrimitive, LocalizedString, MapType, MessageBundle, MethodCall, NONE_TYPE, NO_ERRORS_SCHEMA, NgContentAst, NgModuleCompiler, NgModuleResolver, NodeWithI18n, NonNullAssert, NotExpr, NullTemplateVisitor, ParseError, ParseErrorLevel, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseSpan, ParseTreeResult, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable, Parser$1 as Parser, ParserError, PipeResolver, PrefixNot, PropertyRead, PropertyWrite, ProviderAst, ProviderAstType, ProviderMeta, Quote, R3BoundTarget, Identifiers as R3Identifiers, R3TargetBinder, ReadKeyExpr, ReadPropExpr, ReadVarExpr, RecursiveAstVisitor$1 as RecursiveAstVisitor, RecursiveTemplateAstVisitor, RecursiveVisitor$1 as RecursiveVisitor, ReferenceAst, ResolvedStaticSymbol, ResourceLoader, ReturnStatement, STRING_TYPE, SafeKeyedRead, SafeMethodCall, SafePropertyRead, SelectorContext, SelectorListContext, SelectorMatcher, Serializer, SplitInterpolation, Statement, StaticReflector, StaticSymbol, StaticSymbolCache, StaticSymbolResolver, StmtModifier, StyleCompiler, StylesCompileDependency, SummaryResolver, TagContentType, TaggedTemplateExpr, TemplateBindingParseResult, TemplateLiteral, TemplateLiteralElement, TemplateParseError, TemplateParseResult, TemplateParser, Text$3 as Text, TextAst, ThisReceiver, ThrowStmt, BoundAttribute as TmplAstBoundAttribute, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, Element as TmplAstElement, Icu as TmplAstIcu, RecursiveVisitor as TmplAstRecursiveVisitor, Reference as TmplAstReference, Template as TmplAstTemplate, Text as TmplAstText, TextAttribute as TmplAstTextAttribute, Variable as TmplAstVariable, Token, TokenType, TransitiveCompileNgModuleMetadata, TreeError, TryCatchStmt, Type$1 as Type, TypeScriptEmitter, TypeofExpr, Unary, UnaryOperator, UnaryOperatorExpr, UrlResolver, VERSION$1 as VERSION, VariableAst, VariableBinding, Version, ViewCompiler, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, Xliff, Xliff2, Xmb, XmlParser, Xtb, _ParseAST, analyzeAndValidateNgModules, analyzeFile, analyzeFileForInjectables, analyzeNgModules, collectExternalReferences, compileClassMetadata, compileComponentFromMetadata, compileDeclareClassMetadata, compileDeclareComponentFromMetadata, compileDeclareDirectiveFromMetadata, compileDeclareFactoryFunction, compileDeclareInjectableFromMetadata, compileDeclareInjectorFromMetadata, compileDeclareNgModuleFromMetadata, compileDeclarePipeFromMetadata, compileDirectiveFromMetadata, compileFactoryFunction, compileInjectable, compileInjector, compileNgModule, compilePipeFromMetadata, componentFactoryName, computeMsgId, core, createAotCompiler, createAotUrlResolver, createElementCssSelector, createInjectableType, createLoweredSymbol, createOfflineCompileUrlResolver, createR3ProviderExpression, createUrlResolverWithoutPackagePrefix, debugOutputAstAsTypeScript, devOnlyGuardedExpression, findNode, flatten, formattedError, getHtmlTagDefinition, getMissingNgModuleMetadataErrorData, getNsPrefix, getParseErrors, getSafePropertyAccessString, getUrlScheme, hostViewClassName, identifierModuleUrl, identifierName, isEmptyExpression, isFormattedError, isIdentifier, isLoweredSymbol, isNgContainer, isNgContent, isNgTemplate, isSyntaxError, jsDocComment, leadingComment, literalMap, makeBindingParser, mergeAnalyzedFiles, mergeNsAndName, ngModuleJitUrl, parseHostBindings, parseTemplate, preserveWhitespacesDefault, publishFacade, r3JitTypeSourceSpan, removeSummaryDuplicates, rendererTypeName, sanitizeIdentifier, sharedStylesheetJitUrl, splitClasses, splitNsName, syntaxError, templateJitUrl, templateSourceUrl, templateVisitAll, toTypeScript, tokenName, tokenReference, typeSourceSpan, unescapeIdentifier, unwrapResolvedMetadata, verifyHostBindings, viewClassName, visitAll$1 as visitAll }; //# sourceMappingURL=compiler.js.map","map":null,"metadata":{},"sourceType":"module"}