{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EncryptionService } from './encryption.service';\nimport { InvitationDetails } from '../congratspages/image-editor/InvitationDetails';\nimport { NavController } from \"@ionic/angular\";\nimport { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';\nimport * as firebase from 'firebase';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { UserService } from './user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"./user.service\";\nimport * as i4 from \"./encryption.service\";\nimport * as i5 from \"@angular/fire/auth\";\nexport let QrService = /*#__PURE__*/(() => {\n  class QrService {\n    constructor(firestore, navCtrl, userService, encryptionService, fireAuth) {\n      this.firestore = firestore;\n      this.navCtrl = navCtrl;\n      this.userService = userService;\n      this.encryptionService = encryptionService;\n      this.fireAuth = fireAuth;\n      this.userId = userService.getUserId();\n      this.invitationsCollection = this.firestore.collection('Invitations');\n    } //*******************************//\n    //****** Get all places *********//\n    //*******************************//\n    // Get Latest DocId from DB and insert the rest of the details\n\n\n    InsertInvitationQRCodeInDb(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        data.UserId = this.userId != '' ? this.userId : 'a';\n        console.log('user Id:' + this.userId);\n        var invitation = new InvitationDetails();\n        invitation.EventName = data.EventName;\n        invitation.UserId = data.UserId;\n        invitation.AttendeesAllowed = data.AttendeesAllowed;\n        invitation.AttendeesCount = 0;\n        const createdAt = firebase.firestore.FieldValue.serverTimestamp();\n        var result;\n        console.log(\"invitation\", invitation);\n        this.invitationsCollection.add({\n          EventName: data.EventName,\n          UserId: data.UserId,\n          AttendeesAllowed: data.AttendeesAllowed,\n          AttendeesCount: 0\n        }).then(function (docRef) {\n          console.log('document ref Inside, ', result); // alert(docRef.id);\n\n          result = docRef.id;\n        }).catch(function (error) {\n          console.error(\"Error adding document: \", error);\n        });\n        alert('Before Encryption: ' + result);\n        return yield this.encryptionService.Encrypt(result); //return result;\n      });\n    }\n\n    Clear(EncryptedDetails) {\n      this.createCode = this.qrData;\n    } // Get Latest DocId from DB and insert the rest of the details\n\n\n    UpdateInvitationQRCodeInDb(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var dbObj = this.invitationsCollection.doc(data.id);\n        var result;\n        dbObj.update({\n          EventName: data.EventName,\n          AttendeesAllowed: data.AttendeesAllowed\n        }).then(function (docRef) {\n          console.log('docRef', docRef);\n          result = docRef;\n        }).catch(function (error) {\n          console.error(\"Error adding document: \", error);\n        });\n        return result;\n      });\n    } // Get Latest DocId from DB and insert the rest of the details\n\n\n    getInvitationQRCodeInDb(docId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var invitation = new InvitationDetails();\n        var data = this.invitationsCollection.doc(docId).get()[0].then(querySnapshot => {\n          console.log('getInvitationQRCodeInDb: ', querySnapshot);\n          invitation = querySnapshot[0].data();\n          invitation.id = querySnapshot[0].data().id;\n        }); // data.subscribe(res=>{\n        //     invitation = res.\n        // });\n\n        return invitation;\n      });\n    }\n\n    deleteInvitaion(docId) {\n      return this.invitationsCollection.doc(docId).delete();\n    }\n\n  }\n\n  QrService.ɵfac = function QrService_Factory(t) {\n    return new (t || QrService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.NavController), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.EncryptionService), i0.ɵɵinject(i5.AngularFireAuth));\n  };\n\n  QrService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QrService,\n    factory: QrService.ɵfac,\n    providedIn: \"root\"\n  });\n  return QrService;\n})();","map":null,"metadata":{},"sourceType":"module"}