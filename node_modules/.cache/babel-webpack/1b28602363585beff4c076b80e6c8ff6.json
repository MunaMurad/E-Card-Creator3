{"ast":null,"code":"import { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { firestore } from 'firebase/app'; // new version : ex arrayContanin, arrayUnion\n\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let ShoppingService = /*#__PURE__*/(() => {\n  class ShoppingService {\n    constructor(firestore, fireAuth) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.userId = \"\"; //********* shopping cart array ************* */\n\n      this.shoppingCart = [];\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          console.log(\"shoppingService ...  auth = true\");\n          this.userId = user.uid;\n          this.userAuth = true;\n        } else {\n          console.log(\"shoppingService ...  auth = false\");\n          this.userId = \"\";\n          this.userAuth = false;\n        }\n      });\n    } //*****************************************************//\n    //******** User's wishlist item by userId  *********//\n    //*****************************************************//\n\n\n    getWishlist() {\n      console.log(\"_____START USERID()=\" + this.userId); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('/shopping_favorite_user', ref => ref.where('userId', '==', this.userId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n    addWishlist(itemId, itemName, rating, image) {\n      console.log(\"addWishlist\");\n      console.log(\"userId= \" + this.userId); //###### Add userId to shopping_item > favorite array  #####//\n\n      this.firestore.doc('shopping_item/' + itemId).update({\n        favorite: firestore.FieldValue.arrayUnion(this.userId)\n      }); //#### then add placeId to travel_favorite_user collection  ######//\n\n      return this.firestore.doc('shopping_favorite_user/' + itemId).set({\n        placeId: itemId,\n        userId: this.userId,\n        name: itemName,\n        rating: rating,\n        image: image\n      }); // this.postReference.update({\n      // \tfavorite: firestore.FieldValue.arrayUnion(userId)\n      // })\n    }\n\n    removeWishlist(placeId) {\n      console.log(\"removeWishlist\"); //####### Remove userId in traval_place > favorite array  ######//\n\n      this.firestore.doc('shopping_item/' + placeId).update({\n        favorite: firestore.FieldValue.arrayRemove(this.userId)\n      }); //###### remove placeId from travel_favorite_user collection  #####//\n\n      return this.firestore.doc('shopping_favorite_user/' + placeId).delete();\n    } //*******************************//\n    //******** Search Item *********//\n    //******************************//\n\n\n    searchItem() {\n      console.log(\"called searchItem\"); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('shopping_item').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####item data=\" + data);\n          console.log(\"####item Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //****** Categories ******//\n    //************************//\n\n\n    getCategories() {\n      console.log(\"start getCategory\");\n      return this.firestore.collection('shopping_category').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####categories data=\" + data);\n          console.log(\"####categories Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*********************************************************//\n    //****** Banner******//\n    //*********************************************************//\n\n\n    getBanners() {\n      return this.firestore.collection('shopping_banner').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####categories data=\" + data);\n          console.log(\"####categories Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Banner detail    ******//\n    //******************************//\n\n\n    getSpecialDetail(specialId) {\n      console.log(\"---> call getSpecialDetail()\");\n      return this.firestore.doc('shopping_banner/' + specialId).valueChanges();\n    } //*********************************************************//\n    //****** Group (For brand , special promotion etc) ******//\n    //*********************************************************//\n\n\n    getGroups() {\n      console.log(\"start getGroup\");\n      return this.firestore.collection('shopping_group').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####categories data=\" + data);\n          console.log(\"####categories Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Menu item by Id  ******//\n    //******************************//\n\n\n    getGroupDetail(groupId) {\n      console.log(\"---> call getGroupDetail()\");\n      return this.firestore.doc('shopping_group/' + groupId).valueChanges();\n    } //*****************************//\n    //****** Item by groupId ******//\n    //*****************************//\n\n\n    getItemByGroupId(groupId) {\n      //console.log('catId='+ catId);\n      console.log(\"_____START getPopularItems groupId=\" + groupId);\n      return this.firestore.collection('/shopping_item', ref => ref.where('shopping_groupId', '>=', groupId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"----->getPopularItem=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get promotion item  ******//\n    //****************************************//\n\n\n    getPromotionItems() {\n      return this.firestore.collection('/shopping_item', ref => ref.where('promotion', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"-----> getRecommended=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get recommended item  ******//\n    //****************************************//\n\n\n    getRecommendedItem() {\n      return this.firestore.collection('/shopping_item', ref => ref.where('recommended', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"-----> getRecommended=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*************************************//\n    //******** Item by categoryId *********//\n    //*************************************//\n\n\n    getItemByCatId(categoryId) {\n      console.log(\"_____START getItemByCatId()=\" + categoryId); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('/shopping_item', ref => ref.where('shopping_categoryId', '==', categoryId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*************************************//\n    //******** Item by categoryId *********//\n    //*************************************//\n\n\n    getRelatedItem(categoryId, limit) {\n      console.log(\"_____START getItemByCatId()=\" + categoryId); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('/shopping_item', ref => ref.where('shopping_categoryId', '==', categoryId).orderBy(\"name\", \"desc\").limit(limit)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //********************************************//\n    //******** Get Item detail by itemId *********//\n    //********************************************//\n\n\n    getItem() {\n      console.log(\"start getPlaces\"); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('shopping_item').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####place data=\" + data);\n          console.log(\"####place Id =\" + id);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Menu item by Id  ******//\n    //******************************//\n\n\n    getItemById(itemId) {\n      console.log(\"---> call getShoppingItemById()\");\n      return this.firestore.doc('shopping_item/' + itemId).valueChanges();\n    } //******************************//\n    //****** Menu item by Id  ******//\n    //******************************//\n\n\n    getProducts() {// return this.data;\n    } //*******************************//\n    //****** Generate order Id ******//\n    //*******************************//\n\n\n    createOrderId() {\n      return Math.floor(100000 + Math.random() * 900000);\n    } //**************************************//\n    //****** Cart for shopping items ******//\n    //**************************************//\n\n\n    getCart() {\n      return this.shoppingCart;\n    } //******************************//\n    //****** Menu item by Id  ******//\n    //******************************//\n\n\n    getMyOrders() {\n      console.log(\"getMyOrders\");\n      return this.firestore.collection('/shopping_order', ref => ref.where('userProfileId', '==', this.userId)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          console.log(\"####get a group of countries=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n    getOrderDetail(orderId) {\n      console.log(\"getOrderDetail orderId=\" + orderId);\n      return this.firestore.doc('shopping_order/' + orderId).valueChanges();\n    } //***********************//\n    //****** Place order ******//\n    //**********************//\n\n\n    placeOrder(addressId, paymentType, orderItems, totalPrice) {\n      console.log(\"______orderItems()\" + JSON.stringify(orderItems));\n      console.log(\"createOrderId()=\" + this.createOrderId());\n      return this.firestore.collection('shopping_order').add({\n        userProfileId: this.userId,\n        addressId: addressId,\n        orderId: this.createOrderId(),\n        paymentType: paymentType,\n        orderItems: JSON.stringify(orderItems),\n        status: \"pending\",\n        totalPrice: totalPrice,\n        createdTime: new Date()\n      });\n    } //*************************************//\n    //*** Test: Add/set array of object ***//\n    //************************************//\n\n\n    testAddArrayObject() {\n      //console.log(\"BEFORE PUSH___________FOODSERVICE addProduct()=\"+JSON.stringify());\n      var docData = {\n        stringExample: \"NEEDED\",\n        booleanExample: true,\n        numberExample: 3.14159265,\n        //dateExample: this.firebase.firestore.Timestamp.fromDate(new Date(\"December 10, 1815\")),\n        tagArray: [{\n          \"firstName\": \"ME\",\n          \"lastName\": \"KUU\",\n          \"age\": 10,\n          \"addOn\": [{\n            \"isChecked\": true,\n            \"name\": \"chilli\"\n          }]\n        }, {\n          \"firstName\": \"John\",\n          \"lastName\": \"Doe\",\n          \"age\": 46\n        }],\n        nullExample: null,\n        objectExample: {\n          a: 5,\n          b: {\n            nested: \"foo\"\n          }\n        }\n      };\n      this.firestore.collection(\"food_order\").doc(\"79oFJZen1UfAoz29pIVL\").set(docData).then(function () {\n        console.log(\"Order successfully written!\");\n      });\n    } //*******************//\n    //****** Cart  ******//\n    //*******************//\n\n\n    addToCart(product) {\n      console.log(\"BEFORE PUSH___________FOODSERVICE addProduct()=\" + JSON.stringify(product)); // const postData = {\n      //   catId:1111111,\n      //   name: \"TEST\",\n      //   price: 210,\n      //   array: this.selectOptions,\n      //   image: '/assets/images/salami.jpg'\n      //   //image: this.image\n      //   }\n\n      this.shoppingCart.push(product);\n      console.log(\"+AFTER PUSH _________________FOODSERVICE 3cart array=\" + JSON.stringify(this.shoppingCart));\n    }\n\n    removeItemCart(index) {\n      console.log(\"removeItemCart\");\n      this.shoppingCart.splice(index, 1); //update total price//\n    }\n\n    removeAllItemCart() {\n      console.log(\"removeAllItemCart\");\n      this.shoppingCart.length = 0; //update total price//\n    } //****************************************//\n    //******   Review    ******//\n    //****************************************//\n\n\n    getReviews(itemId, limit) {\n      console.log(\"###### get review service itemId=\" + itemId);\n      return this.firestore.collection('/shopping_review', ref => ref //.orderBy(\"createdtime\", \"asc\") // You have to create index in firebase console.\n      .where('shopping_itemId', '==', itemId).limit(limit)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####Review =\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //******   Add review    ******//\n    //*****************************//\n\n\n    addReview(itemId, userProfileImage, name, rating, comment) {\n      console.log(\"___itemId=\" + itemId);\n      console.log(\"_____new Date()=\" + new Date());\n      return this.firestore.collection('shopping_review').add({\n        shopping_itemId: itemId,\n        userProfileId: this.userId,\n        userProfileImage: userProfileImage,\n        name: name,\n        rating: rating,\n        comment: comment,\n        createdTime: new Date()\n      });\n    } //****************************************//\n    //******   Reviews  by placeId  ******//\n    //****************************************//\n    // getReviews(placeId: string) {\n    //   console.log(\"###### get review service placeId=\"+placeId);\n    //   return this.firestore.collection<any>('/travel_review', ref => ref\n    //   .where('travel_placeId', '==', placeId))\n    //   .snapshotChanges().pipe(\n    //     map(actions => {  \n    //       return actions.map(a => {\n    //         const data = a.payload.doc.data();\n    //         // get id from firebase metadata \n    //         const id = a.payload.doc.id; \n    //         console.log(\"####Review =\"+data);\n    //         return { id, ...data };\n    //       });\n    //     })\n    //   );\n    // }\n    //****************************************//\n    //****** Get Place by recommended   ******//\n    //****************************************//\n\n\n    getRecommended() {\n      //console.log('catId='+ catId);\n      return this.firestore.collection('/shopping_item', ref => ref.where('recommended', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####Reccomened=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n  }\n\n  ShoppingService.ɵfac = function ShoppingService_Factory(t) {\n    return new (t || ShoppingService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  ShoppingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingService,\n    factory: ShoppingService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShoppingService;\n})();","map":null,"metadata":{},"sourceType":"module"}