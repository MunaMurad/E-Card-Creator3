{"ast":null,"code":"import { Component, Renderer2, ElementRef, Input, NgModule } from '@angular/core';\nimport QRCode from 'qrcode';\nimport * as ɵngcc0 from '@angular/core';\nlet QRCodeSVGComponent = /*#__PURE__*/(() => {\n  class QRCodeSVGComponent {\n    constructor(renderer, element) {\n      this.renderer = renderer;\n      this.element = element;\n      this.default = {\n        errorCorrectionLevel: 'Q',\n        margin: 4,\n        color: 'currentcolor',\n        backgroundColor: 'transparent'\n      };\n    }\n\n    ngOnChanges() {\n      this.createQRCode();\n    }\n\n    createQRCode() {\n      this.element.nativeElement.childNodes.forEach(node => this.renderer.removeChild(this.element.nativeElement, node));\n\n      if (!this.value) {\n        return;\n      }\n\n      const {\n        errorCorrectionLevel,\n        margin,\n        color,\n        backgroundColor\n      } = this.sanitizeInputs();\n      const raw = QRCode.create(`${this.value}`, {\n        errorCorrectionLevel,\n        margin\n      });\n      this.renderSVG(raw, margin, color, backgroundColor);\n    }\n\n    renderSVG(raw, margin, color, backgroundColor) {\n      const elementSize = raw.modules.size + margin * 2;\n      const svgElement = this.renderer.createElement('svg', 'svg');\n      this.renderer.setAttribute(svgElement, 'xmlns', 'http://www.w3.org/2000/svg');\n      this.renderer.setAttribute(svgElement, 'viewBox', `0 0 ${elementSize} ${elementSize}`);\n      const backGroundElement = this.renderer.createElement('path', 'svg');\n      this.renderer.setAttribute(backGroundElement, 'd', `M0 0h${elementSize}v${elementSize}H0z`);\n      this.renderer.setStyle(backGroundElement, 'fill', backgroundColor);\n      this.renderer.appendChild(svgElement, backGroundElement);\n      const codeElement = this.renderer.createElement('path', 'svg');\n      this.renderer.setAttribute(codeElement, 'd', this.createPath(raw, margin));\n      this.renderer.setStyle(codeElement, 'stroke', color);\n      this.renderer.appendChild(svgElement, codeElement);\n      this.renderer.appendChild(this.element.nativeElement, svgElement);\n    }\n\n    createPath(raw, margin) {\n      const {\n        data,\n        size\n      } = raw.modules;\n      let path = '';\n      let moveBy = 0;\n      let newRow = false;\n      let lineLength = 0;\n      data.forEach((bit, index) => {\n        const col = Math.floor(index % size);\n        const row = Math.floor(index / size);\n\n        if (!col && !newRow) {\n          newRow = true;\n        }\n\n        if (bit) {\n          lineLength++;\n\n          if (!(index > 0 && col > 0 && (data === null || data === void 0 ? void 0 : data[index - 1]))) {\n            path += newRow ? `M${col + margin} ${0.5 + row + margin}` : `m${moveBy} 0`;\n            moveBy = 0;\n            newRow = false;\n          }\n\n          if (!(col + 1 < size && (data === null || data === void 0 ? void 0 : data[index + 1]))) {\n            path += `h${lineLength}`;\n            lineLength = 0;\n          }\n        } else {\n          moveBy++;\n        }\n      });\n      return path;\n    }\n\n    sanitizeInputs() {\n      var _a, _b;\n\n      const errorCorrectionLevel = ['L', 'M', 'Q', 'H'].includes(this.errorCorrectionLevel) ? this.errorCorrectionLevel : this.default.errorCorrectionLevel;\n      const margin = !isNaN(parseFloat(this.margin)) && !isNaN(Number(this.margin)) ? Math.max(Number(this.margin), 0) : this.default.margin;\n      const color = (_a = this.color) !== null && _a !== void 0 ? _a : this.default.color;\n      const backgroundColor = (_b = this.backgroundColor) !== null && _b !== void 0 ? _b : this.default.backgroundColor;\n      return {\n        errorCorrectionLevel,\n        margin,\n        color,\n        backgroundColor\n      };\n    }\n\n  }\n\n  QRCodeSVGComponent.ɵfac = function QRCodeSVGComponent_Factory(t) {\n    return new (t || QRCodeSVGComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  QRCodeSVGComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: QRCodeSVGComponent,\n    selectors: [[\"qrcode-svg\"]],\n    inputs: {\n      value: \"value\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      margin: \"margin\",\n      color: \"color\",\n      backgroundColor: \"backgroundColor\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function QRCodeSVGComponent_Template(rf, ctx) {},\n    styles: [\"[_nghost-%COMP%] {\\n        display: inline-block;\\n        width: 100%;\\n        height: 100%;\\n      }\\n      svg[_ngcontent-%COMP%] {\\n        display: block;\\n        shape-rendering: crispEdges;\\n      }\"]\n  });\n  return QRCodeSVGComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet QRCodeSVGModule = /*#__PURE__*/(() => {\n  class QRCodeSVGModule {}\n\n  QRCodeSVGModule.ɵfac = function QRCodeSVGModule_Factory(t) {\n    return new (t || QRCodeSVGModule)();\n  };\n\n  QRCodeSVGModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: QRCodeSVGModule\n  });\n  QRCodeSVGModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return QRCodeSVGModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QRCodeSVGModule, {\n    declarations: [QRCodeSVGComponent],\n    exports: [QRCodeSVGComponent]\n  });\n})();\n/*\n * Public API Surface of ngx-qrcode-svg\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QRCodeSVGComponent, QRCodeSVGModule }; //# sourceMappingURL=ngx-qrcode-svg.js.map","map":null,"metadata":{},"sourceType":"module"}