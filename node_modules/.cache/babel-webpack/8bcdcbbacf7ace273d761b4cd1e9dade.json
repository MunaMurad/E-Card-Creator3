{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { InvitationService } from './../../services/InvitationService';\nimport { ElementRef } from '@angular/core';\nimport { ToastController, ModalController } from '@ionic/angular';\nimport { LoadingController } from '@ionic/angular';\nimport jsQR from \"jsqr\";\nimport { InvitationDetails } from 'src/app/congratspages/image-editor/InvitationDetails';\nimport { ModalContentPage } from 'src/app/ui-components/modal-content/modal-content.page';\nimport { EncryptionService } from 'src/app/services/encryption.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"src/app/services/encryption.service\";\nimport * as i3 from \"./../../services/InvitationService\";\nimport * as i4 from \"@ngx-translate/core\";\nconst _c0 = [\"video\"];\nconst _c1 = [\"canvas\"];\nconst _c2 = [\"fileinput\"]; //import for counter function:\n\nexport let QRScannerPage = /*#__PURE__*/(() => {\n  class QRScannerPage {\n    //private encryptionService: EncryptionService\n    constructor(toastCtrl, loadingCtrl, modalCtrl, encryptionService, invitationService) {\n      this.toastCtrl = toastCtrl;\n      this.loadingCtrl = loadingCtrl;\n      this.modalCtrl = modalCtrl;\n      this.encryptionService = encryptionService;\n      this.invitationService = invitationService;\n      this.scanResult = null;\n      this.scanActive = false;\n      this.CurrentCount = null;\n    }\n\n    ngAfterViewInit() {\n      this.videoElement = this.video.nativeElement;\n      this.canvasElement = this.canvas.nativeElement;\n      this.canvasContext = this.canvasElement.getContext('2d');\n    }\n\n    captureImage() {\n      this.fileinput.nativeElement.click();\n    }\n\n    handleFile(event) {\n      console.log('handleFile started');\n\n      try {\n        const target = event.target;\n        const file = target.files[0];\n        var img = new Image();\n\n        img.onload = () => __awaiter(this, void 0, void 0, function* () {\n          this.canvasContext.drawImage(img, 0, 0, this.canvasElement.width, this.canvasElement.height);\n          const imageData = this.canvasContext.getImageData(0, 0, this.canvasElement.width, this.canvasElement.height);\n          const code = jsQR(imageData.data, imageData.width, imageData.height, {\n            inversionAttempts: 'dontInvert'\n          });\n\n          if (code) {\n            this.qrData = code.data;\n            console.log('started 1');\n            yield this.CountScanner(); // this.showQrToast();\n          }\n        });\n\n        img.src = URL.createObjectURL(file);\n      } catch (ex) {\n        console.log(ex);\n      }\n    }\n\n    startScan() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const stream = yield navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment'\n          }\n        });\n        this.videoElement.srcObject = stream;\n        this.videoElement.setAttribute('playsinline', true);\n        this.videoElement.play();\n        this.loading = yield this.loadingCtrl.create({});\n        yield this.loading.present();\n        requestAnimationFrame(this.scan.bind(this));\n      });\n    }\n\n    scan() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('SCAN');\n\n        if (this.videoElement.readyState === this.videoElement.HAVE_ENOUGH_DATA) {\n          if (this.loading) {\n            yield this.loading.dismiss();\n            this.loading = null;\n            this.scanActive = true;\n          }\n\n          this.canvasElement.height = this.videoElement.videoHeight;\n          this.canvasElement.width = this.videoElement.videoWidth;\n          this.canvasContext.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);\n          const imageData = this.canvasContext.getImageData(0, 0, this.canvasElement.width, this.canvasElement.height);\n          const code = jsQR(imageData.data, imageData.width, imageData.height, {\n            inversionAttempts: 'dontInvert'\n          });\n\n          if (code) {\n            this.scanActive = false;\n            this.qrData = code.data;\n            yield this.CountScanner(); //  this.showQrToast();\n          } else {\n            if (this.scanActive) {\n              requestAnimationFrame(this.scan.bind(this));\n            }\n          }\n        } else {\n          requestAnimationFrame(this.scan.bind(this));\n        }\n      });\n    }\n\n    reset() {\n      this.scanResult = null;\n    }\n\n    stopScan() {\n      this.scanActive = false;\n    } // async showQrToast(){\n    //   const toast=await this.toastCtrl.create({\n    //     //message:'Open the QR code',\n    //     position:'top',\n    //     buttons:[\n    //       {\n    //         side: 'start',\n    //         icon:'open-outline',\n    //         text:'Open the QR code and count',\n    //         handler:()=>{\n    //           window.open(this.scanResult,'_system','location=yes'),\n    //           this.CountScanner();\n    //         }\n    //       }\n    //     ]\n    //   });\n    //   toast.present();\n    // }\n    //tryin to make counter code:\n\n\n    CountScanner() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          var details = new InvitationDetails();\n          var decryptedText;\n          yield this.encryptionService.Decrypt('' + this.qrData).then(result => __awaiter(this, void 0, void 0, function* () {\n            decryptedText = result;\n            yield this.invitationService.getInvitationQRCode(result).then(result => {\n              details = result;\n              this.codeDetails = result;\n            });\n          }));\n\n          if (details == null) {\n            this.presentToast(\"Event Not Found. Please make sure you're scanning the correct code\", 'danger');\n          } else if (details.AttendeesCount < details.AttendeesAllowed) {\n            yield this.invitationService.IncrementAttendeesCount(decryptedText).then(result => {\n              this.openMiddleModal(); // this.presentToast(\"Updated Attendees\",'success')\n            });\n          } else {\n            this.presentToast(\"Sorry you have reached the maximum capacity of attendees\", 'danger');\n          }\n        } catch (error) {\n          this.presentToast(\"Error Occured. Please check your internet connection\", \"danger\");\n        }\n      });\n    }\n\n    presentToast(message, type) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastCtrl.create({\n          message: message,\n          duration: 3000,\n          color: type\n        });\n        toast.present();\n      });\n    } // //******** Middle ***********//\n\n\n    openMiddleModal() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.modalCtrl.create({\n          component: ModalContentPage,\n          cssClass: 'from-middle-modal',\n          swipeToClose: true,\n          backdropDismiss: true,\n          componentProps: {\n            AttendeesAllowed: this.codeDetails.AttendeesAllowed,\n            AttendeesCount: this.codeDetails.AttendeesCount\n          }\n        }).then(modal => {\n          modal.present();\n          setTimeout(() => {\n            modal.dismiss();\n          }, 2000);\n        });\n      });\n    }\n\n    ngOnInit() {}\n\n  }\n\n  QRScannerPage.ɵfac = function QRScannerPage_Factory(t) {\n    return new (t || QRScannerPage)(i0.ɵɵdirectiveInject(i1.ToastController), i0.ɵɵdirectiveInject(i1.LoadingController), i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i2.EncryptionService), i0.ɵɵdirectiveInject(i3.InvitationService));\n  };\n\n  QRScannerPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QRScannerPage,\n    selectors: [[\"app-qr-scanner\"]],\n    viewQuery: function QRScannerPage_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.video = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileinput = _t.first);\n      }\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[\"color\", \"amethyst\"], [\"slot\", \"start\"], [\"auto-hide\", \"false\"], [1, \"main-header4\"]],\n    template: function QRScannerPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-menu-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 1, \"QR-scanner\"));\n      }\n    },\n    directives: [i1.IonHeader, i1.IonToolbar, i1.IonButtons, i1.IonMenuButton, i1.IonTitle],\n    pipes: [i4.TranslatePipe],\n    encapsulation: 2\n  });\n  return QRScannerPage;\n})();","map":null,"metadata":{},"sourceType":"module"}