{"ast":null,"code":"// import { Http } from '@angular/http';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { firestore } from 'firebase/app'; // new version : ex arrayContanin, arrayUnion\n\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let RadioService = /*#__PURE__*/(() => {\n  class RadioService {\n    constructor(firestore, fireAuth) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.playingStatus = false;\n    } //**********************************//\n    //****** Get radio station list ******//\n    //**********************************//\n\n\n    getStations() {\n      console.log(\"start getCategory\");\n      return this.firestore.collection('/layout_radio').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get recommended station  ******//\n    //****************************************//\n\n\n    getRecommendedStations() {\n      return this.firestore.collection('/layout_radio', ref => ref.where('recommended', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get by type ******//\n    //****************************************//\n\n\n    getStationByType(stationType) {\n      return this.firestore.collection('/layout_radio', ref => ref.where('type', '==', stationType)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //**********************************//\n    //****** Radio station detail ******//\n    //**********************************//\n\n\n    getStationDetail(radioId) {\n      console.log(\"---> call getStationDetail()\");\n      return this.firestore.doc('layout_radio/' + radioId).valueChanges();\n    } //*****************************************************//\n    //******** Get favorite stations  *********//\n    //*****************************************************//\n\n\n    getFavStations() {\n      console.log(\"_____START USERID()=\" + this.userId); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('/layout_radio_favorite_user', ref => ref.where('userId', '==', this.userId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*********************************//\n    //******* Add to favorite  ********//\n    //*********************************//\n\n\n    addFavStation(radioId, itemName, rating, image) {\n      console.log(\"addFavStation\");\n      console.log(\"userId= \" + this.userId); //###### Add userId to layout_radio > favorite array  #####//\n\n      this.firestore.doc('layout_radio/' + radioId).update({\n        favorite: firestore.FieldValue.arrayUnion(this.userId)\n      }); //#### then add radioId to radio_favorite_user collection  ######//\n\n      return this.firestore.doc('layout_radio_favorite_user/' + radioId).set({\n        radioId: radioId,\n        userId: this.userId,\n        name: itemName,\n        rating: rating,\n        image: image\n      }); // this.postReference.update({\n      // \tfavorite: firestore.FieldValue.arrayUnion(userId)\n      // })\n    } //*************************************//\n    //****** Remove from favorite  ********//\n    //*************************************//\n\n\n    removeFavStation(radioId) {\n      console.log(\"removeFavStation\"); //####### Remove userId in layout_radio > favorite array  ######//\n\n      this.firestore.doc('layout_radio/' + radioId).update({\n        favorite: firestore.FieldValue.arrayRemove(this.userId)\n      }); //###### remove placeId from travel_favorite_user collection  #####//\n\n      return this.firestore.doc('layout_radio_favorite_user/' + radioId).delete();\n    } //******************************//\n    //****** Get playing status ******//\n    //******************************//\n\n\n    getPlayingStatus() {\n      return this.playingStatus;\n    }\n\n    play(url) {\n      this.stream = new Audio(url);\n      this.stream.play();\n      this.stream.volume = 0.5;\n      console.log(\"SHOW VOL = \" + this.stream.volume);\n      this.promise = new Promise((resolve, reject) => {\n        this.stream.addEventListener('playing', () => {\n          console.log(\"Radio service is play\");\n          this.playingStatus = true;\n          resolve(true);\n        });\n        this.stream.addEventListener('error', () => {\n          this.playingStatus = false;\n          reject(false);\n        });\n      });\n      return this.promise;\n    }\n\n    pause() {\n      console.log(\"Radio service is pause\");\n      this.stream.pause();\n      this.playingStatus = false;\n    }\n\n    stop() {\n      console.log(\"Radio service is STOP\");\n      this.stream.pause();\n      this.playingStatus = false; // This stops the stream from downloading\n\n      var temp = this;\n      setTimeout(function () {\n        console.log(\"Stop download\");\n        temp.stream.src = \"about:blank\";\n        temp.stream.load();\n      });\n    }\n\n  }\n\n  RadioService.ɵfac = function RadioService_Factory(t) {\n    return new (t || RadioService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  RadioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RadioService,\n    factory: RadioService.ɵfac,\n    providedIn: 'root'\n  });\n  return RadioService;\n})();","map":null,"metadata":{},"sourceType":"module"}