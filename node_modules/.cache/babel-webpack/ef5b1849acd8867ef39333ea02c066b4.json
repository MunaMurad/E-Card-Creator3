{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Meta } from '@angular/platform-browser';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport ImageEditor from 'tui-image-editor';\nimport { en } from '../image-editor/en'; // Receive Parameter\n\nimport { ActivatedRoute } from '@angular/router';\nimport { dataUrlToBlob } from './utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/router\";\nexport let ImageEditorPage = /*#__PURE__*/(() => {\n  class ImageEditorPage {\n    constructor(modalCtrl, meta, route, alertCtrl) {\n      this.modalCtrl = modalCtrl;\n      this.meta = meta;\n      this.route = route;\n      this.alertCtrl = alertCtrl;\n      this.locale_ar = en;\n      this.meta.addTag({\n        name: 'viewport',\n        content: 'width=device-width, user-scalable=no'\n      });\n      this.route.params.subscribe(params => {\n        this.imgSrc = params['imageSrc'];\n      });\n    }\n\n    ngOnInit() {\n      var locale_ar = en;\n      this.imageEditor = new ImageEditor(document.querySelector('.tui-image-editor'), {\n        usageStatistics: false,\n        includeUI: {\n          loadImage: {\n            // path: this.image,\n            path: '../../../' + this.imgSrc,\n            name: 'SampleImage'\n          },\n          // menu: ['crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],\n          menu: ['resize', 'crop', 'flip', 'rotate', 'text', 'filter'],\n          initMenu: '',\n          menuBarPosition: 'right' //locale : en\n\n        },\n        //  selectionStyle: {\n        //      cornerSize: 20,\n        //      rotatingPointOffset: 70\n        //  },\n        cssMaxWidth: document.documentElement.clientWidth,\n        cssMaxHeight: document.documentElement.clientHeight,\n        selectionStyle: {\n          cornerSize: 10,\n          rotatingPointOffset: 40\n        }\n      }); // Load sample image\n\n      this.imageEditor.loadImageFromURL('img/sampleImage.jpg', 'SampleImage').then(() => {\n        this.imageEditor.clearUndoStack();\n      }); //Font select list\n      //--------------------------------------\n      //Any installed web font from Google will work: https://fonts.google.com/\n\n      let fontArray = [\"Sakkal Majalla\", \"Akhbar MT\", \"Aldhabi\", \"Simple Indust Outline\", \"Cairo\", \"Dubai\", \"DecoType Naskh\", \"Arial\", \"Arial Black\", \"Caveat\", \"Comic Sans MS\", \"Courier New\", \"Georgia1\", \"Impact\", \"Lobster Two\", \"Lucida Console\", \"Luckiest Guy\", \"Open Sans\", \"Pacifico\", \"Palatino Linotype\", \"Press Start 2P\", \"Roboto\", \"Tahoma\", \"Tangerine\", \"Times New Roman\", \"Tourney\", \"Ultra\", \"Verdana\", \"Symbol\", \"Webdings\", \"Wingdings\"];\n      let fontSelectHTML = '<div class=\"center\">\\n <select #fontselect class=\"center form-select font-selector\">';\n\n      for (let i = 0; i < fontArray.length; i++) {\n        let selected = '';\n\n        if (i == 0) {\n          selected = 'selected';\n        }\n\n        fontSelectHTML += '<option style=\"font-family:' + fontArray[i] + ';\" value=\"' + fontArray[i] + '\" ' + selected + '>' + fontArray[i] + '</option>';\n      }\n\n      fontSelectHTML += '</select></div>\\n \\n <div></div>  <div></div>';\n      let textMenuAlign = document.querySelector('.tui-image-editor-menu-text .tie-text-align-button');\n      textMenuAlign.insertAdjacentHTML('afterbegin', fontSelectHTML);\n      document.querySelector('.font-selector').addEventListener('change', () => this.TUI_updateFontOnText(document.querySelector('.font-selector').value)); //-------------------------------------\n      //ON TUI objectActivated\n      //   Keep track of active/selected item\n\n      this.imageEditor.on('objectActivated', props => {\n        this.TUI_selectedItem = props;\n        this.TUI_updateFontSelected(props);\n        console.log('TUI_selectedItem', props);\n      }); // var saveBtn = '<button class=\"tui-image-editor-save-btn\" >Save</button>';\n      // document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterbegin', saveBtn);\n      // //replaceWith('')\n\n      document.querySelector('.tui-image-editor-container .tui-image-editor-download-btn').hide();\n      document.querySelector('.tui-image-editor-container .tui-image-editor-download-btn').addEventListener('click', e => {\n        e.preventDefault();\n        console.log(\"Jason Derulo\");\n        this.presentAlertConfirm();\n      });\n    }\n    /********************************\r\n     * Update font familty on text layer\r\n    *******************************/\n\n\n    TUI_updateFontOnText(font) {\n      console.log(\"TUI_updateFontOnText\", font, this.TUI_selectedItem.id);\n\n      if (font) {\n        this.TUI_selectedFont = font;\n      }\n\n      if (font && this.TUI_selectedItem) {\n        this.imageEditor.changeTextStyle(this.TUI_selectedItem.id, {\n          fontFamily: font\n        });\n      }\n    }\n    /********************************\r\n     * Update font selected with the fontfamily of the selected layer\r\n    *******************************/\n\n\n    TUI_updateFontSelected(layer) {\n      console.log(\"TUI_updateFontSelected\", layer);\n\n      if (layer.fontFamily) {\n        document.querySelector('.font-selector').value = layer.fontFamily;\n        this.TUI_selectedFont = layer.fontFamily;\n      }\n    } //this.imageEditor.on('click', function() {\n\n\n    downloadImage() {\n      const dataURL = this.imageEditor.toDataURL();\n\n      if (window.fetch) {\n        fetch(dataURL).then(res => res.blob()).then(blob => {\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.target = '_blank';\n          link.click();\n        });\n      } else {\n        let blob = dataUrlToBlob(dataURL);\n        var link = document.createElement('a');\n        link.target = '_blank';\n        link.href = window.URL.createObjectURL(blob);\n        link.click();\n      }\n    }\n\n    presentAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertCtrl.create({\n          cssClass: 'my-custom-class',\n          header: 'Add QR Code',\n          subHeader: 'Do you want to add QR code to the generated image?',\n          message: 'The code will be used later to scan and confirm attendees',\n          buttons: [{\n            text: 'No',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {\n              console.log('Confirm Cancel: blah');\n            }\n          }, {\n            text: 'Yes',\n            handler: () => {\n              this.downloadImage();\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n  }\n\n  ImageEditorPage.ɵfac = function ImageEditorPage_Factory(t) {\n    return new (t || ImageEditorPage)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i2.Meta), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i1.AlertController));\n  };\n\n  ImageEditorPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImageEditorPage,\n    selectors: [[\"app-image-editor\"]],\n    decls: 11,\n    vars: 0,\n    consts: [[\"color\", \"medium\"], [\"slot\", \"end\"], [\"auto-hide\", \"false\"], [1, \"main-header4\"], [\"slot\", \"start\"], [\"color\", \"black\"], [1, \"tui-image-editor\"]],\n    template: function ImageEditorPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-menu-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 3);\n        i0.ɵɵtext(5, \"\\u062A\\u0639\\u062F\\u064A\\u0644 \\u0627\\u0644\\u0635\\u0648\\u0631\\u0629\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-buttons\", 4);\n        i0.ɵɵelement(7, \"ion-back-button\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ion-content\");\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelement(10, \"canvas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i1.IonHeader, i1.IonToolbar, i1.IonButtons, i1.IonMenuButton, i1.IonTitle, i1.IonBackButton, i1.IonBackButtonDelegate, i1.IonContent],\n    styles: [\"\"]\n  });\n  return ImageEditorPage;\n})();","map":null,"metadata":{},"sourceType":"module"}