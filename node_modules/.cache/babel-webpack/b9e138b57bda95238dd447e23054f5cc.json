{"ast":null,"code":"import { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\nexport var NotificationKind = /*#__PURE__*/(() => {\n  (function (NotificationKind) {\n    NotificationKind[\"NEXT\"] = \"N\";\n    NotificationKind[\"ERROR\"] = \"E\";\n    NotificationKind[\"COMPLETE\"] = \"C\";\n  })(NotificationKind || (NotificationKind = {}));\n\n  return NotificationKind;\n})();\n\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n\n  Notification.prototype.observe = function (observer) {\n    return observeNotification(this, observer);\n  };\n\n  Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {\n    var _a = this,\n        kind = _a.kind,\n        value = _a.value,\n        error = _a.error;\n\n    return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();\n  };\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    var _a;\n\n    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);\n  };\n\n  Notification.prototype.toObservable = function () {\n    var _a = this,\n        kind = _a.kind,\n        value = _a.value,\n        error = _a.error;\n\n    var result = kind === 'N' ? of(value) : kind === 'E' ? throwError(function () {\n      return error;\n    }) : kind === 'C' ? EMPTY : 0;\n\n    if (!result) {\n      throw new TypeError(\"Unexpected notification kind \" + kind);\n    }\n\n    return result;\n  };\n\n  Notification.createNext = function (value) {\n    return new Notification('N', value);\n  };\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  return Notification;\n}();\n\nexport { Notification };\nexport function observeNotification(notification, observer) {\n  var _a, _b, _c;\n\n  var _d = notification,\n      kind = _d.kind,\n      value = _d.value,\n      error = _d.error;\n\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n\n  kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);\n} //# sourceMappingURL=Notification.js.map","map":null,"metadata":{},"sourceType":"module"}