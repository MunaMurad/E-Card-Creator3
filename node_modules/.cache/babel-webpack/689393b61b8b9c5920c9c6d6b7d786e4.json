{"ast":null,"code":"var _a;\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { UserService } from './../../services/user.service';\nimport { QrService } from './../../services/qr.service';\nimport { InvitationDetails } from './InvitationDetails';\nimport { Component } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport ImageEditor from 'tui-image-editor';\nimport { en } from '../image-editor/en'; // Receive Parameter\n\nimport { ActivatedRoute } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { EncryptionService } from 'src/app/services/encryption.service'; // import { IonicStorageModule } from '@ionic/storage';\n\nimport { Storage } from '@ionic/storage-angular';\nlet ImageEditorPage = class ImageEditorPage {\n  constructor(firestore, userService, fireAuth, modalCtrl, encryptionService, alertCtrl, meta, qrServices, route, storage) {\n    this.firestore = firestore;\n    this.userService = userService;\n    this.fireAuth = fireAuth;\n    this.modalCtrl = modalCtrl;\n    this.encryptionService = encryptionService;\n    this.alertCtrl = alertCtrl;\n    this.meta = meta;\n    this.qrServices = qrServices;\n    this.route = route;\n    this.storage = storage;\n    this.locale_ar = en;\n    this.showModal = false;\n    this.qrDetails = new InvitationDetails();\n    this.iconColor = '#000000';\n    this.addQrBtn = '<button id=\"tui-image-editor-addQr-btn\">Add QR</button>';\n    this.editBtn = `<button id=\"tui-image-editor-edit-btn\">Edit QR</button>`;\n    this.QRIconId = '';\n    this.userId = '';\n    this.meta.addTag({\n      name: 'viewport',\n      content: 'width=device-width, user-scalable=no'\n    });\n    this.route.params.subscribe(params => {\n      this.imgSrc = params['imageSrc'];\n    }); //this.userService.getConnectedUserId();\n\n    this.storage.get('userId').then(val => {\n      this.userId = val;\n      console.log('this.userId = val', this.userId);\n    });\n    console.log('this.userId ', this.userId);\n  }\n\n  ngOnInit() {\n    var locale_ar = en;\n    this.imageEditor = new ImageEditor(document.querySelector('.tui-image-editor'), {\n      usageStatistics: false,\n      includeUI: {\n        loadImage: {\n          // path: this.image,\n          path: '../../../' + this.imgSrc,\n          name: 'Invitation Image'\n        },\n        menu: ['resize', 'crop', 'flip', 'rotate', 'text', 'filter', 'shape', 'icon'],\n        initMenu: '',\n        menuBarPosition: 'bottom'\n      },\n      cssMaxWidth: document.documentElement.clientWidth,\n      cssMaxHeight: document.documentElement.clientHeight,\n      selectionStyle: {\n        cornerSize: 10,\n        rotatingPointOffset: 40\n      }\n    }); // Load sample image\n\n    this.imageEditor.loadImageFromURL('img/sampleImage.jpg', 'SampleImage').then(() => {\n      this.imageEditor.clearUndoStack();\n    }); //Font select list\n    //--------------------------------------\n    //Any installed web font from Google will work: https://fonts.google.com/\n\n    let fontArray = [\"Sakkal Majalla\", \"Akhbar MT\", \"Aldhabi\", \"Simple Indust Outline\", \"Cairo\", \"Dubai\", \"DecoType Naskh\", \"Arial\", \"Arial Black\", \"Caveat\", \"Comic Sans MS\", \"Courier New\", \"Georgia1\", \"Impact\", \"Lobster Two\", \"Lucida Console\", \"Luckiest Guy\", \"Open Sans\", \"Pacifico\", \"Palatino Linotype\", \"Press Start 2P\", \"Roboto\", \"Tahoma\", \"Tangerine\", \"Times New Roman\", \"Tourney\", \"Ultra\", \"Verdana\", \"Symbol\", \"Webdings\", \"Wingdings\"];\n    let fontSelectHTML = '<div class=\"center\">\\n <select #fontselect class=\"center form-select font-selector\">';\n\n    for (let i = 0; i < fontArray.length; i++) {\n      let selected = '';\n\n      if (i == 0) {\n        selected = 'selected';\n      }\n\n      fontSelectHTML += '<option style=\"font-family:' + fontArray[i] + ';\" value=\"' + fontArray[i] + '\" ' + selected + '>' + fontArray[i] + '</option>';\n    }\n\n    fontSelectHTML += '</select></div>\\n \\n <div></div>  <div></div>';\n    let textMenuAlign = document.querySelector('.tui-image-editor-menu-text .tie-text-align-button');\n    textMenuAlign.insertAdjacentHTML('afterbegin', fontSelectHTML);\n    document.querySelector('.font-selector').addEventListener('change', () => this.TUI_updateFontOnText(document.querySelector('.font-selector').value)); //-------------------------------------\n    //ON TUI objectActivated\n\n    this.imageEditor.on('objectActivated', props => {\n      this.TUI_selectedItem = props;\n      this.TUI_updateFontSelected(props);\n    });\n    document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', this.addQrBtn);\n    document.querySelector('.tui-image-editor-container #tui-image-editor-addQr-btn').addEventListener('click', e => __awaiter(this, void 0, void 0, function* () {\n      yield this.presentAlertConfirm();\n      yield this.checkElement('#qrcode > svg > path:nth-child(2)') //use whichever selector you want\n      .then(element => __awaiter(this, void 0, void 0, function* () {\n        var iconAdded = yield this.addQRIcon();\n\n        if (iconAdded) {\n          yield this.addEditButton();\n        }\n      }));\n    }));\n    document.querySelector('.tui-image-editor-help-menu').classList.remove('top');\n    document.querySelector('.tui-image-editor-help-menu').classList.add('left');\n    document.querySelector('.tui-image-editor-load-btn').closest('div').classList.add('hidden');\n    document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', this.editBtn);\n    document.getElementById('tui-image-editor-edit-btn').style.display = \"none\";\n    document.querySelector('#tui-image-editor-edit-btn').addEventListener('click', e => __awaiter(this, void 0, void 0, function* () {\n      yield this.presentAlertUpdate();\n    }));\n  }\n\n  addEditButton() {\n    return __awaiter(this, void 0, void 0, function* () {\n      document.getElementById('tui-image-editor-addQr-btn').style.display = \"none\";\n      document.getElementById('tui-image-editor-edit-btn').style.display = \"inline-block\";\n    });\n  }\n  /********************************\r\n   * Update font family on text layer\r\n  *******************************/\n\n\n  TUI_updateFontOnText(font) {\n    if (font) {\n      this.TUI_selectedFont = font;\n    }\n\n    if (font && this.TUI_selectedItem) {\n      this.imageEditor.changeTextStyle(this.TUI_selectedItem.id, {\n        fontFamily: font\n      });\n    }\n  }\n  /********************************\r\n   * Update font selected with the fontfamily of the selected layer\r\n  *******************************/\n\n\n  TUI_updateFontSelected(layer) {\n    if (layer.fontFamily) {\n      document.querySelector('.font-selector').value = layer.fontFamily;\n      this.TUI_selectedFont = layer.fontFamily;\n    }\n  }\n\n  presentAlertConfirm() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let alert = yield this.alertCtrl.create({\n        header: 'تفاصيل رمز QR',\n        message: 'الرجاء ادخال تفاصيل الدعوة المطلوبة',\n        inputs: [{\n          name: 'EventName',\n          type: 'text',\n          placeholder: 'عنوان الدعوة'\n        }, {\n          name: 'AttendeesAllowed',\n          type: 'number',\n          placeholder: 'العدد المسموح'\n        }],\n        buttons: [{\n          text: 'Cancel',\n          role: 'cancel',\n          handler: data => {}\n        }, {\n          text: 'Register QR',\n          handler: data => __awaiter(this, void 0, void 0, function* () {\n            if (data) {\n              this.qrDetails.EventName = data.EventName;\n              this.qrDetails.UserId = this.userId;\n              console.log('this.qrDetails.UserId', this.qrDetails.UserId);\n              this.qrDetails.AttendeesAllowed = Number(data.AttendeesAllowed);\n              this.qrvalue = yield this.CreateCode(this.qrDetails);\n            } else {\n              // invalid login\n              return false;\n            }\n          })\n        }]\n      });\n      yield alert.present();\n    });\n  }\n\n  presentAlertUpdate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      var invitationDetails = yield this.qrServices.getInvitationQRCode(this.qrDetails.id);\n      let alert = yield this.alertCtrl.create({\n        header: 'تفاصيل رمز QR',\n        message: 'الرجاء تعديل تفاصيل الدعوة المطلوبة',\n        inputs: [{\n          name: 'EventName',\n          type: 'text',\n          placeholder: 'عنوان الدعوة',\n          value: invitationDetails.EventName\n        }, {\n          name: 'AttendeesAllowed',\n          type: 'number',\n          placeholder: 'العدد المسموح',\n          value: invitationDetails.AttendeesAllowed\n        }],\n        buttons: [{\n          text: 'Cancel',\n          role: 'cancel',\n          handler: data => {}\n        }, {\n          text: 'Update QR',\n          handler: data => __awaiter(this, void 0, void 0, function* () {\n            if (data) {\n              this.qrDetails = invitationDetails;\n              this.qrDetails.EventName = data.EventName;\n              this.qrDetails.AttendeesAllowed = Number(data.AttendeesAllowed);\n              this.qrvalue = yield this.qrServices.UpdateInvitationQRCodeInDb(this.qrDetails);\n            } else {\n              return false;\n            }\n          })\n        }]\n      });\n      yield alert.present();\n    });\n  }\n\n  CreateCode(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let details = yield this.qrServices.InsertInvitationQRCodeInDb(data);\n      this.qrDetails.id = yield this.encryptionService.Decrypt('' + details);\n      return details;\n    });\n  }\n\n  rafAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        requestAnimationFrame(resolve); //faster than set time out\n      });\n    });\n  }\n\n  checkElement(selector) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let querySelector = null;\n\n      while (querySelector === null) {\n        yield this.rafAsync();\n        querySelector = document.querySelector(\"#qrcode > svg > path:nth-child(2)\");\n      }\n\n      return querySelector;\n    });\n  }\n\n  registerIcon(icon) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.imageEditor.registerIcons({\n        customQR: '' + icon\n      });\n      this.imageEditor.addIcon('customQR', {\n        fill: 'transparent',\n        stroke: this.iconColor,\n        strokeWidth: 1,\n        left: 300,\n        top: 100,\n        margin: 0\n      });\n      return true;\n    });\n  }\n\n  addQRIcon() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // do work here\n      var icon = document.querySelector(\"#qrcode > svg > path:nth-child(2)\").getAttribute('d');\n      var value = yield this.registerIcon(icon);\n      return value;\n    });\n  }\n\n};\nImageEditorPage = __decorate([Component({\n  selector: 'app-image-editor',\n  templateUrl: './image-editor.page.html',\n  styleUrls: ['./image-editor.page.scss']\n}), __metadata(\"design:paramtypes\", [AngularFirestore, UserService, AngularFireAuth, ModalController, EncryptionService, AlertController, Meta, QrService, ActivatedRoute, typeof (_a = typeof Storage !== \"undefined\" && Storage) === \"function\" ? _a : Object])], ImageEditorPage);\nexport { ImageEditorPage };","map":null,"metadata":{},"sourceType":"module"}