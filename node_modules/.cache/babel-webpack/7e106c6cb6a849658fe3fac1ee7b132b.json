{"ast":null,"code":"var VersionCheck = require('./version-check');\n\nvar Regex = require('./regex');\n/**\r\n * Numeric mode encodes data from the decimal digit set (0 - 9)\r\n * (byte values 30HEX to 39HEX).\r\n * Normally, 3 data characters are represented by 10 bits.\r\n *\r\n * @type {Object}\r\n */\n\n\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n};\n/**\r\n * Alphanumeric mode encodes data from a set of 45 characters,\r\n * i.e. 10 numeric digits (0 - 9),\r\n *      26 alphabetic characters (A - Z),\r\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\r\n * Normally, two input characters are represented by 11 bits.\r\n *\r\n * @type {Object}\r\n */\n\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n};\n/**\r\n * In byte mode, data is encoded at 8 bits per character.\r\n *\r\n * @type {Object}\r\n */\n\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n};\n/**\r\n * The Kanji mode efficiently encodes Kanji characters in accordance with\r\n * the Shift JIS system based on JIS X 0208.\r\n * The Shift JIS values are shifted from the JIS X 0208 values.\r\n * JIS X 0208 gives details of the shift coded representation.\r\n * Each two-byte character value is compacted to a 13-bit binary codeword.\r\n *\r\n * @type {Object}\r\n */\n\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n};\n/**\r\n * Mixed mode will contain a sequences of data in a combination of any of\r\n * the modes described above\r\n *\r\n * @type {Object}\r\n */\n\nexports.MIXED = {\n  bit: -1\n};\n/**\r\n * Returns the number of bits needed to store the data length\r\n * according to QR Code specifications.\r\n *\r\n * @param  {Mode}   mode    Data mode\r\n * @param  {Number} version QR Code version\r\n * @return {Number}         Number of bits\r\n */\n\nexports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version);\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n  return mode.ccBits[2];\n};\n/**\r\n * Returns the most efficient mode to store the specified data\r\n *\r\n * @param  {String} dataStr Input data string\r\n * @return {Mode}           Best mode\r\n */\n\n\nexports.getBestModeForData = function getBestModeForData(dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n};\n/**\r\n * Return mode name as string\r\n *\r\n * @param {Mode} mode Mode object\r\n * @returns {String}  Mode name\r\n */\n\n\nexports.toString = function toString(mode) {\n  if (mode && mode.id) return mode.id;\n  throw new Error('Invalid mode');\n};\n/**\r\n * Check if input param is a valid mode object\r\n *\r\n * @param   {Mode}    mode Mode object\r\n * @returns {Boolean} True if valid mode, false otherwise\r\n */\n\n\nexports.isValid = function isValid(mode) {\n  return mode && mode.bit && mode.ccBits;\n};\n/**\r\n * Get mode object from its name\r\n *\r\n * @param   {String} string Mode name\r\n * @returns {Mode}          Mode object\r\n */\n\n\nfunction fromString(string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string');\n  }\n\n  var lcStr = string.toLowerCase();\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC;\n\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC;\n\n    case 'kanji':\n      return exports.KANJI;\n\n    case 'byte':\n      return exports.BYTE;\n\n    default:\n      throw new Error('Unknown mode: ' + string);\n  }\n}\n/**\r\n * Returns mode from a value.\r\n * If value is not a valid mode, returns defaultValue\r\n *\r\n * @param  {Mode|String} value        Encoding mode\r\n * @param  {Mode}        defaultValue Fallback value\r\n * @return {Mode}                     Encoding mode\r\n */\n\n\nexports.from = function from(value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value;\n  }\n\n  try {\n    return fromString(value);\n  } catch (e) {\n    return defaultValue;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}