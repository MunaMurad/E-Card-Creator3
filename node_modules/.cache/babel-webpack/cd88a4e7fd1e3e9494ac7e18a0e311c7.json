{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { UserService } from './../../services/user.service';\nimport { QrService } from './../../services/qr.service';\nimport { InvitationDetails } from './InvitationDetails';\nimport { Meta } from '@angular/platform-browser';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport ImageEditor from 'tui-image-editor';\nimport { en } from '../image-editor/en'; // Receive Parameter\n\nimport { ActivatedRoute } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { EncryptionService } from 'src/app/services/encryption.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"./../../services/user.service\";\nimport * as i3 from \"@angular/fire/auth\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"src/app/services/encryption.service\";\nimport * as i6 from \"@angular/platform-browser\";\nimport * as i7 from \"./../../services/qr.service\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"ngx-qrcode-svg\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@ngx-translate/core\";\n\nconst _c0 = function () {\n  return {\n    \"display\": \"none\"\n  };\n};\n\nexport let ImageEditorPage = /*#__PURE__*/(() => {\n  class ImageEditorPage {\n    constructor(firestore, userService, fireAuth, modalCtrl, encryptionService, alertCtrl, meta, qrServices, route) {\n      this.firestore = firestore;\n      this.userService = userService;\n      this.fireAuth = fireAuth;\n      this.modalCtrl = modalCtrl;\n      this.encryptionService = encryptionService;\n      this.alertCtrl = alertCtrl;\n      this.meta = meta;\n      this.qrServices = qrServices;\n      this.route = route;\n      this.locale_ar = en;\n      this.showModal = false;\n      this.qrDetails = new InvitationDetails();\n      this.iconColor = '#000000';\n      this.addQrBtn = '<button id=\"tui-image-editor-addQr-btn\">Add QR</button>';\n      this.editBtn = `<button id=\"tui-image-editor-edit-btn\">Edit QR</button>`;\n      this.QRIconId = '';\n      this.userId = '';\n      this.meta.addTag({\n        name: 'viewport',\n        content: 'width=device-width, user-scalable=no'\n      });\n      this.route.params.subscribe(params => {\n        this.imgSrc = params['imageSrc'];\n      });\n      this.userId = this.userService.getConnectedUserId();\n    }\n\n    ngOnInit() {\n      var locale_ar = en;\n      this.imageEditor = new ImageEditor(document.querySelector('.tui-image-editor'), {\n        usageStatistics: false,\n        includeUI: {\n          loadImage: {\n            // path: this.image,\n            path: '../../../' + this.imgSrc,\n            name: 'Invitation Image'\n          },\n          // menu: ['crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],\n          menu: ['resize', 'crop', 'flip', 'rotate', 'text', 'filter', 'shape', 'icon'],\n          initMenu: '',\n          menuBarPosition: 'bottom' //locale : en\n\n        },\n        //  selectionStyle: {\n        //      cornerSize: 20,\n        //      rotatingPointOffset: 70\n        //  },\n        cssMaxWidth: document.documentElement.clientWidth,\n        cssMaxHeight: document.documentElement.clientHeight,\n        selectionStyle: {\n          cornerSize: 10,\n          rotatingPointOffset: 40\n        }\n      }); // Load sample image\n\n      this.imageEditor.loadImageFromURL('img/sampleImage.jpg', 'SampleImage').then(() => {\n        this.imageEditor.clearUndoStack();\n      }); //Font select list\n      //--------------------------------------\n      //Any installed web font from Google will work: https://fonts.google.com/\n\n      let fontArray = [\"Sakkal Majalla\", \"Akhbar MT\", \"Aldhabi\", \"Simple Indust Outline\", \"Cairo\", \"Dubai\", \"DecoType Naskh\", \"Arial\", \"Arial Black\", \"Caveat\", \"Comic Sans MS\", \"Courier New\", \"Georgia1\", \"Impact\", \"Lobster Two\", \"Lucida Console\", \"Luckiest Guy\", \"Open Sans\", \"Pacifico\", \"Palatino Linotype\", \"Press Start 2P\", \"Roboto\", \"Tahoma\", \"Tangerine\", \"Times New Roman\", \"Tourney\", \"Ultra\", \"Verdana\", \"Symbol\", \"Webdings\", \"Wingdings\"];\n      let fontSelectHTML = '<div class=\"center\">\\n <select #fontselect class=\"center form-select font-selector\">';\n\n      for (let i = 0; i < fontArray.length; i++) {\n        let selected = '';\n\n        if (i == 0) {\n          selected = 'selected';\n        }\n\n        fontSelectHTML += '<option style=\"font-family:' + fontArray[i] + ';\" value=\"' + fontArray[i] + '\" ' + selected + '>' + fontArray[i] + '</option>';\n      }\n\n      fontSelectHTML += '</select></div>\\n \\n <div></div>  <div></div>';\n      let textMenuAlign = document.querySelector('.tui-image-editor-menu-text .tie-text-align-button');\n      textMenuAlign.insertAdjacentHTML('afterbegin', fontSelectHTML);\n      document.querySelector('.font-selector').addEventListener('change', () => this.TUI_updateFontOnText(document.querySelector('.font-selector').value)); //-------------------------------------\n      //ON TUI objectActivated\n      //   Keep track of active/selected item\n\n      this.imageEditor.on('objectActivated', props => {\n        this.TUI_selectedItem = props;\n        this.TUI_updateFontSelected(props);\n      }); //document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').displa.visibility = \"visible\";\n\n      document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', this.addQrBtn); //replaceWith('')\n\n      document.querySelector('.tui-image-editor-container #tui-image-editor-addQr-btn').addEventListener('click', e => __awaiter(this, void 0, void 0, function* () {\n        yield this.presentAlertConfirm();\n        yield this.checkElement('#qrcode > svg > path:nth-child(2)') //use whichever selector you want\n        .then(element => __awaiter(this, void 0, void 0, function* () {\n          // console.info('await this.checkElement(\"#qrcode > svg > path:nth-child(1)\"') //use whichever selector you want);\n          var iconAdded = yield this.addQRIcon();\n\n          if (iconAdded) {\n            console.log('iconAdded', iconAdded);\n            yield this.addEditButton();\n          }\n        }));\n      }));\n      document.querySelector('.tui-image-editor-help-menu').classList.remove('top');\n      document.querySelector('.tui-image-editor-help-menu').classList.add('left');\n      $('.tui-image-editor-load-btn').closest('div').hide(); // document.querySelector('.tui-image-editor-edit-btn').addEventListener('click',async (e)=>{\n      //       await this.presentAlertConfirm();\n      //   });\n    }\n\n    addEditButton() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('this.addEditButton'); // var element = document.getElementById('tui-image-editor-save-btn');\n\n        document.getElementById('tui-image-editor-addQr-btn').style.visibility = \"hidden\";\n        document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', this.editBtn);\n        document.getElementById('tui-image-editor-edit-btn').setAttribute('onclick', 'EditQRCode()');\n      });\n    }\n    /********************************\r\n     * Update font family on text layer\r\n    *******************************/\n\n\n    TUI_updateFontOnText(font) {\n      if (font) {\n        this.TUI_selectedFont = font;\n      }\n\n      if (font && this.TUI_selectedItem) {\n        this.imageEditor.changeTextStyle(this.TUI_selectedItem.id, {\n          fontFamily: font\n        });\n      }\n    }\n    /********************************\r\n     * Update font selected with the fontfamily of the selected layer\r\n    *******************************/\n\n\n    TUI_updateFontSelected(layer) {\n      if (layer.fontFamily) {\n        document.querySelector('.font-selector').value = layer.fontFamily;\n        this.TUI_selectedFont = layer.fontFamily;\n      }\n    }\n\n    EditQRCode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        alert(\"testing EditQRCodeEditQRCode\"); //await this.presentAlertUpdate();\n      });\n    }\n\n    presentAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let alert = yield this.alertCtrl.create({\n          header: 'تفاصيل رمز QR',\n          message: 'الرجاء ادخال تفاصيل الدعوة المطلوبة',\n          inputs: [{\n            name: 'EventName',\n            type: 'text',\n            placeholder: 'عنوان الدعوة'\n          }, {\n            name: 'AttendeesAllowed',\n            type: 'number',\n            placeholder: 'العدد المسموح'\n          }],\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            handler: data => {}\n          }, {\n            text: 'Register QR',\n            handler: data => __awaiter(this, void 0, void 0, function* () {\n              if (data) {\n                this.qrDetails.EventName = data.EventName;\n                this.qrDetails.AttendeesAllowed = Number(data.AttendeesAllowed);\n                this.qrvalue = yield this.CreateCode(this.qrDetails); // await this.addQRIcon();\n                // logged in!\n              } else {\n                // invalid login\n                return false;\n              }\n            })\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    presentAlertUpdate() {\n      return __awaiter(this, void 0, void 0, function* () {\n        alert('testing ay ');\n        var data = yield this.qrServices.getInvitationQRCode(this.qrDetails.id); // let alert = await this.alertCtrl.create({\n        //     header: 'تفاصيل رمز QR',\n        //     message: 'الرجاء تعديل تفاصيل الدعوة المطلوبة',\n        //     inputs: [\n        //       {\n        //         name: 'EventName',\n        //         type:'text',\n        //         placeholder: 'عنوان الدعوة'\n        //       },\n        //       {\n        //         name: 'AttendeesAllowed',\n        //         type:'number',\n        //         placeholder: 'العدد المسموح'\n        //       },\n        //     ],\n        //     buttons: [\n        //       {\n        //         text: 'Cancel',\n        //         role: 'cancel',\n        //         handler: data => {\n        //         }\n        //       },\n        //       {\n        //         text: 'Update QR',\n        //         handler:async (data:any) => {\n        //           if (data) {\n        //                 this.qrDetails.id = data.Id;\n        //                 this.qrDetails.EventName = data.EventName;\n        //                 this.qrDetails.AttendeesAllowed = Number(data.AttendeesAllowed);\n        //                 this.qrvalue = await this.UpdateCode(this.qrDetails);\n        //                 // await this.addQRIcon();\n        //             // logged in!\n        //           } else {\n        //             // invalid login\n        //             return false;\n        //           }\n        //         }\n        //       }\n        //     ]\n        // });\n        // await alert.present();\n      });\n    }\n\n    CreateCode(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let details = yield this.qrServices.InsertInvitationQRCodeInDb(data);\n        alert('details:' + details);\n        this.qrDetails.id = yield this.encryptionService.Decrypt('' + details);\n        console.log('after createing to see the whole object', this.qrDetails);\n        return details;\n      });\n    }\n\n    UpdateCode(data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let details = this.qrServices.UpdateInvitationQRCodeInDb(data);\n        return details;\n      });\n    }\n\n    rafAsync() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => {\n          requestAnimationFrame(resolve); //faster than set time out\n        });\n      });\n    }\n\n    checkElement(selector) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let querySelector = null;\n\n        while (querySelector === null) {\n          yield this.rafAsync();\n          querySelector = document.querySelector(\"#qrcode > svg > path:nth-child(2)\");\n        }\n\n        return querySelector;\n      });\n    }\n\n    registerIcon(icon) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.imageEditor.registerIcons({\n          customQR: '' + icon\n        });\n        this.imageEditor.addIcon('customQR', {\n          fill: 'transparent',\n          stroke: this.iconColor,\n          strokeWidth: 1,\n          left: 100,\n          top: 100,\n          margin: 0\n        });\n        return true;\n      });\n    }\n\n    addQRIcon() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // do work here\n        var icon = document.querySelector(\"#qrcode > svg > path:nth-child(2)\").getAttribute('d');\n        console.log(document.querySelector(\"#qrcode > svg > path:nth-child(2)\").getAttribute('d'));\n        var value = yield this.registerIcon(icon);\n        console.log('this.registerIcon(icon)', value);\n        return value;\n      });\n    }\n\n  }\n\n  ImageEditorPage.ɵfac = function ImageEditorPage_Factory(t) {\n    return new (t || ImageEditorPage)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.AngularFireAuth), i0.ɵɵdirectiveInject(i4.ModalController), i0.ɵɵdirectiveInject(i5.EncryptionService), i0.ɵɵdirectiveInject(i4.AlertController), i0.ɵɵdirectiveInject(i6.Meta), i0.ɵɵdirectiveInject(i7.QrService), i0.ɵɵdirectiveInject(i8.ActivatedRoute));\n  };\n\n  ImageEditorPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImageEditorPage,\n    selectors: [[\"app-image-editor\"]],\n    decls: 13,\n    vars: 9,\n    consts: [[\"color\", \"amethyst\"], [\"slot\", \"end\"], [\"auto-hide\", \"false\"], [1, \"main-header4\"], [\"slot\", \"start\"], [\"color\", \"light\", \"text\", \" \"], [\"id\", \"qrcode\", 3, \"ngStyle\", \"margin\", \"value\", \"color\", \"backgroundColor\"], [1, \"tui-image-editor\"]],\n    template: function ImageEditorPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-menu-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-buttons\", 4);\n        i0.ɵɵelement(8, \"ion-back-button\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ion-content\");\n        i0.ɵɵelement(10, \"qrcode-svg\", 6);\n        i0.ɵɵelementStart(11, \"div\", 7);\n        i0.ɵɵelement(12, \"canvas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 6, \"edit\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(8, _c0))(\"margin\", 4)(\"value\", ctx.qrvalue)(\"color\", \"black\")(\"backgroundColor\", \"white\");\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButtons, i4.IonMenuButton, i4.IonTitle, i4.IonBackButton, i4.IonBackButtonDelegate, i4.IonContent, i9.QRCodeSVGComponent, i10.NgStyle],\n    pipes: [i11.TranslatePipe],\n    styles: [\".hidden[_ngcontent-%COMP%]{display:none}\"]\n  });\n  return ImageEditorPage;\n})();","map":null,"metadata":{},"sourceType":"module"}