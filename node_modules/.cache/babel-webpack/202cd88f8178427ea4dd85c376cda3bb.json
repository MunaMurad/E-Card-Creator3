{"ast":null,"code":"import { from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan, observeOn } from 'rxjs/operators';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nexport class AngularFirestoreCollectionGroup {\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n    }\n\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0));\n  }\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n\n  valueChanges() {\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(this.afs.keepUnstableUntilFirst, map(actions => actions.payload.docs.map(a => a.data())));\n  }\n\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n\n} //# sourceMappingURL=collection-group.js.map","map":null,"metadata":{},"sourceType":"module"}