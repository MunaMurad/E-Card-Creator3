{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n    /**\r\n     * x64 namespace.\r\n     */\n\n    var C_x64 = C.x64 = {};\n    /**\r\n     * A 64-bit word.\r\n     */\n\n    var X64Word = C_x64.Word = Base.extend({\n      /**\r\n       * Initializes a newly created 64-bit word.\r\n       *\r\n       * @param {number} high The high 32 bits.\r\n       * @param {number} low The low 32 bits.\r\n       *\r\n       * @example\r\n       *\r\n       *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\r\n       */\n      init: function (high, low) {\n        this.high = high;\n        this.low = low;\n      }\n      /**\r\n       * Bitwise NOTs this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after negating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var negated = x64Word.not();\r\n       */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise ANDs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to AND with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after ANDing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var anded = x64Word.and(anotherX64Word);\r\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise ORs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to OR with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after ORing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var ored = x64Word.or(anotherX64Word);\r\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Bitwise XORs this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to XOR with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after XORing.\r\n       *\r\n       * @example\r\n       *\r\n       *     var xored = x64Word.xor(anotherX64Word);\r\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Shifts this word n bits to the left.\r\n       *\r\n       * @param {number} n The number of bits to shift.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after shifting.\r\n       *\r\n       * @example\r\n       *\r\n       *     var shifted = x64Word.shiftL(25);\r\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Shifts this word n bits to the right.\r\n       *\r\n       * @param {number} n The number of bits to shift.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after shifting.\r\n       *\r\n       * @example\r\n       *\r\n       *     var shifted = x64Word.shiftR(7);\r\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n      // return X64Word.create(high, low);\n      // },\n\n      /**\r\n       * Rotates this word n bits to the left.\r\n       *\r\n       * @param {number} n The number of bits to rotate.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after rotating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var rotated = x64Word.rotL(25);\r\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\r\n       * Rotates this word n bits to the right.\r\n       *\r\n       * @param {number} n The number of bits to rotate.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after rotating.\r\n       *\r\n       * @example\r\n       *\r\n       *     var rotated = x64Word.rotR(7);\r\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\r\n       * Adds this word with the passed word.\r\n       *\r\n       * @param {X64Word} word The x64-Word to add with this word.\r\n       *\r\n       * @return {X64Word} A new x64-Word object after adding.\r\n       *\r\n       * @example\r\n       *\r\n       *     var added = x64Word.add(anotherX64Word);\r\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n      // return X64Word.create(high, low);\n      // }\n\n    });\n    /**\r\n     * An array of 64-bit words.\r\n     *\r\n     * @property {Array} words The array of CryptoJS.x64.Word objects.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\n\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\r\n       * Initializes a newly created word array.\r\n       *\r\n       * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\r\n       * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n       *\r\n       * @example\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create();\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create([\r\n       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n       *     ]);\r\n       *\r\n       *     var wordArray = CryptoJS.x64.WordArray.create([\r\n       *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\r\n       *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\r\n       *     ], 10);\r\n       */\n      init: function (words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\r\n       * Converts this 64-bit word array to a 32-bit word array.\r\n       *\r\n       * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\r\n       *\r\n       * @example\r\n       *\r\n       *     var x32WordArray = x64WordArray.toX32();\r\n       */\n      toX32: function () {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length; // Convert\n\n        var x32Words = [];\n\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\r\n       * Creates a copy of this word array.\r\n       *\r\n       * @return {X64WordArray} The clone.\r\n       *\r\n       * @example\r\n       *\r\n       *     var clone = x64WordArray.clone();\r\n       */\n      clone: function () {\n        var clone = Base.clone.call(this); // Clone \"words\" array\n\n        var words = clone.words = this.words.slice(0); // Clone each X64Word object\n\n        var wordsLength = words.length;\n\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      }\n    });\n  })();\n\n  return CryptoJS;\n});","map":null,"metadata":{},"sourceType":"script"}