{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MenuController } from \"@ionic/angular\";\nlet IntroPagePage = class IntroPagePage {\n  constructor(menuCtrl) {\n    this.menuCtrl = menuCtrl;\n    this.slideLeftRight = {\n      initialSlide: 1,\n      speed: 400\n    }; //************ FLIP effect ***********//\n\n    this.slideFlip = {\n      on: {\n        beforeInit() {\n          const swiper = this;\n          swiper.classNames.push(`${swiper.params.containerModifierClass}flip`);\n          swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n          const overwriteParams = {\n            slidesPerView: 1,\n            slidesPerColumn: 1,\n            slidesPerGroup: 1,\n            watchSlidesProgress: true,\n            spaceBetween: 0,\n            virtualTranslate: true\n          };\n          swiper.params = Object.assign(swiper.params, overwriteParams);\n          swiper.originalParams = Object.assign(swiper.originalParams, overwriteParams);\n        },\n\n        setTranslate() {\n          const swiper = this;\n          const {\n            $,\n            slides,\n            rtlTranslate: rtl\n          } = swiper;\n\n          for (let i = 0; i < slides.length; i += 1) {\n            const $slideEl = slides.eq(i);\n            let progress = $slideEl[0].progress;\n\n            if (swiper.params.flipEffect.limitRotation) {\n              progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n            }\n\n            const offset$$1 = $slideEl[0].swiperSlideOffset;\n            const rotate = -180 * progress;\n            let rotateY = rotate;\n            let rotateX = 0;\n            let tx = -offset$$1;\n            let ty = 0;\n\n            if (!swiper.isHorizontal()) {\n              ty = tx;\n              tx = 0;\n              rotateX = -rotateY;\n              rotateY = 0;\n            } else if (rtl) {\n              rotateY = -rotateY;\n            }\n\n            $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n\n            if (swiper.params.flipEffect.slideShadows) {\n              // Set shadows\n              let shadowBefore = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-left\") : $slideEl.find(\".swiper-slide-shadow-top\");\n              let shadowAfter = swiper.isHorizontal() ? $slideEl.find(\".swiper-slide-shadow-right\") : $slideEl.find(\".swiper-slide-shadow-bottom\");\n\n              if (shadowBefore.length === 0) {\n                shadowBefore = swiper.$(`<div class=\"swiper-slide-shadow-${swiper.isHorizontal() ? \"left\" : \"top\"}\"></div>`);\n                $slideEl.append(shadowBefore);\n              }\n\n              if (shadowAfter.length === 0) {\n                shadowAfter = swiper.$(`<div class=\"swiper-slide-shadow-${swiper.isHorizontal() ? \"right\" : \"bottom\"}\"></div>`);\n                $slideEl.append(shadowAfter);\n              }\n\n              if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n              if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n            }\n\n            $slideEl.transform(`translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`);\n          }\n        },\n\n        setTransition(duration) {\n          const swiper = this;\n          const {\n            slides,\n            activeIndex,\n            $wrapperEl\n          } = swiper;\n          slides.transition(duration).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(duration);\n\n          if (swiper.params.virtualTranslate && duration !== 0) {\n            let eventTriggered = false; // eslint-disable-next-line\n\n            slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {\n              if (eventTriggered) return;\n              if (!swiper || swiper.destroyed) return;\n              eventTriggered = true;\n              swiper.animating = false;\n              const triggerEvents = [\"webkitTransitionEnd\", \"transitionend\"];\n\n              for (let i = 0; i < triggerEvents.length; i += 1) {\n                $wrapperEl.trigger(triggerEvents[i]);\n              }\n            });\n          }\n        }\n\n      }\n    };\n  } //this method to move to the next slide..\n\n\n  moveToNext(slides) {\n    console.log(slides);\n    slides.slideNext();\n  } //this method to open the side menu ..\n\n\n  toggleSideMenu() {\n    console.log(\"call toggleSideMenu \");\n    this.menuCtrl.toggle();\n  }\n\n  ngOnInit() {}\n\n};\nIntroPagePage = __decorate([Component({\n  selector: 'app-intro-page',\n  templateUrl: './intro-page.page.html',\n  styleUrls: ['./intro-page.page.scss']\n}), __metadata(\"design:paramtypes\", [MenuController])], IntroPagePage);\nexport { IntroPagePage };","map":null,"metadata":{},"sourceType":"module"}