{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    subscriber.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      caughtSchedule(subscriber, scheduler, function () {\n        var _a = iterator.next(),\n            value = _a.value,\n            done = _a.done;\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      });\n    }));\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n} //# sourceMappingURL=scheduleIterable.js.map","map":null,"metadata":{},"sourceType":"module"}