{"ast":null,"code":"import assignInWith from './assignInWith.js';\nimport attempt from './attempt.js';\nimport baseValues from './_baseValues.js';\nimport customDefaultsAssignIn from './_customDefaultsAssignIn.js';\nimport escapeStringChar from './_escapeStringChar.js';\nimport isError from './isError.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keys from './keys.js';\nimport reInterpolate from './_reInterpolate.js';\nimport templateSettings from './templateSettings.js';\nimport toString from './toString.js';\n/** Error message constants. */\n\nvar INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n/** Used to match empty string literals in compiled template source. */\n\nvar reEmptyStringLeading = /\\b__p \\+= '';/g,\n    reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n    reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n/**\r\n * Used to validate the `validate` option in `_.template` variable.\r\n *\r\n * Forbids characters which could potentially change the meaning of the function argument definition:\r\n * - \"(),\" (modification of function parameters)\r\n * - \"=\" (default value)\r\n * - \"[]{}\" (destructuring of function parameters)\r\n * - \"/\" (beginning of a comment)\r\n * - whitespace\r\n */\n\nvar reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n/**\r\n * Used to match\r\n * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\r\n */\n\nvar reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n/** Used to ensure capturing order of template delimiters. */\n\nvar reNoMatch = /($^)/;\n/** Used to match unescaped characters in compiled string literals. */\n\nvar reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\r\n * Creates a compiled template function that can interpolate data properties\r\n * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\r\n * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\r\n * properties may be accessed as free variables in the template. If a setting\r\n * object is given, it takes precedence over `_.templateSettings` values.\r\n *\r\n * **Note:** In the development build `_.template` utilizes\r\n * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\r\n * for easier debugging.\r\n *\r\n * For more information on precompiling templates see\r\n * [lodash's custom builds documentation](https://lodash.com/custom-builds).\r\n *\r\n * For more information on Chrome extension sandboxes see\r\n * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category String\r\n * @param {string} [string=''] The template string.\r\n * @param {Object} [options={}] The options object.\r\n * @param {RegExp} [options.escape=_.templateSettings.escape]\r\n *  The HTML \"escape\" delimiter.\r\n * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\r\n *  The \"evaluate\" delimiter.\r\n * @param {Object} [options.imports=_.templateSettings.imports]\r\n *  An object to import into the template as free variables.\r\n * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\r\n *  The \"interpolate\" delimiter.\r\n * @param {string} [options.sourceURL='templateSources[n]']\r\n *  The sourceURL of the compiled template.\r\n * @param {string} [options.variable='obj']\r\n *  The data object variable name.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {Function} Returns the compiled template function.\r\n * @example\r\n *\r\n * // Use the \"interpolate\" delimiter to create a compiled template.\r\n * var compiled = _.template('hello <%= user %>!');\r\n * compiled({ 'user': 'fred' });\r\n * // => 'hello fred!'\r\n *\r\n * // Use the HTML \"escape\" delimiter to escape data property values.\r\n * var compiled = _.template('<b><%- value %></b>');\r\n * compiled({ 'value': '<script>' });\r\n * // => '<b>&lt;script&gt;</b>'\r\n *\r\n * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\r\n * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\r\n * compiled({ 'users': ['fred', 'barney'] });\r\n * // => '<li>fred</li><li>barney</li>'\r\n *\r\n * // Use the internal `print` function in \"evaluate\" delimiters.\r\n * var compiled = _.template('<% print(\"hello \" + user); %>!');\r\n * compiled({ 'user': 'barney' });\r\n * // => 'hello barney!'\r\n *\r\n * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\r\n * // Disable support by replacing the \"interpolate\" delimiter.\r\n * var compiled = _.template('hello ${ user }!');\r\n * compiled({ 'user': 'pebbles' });\r\n * // => 'hello pebbles!'\r\n *\r\n * // Use backslashes to treat delimiters as plain text.\r\n * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\r\n * compiled({ 'value': 'ignored' });\r\n * // => '<%- value %>'\r\n *\r\n * // Use the `imports` option to import `jQuery` as `jq`.\r\n * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\r\n * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\r\n * compiled({ 'users': ['fred', 'barney'] });\r\n * // => '<li>fred</li><li>barney</li>'\r\n *\r\n * // Use the `sourceURL` option to specify a custom sourceURL for the template.\r\n * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\r\n * compiled(data);\r\n * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\r\n *\r\n * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\r\n * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\r\n * compiled.source;\r\n * // => function(data) {\r\n * //   var __t, __p = '';\r\n * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\r\n * //   return __p;\r\n * // }\r\n *\r\n * // Use custom template delimiters.\r\n * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\r\n * var compiled = _.template('hello {{ user }}!');\r\n * compiled({ 'user': 'mustache' });\r\n * // => 'hello mustache!'\r\n *\r\n * // Use the `source` property to inline compiled templates for meaningful\r\n * // line numbers in error messages and stack traces.\r\n * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\r\n *   var JST = {\\\r\n *     \"main\": ' + _.template(mainText).source + '\\\r\n *   };\\\r\n * ');\r\n */\n\nfunction template(string, options, guard) {\n  // Based on John Resig's `tmpl` implementation\n  // (http://ejohn.org/blog/javascript-micro-templating/)\n  // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n  var settings = templateSettings.imports._.templateSettings || templateSettings;\n\n  if (guard && isIterateeCall(string, options, guard)) {\n    options = undefined;\n  }\n\n  string = toString(string);\n  options = assignInWith({}, options, settings, customDefaultsAssignIn);\n  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n      importsKeys = keys(imports),\n      importsValues = baseValues(imports, importsKeys);\n  var isEscaping,\n      isEvaluating,\n      index = 0,\n      interpolate = options.interpolate || reNoMatch,\n      source = \"__p += '\"; // Compile the regexp to match each delimiter.\n\n  var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.\n  // The sourceURL gets injected into the source that's eval-ed, so be careful\n  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n  // and escape the comment, thus injecting code that gets evaled.\n\n  var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\\s/g, ' ') + '\\n' : '';\n  string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n    interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.\n\n    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.\n\n    if (escapeValue) {\n      isEscaping = true;\n      source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n    }\n\n    if (evaluateValue) {\n      isEvaluating = true;\n      source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n    }\n\n    if (interpolateValue) {\n      source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n    }\n\n    index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in\n    // order to produce the correct `offset` value.\n\n    return match;\n  });\n  source += \"';\\n\"; // If `variable` is not specified wrap a with-statement around the generated\n  // code to add the data object to the top of the scope chain.\n\n  var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n\n  if (!variable) {\n    source = 'with (obj) {\\n' + source + '\\n}\\n';\n  } // Throw an error if a forbidden character was found in `variable`, to prevent\n  // potential command injection attacks.\n  else if (reForbiddenIdentifierChars.test(variable)) {\n    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n  } // Cleanup code by stripping empty strings.\n\n\n  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.\n\n  source = 'function(' + (variable || 'obj') + ') {\\n' + (variable ? '' : 'obj || (obj = {});\\n') + \"var __t, __p = ''\" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\\n' + \"function print() { __p += __j.call(arguments, '') }\\n\" : ';\\n') + source + 'return __p\\n}';\n  var result = attempt(function () {\n    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n  }); // Provide the compiled function's source by its `toString` method or\n  // the `source` property as a convenience for inlining compiled templates.\n\n  result.source = source;\n\n  if (isError(result)) {\n    throw result;\n  }\n\n  return result;\n}\n\nexport default template;","map":null,"metadata":{},"sourceType":"module"}