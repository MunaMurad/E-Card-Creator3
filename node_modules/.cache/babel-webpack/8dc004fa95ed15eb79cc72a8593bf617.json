{"ast":null,"code":"/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/**\r\n * Creates a function that negates the result of the predicate `func`. The\r\n * `func` predicate is invoked with the `this` binding and arguments of the\r\n * created function.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Function\r\n * @param {Function} predicate The predicate to negate.\r\n * @returns {Function} Returns the new negated function.\r\n * @example\r\n *\r\n * function isEven(n) {\r\n *   return n % 2 == 0;\r\n * }\r\n *\r\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\r\n * // => [1, 3, 5]\r\n */\n\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  return function () {\n    var args = arguments;\n\n    switch (args.length) {\n      case 0:\n        return !predicate.call(this);\n\n      case 1:\n        return !predicate.call(this, args[0]);\n\n      case 2:\n        return !predicate.call(this, args[0], args[1]);\n\n      case 3:\n        return !predicate.call(this, args[0], args[1], args[2]);\n    }\n\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;","map":null,"metadata":{},"sourceType":"module"}