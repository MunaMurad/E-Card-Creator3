{"ast":null,"code":"import { InjectionToken } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, queueScheduler, asyncScheduler } from 'rxjs';\nimport { subscribeOn, observeOn, tap } from 'rxjs/operators';\nexport const RealtimeDatabaseURL = /*#__PURE__*/new InjectionToken('angularfire2.realtimeDatabaseURL');\nexport const DATABASE_URL = RealtimeDatabaseURL;\n\nfunction noop() {}\n\nexport class ɵZoneScheduler {\n  constructor(zone, delegate = queueScheduler) {\n    this.zone = zone;\n    this.delegate = delegate;\n  }\n\n  now() {\n    return this.delegate.now();\n  }\n\n  schedule(work, delay, state) {\n    const targetZone = this.zone;\n\n    const workInZone = function (state) {\n      targetZone.runGuarded(() => {\n        work.apply(this, [state]);\n      });\n    };\n\n    return this.delegate.schedule(workInZone, delay, state);\n  }\n\n}\nexport class ɵBlockUntilFirstOperator {\n  constructor(zone) {\n    this.zone = zone;\n    this.task = null;\n  }\n\n  call(subscriber, source) {\n    const unscheduleTask = this.unscheduleTask.bind(this);\n    this.task = this.zone.run(() => Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop));\n    return source.pipe(tap(unscheduleTask, unscheduleTask, unscheduleTask)).subscribe(subscriber).add(unscheduleTask);\n  }\n\n  unscheduleTask() {\n    if (this.task != null && this.task.state === 'scheduled') {\n      this.task.invoke();\n      this.task = null;\n    }\n  }\n\n}\nexport class ɵAngularFireSchedulers {\n  constructor(ngZone) {\n    this.ngZone = ngZone;\n    this.outsideAngular = ngZone.runOutsideAngular(() => new ɵZoneScheduler(Zone.current));\n    this.insideAngular = ngZone.run(() => new ɵZoneScheduler(Zone.current, asyncScheduler));\n  }\n\n}\nexport function ɵkeepUnstableUntilFirstFactory(schedulers, platformId) {\n  return function keepUnstableUntilFirst(obs$) {\n    if (isPlatformServer(platformId)) {\n      obs$ = obs$.lift(new ɵBlockUntilFirstOperator(schedulers.ngZone));\n    }\n\n    return obs$.pipe(subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n  };\n}\nexport const runOutsideAngular = zone => obs$ => {\n  return new Observable(subscriber => {\n    return zone.runOutsideAngular(() => {\n      runInZone(zone)(obs$).subscribe(subscriber);\n    });\n  });\n};\nexport const runInZone = zone => obs$ => {\n  return new Observable(subscriber => {\n    return obs$.subscribe(value => zone.run(() => subscriber.next(value)), error => zone.run(() => subscriber.error(error)), () => zone.run(() => subscriber.complete()));\n  });\n};\nexport class FirebaseZoneScheduler {\n  constructor(zone, platformId) {\n    this.zone = zone;\n    this.platformId = platformId;\n  }\n\n  schedule(...args) {\n    return this.zone.runGuarded(function () {\n      return queueScheduler.schedule.apply(queueScheduler, args);\n    });\n  }\n\n  keepUnstableUntilFirst(obs$) {\n    if (isPlatformServer(this.platformId)) {\n      return new Observable(subscriber => {\n        const noop = () => {};\n\n        const task = Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n        obs$.subscribe(next => {\n          if (task.state === 'scheduled') {\n            task.invoke();\n          }\n\n          ;\n          subscriber.next(next);\n        }, error => {\n          if (task.state === 'scheduled') {\n            task.invoke();\n          }\n\n          subscriber.error(error);\n        }, () => {\n          if (task.state === 'scheduled') {\n            task.invoke();\n          }\n\n          subscriber.complete();\n        });\n      });\n    } else {\n      return obs$;\n    }\n  }\n\n  runOutsideAngular(obs$) {\n    return new Observable(subscriber => {\n      return this.zone.runOutsideAngular(() => {\n        return obs$.subscribe(value => this.zone.run(() => subscriber.next(value)), error => this.zone.run(() => subscriber.error(error)), () => this.zone.run(() => subscriber.complete()));\n      });\n    });\n  }\n\n}\nconst noopFunctions = ['ngOnDestroy'];\nexport const ɵlazySDKProxy = (klass, observable, zone) => {\n  return new Proxy(klass, {\n    get: (_, name) => zone.runOutsideAngular(() => {\n      if (klass[name]) {\n        return klass[name];\n      }\n\n      if (noopFunctions.includes(name)) {\n        return () => {};\n      }\n\n      let promise = observable.toPromise().then(mod => {\n        const ret = mod && mod[name];\n\n        if (typeof ret == 'function') {\n          return ret.bind(mod);\n        } else if (ret && ret.then) {\n          return ret.then(res => zone.run(() => res));\n        } else {\n          return zone.run(() => ret);\n        }\n      });\n      return new Proxy(() => undefined, {\n        get: (_, name) => promise[name],\n        apply: (self, _, args) => promise.then(it => it && it(...args))\n      });\n    })\n  });\n}; //# sourceMappingURL=angularfire2.js.map","map":null,"metadata":{},"sourceType":"module"}