{"ast":null,"code":"/*!\n * tui-code-snippet.js\n * @version 1.5.2\n * @author NHN. FE Development Lab <dl_javascript@nhn.com>\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"util\"] = factory();else root[\"tui\"] = root[\"tui\"] || {}, root[\"tui\"][\"util\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"dist\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }([\n      /* 0 */\n\n      /***/\n\n      /* 1 */\n\n      /***/\n\n      /* 2 */\n\n      /***/\n\n      /* 3 */\n\n      /***/\n\n      /* 4 */\n\n      /***/\n\n      /* 5 */\n\n      /***/\n\n      /* 6 */\n\n      /***/\n\n      /* 7 */\n\n      /***/\n\n      /* 8 */\n\n      /***/\n\n      /* 9 */\n\n      /***/\n\n      /* 10 */\n\n      /***/\n\n      /* 11 */\n\n      /***/\n\n      /* 12 */\n\n      /***/\n\n      /* 13 */\n\n      /***/\n\n      /* 14 */\n\n      /***/\n\n      /* 15 */\n\n      /***/\n\n      /* 16 */\n\n      /***/\n\n      /* 17 */\n\n      /***/\n\n      /* 18 */\n\n      /***/\n\n      /* 19 */\n\n      /***/\n\n      /* 20 */\n\n      /***/\n\n      /******/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n      /**\n       * @fileoverview\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       * @namespace tui.util\n       * @example\n       * // node, commonjs\n       * var util = require('tui-code-snippet');\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var util = tui.util;\n       * <script>\n       */\n\n      var util = {};\n\n      var object = __webpack_require__(1);\n\n      var extend = object.extend;\n      extend(util, object);\n      extend(util, __webpack_require__(3));\n      extend(util, __webpack_require__(2));\n      extend(util, __webpack_require__(4));\n      extend(util, __webpack_require__(5));\n      extend(util, __webpack_require__(6));\n      extend(util, __webpack_require__(7));\n      extend(util, __webpack_require__(8));\n      extend(util, __webpack_require__(9));\n      util.browser = __webpack_require__(10);\n      util.popup = __webpack_require__(11);\n      util.formatDate = __webpack_require__(12);\n      util.defineClass = __webpack_require__(13);\n      util.defineModule = __webpack_require__(14);\n      util.defineNamespace = __webpack_require__(15);\n      util.CustomEvents = __webpack_require__(16);\n      util.Enum = __webpack_require__(17);\n      util.ExMap = __webpack_require__(18);\n      util.HashMap = __webpack_require__(20);\n      util.Map = __webpack_require__(19);\n      module.exports = util;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some functions for handling a plain object, json.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var type = __webpack_require__(2);\n\n      var array = __webpack_require__(3);\n      /**\n       * The last id of stamp\n       * @type {number}\n       * @private\n       */\n\n\n      var lastId = 0;\n      /**\n       * Extend the target object from other objects.\n       * @param {object} target - Object that will be extended\n       * @param {...object} objects - Objects as sources\n       * @returns {object} Extended object\n       * @memberof tui.util\n       */\n\n      function extend(target, objects) {\n        // eslint-disable-line no-unused-vars\n        var hasOwnProp = Object.prototype.hasOwnProperty;\n        var source, prop, i, len;\n\n        for (i = 1, len = arguments.length; i < len; i += 1) {\n          source = arguments[i];\n\n          for (prop in source) {\n            if (hasOwnProp.call(source, prop)) {\n              target[prop] = source[prop];\n            }\n          }\n        }\n\n        return target;\n      }\n      /**\n       * Assign a unique id to an object\n       * @param {object} obj - Object that will be assigned id.\n       * @returns {number} Stamped id\n       * @memberof tui.util\n       */\n\n\n      function stamp(obj) {\n        if (!obj.__fe_id) {\n          lastId += 1;\n          obj.__fe_id = lastId; // eslint-disable-line camelcase\n        }\n\n        return obj.__fe_id;\n      }\n      /**\n       * Verify whether an object has a stamped id or not.\n       * @param {object} obj - adjusted object\n       * @returns {boolean}\n       * @memberof tui.util\n       */\n\n\n      function hasStamp(obj) {\n        return type.isExisty(pick(obj, '__fe_id'));\n      }\n      /**\n       * Reset the last id of stamp\n       * @private\n       */\n\n\n      function resetLastId() {\n        lastId = 0;\n      }\n      /**\n       * Return a key-list(array) of a given object\n       * @param {object} obj - Object from which a key-list will be extracted\n       * @returns {Array} A key-list(array)\n       * @memberof tui.util\n       */\n\n\n      function keys(obj) {\n        var keyArray = [];\n        var key;\n\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            keyArray.push(key);\n          }\n        }\n\n        return keyArray;\n      }\n      /**\n       * Return the equality for multiple objects(jsonObjects).<br>\n       *  See {@link http://stackoverflow.com/questions/1068834/object-comparison-in-javascript}\n       * @param {...object} object - Multiple objects for comparing.\n       * @returns {boolean} Equality\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var jsonObj1 = {name:'milk', price: 1000};\n       * var jsonObj2 = {name:'milk', price: 1000};\n       * var jsonObj3 = {name:'milk', price: 1000};\n       * util.compareJSON(jsonObj1, jsonObj2, jsonObj3);   // true\n       *\n       * var jsonObj4 = {name:'milk', price: 1000};\n       * var jsonObj5 = {name:'beer', price: 3000};\n       * util.compareJSON(jsonObj4, jsonObj5); // false\n       */\n\n\n      function compareJSON(object) {\n        var argsLen = arguments.length;\n        var i = 1;\n\n        if (argsLen < 1) {\n          return true;\n        }\n\n        for (; i < argsLen; i += 1) {\n          if (!isSameObject(object, arguments[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      /**\n       * @param {*} x - object to compare\n       * @param {*} y - object to compare\n       * @returns {boolean} - whether object x and y is same or not\n       * @private\n       */\n\n\n      function isSameObject(x, y) {\n        // eslint-disable-line complexity\n        var leftChain = [];\n        var rightChain = [];\n        var p; // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n\n        if (isNaN(x) && isNaN(y) && type.isNumber(x) && type.isNumber(y)) {\n          return true;\n        } // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on step when comparing prototypes\n\n\n        if (x === y) {\n          return true;\n        } // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n\n\n        if (type.isFunction(x) && type.isFunction(y) || x instanceof Date && y instanceof Date || x instanceof RegExp && y instanceof RegExp || x instanceof String && y instanceof String || x instanceof Number && y instanceof Number) {\n          return x.toString() === y.toString();\n        } // At last checking prototypes as good a we can\n\n\n        if (!(x instanceof Object && y instanceof Object)) {\n          return false;\n        }\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x) || x.constructor !== y.constructor || x.prototype !== y.prototype) {\n          return false;\n        } // check for infinitive linking loops\n\n\n        if (array.inArray(x, leftChain) > -1 || array.inArray(y, rightChain) > -1) {\n          return false;\n        } // Quick checking of one object beeing a subset of another.\n\n\n        for (p in y) {\n          if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n            return false;\n          } else if (typeof y[p] !== typeof x[p]) {\n            return false;\n          }\n        } // This for loop executes comparing with hasOwnProperty() and typeof for each property in 'x' object,\n        // and verifying equality for x[property] and y[property].\n\n\n        for (p in x) {\n          if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n            return false;\n          } else if (typeof y[p] !== typeof x[p]) {\n            return false;\n          }\n\n          if (typeof x[p] === 'object' || typeof x[p] === 'function') {\n            leftChain.push(x);\n            rightChain.push(y);\n\n            if (!isSameObject(x[p], y[p])) {\n              return false;\n            }\n\n            leftChain.pop();\n            rightChain.pop();\n          } else if (x[p] !== y[p]) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n      /* eslint-enable complexity */\n\n      /**\n       * Retrieve a nested item from the given object/array\n       * @param {object|Array} obj - Object for retrieving\n       * @param {...string|number} paths - Paths of property\n       * @returns {*} Value\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var obj = {\n       *     'key1': 1,\n       *     'nested' : {\n       *         'key1': 11,\n       *         'nested': {\n       *             'key1': 21\n       *         }\n       *     }\n       * };\n       * util.pick(obj, 'nested', 'nested', 'key1'); // 21\n       * util.pick(obj, 'nested', 'nested', 'key2'); // undefined\n       *\n       * var arr = ['a', 'b', 'c'];\n       * util.pick(arr, 1); // 'b'\n       */\n\n\n      function pick(obj, paths) {\n        // eslint-disable-line no-unused-vars\n        var args = arguments;\n        var target = args[0];\n        var i = 1;\n        var length = args.length;\n\n        for (; i < length; i += 1) {\n          if (type.isUndefined(target) || type.isNull(target)) {\n            return;\n          }\n\n          target = target[args[i]];\n        }\n\n        return target; // eslint-disable-line consistent-return\n      }\n\n      module.exports = {\n        extend: extend,\n        stamp: stamp,\n        hasStamp: hasStamp,\n        resetLastId: resetLastId,\n        keys: Object.prototype.keys || keys,\n        compareJSON: compareJSON,\n        pick: pick\n      };\n      /***/\n    }, function (module, exports) {\n      /**\n       * @fileoverview This module provides some functions to check the type of variable\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var toString = Object.prototype.toString;\n      /**\n       * Check whether the given variable is existing or not.<br>\n       *  If the given variable is not null and not undefined, returns true.\n       * @param {*} param - Target for checking\n       * @returns {boolean} Is existy?\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * util.isExisty(''); //true\n       * util.isExisty(0); //true\n       * util.isExisty([]); //true\n       * util.isExisty({}); //true\n       * util.isExisty(null); //false\n       * util.isExisty(undefined); //false\n      */\n\n      function isExisty(param) {\n        return !isUndefined(param) && !isNull(param);\n      }\n      /**\n       * Check whether the given variable is undefined or not.<br>\n       *  If the given variable is undefined, returns true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is undefined?\n       * @memberof tui.util\n       */\n\n\n      function isUndefined(obj) {\n        return obj === undefined; // eslint-disable-line no-undefined\n      }\n      /**\n       * Check whether the given variable is null or not.<br>\n       *  If the given variable(arguments[0]) is null, returns true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is null?\n       * @memberof tui.util\n       */\n\n\n      function isNull(obj) {\n        return obj === null;\n      }\n      /**\n       * Check whether the given variable is truthy or not.<br>\n       *  If the given variable is not null or not undefined or not false, returns true.<br>\n       *  (It regards 0 as true)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is truthy?\n       * @memberof tui.util\n       */\n\n\n      function isTruthy(obj) {\n        return isExisty(obj) && obj !== false;\n      }\n      /**\n       * Check whether the given variable is falsy or not.<br>\n       *  If the given variable is null or undefined or false, returns true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is falsy?\n       * @memberof tui.util\n       */\n\n\n      function isFalsy(obj) {\n        return !isTruthy(obj);\n      }\n      /**\n       * Check whether the given variable is an arguments object or not.<br>\n       *  If the given variable is an arguments object, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is arguments?\n       * @memberof tui.util\n       */\n\n\n      function isArguments(obj) {\n        var result = isExisty(obj) && (toString.call(obj) === '[object Arguments]' || !!obj.callee);\n        return result;\n      }\n      /**\n       * Check whether the given variable is an instance of Array or not.<br>\n       *  If the given variable is an instance of Array, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is array instance?\n       * @memberof tui.util\n       */\n\n\n      function isArray(obj) {\n        return obj instanceof Array;\n      }\n      /**\n       * Check whether the given variable is an object or not.<br>\n       *  If the given variable is an object, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is object?\n       * @memberof tui.util\n       */\n\n\n      function isObject(obj) {\n        return obj === Object(obj);\n      }\n      /**\n       * Check whether the given variable is a function or not.<br>\n       *  If the given variable is a function, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is function?\n       * @memberof tui.util\n       */\n\n\n      function isFunction(obj) {\n        return obj instanceof Function;\n      }\n      /**\n       * Check whether the given variable is a number or not.<br>\n       *  If the given variable is a number, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is number?\n       * @memberof tui.util\n       */\n\n\n      function isNumber(obj) {\n        return typeof obj === 'number' || obj instanceof Number;\n      }\n      /**\n       * Check whether the given variable is a string or not.<br>\n       *  If the given variable is a string, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is string?\n       * @memberof tui.util\n       */\n\n\n      function isString(obj) {\n        return typeof obj === 'string' || obj instanceof String;\n      }\n      /**\n       * Check whether the given variable is a boolean or not.<br>\n       *  If the given variable is a boolean, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is boolean?\n       * @memberof tui.util\n       */\n\n\n      function isBoolean(obj) {\n        return typeof obj === 'boolean' || obj instanceof Boolean;\n      }\n      /**\n       * Check whether the given variable is an instance of Array or not.<br>\n       *  If the given variable is an instance of Array, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is an instance of array?\n       * @memberof tui.util\n       */\n\n\n      function isArraySafe(obj) {\n        return toString.call(obj) === '[object Array]';\n      }\n      /**\n       * Check whether the given variable is a function or not.<br>\n       *  If the given variable is a function, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is a function?\n       * @memberof tui.util\n       */\n\n\n      function isFunctionSafe(obj) {\n        return toString.call(obj) === '[object Function]';\n      }\n      /**\n       * Check whether the given variable is a number or not.<br>\n       *  If the given variable is a number, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is a number?\n       * @memberof tui.util\n       */\n\n\n      function isNumberSafe(obj) {\n        return toString.call(obj) === '[object Number]';\n      }\n      /**\n       * Check whether the given variable is a string or not.<br>\n       *  If the given variable is a string, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is a string?\n       * @memberof tui.util\n       */\n\n\n      function isStringSafe(obj) {\n        return toString.call(obj) === '[object String]';\n      }\n      /**\n       * Check whether the given variable is a boolean or not.<br>\n       *  If the given variable is a boolean, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is a boolean?\n       * @memberof tui.util\n       */\n\n\n      function isBooleanSafe(obj) {\n        return toString.call(obj) === '[object Boolean]';\n      }\n      /**\n       * Check whether the given variable is a instance of HTMLNode or not.<br>\n       *  If the given variables is a instance of HTMLNode, return true.\n       * @param {*} html - Target for checking\n       * @returns {boolean} Is HTMLNode ?\n       * @memberof tui.util\n       */\n\n\n      function isHTMLNode(html) {\n        if (typeof HTMLElement === 'object') {\n          return html && (html instanceof HTMLElement || !!html.nodeType);\n        }\n\n        return !!(html && html.nodeType);\n      }\n      /**\n       * Check whether the given variable is a HTML tag or not.<br>\n       *  If the given variables is a HTML tag, return true.\n       * @param {*} html - Target for checking\n       * @returns {Boolean} Is HTML tag?\n       * @memberof tui.util\n       */\n\n\n      function isHTMLTag(html) {\n        if (typeof HTMLElement === 'object') {\n          return html && html instanceof HTMLElement;\n        }\n\n        return !!(html && html.nodeType && html.nodeType === 1);\n      }\n      /**\n       * Check whether the given variable is empty(null, undefined, or empty array, empty object) or not.<br>\n       *  If the given variables is empty, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is empty?\n       * @memberof tui.util\n       */\n\n\n      function isEmpty(obj) {\n        if (!isExisty(obj) || _isEmptyString(obj)) {\n          return true;\n        }\n\n        if (isArray(obj) || isArguments(obj)) {\n          return obj.length === 0;\n        }\n\n        if (isObject(obj) && !isFunction(obj)) {\n          return !_hasOwnProperty(obj);\n        }\n\n        return true;\n      }\n      /**\n       * Check whether given argument is empty string\n       * @param {*} obj - Target for checking\n       * @returns {boolean} whether given argument is empty string\n       * @memberof tui.util\n       * @private\n       */\n\n\n      function _isEmptyString(obj) {\n        return isString(obj) && obj === '';\n      }\n      /**\n       * Check whether given argument has own property\n       * @param {Object} obj - Target for checking\n       * @returns {boolean} - whether given argument has own property\n       * @memberof tui.util\n       * @private\n       */\n\n\n      function _hasOwnProperty(obj) {\n        var key;\n\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n      /**\n       * Check whether the given variable is not empty\n       * (not null, not undefined, or not empty array, not empty object) or not.<br>\n       *  If the given variables is not empty, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is not empty?\n       * @memberof tui.util\n       */\n\n\n      function isNotEmpty(obj) {\n        return !isEmpty(obj);\n      }\n      /**\n       * Check whether the given variable is an instance of Date or not.<br>\n       *  If the given variables is an instance of Date, return true.\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is an instance of Date?\n       * @memberof tui.util\n       */\n\n\n      function isDate(obj) {\n        return obj instanceof Date;\n      }\n      /**\n       * Check whether the given variable is an instance of Date or not.<br>\n       *  If the given variables is an instance of Date, return true.<br>\n       *  (It is used for multiple frame environments)\n       * @param {*} obj - Target for checking\n       * @returns {boolean} Is an instance of Date?\n       * @memberof tui.util\n       */\n\n\n      function isDateSafe(obj) {\n        return toString.call(obj) === '[object Date]';\n      }\n\n      module.exports = {\n        isExisty: isExisty,\n        isUndefined: isUndefined,\n        isNull: isNull,\n        isTruthy: isTruthy,\n        isFalsy: isFalsy,\n        isArguments: isArguments,\n        isArray: isArray,\n        isArraySafe: isArraySafe,\n        isObject: isObject,\n        isFunction: isFunction,\n        isFunctionSafe: isFunctionSafe,\n        isNumber: isNumber,\n        isNumberSafe: isNumberSafe,\n        isDate: isDate,\n        isDateSafe: isDateSafe,\n        isString: isString,\n        isStringSafe: isStringSafe,\n        isBoolean: isBoolean,\n        isBooleanSafe: isBooleanSafe,\n        isHTMLNode: isHTMLNode,\n        isHTMLTag: isHTMLTag,\n        isEmpty: isEmpty,\n        isNotEmpty: isNotEmpty\n      };\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some functions for handling array.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n\n      var aps = Array.prototype.slice;\n      var util;\n      /**\n       * Generate an integer Array containing an arithmetic progression.\n       * @param {number} start - start index\n       * @param {number} stop - stop index\n       * @param {number} step - next visit index = current index + step\n       * @returns {Array}\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * util.range(5); // [0, 1, 2, 3, 4]\n       * util.range(1, 5); // [1,2,3,4]\n       * util.range(2, 10, 2); // [2,4,6,8]\n       * util.range(10, 2, -2); // [10,8,6,4]\n       */\n\n      var range = function (start, stop, step) {\n        var arr = [];\n        var flag;\n\n        if (type.isUndefined(stop)) {\n          stop = start || 0;\n          start = 0;\n        }\n\n        step = step || 1;\n        flag = step < 0 ? -1 : 1;\n        stop *= flag;\n\n        for (; start * flag < stop; start += step) {\n          arr.push(start);\n        }\n\n        return arr;\n      };\n      /* eslint-disable valid-jsdoc */\n\n      /**\n       * Zip together multiple lists into a single array\n       * @param {...Array}\n       * @returns {Array}\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var result = util.zip([1, 2, 3], ['a', 'b','c'], [true, false, true]);\n       * console.log(result[0]); // [1, 'a', true]\n       * console.log(result[1]); // [2, 'b', false]\n       * console.log(result[2]); // [3, 'c', true]\n       */\n\n\n      var zip = function () {\n        /* eslint-enable valid-jsdoc */\n        var arr2d = aps.call(arguments);\n        var result = [];\n        collection.forEach(arr2d, function (arr) {\n          collection.forEach(arr, function (value, index) {\n            if (!result[index]) {\n              result[index] = [];\n            }\n\n            result[index].push(value);\n          });\n        });\n        return result;\n      };\n      /**\n       * Returns the first index at which a given element can be found in the array\n       * from start index(default 0), or -1 if it is not present.<br>\n       * It compares searchElement to elements of the Array using strict equality\n       * (the same method used by the ===, or triple-equals, operator).\n       * @param {*} searchElement Element to locate in the array\n       * @param {Array} array Array that will be traversed.\n       * @param {number} startIndex Start index in array for searching (default 0)\n       * @returns {number} the First index at which a given element, or -1 if it is not present\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var arr = ['one', 'two', 'three', 'four'];\n       * var idx1 = util.inArray('one', arr, 3); // -1\n       * var idx2 = util.inArray('one', arr); // 0\n       */\n\n\n      var inArray = function (searchElement, array, startIndex) {\n        var i;\n        var length;\n        startIndex = startIndex || 0;\n\n        if (!type.isArray(array)) {\n          return -1;\n        }\n\n        if (Array.prototype.indexOf) {\n          return Array.prototype.indexOf.call(array, searchElement, startIndex);\n        }\n\n        length = array.length;\n\n        for (i = startIndex; startIndex >= 0 && i < length; i += 1) {\n          if (array[i] === searchElement) {\n            return i;\n          }\n        }\n\n        return -1;\n      };\n\n      util = {\n        inArray: inArray,\n        range: range,\n        zip: zip\n      };\n      module.exports = util;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some functions for handling object as collection.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var type = __webpack_require__(2);\n\n      var object = __webpack_require__(1);\n      /**\n       * Execute the provided callback once for each element present\n       * in the array(or Array-like object) in ascending order.<br>\n       * If the callback function returns false, the loop will be stopped.<br>\n       * Callback function(iteratee) is invoked with three arguments:\n       *  - The value of the element\n       *  - The index of the element\n       *  - The array(or Array-like object) being traversed\n       * @param {Array} arr The array(or Array-like object) that will be traversed\n       * @param {function} iteratee Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var sum = 0;\n       *\n       * util.forEachArray([1,2,3], function(value){\n       *     sum += value;\n       * });\n       * alert(sum); // 6\n       */\n\n\n      function forEachArray(arr, iteratee, context) {\n        var index = 0;\n        var len = arr.length;\n        context = context || null;\n\n        for (; index < len; index += 1) {\n          if (iteratee.call(context, arr[index], index, arr) === false) {\n            break;\n          }\n        }\n      }\n      /**\n       * Execute the provided callback once for each property of object which actually exist.<br>\n       * If the callback function returns false, the loop will be stopped.<br>\n       * Callback function(iteratee) is invoked with three arguments:\n       *  - The value of the property\n       *  - The name of the property\n       *  - The object being traversed\n       * @param {Object} obj The object that will be traversed\n       * @param {function} iteratee  Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var sum = 0;\n       *\n       * util.forEachOwnProperties({a:1,b:2,c:3}, function(value){\n       *     sum += value;\n       * });\n       * alert(sum); // 6\n       **/\n\n\n      function forEachOwnProperties(obj, iteratee, context) {\n        var key;\n        context = context || null;\n\n        for (key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            if (iteratee.call(context, obj[key], key, obj) === false) {\n              break;\n            }\n          }\n        }\n      }\n      /**\n       * Execute the provided callback once for each property of object(or element of array) which actually exist.<br>\n       * If the object is Array-like object(ex-arguments object), It needs to transform to Array.(see 'ex2' of example).<br>\n       * If the callback function returns false, the loop will be stopped.<br>\n       * Callback function(iteratee) is invoked with three arguments:\n       *  - The value of the property(or The value of the element)\n       *  - The name of the property(or The index of the element)\n       *  - The object being traversed\n       * @param {Object} obj The object that will be traversed\n       * @param {function} iteratee Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var sum = 0;\n       *\n       * util.forEach([1,2,3], function(value){\n       *     sum += value;\n       * });\n       * alert(sum); // 6\n       *\n       * // In case of Array-like object\n       * var array = Array.prototype.slice.call(arrayLike); // change to array\n       * util.forEach(array, function(value){\n       *     sum += value;\n       * });\n       */\n\n\n      function forEach(obj, iteratee, context) {\n        if (type.isArray(obj)) {\n          forEachArray(obj, iteratee, context);\n        } else {\n          forEachOwnProperties(obj, iteratee, context);\n        }\n      }\n      /**\n       * Execute the provided callback function once for each element in an array, in order,\n       * and constructs a new array from the results.<br>\n       * If the object is Array-like object(ex-arguments object),\n       * It needs to transform to Array.(see 'ex2' of forEach example)<br>\n       * Callback function(iteratee) is invoked with three arguments:\n       *  - The value of the property(or The value of the element)\n       *  - The name of the property(or The index of the element)\n       *  - The object being traversed\n       * @param {Object} obj The object that will be traversed\n       * @param {function} iteratee Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @returns {Array} A new array composed of returned values from callback function\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var result = util.map([0,1,2,3], function(value) {\n       *     return value + 1;\n       * });\n       *\n       * alert(result);  // 1,2,3,4\n       */\n\n\n      function map(obj, iteratee, context) {\n        var resultArray = [];\n        context = context || null;\n        forEach(obj, function () {\n          resultArray.push(iteratee.apply(context, arguments));\n        });\n        return resultArray;\n      }\n      /**\n       * Execute the callback function once for each element present in the array(or Array-like object or plain object).<br>\n       * If the object is Array-like object(ex-arguments object),\n       * It needs to transform to Array.(see 'ex2' of forEach example)<br>\n       * Callback function(iteratee) is invoked with four arguments:\n       *  - The previousValue\n       *  - The currentValue\n       *  - The index\n       *  - The object being traversed\n       * @param {Object} obj The object that will be traversed\n       * @param {function} iteratee Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @returns {*} The result value\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var result = util.reduce([0,1,2,3], function(stored, value) {\n       *     return stored + value;\n       * });\n       *\n       * alert(result); // 6\n       */\n\n\n      function reduce(obj, iteratee, context) {\n        var index = 0;\n        var keys, length, store;\n        context = context || null;\n\n        if (!type.isArray(obj)) {\n          keys = object.keys(obj);\n          length = keys.length;\n          store = obj[keys[index += 1]];\n        } else {\n          length = obj.length;\n          store = obj[index];\n        }\n\n        index += 1;\n\n        for (; index < length; index += 1) {\n          store = iteratee.call(context, store, obj[keys ? keys[index] : index]);\n        }\n\n        return store;\n      }\n      /**\n       * Transform the Array-like object to Array.<br>\n       * In low IE (below 8), Array.prototype.slice.call is not perfect. So, try-catch statement is used.\n       * @param {*} arrayLike Array-like object\n       * @returns {Array} Array\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var arrayLike = {\n       *     0: 'one',\n       *     1: 'two',\n       *     2: 'three',\n       *     3: 'four',\n       *     length: 4\n       * };\n       * var result = util.toArray(arrayLike);\n       *\n       * alert(result instanceof Array); // true\n       * alert(result); // one,two,three,four\n       */\n\n\n      function toArray(arrayLike) {\n        var arr;\n\n        try {\n          arr = Array.prototype.slice.call(arrayLike);\n        } catch (e) {\n          arr = [];\n          forEachArray(arrayLike, function (value) {\n            arr.push(value);\n          });\n        }\n\n        return arr;\n      }\n      /**\n       * Create a new array or plain object with all elements(or properties)\n       * that pass the test implemented by the provided function.<br>\n       * Callback function(iteratee) is invoked with three arguments:\n       *  - The value of the property(or The value of the element)\n       *  - The name of the property(or The index of the element)\n       *  - The object being traversed\n       * @param {Object} obj Object(plain object or Array) that will be traversed\n       * @param {function} iteratee Callback function\n       * @param {Object} [context] Context(this) of callback function\n       * @returns {Object} plain object or Array\n       * @memberof tui.util\n       * @example\n        * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var result1 = util.filter([0,1,2,3], function(value) {\n       *     return (value % 2 === 0);\n       * });\n       * alert(result1); // [0, 2]\n       *\n       * var result2 = util.filter({a : 1, b: 2, c: 3}, function(value) {\n       *     return (value % 2 !== 0);\n       * });\n       * alert(result2.a); // 1\n       * alert(result2.b); // undefined\n       * alert(result2.c); // 3\n       */\n\n\n      function filter(obj, iteratee, context) {\n        var result, add;\n        context = context || null;\n\n        if (!type.isObject(obj) || !type.isFunction(iteratee)) {\n          throw new Error('wrong parameter');\n        }\n\n        if (type.isArray(obj)) {\n          result = [];\n\n          add = function (subResult, args) {\n            subResult.push(args[0]);\n          };\n        } else {\n          result = {};\n\n          add = function (subResult, args) {\n            subResult[args[1]] = args[0];\n          };\n        }\n\n        forEach(obj, function () {\n          if (iteratee.apply(context, arguments)) {\n            add(result, arguments);\n          }\n        }, context);\n        return result;\n      }\n      /**\n       * fetching a property\n       * @param {Array} arr target collection\n       * @param {String|Number} property property name\n       * @returns {Array}\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var objArr = [\n       *     {'abc': 1, 'def': 2, 'ghi': 3},\n       *     {'abc': 4, 'def': 5, 'ghi': 6},\n       *     {'abc': 7, 'def': 8, 'ghi': 9}\n       * ];\n       * var arr2d = [\n       *     [1, 2, 3],\n       *     [4, 5, 6],\n       *     [7, 8, 9]\n       * ];\n       * util.pluck(objArr, 'abc'); // [1, 4, 7]\n       * util.pluck(arr2d, 2); // [3, 6, 9]\n       */\n\n\n      function pluck(arr, property) {\n        var result = map(arr, function (item) {\n          return item[property];\n        });\n        return result;\n      }\n\n      module.exports = {\n        forEachOwnProperties: forEachOwnProperties,\n        forEachArray: forEachArray,\n        forEach: forEach,\n        toArray: toArray,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        pluck: pluck\n      };\n      /***/\n    }, function (module, exports) {\n      /**\n       * @fileoverview This module provides a bind() function for context binding.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n      /**\n       * Create a new function that, when called, has its this keyword set to the provided value.\n       * @param {function} fn A original function before binding\n       * @param {*} obj context of function in arguments[0]\n       * @returns {function()} A new bound function with context that is in arguments[1]\n       * @memberof tui.util\n       */\n\n      function bind(fn, obj) {\n        var slice = Array.prototype.slice;\n        var args;\n\n        if (fn.bind) {\n          return fn.bind.apply(fn, slice.call(arguments, 1));\n        }\n        /* istanbul ignore next */\n\n\n        args = slice.call(arguments, 2);\n        /* istanbul ignore next */\n\n        return function () {\n          /* istanbul ignore next */\n          return fn.apply(obj, args.length ? args.concat(slice.call(arguments)) : arguments);\n        };\n      }\n\n      module.exports = {\n        bind: bind\n      };\n      /***/\n    }, function (module, exports) {\n      /**\n       * @fileoverview This module provides some simple function for inheritance.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n      /**\n       * Create a new object with the specified prototype object and properties.\n       * @param {Object} obj This object will be a prototype of the newly-created object.\n       * @returns {Object}\n       * @memberof tui.util\n       */\n\n      function createObject(obj) {\n        function F() {} // eslint-disable-line require-jsdoc\n\n\n        F.prototype = obj;\n        return new F();\n      }\n      /**\n       * Provide a simple inheritance in prototype-oriented.<br>\n       * Caution :\n       *  Don't overwrite the prototype of child constructor.\n       *\n       * @param {function} subType Child constructor\n       * @param {function} superType Parent constructor\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * // Parent constructor\n       * function Animal(leg) {\n       *     this.leg = leg;\n       * }\n       * Animal.prototype.growl = function() {\n       *     // ...\n       * };\n       *\n       * // Child constructor\n       * function Person(name) {\n       *     this.name = name;\n       * }\n       *\n       * // Inheritance\n       * util.inherit(Person, Animal);\n       *\n       * // After this inheritance, please use only the extending of property.\n       * // Do not overwrite prototype.\n       * Person.prototype.walk = function(direction) {\n       *     // ...\n       * };\n       */\n\n\n      function inherit(subType, superType) {\n        var prototype = createObject(superType.prototype);\n        prototype.constructor = subType;\n        subType.prototype = prototype;\n      }\n\n      module.exports = {\n        createObject: createObject,\n        inherit: inherit\n      };\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some functions for handling the string.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var object = __webpack_require__(1);\n      /**\n       * Transform the given HTML Entity string into plain string\n       * @param {String} htmlEntity - HTML Entity type string\n       * @returns {String} Plain string\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       *  var htmlEntityString = \"A &#39;quote&#39; is &lt;b&gt;bold&lt;/b&gt;\"\n       *  var result = util.decodeHTMLEntity(htmlEntityString); //\"A 'quote' is <b>bold</b>\"\n       */\n\n\n      function decodeHTMLEntity(htmlEntity) {\n        var entities = {\n          '&quot;': '\"',\n          '&amp;': '&',\n          '&lt;': '<',\n          '&gt;': '>',\n          '&#39;': '\\'',\n          '&nbsp;': ' '\n        };\n        return htmlEntity.replace(/&amp;|&lt;|&gt;|&quot;|&#39;|&nbsp;/g, function (m0) {\n          return entities[m0] ? entities[m0] : m0;\n        });\n      }\n      /**\n       * Transform the given string into HTML Entity string\n       * @param {String} html - String for encoding\n       * @returns {String} HTML Entity\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       *  var htmlEntityString = \"<script> alert('test');</script><a href='test'>\";\n       *  var result = util.encodeHTMLEntity(htmlEntityString);\n       * //\"&lt;script&gt; alert(&#39;test&#39;);&lt;/script&gt;&lt;a href=&#39;test&#39;&gt;\"\n       */\n\n\n      function encodeHTMLEntity(html) {\n        var entities = {\n          '\"': 'quot',\n          '&': 'amp',\n          '<': 'lt',\n          '>': 'gt',\n          '\\'': '#39'\n        };\n        return html.replace(/[<>&\"']/g, function (m0) {\n          return entities[m0] ? '&' + entities[m0] + ';' : m0;\n        });\n      }\n      /**\n       * Return whether the string capable to transform into plain string is in the given string or not.\n       * @param {String} string - test string\n       * @memberof tui.util\n       * @returns {boolean}\n       */\n\n\n      function hasEncodableString(string) {\n        return /[<>&\"']/.test(string);\n      }\n      /**\n       * Return duplicate charters\n       * @param {string} operandStr1 The operand string\n       * @param {string} operandStr2 The operand string\n       * @private\n       * @memberof tui.util\n       * @returns {string}\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * util.getDuplicatedChar('fe dev', 'nhn entertainment'); // 'e'\n       * util.getDuplicatedChar('fdsa', 'asdf'); // 'asdf'\n       */\n\n\n      function getDuplicatedChar(operandStr1, operandStr2) {\n        var i = 0;\n        var len = operandStr1.length;\n        var pool = {};\n        var dupl, key;\n\n        for (; i < len; i += 1) {\n          key = operandStr1.charAt(i);\n          pool[key] = 1;\n        }\n\n        for (i = 0, len = operandStr2.length; i < len; i += 1) {\n          key = operandStr2.charAt(i);\n\n          if (pool[key]) {\n            pool[key] += 1;\n          }\n        }\n\n        pool = collection.filter(pool, function (item) {\n          return item > 1;\n        });\n        pool = object.keys(pool).sort();\n        dupl = pool.join('');\n        return dupl;\n      }\n\n      module.exports = {\n        decodeHTMLEntity: decodeHTMLEntity,\n        encodeHTMLEntity: encodeHTMLEntity,\n        hasEncodableString: hasEncodableString,\n        getDuplicatedChar: getDuplicatedChar\n      };\n      /***/\n    }, function (module, exports) {\n      /**\n       * @fileoverview collections of some technic methods.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript.nhn.com>\n       */\n      'use strict';\n\n      var tricks = {};\n      var aps = Array.prototype.slice;\n      /**\n       * Creates a debounced function that delays invoking fn until after delay milliseconds has elapsed\n       * since the last time the debouced function was invoked.\n       * @param {function} fn The function to debounce.\n       * @param {number} [delay=0] The number of milliseconds to delay\n       * @memberof tui.util\n       * @returns {function} debounced function.\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * function someMethodToInvokeDebounced() {}\n       *\n       * var debounced = util.debounce(someMethodToInvokeDebounced, 300);\n       *\n       * // invoke repeatedly\n       * debounced();\n       * debounced();\n       * debounced();\n       * debounced();\n       * debounced();\n       * debounced();    // last invoke of debounced()\n       *\n       * // invoke someMethodToInvokeDebounced() after 300 milliseconds.\n       */\n\n      function debounce(fn, delay) {\n        var timer, args;\n        /* istanbul ignore next */\n\n        delay = delay || 0;\n\n        function debounced() {\n          // eslint-disable-line require-jsdoc\n          args = aps.call(arguments);\n          window.clearTimeout(timer);\n          timer = window.setTimeout(function () {\n            fn.apply(null, args);\n          }, delay);\n        }\n\n        return debounced;\n      }\n      /**\n       * return timestamp\n       * @memberof tui.util\n       * @returns {number} The number of milliseconds from Jan. 1970 00:00:00 (GMT)\n       */\n\n\n      function timestamp() {\n        return Number(new Date());\n      }\n      /**\n       * Creates a throttled function that only invokes fn at most once per every interval milliseconds.\n       *\n       * You can use this throttle short time repeatedly invoking functions. (e.g MouseMove, Resize ...)\n       *\n       * if you need reuse throttled method. you must remove slugs (e.g. flag variable) related with throttling.\n       * @param {function} fn function to throttle\n       * @param {number} [interval=0] the number of milliseconds to throttle invocations to.\n       * @memberof tui.util\n       * @returns {function} throttled function\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * function someMethodToInvokeThrottled() {}\n       *\n       * var throttled = util.throttle(someMethodToInvokeThrottled, 300);\n       *\n       * // invoke repeatedly\n       * throttled();    // invoke (leading)\n       * throttled();\n       * throttled();    // invoke (near 300 milliseconds)\n       * throttled();\n       * throttled();\n       * throttled();    // invoke (near 600 milliseconds)\n       * // ...\n       * // invoke (trailing)\n       *\n       * // if you need reuse throttled method. then invoke reset()\n       * throttled.reset();\n       */\n\n\n      function throttle(fn, interval) {\n        var base;\n        var isLeading = true;\n\n        var tick = function (_args) {\n          fn.apply(null, _args);\n          base = null;\n        };\n\n        var debounced, stamp, args;\n        /* istanbul ignore next */\n\n        interval = interval || 0;\n        debounced = tricks.debounce(tick, interval);\n\n        function throttled() {\n          // eslint-disable-line require-jsdoc\n          args = aps.call(arguments);\n\n          if (isLeading) {\n            tick(args);\n            isLeading = false;\n            return;\n          }\n\n          stamp = tricks.timestamp();\n          base = base || stamp; // pass array directly because `debounce()`, `tick()` are already use\n          // `apply()` method to invoke developer's `fn` handler.\n          //\n          // also, this `debounced` line invoked every time for implements\n          // `trailing` features.\n\n          debounced(args);\n\n          if (stamp - base >= interval) {\n            tick(args);\n          }\n        }\n\n        function reset() {\n          // eslint-disable-line require-jsdoc\n          isLeading = true;\n          base = null;\n        }\n\n        throttled.reset = reset;\n        return throttled;\n      }\n\n      tricks.timestamp = timestamp;\n      tricks.debounce = debounce;\n      tricks.throttle = throttle;\n      module.exports = tricks;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some functions for handling object as collection.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var object = __webpack_require__(1);\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n\n      var ms7days = 7 * 24 * 60 * 60 * 1000;\n      /**\n       * Check if the date has passed 7 days\n       * @param {number} date - milliseconds\n       * @returns {boolean}\n       * @ignore\n       */\n\n      function isExpired(date) {\n        var now = new Date().getTime();\n        return now - date > ms7days;\n      }\n      /**\n       * Send hostname on DOMContentLoaded.\n       * To prevent hostname set tui.usageStatistics to false.\n       * @param {string} appName - application name\n       * @param {string} trackingId - GA tracking ID\n       * @ignore\n       */\n\n\n      function sendHostname(appName, trackingId) {\n        var url = 'https://www.google-analytics.com/collect';\n        var hostname = location.hostname;\n        var hitType = 'event';\n        var eventCategory = 'use';\n        var applicationKeyForStorage = 'TOAST UI ' + appName + ' for ' + hostname + ': Statistics';\n        var date = window.localStorage.getItem(applicationKeyForStorage); // skip if the flag is defined and is set to false explicitly\n\n        if (!type.isUndefined(window.tui) && window.tui.usageStatistics === false) {\n          return;\n        } // skip if not pass seven days old\n\n\n        if (date && !isExpired(date)) {\n          return;\n        }\n\n        window.localStorage.setItem(applicationKeyForStorage, new Date().getTime());\n        setTimeout(function () {\n          if (document.readyState === 'interactive' || document.readyState === 'complete') {\n            imagePing(url, {\n              v: 1,\n              t: hitType,\n              tid: trackingId,\n              cid: hostname,\n              dp: hostname,\n              dh: appName,\n              el: appName,\n              ec: eventCategory\n            });\n          }\n        }, 1000);\n      }\n      /**\n       * Request image ping.\n       * @param {String} url url for ping request\n       * @param {Object} trackingInfo infos for make query string\n       * @returns {HTMLElement}\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * util.imagePing('https://www.google-analytics.com/collect', {\n       *     v: 1,\n       *     t: 'event',\n       *     tid: 'trackingid',\n       *     cid: 'cid',\n       *     dp: 'dp',\n       *     dh: 'dh'\n       * });\n       */\n\n\n      function imagePing(url, trackingInfo) {\n        var queryString = collection.map(object.keys(trackingInfo), function (key, index) {\n          var startWith = index === 0 ? '' : '&';\n          return startWith + key + '=' + trackingInfo[key];\n        }).join('');\n        var trackingElement = document.createElement('img');\n        trackingElement.src = url + '?' + queryString;\n        trackingElement.style.display = 'none';\n        document.body.appendChild(trackingElement);\n        document.body.removeChild(trackingElement);\n        return trackingElement;\n      }\n\n      module.exports = {\n        imagePing: imagePing,\n        sendHostname: sendHostname\n      };\n      /***/\n    }, function (module, exports) {\n      /**\n       * @fileoverview This module detects the kind of well-known browser and version.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n      /**\n       * This object has an information that indicate the kind of browser.<br>\n       * The list below is a detectable browser list.\n       *  - ie8 ~ ie11\n       *  - chrome\n       *  - firefox\n       *  - safari\n       *  - edge\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * util.browser.chrome === true; // chrome\n       * util.browser.firefox === true; // firefox\n       * util.browser.safari === true; // safari\n       * util.browser.msie === true; // IE\n       * util.browser.edge === true; // edge\n       * util.browser.others === true; // other browser\n       * util.browser.version; // browser version\n       */\n\n      var browser = {\n        chrome: false,\n        firefox: false,\n        safari: false,\n        msie: false,\n        edge: false,\n        others: false,\n        version: 0\n      };\n\n      if (window && window.navigator) {\n        detectBrowser();\n      }\n      /**\n       * Detect the browser.\n       * @private\n       */\n\n\n      function detectBrowser() {\n        var nav = window.navigator;\n        var appName = nav.appName.replace(/\\s/g, '_');\n        var userAgent = nav.userAgent;\n        var rIE = /MSIE\\s([0-9]+[.0-9]*)/;\n        var rIE11 = /Trident.*rv:11\\./;\n        var rEdge = /Edge\\/(\\d+)\\./;\n        var versionRegex = {\n          firefox: /Firefox\\/(\\d+)\\./,\n          chrome: /Chrome\\/(\\d+)\\./,\n          safari: /Version\\/([\\d.]+).*Safari\\/(\\d+)/\n        };\n        var key, tmp;\n        var detector = {\n          Microsoft_Internet_Explorer: function () {\n            // eslint-disable-line camelcase\n            var detectedVersion = userAgent.match(rIE);\n\n            if (detectedVersion) {\n              // ie8 ~ ie10\n              browser.msie = true;\n              browser.version = parseFloat(detectedVersion[1]);\n            } else {\n              // no version information\n              browser.others = true;\n            }\n          },\n          Netscape: function () {\n            // eslint-disable-line complexity\n            var detected = false;\n\n            if (rIE11.exec(userAgent)) {\n              browser.msie = true;\n              browser.version = 11;\n              detected = true;\n            } else if (rEdge.exec(userAgent)) {\n              browser.edge = true;\n              browser.version = userAgent.match(rEdge)[1];\n              detected = true;\n            } else {\n              for (key in versionRegex) {\n                if (versionRegex.hasOwnProperty(key)) {\n                  tmp = userAgent.match(versionRegex[key]);\n\n                  if (tmp && tmp.length > 1) {\n                    // eslint-disable-line max-depth\n                    browser[key] = detected = true;\n                    browser.version = parseFloat(tmp[1] || 0);\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (!detected) {\n              browser.others = true;\n            }\n          }\n        };\n        var fn = detector[appName];\n\n        if (fn) {\n          detector[appName]();\n        }\n      }\n\n      module.exports = browser;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has some methods for handling popup-window\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n\n      var func = __webpack_require__(5);\n\n      var browser = __webpack_require__(10);\n\n      var object = __webpack_require__(1);\n\n      var popupId = 0;\n      /**\n       * Popup management class\n       * @constructor\n       * @memberof tui.util\n       * @example\n       * // node, commonjs\n       * var popup = require('tui-code-snippet').popup;\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var popup = tui.util.popup;\n       * <script>\n       */\n\n      function Popup() {\n        /**\n         * Caching the window-contexts of opened popups\n         * @type {Object}\n         */\n        this.openedPopup = {};\n        /**\n         * In IE7, an error occurs when the closeWithParent property attaches to window object.<br>\n         * So, It is for saving the value of closeWithParent instead of attaching to window object.\n         * @type {Object}\n         */\n\n        this.closeWithParentPopup = {};\n        /**\n         * Post data bridge for IE11 popup\n         * @type {string}\n         */\n\n        this.postBridgeUrl = '';\n      }\n      /**********\n       * public methods\n       **********/\n\n      /**\n       * Returns a popup-list administered by current window.\n       * @param {string} [key] The key of popup.\n       * @returns {Object} popup window list object\n       */\n\n\n      Popup.prototype.getPopupList = function (key) {\n        var target;\n\n        if (type.isExisty(key)) {\n          target = this.openedPopup[key];\n        } else {\n          target = this.openedPopup;\n        }\n\n        return target;\n      };\n      /**\n       * Open popup\n       * Caution:\n       *  In IE11, when transfer data to popup by POST, must set the postBridgeUrl.\n       *\n       * @param {string} url - popup url\n       * @param {Object} options - popup options\n       *     @param {string} [options.popupName] - Key of popup window.<br>\n       *      If the key is set, when you try to open by this key, the popup of this key is focused.<br>\n       *      Or else a new popup window having this key is opened.\n       *\n       *     @param {string} [options.popupOptionStr=\"\"] - Option string of popup window<br>\n       *      It is same with the third parameter of window.open() method.<br>\n       *      See {@link http://www.w3schools.com/jsref/met_win_open.asp}\n       *\n       *     @param {boolean} [options.closeWithParent=true] - Is closed when parent window closed?\n       *\n       *     @param {boolean} [options.useReload=false] - This property indicates whether reload the popup or not.<br>\n       *      If true, the popup will be reloaded when you try to re-open the popup that has been opened.<br>\n       *      When transmit the POST-data, some browsers alert a message for confirming whether retransmit or not.\n       *\n       *     @param {string} [options.postBridgeUrl='']\n       *      Use this url to avoid a certain bug occuring when transmitting POST data to the popup in IE11.<br>\n       *      This specific buggy situation is known to happen because IE11 tries to open the requested url<br>\n       *      not in a new popup window as intended, but in a new tab.<br>\n       *      See {@link http://wiki.nhnent.com/pages/viewpage.action?pageId=240562844}\n       *\n       *     @param {string} [options.method=get]\n       *     The method of transmission when the form-data is transmitted to popup-window.\n       *\n       *     @param {Object} [options.param=null]\n       *     Using as parameters for transmission when the form-data is transmitted to popup-window.\n       */\n\n\n      Popup.prototype.openPopup = function (url, options) {\n        // eslint-disable-line complexity\n        var popup, formElement, useIEPostBridge;\n        options = object.extend({\n          popupName: 'popup_' + popupId + '_' + Number(new Date()),\n          popupOptionStr: '',\n          useReload: true,\n          closeWithParent: true,\n          method: 'get',\n          param: {}\n        }, options || {});\n        options.method = options.method.toUpperCase();\n        this.postBridgeUrl = options.postBridgeUrl || this.postBridgeUrl;\n        useIEPostBridge = options.method === 'POST' && options.param && browser.msie && browser.version === 11;\n\n        if (!type.isExisty(url)) {\n          throw new Error('Popup#open() need popup url.');\n        }\n\n        popupId += 1;\n        /*\n         * In form-data transmission\n         * 1. Create a form before opening a popup.\n         * 2. Transmit the form-data.\n         * 3. Remove the form after transmission.\n         */\n\n        if (options.param) {\n          if (options.method === 'GET') {\n            url = url + (/\\?/.test(url) ? '&' : '?') + this._parameterize(options.param);\n          } else if (options.method === 'POST') {\n            if (!useIEPostBridge) {\n              formElement = this.createForm(url, options.param, options.method, options.popupName);\n              url = 'about:blank';\n            }\n          }\n        }\n\n        popup = this.openedPopup[options.popupName];\n\n        if (!type.isExisty(popup)) {\n          this.openedPopup[options.popupName] = popup = this._open(useIEPostBridge, options.param, url, options.popupName, options.popupOptionStr);\n        } else if (popup.closed) {\n          this.openedPopup[options.popupName] = popup = this._open(useIEPostBridge, options.param, url, options.popupName, options.popupOptionStr);\n        } else {\n          if (options.useReload) {\n            popup.location.replace(url);\n          }\n\n          popup.focus();\n        }\n\n        this.closeWithParentPopup[options.popupName] = options.closeWithParent;\n\n        if (!popup || popup.closed || type.isUndefined(popup.closed)) {\n          alert('please enable popup windows for this website');\n        }\n\n        if (options.param && options.method === 'POST' && !useIEPostBridge) {\n          if (popup) {\n            formElement.submit();\n          }\n\n          if (formElement.parentNode) {\n            formElement.parentNode.removeChild(formElement);\n          }\n        }\n\n        window.onunload = func.bind(this.closeAllPopup, this);\n      };\n      /**\n       * Close the popup\n       * @param {boolean} [skipBeforeUnload] - If true, the 'window.onunload' will be null and skip unload event.\n       * @param {Window} [popup] - Window-context of popup for closing. If omit this, current window-context will be closed.\n       */\n\n\n      Popup.prototype.close = function (skipBeforeUnload, popup) {\n        var target = popup || window;\n        skipBeforeUnload = type.isExisty(skipBeforeUnload) ? skipBeforeUnload : false;\n\n        if (skipBeforeUnload) {\n          window.onunload = null;\n        }\n\n        if (!target.closed) {\n          target.opener = window.location.href;\n          target.close();\n        }\n      };\n      /**\n       * Close all the popups in current window.\n       * @param {boolean} closeWithParent - If true, popups having the closeWithParentPopup property as true will be closed.\n       */\n\n\n      Popup.prototype.closeAllPopup = function (closeWithParent) {\n        var hasArg = type.isExisty(closeWithParent);\n        collection.forEachOwnProperties(this.openedPopup, function (popup, key) {\n          if (hasArg && this.closeWithParentPopup[key] || !hasArg) {\n            this.close(false, popup);\n          }\n        }, this);\n      };\n      /**\n       * Activate(or focus) the popup of the given name.\n       * @param {string} popupName - Name of popup for activation\n       */\n\n\n      Popup.prototype.focus = function (popupName) {\n        this.getPopupList(popupName).focus();\n      };\n      /**\n       * Return an object made of parsing the query string.\n       * @returns {Object} An object having some information of the query string.\n       * @private\n       */\n\n\n      Popup.prototype.parseQuery = function () {\n        var param = {};\n        var search, pair;\n        search = window.location.search.substr(1);\n        collection.forEachArray(search.split('&'), function (part) {\n          pair = part.split('=');\n          param[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n        });\n        return param;\n      };\n      /**\n       * Create a hidden form from the given arguments and return this form.\n       * @param {string} action - URL for form transmission\n       * @param {Object} [data] - Data for form transmission\n       * @param {string} [method] - Method of transmission\n       * @param {string} [target] - Target of transmission\n       * @param {HTMLElement} [container] - Container element of form.\n       * @returns {HTMLElement} Form element\n       */\n\n\n      Popup.prototype.createForm = function (action, data, method, target, container) {\n        var form = document.createElement('form'),\n            input;\n        container = container || document.body;\n        form.method = method || 'POST';\n        form.action = action || '';\n        form.target = target || '';\n        form.style.display = 'none';\n        collection.forEachOwnProperties(data, function (value, key) {\n          input = document.createElement('input');\n          input.name = key;\n          input.type = 'hidden';\n          input.value = value;\n          form.appendChild(input);\n        });\n        container.appendChild(form);\n        return form;\n      };\n      /**********\n       * private methods\n       **********/\n\n      /**\n       * Return an query string made by parsing the given object\n       * @param {Object} obj - An object that has information for query string\n       * @returns {string} - Query string\n       * @private\n       */\n\n\n      Popup.prototype._parameterize = function (obj) {\n        var query = [];\n        collection.forEachOwnProperties(obj, function (value, key) {\n          query.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        });\n        return query.join('&');\n      };\n      /**\n       * Open popup\n       * @param {boolean} useIEPostBridge - A switch option whether to use alternative\n       *                                  of tossing POST data to the popup window in IE11\n       * @param {Object} param - A data for tossing to popup\n       * @param {string} url - Popup url\n       * @param {string} popupName - Popup name\n       * @param {string} optionStr - Setting for popup, ex) 'width=640,height=320,scrollbars=yes'\n       * @returns {Window} Window context of popup\n       * @private\n       */\n\n\n      Popup.prototype._open = function (useIEPostBridge, param, url, popupName, optionStr) {\n        var popup;\n\n        if (useIEPostBridge) {\n          popup = window.open(this.postBridgeUrl, popupName, optionStr);\n          setTimeout(function () {\n            popup.redirect(url, param);\n          }, 100);\n        } else {\n          popup = window.open(url, popupName, optionStr);\n        }\n\n        return popup;\n      };\n\n      module.exports = new Popup();\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module has a function for date format.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var type = __webpack_require__(2);\n\n      var object = __webpack_require__(1);\n\n      var tokens = /[\\\\]*YYYY|[\\\\]*YY|[\\\\]*MMMM|[\\\\]*MMM|[\\\\]*MM|[\\\\]*M|[\\\\]*DD|[\\\\]*D|[\\\\]*HH|[\\\\]*H|[\\\\]*A/gi;\n      var MONTH_STR = ['Invalid month', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      var MONTH_DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      var replaceMap = {\n        M: function (date) {\n          return Number(date.month);\n        },\n        MM: function (date) {\n          var month = date.month;\n          return Number(month) < 10 ? '0' + month : month;\n        },\n        MMM: function (date) {\n          return MONTH_STR[Number(date.month)].substr(0, 3);\n        },\n        MMMM: function (date) {\n          return MONTH_STR[Number(date.month)];\n        },\n        D: function (date) {\n          return Number(date.date);\n        },\n        d: function (date) {\n          return replaceMap.D(date); // eslint-disable-line new-cap\n        },\n        DD: function (date) {\n          var dayInMonth = date.date;\n          return Number(dayInMonth) < 10 ? '0' + dayInMonth : dayInMonth;\n        },\n        dd: function (date) {\n          return replaceMap.DD(date); // eslint-disable-line new-cap\n        },\n        YY: function (date) {\n          return Number(date.year) % 100;\n        },\n        yy: function (date) {\n          return replaceMap.YY(date); // eslint-disable-line new-cap\n        },\n        YYYY: function (date) {\n          var prefix = '20',\n              year = date.year;\n\n          if (year > 69 && year < 100) {\n            prefix = '19';\n          }\n\n          return Number(year) < 100 ? prefix + String(year) : year;\n        },\n        yyyy: function (date) {\n          return replaceMap.YYYY(date); // eslint-disable-line new-cap\n        },\n        A: function (date) {\n          return date.meridiem;\n        },\n        a: function (date) {\n          return date.meridiem;\n        },\n        hh: function (date) {\n          var hour = date.hour;\n          return Number(hour) < 10 ? '0' + hour : hour;\n        },\n        HH: function (date) {\n          return replaceMap.hh(date);\n        },\n        h: function (date) {\n          return String(Number(date.hour));\n        },\n        H: function (date) {\n          return replaceMap.h(date);\n        },\n        m: function (date) {\n          return String(Number(date.minute));\n        },\n        mm: function (date) {\n          var minute = date.minute;\n          return Number(minute) < 10 ? '0' + minute : minute;\n        }\n      };\n      /**\n       * Check whether the given variables are valid date or not.\n       * @param {number} year - Year\n       * @param {number} month - Month\n       * @param {number} date - Day in month.\n       * @returns {boolean} Is valid?\n       * @private\n       */\n\n      function isValidDate(year, month, date) {\n        // eslint-disable-line complexity\n        var isValidYear, isValidMonth, isValid, lastDayInMonth;\n        year = Number(year);\n        month = Number(month);\n        date = Number(date);\n        isValidYear = year > -1 && year < 100 || year > 1969 && year < 2070;\n        isValidMonth = month > 0 && month < 13;\n\n        if (!isValidYear || !isValidMonth) {\n          return false;\n        }\n\n        lastDayInMonth = MONTH_DAYS[month];\n\n        if (month === 2 && year % 4 === 0) {\n          if (year % 100 !== 0 || year % 400 === 0) {\n            lastDayInMonth = 29;\n          }\n        }\n\n        isValid = date > 0 && date <= lastDayInMonth;\n        return isValid;\n      }\n      /**\n       * Return a string that transformed from the given form and date.\n       * @param {string} form - Date form\n       * @param {Date|Object} date - Date object\n       * @param {{meridiemSet: {AM: string, PM: string}}} option - Option\n       * @returns {boolean|string} A transformed string or false.\n       * @memberof tui.util\n       * @example\n       *  // key             | Shorthand\n       *  // --------------- |-----------------------\n       *  // years           | YY / YYYY / yy / yyyy\n       *  // months(n)       | M / MM\n       *  // months(str)     | MMM / MMMM\n       *  // days            | D / DD / d / dd\n       *  // hours           | H / HH / h / hh\n       *  // minutes         | m / mm\n       *  // meridiem(AM,PM) | A / a\n       *\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var dateStr1 = util.formatDate('yyyy-MM-dd', {\n       *     year: 2014,\n       *     month: 12,\n       *     date: 12\n       * });\n       * alert(dateStr1); // '2014-12-12'\n       *\n       * var dateStr2 = util.formatDate('MMM DD YYYY HH:mm', {\n       *     year: 1999,\n       *     month: 9,\n       *     date: 9,\n       *     hour: 0,\n       *     minute: 2\n       * });\n       * alert(dateStr2); // 'Sep 09 1999 00:02'\n       *\n       * var dt = new Date(2010, 2, 13),\n       *     dateStr3 = util.formatDate('yyyy년 M월 dd일', dt);\n       * alert(dateStr3); // '2010년 3월 13일'\n       *\n       * var option4 = {\n       *     meridiemSet: {\n       *         AM: '오전',\n       *         PM: '오후'\n       *     }\n       * };\n       * var date4 = {year: 1999, month: 9, date: 9, hour: 13, minute: 2};\n       * var dateStr4 = util.formatDate('yyyy-MM-dd A hh:mm', date4, option4));\n       * alert(dateStr4); // '1999-09-09 오후 01:02'\n       */\n\n\n      function formatDate(form, date, option) {\n        // eslint-disable-line complexity\n        var am = object.pick(option, 'meridiemSet', 'AM') || 'AM';\n        var pm = object.pick(option, 'meridiemSet', 'PM') || 'PM';\n        var meridiem, nDate, resultStr;\n\n        if (type.isDate(date)) {\n          nDate = {\n            year: date.getFullYear(),\n            month: date.getMonth() + 1,\n            date: date.getDate(),\n            hour: date.getHours(),\n            minute: date.getMinutes()\n          };\n        } else {\n          nDate = {\n            year: date.year,\n            month: date.month,\n            date: date.date,\n            hour: date.hour,\n            minute: date.minute\n          };\n        }\n\n        if (!isValidDate(nDate.year, nDate.month, nDate.date)) {\n          return false;\n        }\n\n        nDate.meridiem = '';\n\n        if (/([^\\\\]|^)[aA]\\b/.test(form)) {\n          meridiem = nDate.hour > 11 ? pm : am;\n\n          if (nDate.hour > 12) {\n            // See the clock system: https://en.wikipedia.org/wiki/12-hour_clock\n            nDate.hour %= 12;\n          }\n\n          if (nDate.hour === 0) {\n            nDate.hour = 12;\n          }\n\n          nDate.meridiem = meridiem;\n        }\n\n        resultStr = form.replace(tokens, function (key) {\n          if (key.indexOf('\\\\') > -1) {\n            // escape character\n            return key.replace(/\\\\/, '');\n          }\n\n          return replaceMap[key](nDate) || '';\n        });\n        return resultStr;\n      }\n\n      module.exports = formatDate;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview\n       *  This module provides a function to make a constructor\n       * that can inherit from the other constructors like the CLASS easily.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var inherit = __webpack_require__(6).inherit;\n\n      var extend = __webpack_require__(1).extend;\n      /**\n       * Help a constructor to be defined and to inherit from the other constructors\n       * @param {*} [parent] Parent constructor\n       * @param {Object} props Members of constructor\n       *  @param {Function} props.init Initialization method\n       *  @param {Object} [props.static] Static members of constructor\n       * @returns {*} Constructor\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var Parent = util.defineClass({\n       *     init: function() { // constuructor\n       *         this.name = 'made by def';\n       *     },\n       *     method: function() {\n       *         // ...\n       *     },\n       *     static: {\n       *         staticMethod: function() {\n       *              // ...\n       *         }\n       *     }\n       * });\n       *\n       * var Child = util.defineClass(Parent, {\n       *     childMethod: function() {}\n       * });\n       *\n       * Parent.staticMethod();\n       *\n       * var parentInstance = new Parent();\n       * console.log(parentInstance.name); //made by def\n       * parentInstance.staticMethod(); // Error\n       *\n       * var childInstance = new Child();\n       * childInstance.method();\n       * childInstance.childMethod();\n       */\n\n\n      function defineClass(parent, props) {\n        var obj;\n\n        if (!props) {\n          props = parent;\n          parent = null;\n        }\n\n        obj = props.init || function () {};\n\n        if (parent) {\n          inherit(obj, parent);\n        }\n\n        if (props.hasOwnProperty('static')) {\n          extend(obj, props['static']);\n          delete props['static'];\n        }\n\n        extend(obj.prototype, props);\n        return obj;\n      }\n\n      module.exports = defineClass;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview Define module\n       * @author NHN.\n       *         FE Development Lab <dl_javscript@nhn.com>\n       * @dependency type.js, defineNamespace.js\n       */\n      'use strict';\n\n      var defineNamespace = __webpack_require__(15);\n\n      var type = __webpack_require__(2);\n\n      var INITIALIZATION_METHOD_NAME = 'initialize';\n      /**\n       * Define module\n       * @param {string} namespace - Namespace of module\n       * @param {Object} moduleDefinition - Object literal for module\n       * @returns {Object} Defined module\n       * @memberof tui.util\n       * @example\n        * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var myModule = util.defineModule('modules.myModule', {\n       *     name: 'john',\n       *     message: '',\n       *     initialize: function() {\n       *        this.message = 'hello world';\n       *     },\n       *     getMessage: function() {\n       *         return this.name + ': ' + this.message\n       *     }\n       * });\n       *\n       * console.log(myModule.getMessage());  // 'john: hello world';\n       */\n\n      function defineModule(namespace, moduleDefinition) {\n        var base = moduleDefinition || {};\n\n        if (type.isFunction(base[INITIALIZATION_METHOD_NAME])) {\n          base[INITIALIZATION_METHOD_NAME]();\n        }\n\n        return defineNamespace(namespace, base);\n      }\n\n      module.exports = defineModule;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview Define namespace\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       * @dependency object.js, collection.js\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var object = __webpack_require__(1);\n      /**\n       * Define namespace\n       * @param {string} namespace - Namespace (ex- 'foo.bar.baz')\n       * @param {(object|function)} props - A set of modules or one module\n       * @param {boolean} [isOverride] - Override the props to the namespace.<br>\n       *                                  (It removes previous properties of this namespace)\n       * @returns {(object|function)} Defined namespace\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var util = require('tui-code-snippet'); // node, commonjs\n       * var util = tui.util; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var neComp = util.defineNamespace;\n       * neComp.listMenu = defineClass({\n       *     init: function() {\n       *         // ...\n       *     }\n       * });\n       */\n\n\n      function defineNamespace(namespace, props, isOverride) {\n        var names, result, prevLast, last;\n        names = namespace.split('.');\n        names.unshift(window);\n        result = collection.reduce(names, function (obj, name) {\n          obj[name] = obj[name] || {};\n          return obj[name];\n        });\n\n        if (isOverride) {\n          last = names.pop();\n          prevLast = object.pick.apply(null, names);\n          result = prevLast[last] = props;\n        } else {\n          object.extend(result, props);\n        }\n\n        return result;\n      }\n\n      module.exports = defineNamespace;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview\n       *  This module provides some functions for custom events.<br>\n       *  And it is implemented in the observer design pattern.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n\n      var object = __webpack_require__(1);\n\n      var R_EVENTNAME_SPLIT = /\\s+/g;\n      /**\n       * A unit of event handler item.\n       * @ignore\n       * @typedef {object} HandlerItem\n       * @property {function} fn - event handler\n       * @property {object} ctx - context of event handler\n       */\n\n      /**\n       * @class\n       * @memberof tui.util\n       * @example\n       * // node, commonjs\n       * var CustomEvents = require('tui-code-snippet').CustomEvents;\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var CustomEvents = tui.util.CustomEvents;\n       * </script>\n       */\n\n      function CustomEvents() {\n        /**\n         * @type {HandlerItem[]}\n         */\n        this.events = null;\n        /**\n         * only for checking specific context event was binded\n         * @type {object[]}\n         */\n\n        this.contexts = null;\n      }\n      /**\n       * Mixin custom events feature to specific constructor\n       * @param {function} func - constructor\n       * @example\n       * //-- #1. Get Module --//\n       * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs\n       * var CustomEvents = tui.util.CustomEvents; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var model;\n       * function Model() {\n       *     this.name = '';\n       * }\n       * CustomEvents.mixin(Model);\n       *\n       * model = new Model();\n       * model.on('change', function() { this.name = 'model'; }, this);\n       * model.fire('change');\n       * alert(model.name); // 'model';\n       */\n\n\n      CustomEvents.mixin = function (func) {\n        object.extend(func.prototype, CustomEvents.prototype);\n      };\n      /**\n       * Get HandlerItem object\n       * @param {function} handler - handler function\n       * @param {object} [context] - context for handler\n       * @returns {HandlerItem} HandlerItem object\n       * @private\n       */\n\n\n      CustomEvents.prototype._getHandlerItem = function (handler, context) {\n        var item = {\n          handler: handler\n        };\n\n        if (context) {\n          item.context = context;\n        }\n\n        return item;\n      };\n      /**\n       * Get event object safely\n       * @param {string} [eventName] - create sub event map if not exist.\n       * @returns {(object|array)} event object. if you supplied `eventName`\n       *  parameter then make new array and return it\n       * @private\n       */\n\n\n      CustomEvents.prototype._safeEvent = function (eventName) {\n        var events = this.events;\n        var byName;\n\n        if (!events) {\n          events = this.events = {};\n        }\n\n        if (eventName) {\n          byName = events[eventName];\n\n          if (!byName) {\n            byName = [];\n            events[eventName] = byName;\n          }\n\n          events = byName;\n        }\n\n        return events;\n      };\n      /**\n       * Get context array safely\n       * @returns {array} context array\n       * @private\n       */\n\n\n      CustomEvents.prototype._safeContext = function () {\n        var context = this.contexts;\n\n        if (!context) {\n          context = this.contexts = [];\n        }\n\n        return context;\n      };\n      /**\n       * Get index of context\n       * @param {object} ctx - context that used for bind custom event\n       * @returns {number} index of context\n       * @private\n       */\n\n\n      CustomEvents.prototype._indexOfContext = function (ctx) {\n        var context = this._safeContext();\n\n        var index = 0;\n\n        while (context[index]) {\n          if (ctx === context[index][0]) {\n            return index;\n          }\n\n          index += 1;\n        }\n\n        return -1;\n      };\n      /**\n       * Memorize supplied context for recognize supplied object is context or\n       *  name: handler pair object when off()\n       * @param {object} ctx - context object to memorize\n       * @private\n       */\n\n\n      CustomEvents.prototype._memorizeContext = function (ctx) {\n        var context, index;\n\n        if (!type.isExisty(ctx)) {\n          return;\n        }\n\n        context = this._safeContext();\n        index = this._indexOfContext(ctx);\n\n        if (index > -1) {\n          context[index][1] += 1;\n        } else {\n          context.push([ctx, 1]);\n        }\n      };\n      /**\n       * Forget supplied context object\n       * @param {object} ctx - context object to forget\n       * @private\n       */\n\n\n      CustomEvents.prototype._forgetContext = function (ctx) {\n        var context, contextIndex;\n\n        if (!type.isExisty(ctx)) {\n          return;\n        }\n\n        context = this._safeContext();\n        contextIndex = this._indexOfContext(ctx);\n\n        if (contextIndex > -1) {\n          context[contextIndex][1] -= 1;\n\n          if (context[contextIndex][1] <= 0) {\n            context.splice(contextIndex, 1);\n          }\n        }\n      };\n      /**\n       * Bind event handler\n       * @param {(string|{name:string, handler:function})} eventName - custom\n       *  event name or an object {eventName: handler}\n       * @param {(function|object)} [handler] - handler function or context\n       * @param {object} [context] - context for binding\n       * @private\n       */\n\n\n      CustomEvents.prototype._bindEvent = function (eventName, handler, context) {\n        var events = this._safeEvent(eventName);\n\n        this._memorizeContext(context);\n\n        events.push(this._getHandlerItem(handler, context));\n      };\n      /**\n       * Bind event handlers\n       * @param {(string|{name:string, handler:function})} eventName - custom\n       *  event name or an object {eventName: handler}\n       * @param {(function|object)} [handler] - handler function or context\n       * @param {object} [context] - context for binding\n       * //-- #1. Get Module --//\n       * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs\n       * var CustomEvents = tui.util.CustomEvents; // distribution file\n       *\n       * //-- #2. Use property --//\n       * // # 2.1 Basic Usage\n       * CustomEvents.on('onload', handler);\n       *\n       * // # 2.2 With context\n       * CustomEvents.on('onload', handler, myObj);\n       *\n       * // # 2.3 Bind by object that name, handler pairs\n       * CustomEvents.on({\n       *     'play': handler,\n       *     'pause': handler2\n       * });\n       *\n       * // # 2.4 Bind by object that name, handler pairs with context object\n       * CustomEvents.on({\n       *     'play': handler\n       * }, myObj);\n       */\n\n\n      CustomEvents.prototype.on = function (eventName, handler, context) {\n        var self = this;\n\n        if (type.isString(eventName)) {\n          // [syntax 1, 2]\n          eventName = eventName.split(R_EVENTNAME_SPLIT);\n          collection.forEach(eventName, function (name) {\n            self._bindEvent(name, handler, context);\n          });\n        } else if (type.isObject(eventName)) {\n          // [syntax 3, 4]\n          context = handler;\n          collection.forEach(eventName, function (func, name) {\n            self.on(name, func, context);\n          });\n        }\n      };\n      /**\n       * Bind one-shot event handlers\n       * @param {(string|{name:string,handler:function})} eventName - custom\n       *  event name or an object {eventName: handler}\n       * @param {function|object} [handler] - handler function or context\n       * @param {object} [context] - context for binding\n       */\n\n\n      CustomEvents.prototype.once = function (eventName, handler, context) {\n        var self = this;\n\n        if (type.isObject(eventName)) {\n          context = handler;\n          collection.forEach(eventName, function (func, name) {\n            self.once(name, func, context);\n          });\n          return;\n        }\n\n        function onceHandler() {\n          // eslint-disable-line require-jsdoc\n          handler.apply(context, arguments);\n          self.off(eventName, onceHandler, context);\n        }\n\n        this.on(eventName, onceHandler, context);\n      };\n      /**\n       * Splice supplied array by callback result\n       * @param {array} arr - array to splice\n       * @param {function} predicate - function return boolean\n       * @private\n       */\n\n\n      CustomEvents.prototype._spliceMatches = function (arr, predicate) {\n        var i = 0;\n        var len;\n\n        if (!type.isArray(arr)) {\n          return;\n        }\n\n        for (len = arr.length; i < len; i += 1) {\n          if (predicate(arr[i]) === true) {\n            arr.splice(i, 1);\n            len -= 1;\n            i -= 1;\n          }\n        }\n      };\n      /**\n       * Get matcher for unbind specific handler events\n       * @param {function} handler - handler function\n       * @returns {function} handler matcher\n       * @private\n       */\n\n\n      CustomEvents.prototype._matchHandler = function (handler) {\n        var self = this;\n        return function (item) {\n          var needRemove = handler === item.handler;\n\n          if (needRemove) {\n            self._forgetContext(item.context);\n          }\n\n          return needRemove;\n        };\n      };\n      /**\n       * Get matcher for unbind specific context events\n       * @param {object} context - context\n       * @returns {function} object matcher\n       * @private\n       */\n\n\n      CustomEvents.prototype._matchContext = function (context) {\n        var self = this;\n        return function (item) {\n          var needRemove = context === item.context;\n\n          if (needRemove) {\n            self._forgetContext(item.context);\n          }\n\n          return needRemove;\n        };\n      };\n      /**\n       * Get matcher for unbind specific hander, context pair events\n       * @param {function} handler - handler function\n       * @param {object} context - context\n       * @returns {function} handler, context matcher\n       * @private\n       */\n\n\n      CustomEvents.prototype._matchHandlerAndContext = function (handler, context) {\n        var self = this;\n        return function (item) {\n          var matchHandler = handler === item.handler;\n          var matchContext = context === item.context;\n          var needRemove = matchHandler && matchContext;\n\n          if (needRemove) {\n            self._forgetContext(item.context);\n          }\n\n          return needRemove;\n        };\n      };\n      /**\n       * Unbind event by event name\n       * @param {string} eventName - custom event name to unbind\n       * @param {function} [handler] - handler function\n       * @private\n       */\n\n\n      CustomEvents.prototype._offByEventName = function (eventName, handler) {\n        var self = this;\n        var forEach = collection.forEachArray;\n        var andByHandler = type.isFunction(handler);\n\n        var matchHandler = self._matchHandler(handler);\n\n        eventName = eventName.split(R_EVENTNAME_SPLIT);\n        forEach(eventName, function (name) {\n          var handlerItems = self._safeEvent(name);\n\n          if (andByHandler) {\n            self._spliceMatches(handlerItems, matchHandler);\n          } else {\n            forEach(handlerItems, function (item) {\n              self._forgetContext(item.context);\n            });\n            self.events[name] = [];\n          }\n        });\n      };\n      /**\n       * Unbind event by handler function\n       * @param {function} handler - handler function\n       * @private\n       */\n\n\n      CustomEvents.prototype._offByHandler = function (handler) {\n        var self = this;\n\n        var matchHandler = this._matchHandler(handler);\n\n        collection.forEach(this._safeEvent(), function (handlerItems) {\n          self._spliceMatches(handlerItems, matchHandler);\n        });\n      };\n      /**\n       * Unbind event by object(name: handler pair object or context object)\n       * @param {object} obj - context or {name: handler} pair object\n       * @param {function} handler - handler function\n       * @private\n       */\n\n\n      CustomEvents.prototype._offByObject = function (obj, handler) {\n        var self = this;\n        var matchFunc;\n\n        if (this._indexOfContext(obj) < 0) {\n          collection.forEach(obj, function (func, name) {\n            self.off(name, func);\n          });\n        } else if (type.isString(handler)) {\n          matchFunc = this._matchContext(obj);\n\n          self._spliceMatches(this._safeEvent(handler), matchFunc);\n        } else if (type.isFunction(handler)) {\n          matchFunc = this._matchHandlerAndContext(handler, obj);\n          collection.forEach(this._safeEvent(), function (handlerItems) {\n            self._spliceMatches(handlerItems, matchFunc);\n          });\n        } else {\n          matchFunc = this._matchContext(obj);\n          collection.forEach(this._safeEvent(), function (handlerItems) {\n            self._spliceMatches(handlerItems, matchFunc);\n          });\n        }\n      };\n      /**\n       * Unbind custom events\n       * @param {(string|object|function)} eventName - event name or context or\n       *  {name: handler} pair object or handler function\n       * @param {(function)} handler - handler function\n       * @example\n       * //-- #1. Get Module --//\n       * var CustomEvents = require('tui-code-snippet').CustomEvents; // node, commonjs\n       * var CustomEvents = tui.util.CustomEvents; // distribution file\n       *\n       * //-- #2. Use property --//\n       * // # 2.1 off by event name\n       * CustomEvents.off('onload');\n       *\n       * // # 2.2 off by event name and handler\n       * CustomEvents.off('play', handler);\n       *\n       * // # 2.3 off by handler\n       * CustomEvents.off(handler);\n       *\n       * // # 2.4 off by context\n       * CustomEvents.off(myObj);\n       *\n       * // # 2.5 off by context and handler\n       * CustomEvents.off(myObj, handler);\n       *\n       * // # 2.6 off by context and event name\n       * CustomEvents.off(myObj, 'onload');\n       *\n       * // # 2.7 off by an Object.<string, function> that is {eventName: handler}\n       * CustomEvents.off({\n       *   'play': handler,\n       *   'pause': handler2\n       * });\n       *\n       * // # 2.8 off the all events\n       * CustomEvents.off();\n       */\n\n\n      CustomEvents.prototype.off = function (eventName, handler) {\n        if (type.isString(eventName)) {\n          // [syntax 1, 2]\n          this._offByEventName(eventName, handler);\n        } else if (!arguments.length) {\n          // [syntax 8]\n          this.events = {};\n          this.contexts = [];\n        } else if (type.isFunction(eventName)) {\n          // [syntax 3]\n          this._offByHandler(eventName);\n        } else if (type.isObject(eventName)) {\n          // [syntax 4, 5, 6]\n          this._offByObject(eventName, handler);\n        }\n      };\n      /**\n       * Fire custom event\n       * @param {string} eventName - name of custom event\n       */\n\n\n      CustomEvents.prototype.fire = function (eventName) {\n        // eslint-disable-line\n        this.invoke.apply(this, arguments);\n      };\n      /**\n       * Fire a event and returns the result of operation 'boolean AND' with all\n       *  listener's results.\n       *\n       * So, It is different from {@link CustomEvents#fire}.\n       *\n       * In service code, use this as a before event in component level usually\n       *  for notifying that the event is cancelable.\n       * @param {string} eventName - Custom event name\n       * @param {...*} data - Data for event\n       * @returns {boolean} The result of operation 'boolean AND'\n       * @example\n       * var map = new Map();\n       * map.on({\n       *     'beforeZoom': function() {\n       *         // It should cancel the 'zoom' event by some conditions.\n       *         if (that.disabled && this.getState()) {\n       *             return false;\n       *         }\n       *         return true;\n       *     }\n       * });\n       *\n       * if (this.invoke('beforeZoom')) {    // check the result of 'beforeZoom'\n       *     // if true,\n       *     // doSomething\n       * }\n       */\n\n\n      CustomEvents.prototype.invoke = function (eventName) {\n        var events, args, index, item;\n\n        if (!this.hasListener(eventName)) {\n          return true;\n        }\n\n        events = this._safeEvent(eventName);\n        args = Array.prototype.slice.call(arguments, 1);\n        index = 0;\n\n        while (events[index]) {\n          item = events[index];\n\n          if (item.handler.apply(item.context, args) === false) {\n            return false;\n          }\n\n          index += 1;\n        }\n\n        return true;\n      };\n      /**\n       * Return whether at least one of the handlers is registered in the given\n       *  event name.\n       * @param {string} eventName - Custom event name\n       * @returns {boolean} Is there at least one handler in event name?\n       */\n\n\n      CustomEvents.prototype.hasListener = function (eventName) {\n        return this.getListenerLength(eventName) > 0;\n      };\n      /**\n       * Return a count of events registered.\n       * @param {string} eventName - Custom event name\n       * @returns {number} number of event\n       */\n\n\n      CustomEvents.prototype.getListenerLength = function (eventName) {\n        var events = this._safeEvent(eventName);\n\n        return events.length;\n      };\n\n      module.exports = CustomEvents;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module provides a Enum Constructor.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       * @example\n       * // node, commonjs\n       * var Enum = require('tui-code-snippet').Enum;\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var Enum = tui.util.Enum;\n       * <script>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n      /**\n       * Check whether the defineProperty() method is supported.\n       * @type {boolean}\n       * @ignore\n       */\n\n\n      var isSupportDefinedProperty = function () {\n        try {\n          Object.defineProperty({}, 'x', {});\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }();\n      /**\n       * A unique value of a constant.\n       * @type {number}\n       * @ignore\n       */\n\n\n      var enumValue = 0;\n      /**\n       * Make a constant-list that has unique values.<br>\n       * In modern browsers (except IE8 and lower),<br>\n       *  a value defined once can not be changed.\n       *\n       * @param {...string|string[]} itemList Constant-list (An array of string is available)\n       * @class\n       * @memberof tui.util\n       * @example\n       * //-- #1. Get Module --//\n       * var Enum = require('tui-code-snippet').Enum; // node, commonjs\n       * var Enum = tui.util.Enum; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var MYENUM = new Enum('TYPE1', 'TYPE2');\n       * var MYENUM2 = new Enum(['TYPE1', 'TYPE2']);\n       *\n       * //usage\n       * if (value === MYENUM.TYPE1) {\n       *      ....\n       * }\n       *\n       * //add (If a duplicate name is inputted, will be disregarded.)\n       * MYENUM.set('TYPE3', 'TYPE4');\n       *\n       * //get name of a constant by a value\n       * MYENUM.getName(MYENUM.TYPE1); // 'TYPE1'\n       *\n       * // In modern browsers (except IE8 and lower), a value can not be changed in constants.\n       * var originalValue = MYENUM.TYPE1;\n       * MYENUM.TYPE1 = 1234; // maybe TypeError\n       * MYENUM.TYPE1 === originalValue; // true\n       **/\n\n      function Enum(itemList) {\n        if (itemList) {\n          this.set.apply(this, arguments);\n        }\n      }\n      /**\n       * Define a constants-list\n       * @param {...string|string[]} itemList Constant-list (An array of string is available)\n       */\n\n\n      Enum.prototype.set = function (itemList) {\n        var self = this;\n\n        if (!type.isArray(itemList)) {\n          itemList = collection.toArray(arguments);\n        }\n\n        collection.forEach(itemList, function itemListIteratee(item) {\n          self._addItem(item);\n        });\n      };\n      /**\n       * Return a key of the constant.\n       * @param {number} value A value of the constant.\n       * @returns {string|undefined} Key of the constant.\n       */\n\n\n      Enum.prototype.getName = function (value) {\n        var self = this;\n        var foundedKey;\n        collection.forEach(this, function (itemValue, key) {\n          // eslint-disable-line consistent-return\n          if (self._isEnumItem(key) && value === itemValue) {\n            foundedKey = key;\n            return false;\n          }\n        });\n        return foundedKey;\n      };\n      /**\n       * Create a constant.\n       * @private\n       * @param {string} name Constant name. (It will be a key of a constant)\n       */\n\n\n      Enum.prototype._addItem = function (name) {\n        var value;\n\n        if (!this.hasOwnProperty(name)) {\n          value = this._makeEnumValue();\n\n          if (isSupportDefinedProperty) {\n            Object.defineProperty(this, name, {\n              enumerable: true,\n              configurable: false,\n              writable: false,\n              value: value\n            });\n          } else {\n            this[name] = value;\n          }\n        }\n      };\n      /**\n       * Return a unique value for assigning to a constant.\n       * @private\n       * @returns {number} A unique value\n       */\n\n\n      Enum.prototype._makeEnumValue = function () {\n        var value;\n        value = enumValue;\n        enumValue += 1;\n        return value;\n      };\n      /**\n       * Return whether a constant from the given key is in instance or not.\n       * @param {string} key - A constant key\n       * @returns {boolean} Result\n       * @private\n       */\n\n\n      Enum.prototype._isEnumItem = function (key) {\n        return type.isNumber(this[key]);\n      };\n\n      module.exports = Enum;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview\n       *  Implements the ExMap (Extended Map) object.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var Map = __webpack_require__(19); // Caching tui.util for performance enhancing\n\n\n      var mapAPIsForRead = ['get', 'has', 'forEach', 'keys', 'values', 'entries'];\n      var mapAPIsForDelete = ['delete', 'clear'];\n      /**\n       * The ExMap object is Extended Version of the tui.util.Map object.<br>\n       * and added some useful feature to make it easy to manage the Map object.\n       * @constructor\n       * @param {Array} initData - Array of key-value pairs (2-element Arrays).\n       *      Each key-value pair will be added to the new Map\n       * @memberof tui.util\n       * @example\n       * // node, commonjs\n       * var ExMap = require('tui-code-snippet').ExMap;\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var ExMap = tui.util.ExMap;\n       * <script>\n       */\n\n      function ExMap(initData) {\n        this._map = new Map(initData);\n        this.size = this._map.size;\n      }\n\n      collection.forEachArray(mapAPIsForRead, function (name) {\n        ExMap.prototype[name] = function () {\n          return this._map[name].apply(this._map, arguments);\n        };\n      });\n      collection.forEachArray(mapAPIsForDelete, function (name) {\n        ExMap.prototype[name] = function () {\n          var result = this._map[name].apply(this._map, arguments);\n\n          this.size = this._map.size;\n          return result;\n        };\n      });\n\n      ExMap.prototype.set = function () {\n        this._map.set.apply(this._map, arguments);\n\n        this.size = this._map.size;\n        return this;\n      };\n      /**\n       * Sets all of the key-value pairs in the specified object to the Map object.\n       * @param  {Object} object - Plain object that has a key-value pair\n       */\n\n\n      ExMap.prototype.setObject = function (object) {\n        collection.forEachOwnProperties(object, function (value, key) {\n          this.set(key, value);\n        }, this);\n      };\n      /**\n       * Removes the elements associated with keys in the specified array.\n       * @param  {Array} keys - Array that contains keys of the element to remove\n       */\n\n\n      ExMap.prototype.deleteByKeys = function (keys) {\n        collection.forEachArray(keys, function (key) {\n          this['delete'](key);\n        }, this);\n      };\n      /**\n       * Sets all of the key-value pairs in the specified Map object to this Map object.\n       * @param  {Map} map - Map object to be merged into this Map object\n       */\n\n\n      ExMap.prototype.merge = function (map) {\n        map.forEach(function (value, key) {\n          this.set(key, value);\n        }, this);\n      };\n      /**\n       * Looks through each key-value pair in the map and returns the new ExMap object of\n       * all key-value pairs that pass a truth test implemented by the provided function.\n       * @param  {function} predicate - Function to test each key-value pair of the Map object.<br>\n       *      Invoked with arguments (value, key). Return true to keep the element, false otherwise.\n       * @returns {ExMap} A new ExMap object\n       */\n\n\n      ExMap.prototype.filter = function (predicate) {\n        var filtered = new ExMap();\n        this.forEach(function (value, key) {\n          if (predicate(value, key)) {\n            filtered.set(key, value);\n          }\n        });\n        return filtered;\n      };\n\n      module.exports = ExMap;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview\n       *  Implements the Map object.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n\n      var array = __webpack_require__(3);\n\n      var browser = __webpack_require__(10);\n\n      var func = __webpack_require__(5);\n      /**\n       * Using undefined for a key can be ambiguous if there's deleted item in the array,<br>\n       * which is also undefined when accessed by index.<br>\n       * So use this unique object as an undefined key to distinguish it from deleted keys.\n       * @private\n       * @constant\n       */\n\n\n      var _KEY_FOR_UNDEFINED = {};\n      /**\n       * For using NaN as a key, use this unique object as a NaN key.<br>\n       * This makes it easier and faster to compare an object with each keys in the array<br>\n       * through no exceptional comapring for NaN.\n       * @private\n       * @constant\n       */\n\n      var _KEY_FOR_NAN = {};\n      /**\n       * Constructor of MapIterator<br>\n       * Creates iterator object with new keyword.\n       * @constructor\n       * @param  {Array} keys - The array of keys in the map\n       * @param  {function} valueGetter - Function that returns certain value,\n       *      taking key and keyIndex as arguments.\n       * @ignore\n       */\n\n      function MapIterator(keys, valueGetter) {\n        this._keys = keys;\n        this._valueGetter = valueGetter;\n        this._length = this._keys.length;\n        this._index = -1;\n        this._done = false;\n      }\n      /**\n       * Implementation of Iterator protocol.\n       * @returns {{done: boolean, value: *}} Object that contains done(boolean) and value.\n       */\n\n\n      MapIterator.prototype.next = function () {\n        var data = {};\n\n        do {\n          this._index += 1;\n        } while (type.isUndefined(this._keys[this._index]) && this._index < this._length);\n\n        if (this._index >= this._length) {\n          data.done = true;\n        } else {\n          data.done = false;\n          data.value = this._valueGetter(this._keys[this._index], this._index);\n        }\n\n        return data;\n      };\n      /**\n       * The Map object implements the ES6 Map specification as closely as possible.<br>\n       * For using objects and primitive values as keys, this object uses array internally.<br>\n       * So if the key is not a string, get(), set(), has(), delete() will operates in O(n),<br>\n       * and it can cause performance issues with a large dataset.\n       *\n       * Features listed below are not supported. (can't be implented without native support)\n       * - Map object is iterable<br>\n       * - Iterable object can be used as an argument of constructor\n       *\n       * If the browser supports full implementation of ES6 Map specification, native Map obejct\n       * will be used internally.\n       * @class\n       * @param  {Array} initData - Array of key-value pairs (2-element Arrays).\n       *      Each key-value pair will be added to the new Map\n       * @memberof tui.util\n       * @example\n       * // node, commonjs\n       * var Map = require('tui-code-snippet').Map;\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var Map = tui.util.Map;\n       * <script>\n       */\n\n\n      function Map(initData) {\n        this._valuesForString = {};\n        this._valuesForIndex = {};\n        this._keys = [];\n\n        if (initData) {\n          this._setInitData(initData);\n        }\n\n        this.size = 0;\n      }\n      /* eslint-disable no-extend-native */\n\n      /**\n       * Add all elements in the initData to the Map object.\n       * @private\n       * @param  {Array} initData - Array of key-value pairs to add to the Map object\n       */\n\n\n      Map.prototype._setInitData = function (initData) {\n        if (!type.isArray(initData)) {\n          throw new Error('Only Array is supported.');\n        }\n\n        collection.forEachArray(initData, function (pair) {\n          this.set(pair[0], pair[1]);\n        }, this);\n      };\n      /**\n       * Returns true if the specified value is NaN.<br>\n       * For unsing NaN as a key, use this method to test equality of NaN<br>\n       * because === operator doesn't work for NaN.\n       * @private\n       * @param {*} value - Any object to be tested\n       * @returns {boolean} True if value is NaN, false otherwise.\n       */\n\n\n      Map.prototype._isNaN = function (value) {\n        return typeof value === 'number' && value !== value; // eslint-disable-line no-self-compare\n      };\n      /**\n       * Returns the index of the specified key.\n       * @private\n       * @param  {*} key - The key object to search for.\n       * @returns {number} The index of the specified key\n       */\n\n\n      Map.prototype._getKeyIndex = function (key) {\n        var result = -1;\n        var value;\n\n        if (type.isString(key)) {\n          value = this._valuesForString[key];\n\n          if (value) {\n            result = value.keyIndex;\n          }\n        } else {\n          result = array.inArray(key, this._keys);\n        }\n\n        return result;\n      };\n      /**\n       * Returns the original key of the specified key.\n       * @private\n       * @param  {*} key - key\n       * @returns {*} Original key\n       */\n\n\n      Map.prototype._getOriginKey = function (key) {\n        var originKey = key;\n\n        if (key === _KEY_FOR_UNDEFINED) {\n          originKey = undefined; // eslint-disable-line no-undefined\n        } else if (key === _KEY_FOR_NAN) {\n          originKey = NaN;\n        }\n\n        return originKey;\n      };\n      /**\n       * Returns the unique key of the specified key.\n       * @private\n       * @param  {*} key - key\n       * @returns {*} Unique key\n       */\n\n\n      Map.prototype._getUniqueKey = function (key) {\n        var uniqueKey = key;\n\n        if (type.isUndefined(key)) {\n          uniqueKey = _KEY_FOR_UNDEFINED;\n        } else if (this._isNaN(key)) {\n          uniqueKey = _KEY_FOR_NAN;\n        }\n\n        return uniqueKey;\n      };\n      /**\n       * Returns the value object of the specified key.\n       * @private\n       * @param  {*} key - The key of the value object to be returned\n       * @param  {number} keyIndex - The index of the key\n       * @returns {{keyIndex: number, origin: *}} Value object\n       */\n\n\n      Map.prototype._getValueObject = function (key, keyIndex) {\n        // eslint-disable-line consistent-return\n        if (type.isString(key)) {\n          return this._valuesForString[key];\n        }\n\n        if (type.isUndefined(keyIndex)) {\n          keyIndex = this._getKeyIndex(key);\n        }\n\n        if (keyIndex >= 0) {\n          return this._valuesForIndex[keyIndex];\n        }\n      };\n      /**\n       * Returns the original value of the specified key.\n       * @private\n       * @param  {*} key - The key of the value object to be returned\n       * @param  {number} keyIndex - The index of the key\n       * @returns {*} Original value\n       */\n\n\n      Map.prototype._getOriginValue = function (key, keyIndex) {\n        return this._getValueObject(key, keyIndex).origin;\n      };\n      /**\n       * Returns key-value pair of the specified key.\n       * @private\n       * @param  {*} key - The key of the value object to be returned\n       * @param  {number} keyIndex - The index of the key\n       * @returns {Array} Key-value Pair\n       */\n\n\n      Map.prototype._getKeyValuePair = function (key, keyIndex) {\n        return [this._getOriginKey(key), this._getOriginValue(key, keyIndex)];\n      };\n      /**\n       * Creates the wrapper object of original value that contains a key index\n       * and returns it.\n       * @private\n       * @param  {type} origin - Original value\n       * @param  {type} keyIndex - Index of the key\n       * @returns {{keyIndex: number, origin: *}} Value object\n       */\n\n\n      Map.prototype._createValueObject = function (origin, keyIndex) {\n        return {\n          keyIndex: keyIndex,\n          origin: origin\n        };\n      };\n      /**\n       * Sets the value for the key in the Map object.\n       * @param  {*} key - The key of the element to add to the Map object\n       * @param  {*} value - The value of the element to add to the Map object\n       * @returns {Map} The Map object\n       */\n\n\n      Map.prototype.set = function (key, value) {\n        var uniqueKey = this._getUniqueKey(key);\n\n        var keyIndex = this._getKeyIndex(uniqueKey);\n\n        var valueObject;\n\n        if (keyIndex < 0) {\n          keyIndex = this._keys.push(uniqueKey) - 1;\n          this.size += 1;\n        }\n\n        valueObject = this._createValueObject(value, keyIndex);\n\n        if (type.isString(key)) {\n          this._valuesForString[key] = valueObject;\n        } else {\n          this._valuesForIndex[keyIndex] = valueObject;\n        }\n\n        return this;\n      };\n      /**\n       * Returns the value associated to the key, or undefined if there is none.\n       * @param  {*} key - The key of the element to return\n       * @returns {*} Element associated with the specified key\n       */\n\n\n      Map.prototype.get = function (key) {\n        var uniqueKey = this._getUniqueKey(key);\n\n        var value = this._getValueObject(uniqueKey);\n\n        return value && value.origin;\n      };\n      /**\n       * Returns a new Iterator object that contains the keys for each element\n       * in the Map object in insertion order.\n       * @returns {Iterator} A new Iterator object\n       */\n\n\n      Map.prototype.keys = function () {\n        return new MapIterator(this._keys, func.bind(this._getOriginKey, this));\n      };\n      /**\n       * Returns a new Iterator object that contains the values for each element\n       * in the Map object in insertion order.\n       * @returns {Iterator} A new Iterator object\n       */\n\n\n      Map.prototype.values = function () {\n        return new MapIterator(this._keys, func.bind(this._getOriginValue, this));\n      };\n      /**\n       * Returns a new Iterator object that contains the [key, value] pairs\n       * for each element in the Map object in insertion order.\n       * @returns {Iterator} A new Iterator object\n       */\n\n\n      Map.prototype.entries = function () {\n        return new MapIterator(this._keys, func.bind(this._getKeyValuePair, this));\n      };\n      /**\n       * Returns a boolean asserting whether a value has been associated to the key\n       * in the Map object or not.\n       * @param  {*} key - The key of the element to test for presence\n       * @returns {boolean} True if an element with the specified key exists;\n       *          Otherwise false\n       */\n\n\n      Map.prototype.has = function (key) {\n        return !!this._getValueObject(key);\n      };\n      /**\n       * Removes the specified element from a Map object.\n       * @param {*} key - The key of the element to remove\n       * @function delete\n       * @memberof tui.util.Map.prototype\n       */\n      // cannot use reserved keyword as a property name in IE8 and under.\n\n\n      Map.prototype['delete'] = function (key) {\n        var keyIndex;\n\n        if (type.isString(key)) {\n          if (this._valuesForString[key]) {\n            keyIndex = this._valuesForString[key].keyIndex;\n            delete this._valuesForString[key];\n          }\n        } else {\n          keyIndex = this._getKeyIndex(key);\n\n          if (keyIndex >= 0) {\n            delete this._valuesForIndex[keyIndex];\n          }\n        }\n\n        if (keyIndex >= 0) {\n          delete this._keys[keyIndex];\n          this.size -= 1;\n        }\n      };\n      /**\n       * Executes a provided function once per each key/value pair in the Map object,\n       * in insertion order.\n       * @param  {function} callback - Function to execute for each element\n       * @param  {thisArg} thisArg - Value to use as this when executing callback\n       */\n\n\n      Map.prototype.forEach = function (callback, thisArg) {\n        thisArg = thisArg || this;\n        collection.forEachArray(this._keys, function (key) {\n          if (!type.isUndefined(key)) {\n            callback.call(thisArg, this._getValueObject(key).origin, key, this);\n          }\n        }, this);\n      };\n      /**\n       * Removes all elements from a Map object.\n       */\n\n\n      Map.prototype.clear = function () {\n        Map.call(this);\n      };\n      /* eslint-enable no-extend-native */\n      // Use native Map object if exists.\n      // But only latest versions of Chrome and Firefox support full implementation.\n\n\n      (function () {\n        if (window.Map && (browser.firefox && browser.version >= 37 || browser.chrome && browser.version >= 42)) {\n          Map = window.Map; // eslint-disable-line no-func-assign\n        }\n      })();\n\n      module.exports = Map;\n      /***/\n    }, function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview This module provides the HashMap constructor.\n       * @author NHN.\n       *         FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      var collection = __webpack_require__(4);\n\n      var type = __webpack_require__(2);\n      /**\n       * All the data in hashMap begin with _MAPDATAPREFIX;\n       * @type {string}\n       * @private\n       */\n\n\n      var _MAPDATAPREFIX = 'å';\n      /**\n       * HashMap can handle the key-value pairs.<br>\n       * Caution:<br>\n       *  HashMap instance has a length property but is not an instance of Array.\n       * @param {Object} [obj] A initial data for creation.\n       * @constructor\n       * @memberof tui.util\n       * @deprecated since version 1.3.0\n       * @example\n       * // node, commonjs\n       * var HashMap = require('tui-code-snippet').HashMap;\n       * var hm = new tui.util.HashMap({\n        'mydata': {\n          'hello': 'imfine'\n        },\n        'what': 'time'\n      });\n       * @example\n       * // distribution file, script\n       * <script src='path-to/tui-code-snippt.js'></script>\n       * <script>\n       * var HashMap = tui.util.HashMap;\n       * <script>\n       * var hm = new tui.util.HashMap({\n        'mydata': {\n          'hello': 'imfine'\n        },\n        'what': 'time'\n      });\n       */\n\n      function HashMap(obj) {\n        /**\n         * size\n         * @type {number}\n         */\n        this.length = 0;\n\n        if (obj) {\n          this.setObject(obj);\n        }\n      }\n      /**\n       * Set a data from the given key with value or the given object.\n       * @param {string|Object} key A string or object for key\n       * @param {*} [value] A data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.set({\n       *     'key1': 'data1',\n       *     'key2': 'data2'\n       * });\n       */\n\n\n      HashMap.prototype.set = function (key, value) {\n        if (arguments.length === 2) {\n          this.setKeyValue(key, value);\n        } else {\n          this.setObject(key);\n        }\n      };\n      /**\n       * Set a data from the given key with value.\n       * @param {string} key A string for key\n       * @param {*} value A data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.setKeyValue('key', 'value');\n       */\n\n\n      HashMap.prototype.setKeyValue = function (key, value) {\n        if (!this.has(key)) {\n          this.length += 1;\n        }\n\n        this[this.encodeKey(key)] = value;\n      };\n      /**\n       * Set a data from the given object.\n       * @param {Object} obj A object for data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.setObject({\n       *     'key1': 'data1',\n       *     'key2': 'data2'\n       * });\n       */\n\n\n      HashMap.prototype.setObject = function (obj) {\n        var self = this;\n        collection.forEachOwnProperties(obj, function (value, key) {\n          self.setKeyValue(key, value);\n        });\n      };\n      /**\n       * Merge with the given another hashMap.\n       * @param {HashMap} hashMap Another hashMap instance\n       */\n\n\n      HashMap.prototype.merge = function (hashMap) {\n        var self = this;\n        hashMap.each(function (value, key) {\n          self.setKeyValue(key, value);\n        });\n      };\n      /**\n       * Encode the given key for hashMap.\n       * @param {string} key A string for key\n       * @returns {string} A encoded key\n       * @private\n       */\n\n\n      HashMap.prototype.encodeKey = function (key) {\n        return _MAPDATAPREFIX + key;\n      };\n      /**\n       * Decode the given key in hashMap.\n       * @param {string} key A string for key\n       * @returns {string} A decoded key\n       * @private\n       */\n\n\n      HashMap.prototype.decodeKey = function (key) {\n        var decodedKey = key.split(_MAPDATAPREFIX);\n        return decodedKey[decodedKey.length - 1];\n      };\n      /**\n       * Return the value from the given key.\n       * @param {string} key A string for key\n       * @returns {*} The value from a key\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.get('key') // value\n       */\n\n\n      HashMap.prototype.get = function (key) {\n        return this[this.encodeKey(key)];\n      };\n      /**\n       * Check the existence of a value from the key.\n       * @param {string} key A string for key\n       * @returns {boolean} Indicating whether a value exists or not.\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.has('key') // true\n       */\n\n\n      HashMap.prototype.has = function (key) {\n        return this.hasOwnProperty(this.encodeKey(key));\n      };\n      /**\n       * Remove a data(key-value pairs) from the given key or the given key-list.\n       * @param {...string|string[]} key A string for key\n       * @returns {string|string[]} A removed data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.set('key2', 'value');\n       *\n       * hm.remove('key');\n       * hm.remove('key', 'key2');\n       * hm.remove(['key', 'key2']);\n       */\n\n\n      HashMap.prototype.remove = function (key) {\n        if (arguments.length > 1) {\n          key = collection.toArray(arguments);\n        }\n\n        return type.isArray(key) ? this.removeByKeyArray(key) : this.removeByKey(key);\n      };\n      /**\n       * Remove data(key-value pair) from the given key.\n       * @param {string} key A string for key\n       * @returns {*|null} A removed data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.removeByKey('key')\n       */\n\n\n      HashMap.prototype.removeByKey = function (key) {\n        var data = this.has(key) ? this.get(key) : null;\n\n        if (data !== null) {\n          delete this[this.encodeKey(key)];\n          this.length -= 1;\n        }\n\n        return data;\n      };\n      /**\n       * Remove a data(key-value pairs) from the given key-list.\n       * @param {string[]} keyArray An array of keys\n       * @returns {string[]} A removed data\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.set('key2', 'value');\n       * hm.removeByKeyArray(['key', 'key2']);\n       */\n\n\n      HashMap.prototype.removeByKeyArray = function (keyArray) {\n        var data = [];\n        var self = this;\n        collection.forEach(keyArray, function (key) {\n          data.push(self.removeByKey(key));\n        });\n        return data;\n      };\n      /**\n       * Remove all the data\n       */\n\n\n      HashMap.prototype.removeAll = function () {\n        var self = this;\n        this.each(function (value, key) {\n          self.remove(key);\n        });\n      };\n      /**\n       * Execute the provided callback once for each all the data.\n       * @param {Function} iteratee Callback function\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm = new HashMap();\n       * hm.set('key', 'value');\n       * hm.set('key2', 'value');\n       *\n       * hm.each(function(value, key) {\n       *     //do something...\n       * });\n       */\n\n\n      HashMap.prototype.each = function (iteratee) {\n        var self = this;\n        var flag;\n        collection.forEachOwnProperties(this, function (value, key) {\n          // eslint-disable-line consistent-return\n          if (key.charAt(0) === _MAPDATAPREFIX) {\n            flag = iteratee(value, self.decodeKey(key));\n          }\n\n          if (flag === false) {\n            return flag;\n          }\n        });\n      };\n      /**\n       * Return the key-list stored.\n       * @returns {Array} A key-list\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       *  var hm = new HashMap();\n       *  hm.set('key', 'value');\n       *  hm.set('key2', 'value');\n       *  hm.keys();  //['key', 'key2');\n       */\n\n\n      HashMap.prototype.keys = function () {\n        var keys = [];\n        var self = this;\n        this.each(function (value, key) {\n          keys.push(self.decodeKey(key));\n        });\n        return keys;\n      };\n      /**\n       * Work similarly to Array.prototype.map().<br>\n       * It executes the provided callback that checks conditions once for each element of hashMap,<br>\n       *  and returns a new array having elements satisfying the conditions\n       * @param {Function} condition A function that checks conditions\n       * @returns {Array} A new array having elements satisfying the conditions\n       * @example\n       * //-- #1. Get Module --//\n       * var HashMap = require('tui-code-snippet').HashMap; // node, commonjs\n       * var HashMap = tui.util.HashMap; // distribution file\n       *\n       * //-- #2. Use property --//\n       * var hm1 = new HashMap();\n       * hm1.set('key', 'value');\n       * hm1.set('key2', 'value');\n       *\n       * hm1.find(function(value, key) {\n       *     return key === 'key2';\n       * }); // ['value']\n       *\n       * var hm2 = new HashMap({\n       *     'myobj1': {\n       *         visible: true\n       *     },\n       *     'mybobj2': {\n       *         visible: false\n       *     }\n       * });\n       *\n       * hm2.find(function(obj, key) {\n       *     return obj.visible === true;\n       * }); // [{visible: true}];\n       */\n\n\n      HashMap.prototype.find = function (condition) {\n        var founds = [];\n        this.each(function (value, key) {\n          if (condition(value, key)) {\n            founds.push(value);\n          }\n        });\n        return founds;\n      };\n      /**\n       * Return a new Array having all values.\n       * @returns {Array} A new array having all values\n       */\n\n\n      HashMap.prototype.toArray = function () {\n        var result = [];\n        this.each(function (v) {\n          result.push(v);\n        });\n        return result;\n      };\n\n      module.exports = HashMap;\n      /***/\n    }])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}