{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { QrService } from './../../services/qr.service';\nimport { Meta } from '@angular/platform-browser';\nimport { ModalController, AlertController } from '@ionic/angular';\nimport ImageEditor from 'tui-image-editor';\nimport { en } from '../image-editor/en'; // Receive Parameter\n\nimport { ActivatedRoute } from '@angular/router';\nimport { dataUrlToBlob } from './utils';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/platform-browser\";\nimport * as i5 from \"./../../services/qr.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"ngx-qrcode2\";\nimport * as i8 from \"@angular/common\";\n\nconst _c0 = function () {\n  return {\n    \"display\": \"none\"\n  };\n};\n\nexport let ImageEditorPage = /*#__PURE__*/(() => {\n  class ImageEditorPage {\n    constructor(firestore, fireAuth, modalCtrl, alertCtrl, meta, qrServices, route) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.modalCtrl = modalCtrl;\n      this.alertCtrl = alertCtrl;\n      this.meta = meta;\n      this.qrServices = qrServices;\n      this.route = route;\n      this.locale_ar = en;\n      this.meta.addTag({\n        name: 'viewport',\n        content: 'width=device-width, user-scalable=no'\n      });\n      this.route.params.subscribe(params => {\n        this.imgSrc = params['imageSrc'];\n      });\n    }\n\n    ngOnInit() {\n      var locale_ar = en;\n      this.imageEditor = new ImageEditor(document.querySelector('.tui-image-editor'), {\n        usageStatistics: false,\n        includeUI: {\n          loadImage: {\n            // path: this.image,\n            path: '../../../' + this.imgSrc,\n            name: 'SampleImage'\n          },\n          // menu: ['crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],\n          menu: ['resize', 'crop', 'flip', 'rotate', 'text', 'filter'],\n          initMenu: '',\n          menuBarPosition: 'right' //locale : en\n\n        },\n        //  selectionStyle: {\n        //      cornerSize: 20,\n        //      rotatingPointOffset: 70\n        //  },\n        cssMaxWidth: document.documentElement.clientWidth,\n        cssMaxHeight: document.documentElement.clientHeight,\n        selectionStyle: {\n          cornerSize: 10,\n          rotatingPointOffset: 40\n        }\n      }); // Load sample image\n\n      this.imageEditor.loadImageFromURL('img/sampleImage.jpg', 'SampleImage').then(() => {\n        this.imageEditor.clearUndoStack();\n      }); //Font select list\n      //--------------------------------------\n      //Any installed web font from Google will work: https://fonts.google.com/\n\n      let fontArray = [\"Sakkal Majalla\", \"Akhbar MT\", \"Aldhabi\", \"Simple Indust Outline\", \"Cairo\", \"Dubai\", \"DecoType Naskh\", \"Arial\", \"Arial Black\", \"Caveat\", \"Comic Sans MS\", \"Courier New\", \"Georgia1\", \"Impact\", \"Lobster Two\", \"Lucida Console\", \"Luckiest Guy\", \"Open Sans\", \"Pacifico\", \"Palatino Linotype\", \"Press Start 2P\", \"Roboto\", \"Tahoma\", \"Tangerine\", \"Times New Roman\", \"Tourney\", \"Ultra\", \"Verdana\", \"Symbol\", \"Webdings\", \"Wingdings\"];\n      let fontSelectHTML = '<div class=\"center\">\\n <select #fontselect class=\"center form-select font-selector\">';\n\n      for (let i = 0; i < fontArray.length; i++) {\n        let selected = '';\n\n        if (i == 0) {\n          selected = 'selected';\n        }\n\n        fontSelectHTML += '<option style=\"font-family:' + fontArray[i] + ';\" value=\"' + fontArray[i] + '\" ' + selected + '>' + fontArray[i] + '</option>';\n      }\n\n      fontSelectHTML += '</select></div>\\n \\n <div></div>  <div></div>';\n      let textMenuAlign = document.querySelector('.tui-image-editor-menu-text .tie-text-align-button');\n      textMenuAlign.insertAdjacentHTML('afterbegin', fontSelectHTML);\n      document.querySelector('.font-selector').addEventListener('change', () => this.TUI_updateFontOnText(document.querySelector('.font-selector').value)); //-------------------------------------\n      //ON TUI objectActivated\n      //   Keep track of active/selected item\n\n      this.imageEditor.on('objectActivated', props => {\n        this.TUI_selectedItem = props;\n        this.TUI_updateFontSelected(props);\n        console.log('TUI_selectedItem', props);\n      });\n      var saveBtn = '<button class=\"tui-image-editor-save-btn\" >Add QR</button>'; //document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').displa.visibility = \"visible\";\n\n      document.querySelector('.tui-image-editor-header-buttons .tui-image-editor-download-btn').insertAdjacentHTML('afterend', saveBtn); //replaceWith('')\n\n      document.querySelector('.tui-image-editor-container .tui-image-editor-save-btn').addEventListener('click', e => {\n        this.presentAlertConfirm();\n      });\n    }\n    /********************************\r\n     * Update font familty on text layer\r\n    *******************************/\n\n\n    TUI_updateFontOnText(font) {\n      console.log(\"TUI_updateFontOnText\", font, this.TUI_selectedItem.id);\n\n      if (font) {\n        this.TUI_selectedFont = font;\n      }\n\n      if (font && this.TUI_selectedItem) {\n        this.imageEditor.changeTextStyle(this.TUI_selectedItem.id, {\n          fontFamily: font\n        });\n      }\n    }\n    /********************************\r\n     * Update font selected with the fontfamily of the selected layer\r\n    *******************************/\n\n\n    TUI_updateFontSelected(layer) {\n      console.log(\"TUI_updateFontSelected\", layer);\n\n      if (layer.fontFamily) {\n        document.querySelector('.font-selector').value = layer.fontFamily;\n        this.TUI_selectedFont = layer.fontFamily;\n      }\n    } //this.imageEditor.on('click', function() {\n\n\n    downloadImage() {\n      const dataURL = this.imageEditor.toDataURL();\n\n      if (window.fetch) {\n        fetch(dataURL).then(res => res.blob()).then(blob => {\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.target = '_blank';\n          link.click();\n        });\n      } else {\n        let blob = dataUrlToBlob(dataURL);\n        var link = document.createElement('a');\n        link.target = '_blank';\n        link.href = window.URL.createObjectURL(blob);\n        link.click();\n      }\n    }\n\n    presentAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let alert = yield this.alertCtrl.create({\n          header: 'تفاصيل رمز QR',\n          message: 'الرجاء ادخال تفاصيل الدعوة المطلوبة',\n          inputs: [{\n            name: 'EventName',\n            type: 'text',\n            placeholder: 'عنوان الدعوة'\n          }, {\n            name: 'AttendeesAllowed',\n            type: 'number',\n            placeholder: 'العدد المسموح'\n          }],\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            handler: data => {\n              console.log('Cancel clicked');\n            }\n          }, {\n            text: 'Register QR',\n            handler: data => {\n              console.log(data);\n\n              if (data) {\n                this.qrDetails.EventName = data['EventName'];\n                this.qrDetails.AttendeesAllowed = data['AttendeesAllowed'];\n                this.CreateCode(this.qrDetails); // logged in!\n              } else {\n                // invalid login\n                return false;\n              }\n            }\n          }]\n        });\n        yield alert.present(); // const alert = await this.alertCtrl.create({\n        // cssClass: 'my-custom-class',\n        // header: 'Add QR Code',\n        // subHeader: 'Do you want to add QR code to the generated image?',\n        // message: 'The code will be used later to scan and confirm attendees',\n        // buttons: [{\n        //     text: 'No',\n        //     role: 'cancel',\n        //     cssClass: 'secondary',\n        //     handler: (blah) => {}\n        // }, \n        // {\n        //     text: 'Yes',\n        //     handler: () => {\n        //         this.openModal();\n        //         this.downloadImage();\n        //     }\n        // }]\n        // });\n        // await alert.present();\n      });\n    }\n\n    CreateCode(data) {\n      let details = this.qrServices.InsertInvitationQRCodeInDb(data);\n      this.qrvalue = details;\n    } //Stopped here. I must insert the data from the alert\n\n\n    getBase64Image(img) {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\");\n      return dataURL;\n    }\n\n    download() {\n      const qrcode = document.getElementById('qrcode');\n      let imageData = this.getBase64Image(qrcode.firstChild.firstChild);\n      return imageData;\n    }\n\n  }\n\n  ImageEditorPage.ɵfac = function ImageEditorPage_Factory(t) {\n    return new (t || ImageEditorPage)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.AngularFireAuth), i0.ɵɵdirectiveInject(i3.ModalController), i0.ɵɵdirectiveInject(i3.AlertController), i0.ɵɵdirectiveInject(i4.Meta), i0.ɵɵdirectiveInject(i5.QrService), i0.ɵɵdirectiveInject(i6.ActivatedRoute));\n  };\n\n  ImageEditorPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ImageEditorPage,\n    selectors: [[\"app-image-editor\"]],\n    decls: 35,\n    vars: 4,\n    consts: [[\"color\", \"medium\"], [\"slot\", \"end\"], [\"auto-hide\", \"false\"], [1, \"main-header4\"], [\"slot\", \"start\"], [\"color\", \"black\"], [1, \"tui-image-editor\"], [\"id\", \"qrcode\", 3, \"elementType\", \"value\", \"ngStyle\"], [\"id\", \"modalLoginForm\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"myModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [\"role\", \"document\", 1, \"modal-dialog\"], [1, \"modal-content\"], [1, \"modal-header\", \"text-center\"], [1, \"modal-title\", \"w-100\", \"font-weight-bold\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\", \"mx-3\"], [1, \"md-form\", \"mb-5\"], [1, \"fas\", \"fa-envelope\", \"prefix\", \"grey-text\"], [\"type\", \"email\", \"id\", \"defaultForm-email\", 1, \"form-control\", \"validate\"], [\"data-error\", \"wrong\", \"data-success\", \"right\", \"for\", \"defaultForm-email\"], [1, \"md-form\", \"mb-4\"], [1, \"fas\", \"fa-lock\", \"prefix\", \"grey-text\"], [\"type\", \"password\", \"id\", \"defaultForm-pass\", 1, \"form-control\", \"validate\"], [\"data-error\", \"wrong\", \"data-success\", \"right\", \"for\", \"defaultForm-pass\"], [1, \"modal-footer\", \"d-flex\", \"justify-content-center\"], [1, \"btn\", \"btn-default\"]],\n    template: function ImageEditorPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-menu-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\", 3);\n        i0.ɵɵtext(5, \"\\u062A\\u0639\\u062F\\u064A\\u0644 \\u0627\\u0644\\u0635\\u0648\\u0631\\u0629\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-buttons\", 4);\n        i0.ɵɵelement(7, \"ion-back-button\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"ion-content\");\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelement(10, \"canvas\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"ngx-qrcode\", 7);\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵelementStart(13, \"div\", 9);\n        i0.ɵɵelementStart(14, \"div\", 10);\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵelementStart(16, \"h4\", 12);\n        i0.ɵɵtext(17, \"Sign in\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 13);\n        i0.ɵɵelementStart(19, \"span\", 14);\n        i0.ɵɵtext(20, \"\\u00D7\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 15);\n        i0.ɵɵelementStart(22, \"div\", 16);\n        i0.ɵɵelement(23, \"i\", 17);\n        i0.ɵɵelement(24, \"input\", 18);\n        i0.ɵɵelementStart(25, \"label\", 19);\n        i0.ɵɵtext(26, \"Your email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 20);\n        i0.ɵɵelement(28, \"i\", 21);\n        i0.ɵɵelement(29, \"input\", 22);\n        i0.ɵɵelementStart(30, \"label\", 23);\n        i0.ɵɵtext(31, \"Your password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 24);\n        i0.ɵɵelementStart(33, \"button\", 25);\n        i0.ɵɵtext(34, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"elementType\", \"img\")(\"value\", ctx.qrvalue)(\"ngStyle\", i0.ɵɵpureFunction0(3, _c0));\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonMenuButton, i3.IonTitle, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonContent, i7.QrcodeComponent, i8.NgStyle],\n    styles: [\"\"]\n  });\n  return ImageEditorPage;\n})();","map":null,"metadata":{},"sourceType":"module"}