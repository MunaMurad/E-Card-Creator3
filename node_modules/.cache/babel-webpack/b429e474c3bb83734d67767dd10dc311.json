{"ast":null,"code":"import { from } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { map, filter, scan, observeOn } from 'rxjs/operators';\nimport { docChanges, sortedChanges } from './changes';\nimport { AngularFirestoreDocument } from '../document/document';\nexport function validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n\n  return events;\n}\nexport class AngularFirestoreCollection {\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);\n    }\n\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0));\n  }\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);\n  }\n\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign({}, a.data(), {\n          [options.idField]: a.id\n        });\n      } else {\n        return a.data();\n      }\n    })));\n  }\n\n  get(options) {\n    return from(this.query.get(options)).pipe(observeOn(this.afs.schedulers.insideAngular));\n  }\n\n  add(data) {\n    return this.ref.add(data);\n  }\n\n  doc(path) {\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n\n} //# sourceMappingURL=collection.js.map","map":null,"metadata":{},"sourceType":"module"}