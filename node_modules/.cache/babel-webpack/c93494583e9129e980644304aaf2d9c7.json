{"ast":null,"code":";\n\n(function (root, factory) {\n  if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = exports = factory(require(\"./core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"./core\"], factory);\n  } else {\n    // Global (browser)\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n    /**\r\n     * UTF-16 BE encoding strategy.\r\n     */\n\n    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n      /**\r\n       * Converts a word array to a UTF-16 BE string.\r\n       *\r\n       * @param {WordArray} wordArray The word array.\r\n       *\r\n       * @return {string} The UTF-16 BE string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\r\n       */\n      stringify: function (wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var utf16Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\r\n       * Converts a UTF-16 BE string to a word array.\r\n       *\r\n       * @param {string} utf16Str The UTF-16 BE string.\r\n       *\r\n       * @return {WordArray} The word array.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\r\n       */\n      parse: function (utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      }\n    };\n    /**\r\n     * UTF-16 LE encoding strategy.\r\n     */\n\n    C_enc.Utf16LE = {\n      /**\r\n       * Converts a word array to a UTF-16 LE string.\r\n       *\r\n       * @param {WordArray} wordArray The word array.\r\n       *\r\n       * @return {string} The UTF-16 LE string.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\r\n       */\n      stringify: function (wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes; // Convert\n\n        var utf16Chars = [];\n\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\r\n       * Converts a UTF-16 LE string to a word array.\r\n       *\r\n       * @param {string} utf16Str The UTF-16 LE string.\r\n       *\r\n       * @return {WordArray} The word array.\r\n       *\r\n       * @static\r\n       *\r\n       * @example\r\n       *\r\n       *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\r\n       */\n      parse: function (utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length; // Convert\n\n        var words = [];\n\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      }\n    };\n\n    function swapEndian(word) {\n      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n    }\n  })();\n\n  return CryptoJS.enc.Utf16;\n});","map":null,"metadata":{},"sourceType":"script"}