{"ast":null,"code":"import { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { NavController, ModalController } from '@ionic/angular';\nimport { firestore } from 'firebase/app'; // new version : ex arrayContanin, arrayUnion\n// import { Observable } from 'rxjs';\n\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nimport * as i3 from \"@ionic/angular\";\nexport let TravelService = /*#__PURE__*/(() => {\n  class TravelService {\n    constructor(firestore, fireAuth, modalController, //private activatedRoute: ActivatedRoute,\n    navController) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.modalController = modalController;\n      this.navController = navController;\n      this.userId = \"\";\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          console.log(\"travelSERVICE_______auth = true\");\n          this.userId = user.uid;\n          this.userAuth = true;\n        } else {\n          console.log(\"travelSERVICE_______auth = false\");\n          this.userId = \"\";\n          this.userAuth = false;\n        }\n      });\n    } // get timestamp() {\n    //   //return firebase.database.ServerValue.TIMESTAMP;\n    //   return firebase.firestore.FieldValue.serverTimestamp();\n    // }\n    //#*********************************//\n    //****** Get favorite items   ******//\n    //**********************************//\n\n\n    getFavorite() {\n      //  getUserId\n      // return this.favoriteCollection.doc<Favorite>(id).valueChanges();\n      // return this.firestore.doc(`/userProfile/${this.userId}/travel_place/${placeId}`);\n      return this.firestore.collection(`/userProfile/${this.userId}/travel_favorite`).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id; //console.log(\"...getFavorite=\"+data);\n\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //**************************//\n    //****** Add favorite ******//\n    //**************************//\n\n\n    addFavorite(placeId, placeName, rating, image) {\n      console.log(\"\");\n      console.log(\"...addFavorite userId= \" + this.userId); //###### Add userId to travel_place > favorite array  #####//\n\n      this.firestore.doc('travel_place/' + placeId).update({\n        favorite: firestore.FieldValue.arrayUnion(this.userId)\n      }); //#### then add placeId to travel_favorite_user collection  ######//\n\n      return this.firestore.doc('travel_favorite_user/' + placeId).set({\n        placeId: placeId,\n        userId: this.userId,\n        name: placeName,\n        rating: rating,\n        image_header: image\n      }); // this.postReference.update({\n      // \tfavorite: firestore.FieldValue.arrayUnion(userId)\n      // })\n    } //*****************************//\n    //****** Remove favorite ******//\n    //*****************************//\n\n\n    removeFavorite(placeId) {\n      console.log(\"removeFavorite\"); //####### Remove userId in traval_place > favorite array  ######//\n\n      this.firestore.doc('travel_place/' + placeId).update({\n        favorite: firestore.FieldValue.arrayRemove(this.userId)\n      }); //###### remove placeId from travel_favorite_user collection  #####//\n\n      return this.firestore.doc('travel_favorite_user/' + placeId).delete();\n    } //************************//\n    //****** Categories ******//\n    //************************//\n\n\n    getCategories() {\n      return this.firestore.collection('travel_category').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*************************************//\n    //****** Categories by countries(group) ******//\n    //*************************************//\n\n\n    getCateoriesByGroup() {\n      console.log(\"get countries list by group\");\n      return this.firestore.collection('travel_category').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //******** Search Place *********//\n    //************************//\n\n\n    searchPlaces() {\n      console.log(\"start searchPlaces\"); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('travel_place').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*****************************************************//\n    //******** User's fovorite places by userId  *********//\n    //*****************************************************//\n\n\n    getFavPlace() {\n      console.log(\"..getFavPlace/ get this.userId()=\" + this.userId);\n      return this.firestore.collection('/travel_favorite_user', ref => ref.where('userId', '==', this.userId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //**************************************//\n    //******** Place by categoryId *********//\n    //**************************************//\n\n\n    getPlacesByCatId(categoryId) {\n      console.log(\"_____START getPlacesByCatId()=\" + categoryId); // this.postDoc = this.afs.doc<Post>(`posts/${categoryId}`)\n      // return this.postDoc.valueChanges()\n\n      return this.firestore.collection('/travel_place', ref => ref.where('travel_categoryId', '==', categoryId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          console.log(\"####get a group of countries=\" + data);\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //******** Place *********//\n    //************************//\n\n\n    getPlaces() {\n      return this.firestore.collection('travel_place').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //****** Place by placeID ******//\n    //******************************//\n\n\n    getPlacesDetail(placeId) {\n      //console.log(\"3_____Travel.Service call getPlacesDetail()\");\n      return this.firestore.doc('travel_place/' + placeId).valueChanges();\n    } //****************************************//\n    //******   Review    ******//\n    //****************************************//\n\n\n    getReviews(placeId, limit) {\n      console.log(\"###### get review service placeId=\" + placeId);\n      return this.firestore.collection('/travel_review', ref => ref //.orderBy(\"createdtime\", \"asc\") // You have to create index in firebase console.\n      .where('travel_placeId', '==', placeId).limit(limit)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //******************************//\n    //******   Add review    ******//\n    //*****************************//\n\n\n    addReview(placeId, userProfileImage, name, rating, comment) {\n      //console.log(\"start addReview_______placeId=\"+placeId);\n      //console.log(\"_____new Date()=\"+new Date());\n      return this.firestore.collection('travel_review').add({\n        travel_placeId: placeId,\n        userProfileId: this.userId,\n        userProfileImage: userProfileImage,\n        name: name,\n        rating: rating,\n        comment: comment,\n        createdTime: new Date()\n      });\n    } //****************************************//\n    //******   Reviews  by placeId  ******//\n    //****************************************//\n    // getReviews(placeId: string) {\n    //   console.log(\"###### get review service placeId=\"+placeId);\n    //   return this.firestore.collection<any>('/travel_review', ref => ref\n    //   .where('travel_placeId', '==', placeId))\n    //   .snapshotChanges().pipe(\n    //     map(actions => {  \n    //       return actions.map(a => {\n    //         const data = a.payload.doc.data();\n    //         // get id from firebase metadata \n    //         const id = a.payload.doc.id; \n    //         console.log(\"####Review =\"+data);\n    //         return { id, ...data };\n    //       });\n    //     })\n    //   );\n    // }\n    //****************************************//\n    //****** Get Place by recommended   ******//\n    //****************************************//\n\n\n    getRecommended() {\n      return this.firestore.collection('/travel_place', ref => ref.where('recommended', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get Place by Top rating   ******//\n    //****************************************//\n\n\n    getTopRatingPlaces() {\n      //console.log('catId='+ catId);\n      return this.firestore.collection('/travel_place', ref => ref.where('rating', '==', 5)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id; //console.log(\"####Top rating place=\"+data);\n\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*************************//\n    //******  Get tags   ******//\n    //************************//\n\n\n    getTags() {\n      console.log(\"start getTags\");\n      return this.firestore.collection('travel_tag').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id; //console.log(\"#####Get getTags\"+data);\n          //console.log(\"Get Tags\"+data);\n\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n    getPlacesByTag(tagId) {\n      //console.log(\">>>>>>>>>>>start getPlacesByTag\");\n      return this.firestore.doc('travel_tag/' + tagId).valueChanges(); // return this.firestore.collection<any>('/travel_tag', ref => ref\n      // .where('tagId', '==', tagId))\n      // //.orderBy(\"timestamp\", \"desc\").limit(10))\n      // .snapshotChanges().pipe(\n      //   map(actions => {  \n      //     return actions.map(a => {\n      //       const data = a.payload.doc.data();\n      //       // get id from firebase metadata \n      //       const id = a.payload.doc.id; \n      //       return { id, ...data };\n      //     });\n      //   })\n      // );\n    }\n\n  }\n\n  TravelService.ɵfac = function TravelService_Factory(t) {\n    return new (t || TravelService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.ModalController), i0.ɵɵinject(i3.NavController));\n  };\n\n  TravelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TravelService,\n    factory: TravelService.ɵfac,\n    providedIn: 'root'\n  });\n  return TravelService;\n})();","map":null,"metadata":{},"sourceType":"module"}