{"ast":null,"code":"import { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\nexport function auditTrail(query, events, scheduler) {\n  const auditTrail$ = stateChanges(query, events).pipe(scan((current, action) => [...current, action], []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\n\nfunction loadedData(query, scheduler) {\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(data => {\n    let lastKeyToLoad;\n    data.payload.forEach(child => {\n      lastKeyToLoad = child.key;\n      return false;\n    });\n    return {\n      data,\n      lastKeyToLoad\n    };\n  }));\n}\n\nfunction waitForLoaded(query, action$, scheduler) {\n  const loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$), map(([loaded, actions]) => {\n    let lastKeyToLoad = loaded.lastKeyToLoad;\n    const loadedKeys = actions.map(snap => snap.key);\n    return {\n      actions,\n      lastKeyToLoad,\n      loadedKeys\n    };\n  }), skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1), map(meta => meta.actions));\n} //# sourceMappingURL=audit-trail.js.map","map":null,"metadata":{},"sourceType":"module"}