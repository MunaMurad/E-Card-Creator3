{"ast":null,"code":"import { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let FoodService = /*#__PURE__*/(() => {\n  class FoodService {\n    constructor(firestore, fireAuth) {\n      this.firestore = firestore;\n      this.fireAuth = fireAuth;\n      this.userId = \"\"; //********* shopping cart array ************* */\n\n      this.foodCart = [];\n      this.fireAuth.authState.subscribe(user => {\n        if (user) {\n          console.log(\"foodService_______auth 1\");\n          this.userId = user.uid;\n          this.userAuth = true;\n        } else {\n          console.log(\"foodService_______auth 0\");\n          this.userId = \"\";\n          this.userAuth = false;\n        }\n      });\n    } //*******************************//\n    //******** Search Item *********//\n    //******************************//\n\n\n    searchItem() {\n      console.log(\"called searchItem\"); // this.itemDoc = this.firestore.doc<any>(`food_item/${categoryId}`)\n      // return this.itemDoc.valueChanges()\n\n      return this.firestore.collection('food_item').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //****** Categories ******//\n    //************************//\n\n\n    getCategories() {\n      console.log(\"start getCategory\");\n      return this.firestore.collection('food_category').snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get popular item   ******//\n    //****************************************//\n\n\n    getPopularItems() {\n      return this.firestore.collection('/food_item', ref => ref.where('rating', '>=', 4)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //*************************************//\n    //******** Item by categoryId *********//\n    //*************************************//\n\n\n    getItemByCatId(categoryId) {\n      return this.firestore.collection('/food_item', ref => ref.where('food_categoryId', '==', categoryId)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //****************************************//\n    //****** Get promotion item  ******//\n    //****************************************//\n\n\n    getPromotionItems() {\n      return this.firestore.collection('/food_item', ref => ref.where('promotion', '==', true)) //.orderBy(\"timestamp\", \"desc\").limit(10))\n      .snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data(); // get id from firebase metadata \n\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    } //************************//\n    //******** Place *********//\n    //************************//\n    // getPlaces(){\n    //   return this.firestore.collection<any>('travel_place').snapshotChanges().pipe(\n    //     map(actions => {\n    //       return actions.map(a => {\n    //         const data = a.payload.doc.data();\n    //         // get id from firebase metadata \n    //         const id = a.payload.doc.id; \n    //         return { id, ...data };\n    //       });\n    //     })\n    //   );\n    // }\n    //******************************//\n    //****** Get item detail  ******//\n    //******************************//\n\n\n    getItemDetail(itemId) {\n      return this.firestore.doc('food_item/' + itemId).valueChanges();\n    }\n\n    getProducts() {// return this.data;\n    } //******************************//\n    //****** Get item in cart  ******//\n    //******************************//\n\n\n    getCart() {\n      return this.foodCart;\n    } //*******************************//\n    //****** Generate order Id ******//\n    //*******************************//\n\n\n    createOrderId() {\n      return Math.floor(100000 + Math.random() * 900000);\n    } //***********************//\n    //****** Get order ******//\n    //**********************//\n\n\n    getMyOrders() {\n      console.log(\"getMyOrders\");\n      console.log(\"getMyOrders userProfileId=\" + this.userId);\n      return this.firestore.collection('/food_order', ref => ref.where('userProfileId', '==', this.userId)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }));\n    }\n\n    getOrderDetail(orderId) {\n      return this.firestore.doc('food_order/' + orderId).valueChanges();\n    } //***********************//\n    //****** Place order ******//\n    //**********************//\n\n\n    placeOrder(addressId, paymentType, orderItems, totalPrice) {\n      console.log(\"______orderItems()\" + JSON.stringify(orderItems));\n      console.log(\"createOrderId()=\" + this.createOrderId()); //const itemCartJson = JSON.stringify(orderItems);\n      //const itenCartParse  = JSON.parse(itemCart); JSON.parse(localStorage.getItem('avct_item')) || [];\n      //const itenCartParse  = itemCart.replace(/\\\"([^(\\\")\"]+)\\\":/g,\"$1:\");\n      //console.log(\"_____itenCartParse=\"+itenCartParse);\n      // https://stackoverflow.com/questions/48156234/function-documentreference-set-called-with-invalid-data-unsupported-field-val\n      // const convertArray = itemCart.map((obj)=> {return Object.assign({}, obj)});\n      // console.log(\"convertArray=\"+JSON.stringify(convertArray));\n      //const testArray =  [{firstName:\"ME\", lastName:\"KUU\", age:10},{firstName:\"John\", lastName:\"Doe\", age:46}];\n\n      const testArray = [{\n        \"1111firstName\": \"ME\",\n        \"lastName\": \"KUU\",\n        \"age\": 10,\n        \"addOn\": [{\n          \"isChecked\": true,\n          \"name\": \"chilli\"\n        }, {\n          \"isChecked\": true,\n          \"name\": \"chilli\"\n        }]\n      }, {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"age\": 46\n      }]; //[5, true, \"hello\"],\n\n      console.log('____testArray=' + JSON.stringify(testArray));\n      return this.firestore.collection('food_order').add({\n        userProfileId: this.userId,\n        addressId: addressId,\n        orderId: this.createOrderId(),\n        paymentType: paymentType,\n        orderItems: JSON.stringify(orderItems),\n        status: \"pending\",\n        totalPrice: totalPrice,\n        createdTime: new Date()\n      });\n    } //*************************************//\n    //*** Test: Add/set array of object ***//\n    //************************************//\n\n\n    testAddArrayObject() {\n      //console.log(\"BEFORE PUSH___________FOODSERVICE addProduct()=\"+JSON.stringify());\n      var docData = {\n        stringExample: \"NEEDED\",\n        booleanExample: true,\n        numberExample: 3.14159265,\n        //dateExample: this.firebase.firestore.Timestamp.fromDate(new Date(\"December 10, 1815\")),\n        tagArray: [{\n          \"firstName\": \"ME\",\n          \"lastName\": \"KUU\",\n          \"age\": 10,\n          \"addOn\": [{\n            \"isChecked\": true,\n            \"name\": \"chilli\"\n          }]\n        }, {\n          \"firstName\": \"John\",\n          \"lastName\": \"Doe\",\n          \"age\": 46\n        }],\n        nullExample: null,\n        objectExample: {\n          a: 5,\n          b: {\n            nested: \"foo\"\n          }\n        }\n      };\n      this.firestore.collection(\"food_order\").doc(\"79oFJZen1UfAoz29pIVL\").set(docData).then(function () {\n        console.log(\"Order successfully written!\");\n      });\n    } //*******************//\n    //****** Cart  ******//\n    //*******************//\n\n\n    addToCart(product) {\n      console.log(\"BEFORE PUSH___________FOODSERVICE addProduct()=\" + JSON.stringify(product));\n      this.foodCart.push(product);\n      console.log(\"+AFTER PUSH _________________FOODSERVICE 3cart array=\" + JSON.stringify(this.foodCart));\n    }\n\n    removeItemCart(index) {\n      console.log(\"removeItemCart\");\n      this.foodCart.splice(index, 1); //update total price//\n    }\n\n    removeAllItemCart() {\n      console.log(\"removeAllItemCart\");\n      this.foodCart.length = 0; //update total price//\n    }\n\n  }\n\n  FoodService.ɵfac = function FoodService_Factory(t) {\n    return new (t || FoodService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  FoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FoodService,\n    factory: FoodService.ɵfac,\n    providedIn: 'root'\n  });\n  return FoodService;\n})();","map":null,"metadata":{},"sourceType":"module"}