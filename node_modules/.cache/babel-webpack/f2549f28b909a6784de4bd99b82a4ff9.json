{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\n\nvar Subscription = function () {\n  function Subscription(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._teardowns = null;\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var e_1, _a, e_2, _b;\n\n    var errors;\n\n    if (!this.closed) {\n      this.closed = true;\n      var _parentage = this._parentage;\n\n      if (_parentage) {\n        this._parentage = null;\n\n        if (Array.isArray(_parentage)) {\n          try {\n            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n              var parent_1 = _parentage_1_1.value;\n              parent_1.remove(this);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      var initialTeardown = this.initialTeardown;\n\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      var _teardowns = this._teardowns;\n\n      if (_teardowns) {\n        this._teardowns = null;\n\n        try {\n          for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\n            var teardown_1 = _teardowns_1_1.value;\n\n            try {\n              execTeardown(teardown_1);\n            } catch (err) {\n              errors = errors !== null && errors !== void 0 ? errors : [];\n\n              if (err instanceof UnsubscriptionError) {\n                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var _a;\n\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n\n          teardown._addParent(this);\n        }\n\n        (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  };\n\n  Subscription.prototype._hasParent = function (parent) {\n    var _parentage = this._parentage;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _parentage = this._parentage;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  };\n\n  Subscription.prototype._removeParent = function (parent) {\n    var _parentage = this._parentage;\n\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  };\n\n  Subscription.prototype.remove = function (teardown) {\n    var _teardowns = this._teardowns;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  };\n\n  Subscription.EMPTY = function () {\n    var empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  }();\n\n  return Subscription;\n}();\n\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\n\nfunction execTeardown(teardown) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n} //# sourceMappingURL=Subscription.js.map","map":null,"metadata":{},"sourceType":"module"}