{"ast":null,"code":"import { __awaiter } from \"tslib\"; // See more detail : https://stackoverflow.com/questions/52744930/ionic-4-hide-toolbar-on-scroll\n\nimport { IonContent, DomController } from '@ionic/angular';\nimport { ElementRef, Renderer2, SimpleChanges } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nexport let HideHeaderDirective = /*#__PURE__*/(() => {\n  class HideHeaderDirective {\n    constructor(element, renderer, domCtrl) {\n      this.element = element;\n      this.renderer = renderer;\n      this.domCtrl = domCtrl;\n      this.lastValue = 0;\n    }\n\n    ngOnChanges(changes) {\n      if (this.scrollContent && this.config) {\n        this.scrollContent.scrollEvents = true;\n\n        let scrollStartFunc = ev => __awaiter(this, void 0, void 0, function* () {\n          const el = yield this.scrollContent.getScrollElement();\n          this.contentHeight = el.offsetHeight;\n          this.scrollHeight = el.scrollHeight;\n\n          if (this.config.maxValue === undefined) {\n            this.config.maxValue = this.element.nativeElement.offsetHeight;\n          }\n\n          this.lastScrollPosition = el.scrollTop;\n        });\n\n        if (this.scrollContent && this.scrollContent instanceof IonContent) {\n          this.scrollContent.ionScrollStart.subscribe(scrollStartFunc);\n          this.scrollContent.ionScroll.subscribe(ev => __awaiter(this, void 0, void 0, function* () {\n            return this.adjustElementOnScroll(ev);\n          }));\n          this.scrollContent.ionScrollEnd.subscribe(ev => __awaiter(this, void 0, void 0, function* () {\n            return this.adjustElementOnScroll(ev);\n          }));\n        } else if (this.scrollContent instanceof HTMLElement) {\n          this.scrollContent.addEventListener('ionScrollStart', scrollStartFunc);\n          this.scrollContent.addEventListener('ionScroll', ev => __awaiter(this, void 0, void 0, function* () {\n            return this.adjustElementOnScroll(ev);\n          }));\n          this.scrollContent.addEventListener('ionScrollEnd', ev => __awaiter(this, void 0, void 0, function* () {\n            return this.adjustElementOnScroll(ev);\n          }));\n        }\n      }\n    }\n\n    adjustElementOnScroll(ev) {\n      if (ev) {\n        this.domCtrl.write(() => __awaiter(this, void 0, void 0, function* () {\n          const el = yield this.scrollContent.getScrollElement();\n          let scrollTop = el.scrollTop > 0 ? el.scrollTop : 0;\n          let scrolldiff = scrollTop - this.lastScrollPosition;\n          this.lastScrollPosition = scrollTop;\n          let newValue = this.lastValue + scrolldiff;\n          newValue = Math.max(0, Math.min(newValue, this.config.maxValue));\n          this.renderer.setStyle(this.element.nativeElement, this.config.cssProperty, `-${newValue}px`);\n          this.lastValue = newValue;\n        }));\n      }\n    }\n\n  }\n\n  HideHeaderDirective.ɵfac = function HideHeaderDirective_Factory(t) {\n    return new (t || HideHeaderDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomController));\n  };\n\n  HideHeaderDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: HideHeaderDirective,\n    selectors: [[\"\", \"scrollHide\", \"\"]],\n    inputs: {\n      config: [\"scrollHide\", \"config\"],\n      scrollContent: \"scrollContent\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return HideHeaderDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}